/*
 *    This file is part of CasADi.
 *
 *    CasADi -- A symbolic framework for dynamic optimization.
 *    Copyright (C) 2010 by Joel Andersson, Moritz Diehl, K.U.Leuven. All rights reserved.
 *
 *    CasADi is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation; either
 *    version 3 of the License, or (at your option) any later version.
 *
 *    CasADi is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with CasADi; if not, write to the Free Software
 *    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 */

#ifndef IO_SCHEME_VECTOR_HPP
#define IO_SCHEME_VECTOR_HPP

#include "../autogenerated.hpp"
namespace CasADi{
  
  template<typename T>
  struct IOSchemeVector {
    // Data
    std::vector<T> t_;
    InputOutputScheme io_scheme_;
    // Constructor
    IOSchemeVector(const std::vector<T>& t, InputOutputScheme io_scheme=SCHEME_unknown) : t_(t), io_scheme_(io_scheme){} 
    
    #ifndef SWIG
    // Type conversion
    operator std::vector<T>&(){ return t_;}
    operator const std::vector<T>&() const{ return t_;}
    #endif // SWIG
    T __getitem__(int i) { return t_.at(i); }
    int __len__() { return t_.size(); }
    std::vector<T> & data() { return t_; }
    const std::vector<T> & data() const { return t_; }
    InputOutputScheme io_scheme() const { return io_scheme_; }
    
  };


} // namespace CasADi


#endif // IO_SCHEME_VECTOR_HPP
