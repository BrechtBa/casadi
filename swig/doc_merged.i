
// File: index.xml

// File: classcasadi_1_1Assertion.xml
%feature("docstring") casadi::Assertion::getNorm2 "[INTERNAL]  Spectral
norm.

";

%feature("docstring") casadi::Assertion::getNormInf "[INTERNAL]  Infinity
norm.

";

%feature("docstring") casadi::Assertion::getValue "[INTERNAL]  Get the
value (only for scalar constant nodes)

";

%feature("docstring") casadi::Assertion::deepCopyMembers "[INTERNAL]  Deep
copy data members.

";

%feature("docstring") casadi::Assertion::getReshape "[INTERNAL]   Reshape.

";

%feature("docstring") casadi::Assertion::sameOpAndDeps "[INTERNAL]  Checks
if two nodes have the same operation and have equivalent dependencies up to
a given depth.

";

%feature("docstring") casadi::Assertion::evaluateSX "[INTERNAL]  Evaluate
the function symbolically (SX)

";

%feature("docstring") casadi::Assertion::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") casadi::Assertion::evaluateD "[INTERNAL]  Evaluate
the function numerically.

";

%feature("docstring") casadi::Assertion::printPart "[INTERNAL]  Print a
part of the expression */.

";

%feature("docstring") casadi::Assertion::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") casadi::Assertion::mapping "[INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") casadi::Assertion::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") casadi::Assertion::getGetNonzeros "[INTERNAL]  Get
the nonzeros of matrix.

";

%feature("docstring") casadi::Assertion::getHorzsplit "[INTERNAL]  Create a
horizontal split node.

";

%feature("docstring") casadi::Assertion::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") casadi::Assertion::sparsity "

>  const Sparsity& casadi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & casadi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") casadi::Assertion::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::Assertion::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") casadi::Assertion::isUnaryOp "[INTERNAL]  Check if
unary operation.

";

%feature("docstring") casadi::Assertion::shape "[INTERNAL] ";

%feature("docstring") casadi::Assertion::getVertsplit "[INTERNAL]  Create a
vertical split node (vectors only)

";

%feature("docstring") casadi::Assertion::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::Assertion::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") casadi::Assertion::getSubRef "[INTERNAL]  Get
submatrix reference.

";

%feature("docstring") casadi::Assertion::assertInit "[INTERNAL]  Assert
that the object has been initialized.

";

%feature("docstring") casadi::Assertion::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring") casadi::Assertion::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") casadi::Assertion::getNumOutputs "[INTERNAL]  Number
of outputs.

";

%feature("docstring") casadi::Assertion::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") casadi::Assertion::hasDep "[INTERNAL]  Does the node
depend on other nodes.

";

%feature("docstring") casadi::Assertion::getBinarySwitch "[INTERNAL]  Get a
binary operation operation.

";

%feature("docstring") casadi::Assertion::assign "

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") casadi::Assertion::setDependencies "

>  void casadi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void casadi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") casadi::Assertion::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") casadi::Assertion::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") casadi::Assertion::dep "

>  const MX & casadi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & casadi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::Assertion::getNormF "[INTERNAL]  Frobenius
norm.

";

%feature("docstring") casadi::Assertion::getInverse "[INTERNAL]   Inverse.

";

%feature("docstring") casadi::Assertion::numel "[INTERNAL]  Get shape.

";

%feature("docstring") casadi::Assertion::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") casadi::Assertion::getSolve "[INTERNAL]   Solve a
system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") casadi::Assertion::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") casadi::Assertion::isNonLinear "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring") casadi::Assertion::clone "[INTERNAL]  Clone function.

";

%feature("docstring") casadi::Assertion::propagateSparsity "

>  void casadi::Assertion::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity, no work.

>  virtual void casadi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity.

";

%feature("docstring") casadi::Assertion::Assertion "[INTERNAL]
Constructor.

";

%feature("docstring") casadi::Assertion::~Assertion "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::Assertion::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") casadi::Assertion::getName "[INTERNAL]  Get the name.

";

%feature("docstring") casadi::Assertion::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") casadi::Assertion::evaluateMX "

>  void casadi::Assertion::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void casadi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") casadi::Assertion::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::Assertion::getOutput "[INTERNAL]  Get an
output.

";

%feature("docstring") casadi::Assertion::isMultipleOutput "[INTERNAL]
Check if a multiple output node.

";

%feature("docstring") casadi::Assertion::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") casadi::Assertion::getSetSparse "[INTERNAL]  Create
set sparse.

";

%feature("docstring") casadi::Assertion "[INTERNAL]   Assertion.

Joris Gillis

C++ includes: assertion.hpp ";

%feature("docstring") casadi::Assertion::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") casadi::Assertion::getMatrixValue "[INTERNAL]  Get
the value (only for constant nodes)

";

%feature("docstring") casadi::Assertion::getFunctionOutput "[INTERNAL]  Get
function output.

";

%feature("docstring") casadi::Assertion::getFunction "[INTERNAL]  Get
function reference.

";

%feature("docstring") casadi::Assertion::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") casadi::Assertion::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") casadi::Assertion::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") casadi::Assertion::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") casadi::Assertion::getUnary "[INTERNAL]  Get a unary
operation.

";

%feature("docstring") casadi::Assertion::size "[INTERNAL] ";

%feature("docstring") casadi::Assertion::getFunctionInput "[INTERNAL]  Get
function input.

";

%feature("docstring") casadi::Assertion::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") casadi::Assertion::getAddNonzeros "[INTERNAL]  Add
the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::Assertion::getMultiplication "[INTERNAL]
Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") casadi::Assertion::simplifyMe "[INTERNAL]  Simplify
the expression (ex is a reference to the node)

";

%feature("docstring") casadi::Assertion::isOutputNode "[INTERNAL]  Check if
evaluation output.

";

%feature("docstring") casadi::Assertion::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") casadi::Assertion::getBinary "[INTERNAL]  Get a
binary operation operation (matrix-matrix)

";

%feature("docstring") casadi::Assertion::getSetNonzeros "[INTERNAL]  Assign
the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::Assertion::size1 "[INTERNAL] ";

%feature("docstring") casadi::Assertion::size2 "[INTERNAL] ";

%feature("docstring") casadi::Assertion::print "

>  void casadi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void casadi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") casadi::Assertion::ndep "[INTERNAL]  Number of
dependencies.

";


// File: structcasadi_1_1BinaryChecker.xml
%feature("docstring") casadi::BinaryChecker "[INTERNAL]  Is the operation
binary as opposed to unary

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryChecker_3_01OP__ADD_01_4.xml
%feature("docstring") casadi::BinaryChecker< OP_ADD > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryChecker_3_01OP__AND_01_4.xml
%feature("docstring") casadi::BinaryChecker< OP_AND > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryChecker_3_01OP__ATAN2_01_4.xml
%feature("docstring") casadi::BinaryChecker< OP_ATAN2 > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryChecker_3_01OP__CONSTPOW_01_4.xml
%feature("docstring") casadi::BinaryChecker< OP_CONSTPOW > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryChecker_3_01OP__COPYSIGN_01_4.xml
%feature("docstring") casadi::BinaryChecker< OP_COPYSIGN > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryChecker_3_01OP__DIV_01_4.xml
%feature("docstring") casadi::BinaryChecker< OP_DIV > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryChecker_3_01OP__EQ_01_4.xml
%feature("docstring") casadi::BinaryChecker< OP_EQ > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryChecker_3_01OP__FMAX_01_4.xml
%feature("docstring") casadi::BinaryChecker< OP_FMAX > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryChecker_3_01OP__FMIN_01_4.xml
%feature("docstring") casadi::BinaryChecker< OP_FMIN > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryChecker_3_01OP__IF__ELSE__ZERO_01_4.xml
%feature("docstring") casadi::BinaryChecker< OP_IF_ELSE_ZERO > " [INTERNAL]
C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryChecker_3_01OP__MUL_01_4.xml
%feature("docstring") casadi::BinaryChecker< OP_MUL > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryChecker_3_01OP__NE_01_4.xml
%feature("docstring") casadi::BinaryChecker< OP_NE > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryChecker_3_01OP__OR_01_4.xml
%feature("docstring") casadi::BinaryChecker< OP_OR > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryChecker_3_01OP__POW_01_4.xml
%feature("docstring") casadi::BinaryChecker< OP_POW > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryChecker_3_01OP__PRINTME_01_4.xml
%feature("docstring") casadi::BinaryChecker< OP_PRINTME > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryChecker_3_01OP__SUB_01_4.xml
%feature("docstring") casadi::BinaryChecker< OP_SUB > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: classcasadi_1_1BinaryMX.xml
%feature("docstring") casadi::BinaryMX::getNormInf "[INTERNAL]  Infinity
norm.

";

%feature("docstring") casadi::BinaryMX::isMultipleOutput "[INTERNAL]  Check
if a multiple output node.

";

%feature("docstring") casadi::BinaryMX::getNormF "[INTERNAL]  Frobenius
norm.

";

%feature("docstring") casadi::BinaryMX::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") casadi::BinaryMX::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") casadi::BinaryMX::dep "

>  const MX & casadi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & casadi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::BinaryMX::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") casadi::BinaryMX::getOutput "[INTERNAL]  Get an
output.

";

%feature("docstring") casadi::BinaryMX::propagateSparsity "[INTERNAL]
Propagate sparsity.

";

%feature("docstring") casadi::BinaryMX::printPart "[INTERNAL]  Print a part
of the expression.

";

%feature("docstring") casadi::BinaryMX::getName "[INTERNAL]  Get the name.

";

%feature("docstring") casadi::BinaryMX::getNorm2 "[INTERNAL]  Spectral
norm.

";

%feature("docstring") casadi::BinaryMX::size2 "[INTERNAL] ";

%feature("docstring") casadi::BinaryMX::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") casadi::BinaryMX::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") casadi::BinaryMX::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") casadi::BinaryMX::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") casadi::BinaryMX::sameOpAndDeps "[INTERNAL]  Checks
if two nodes have the same operation and have equivalent dependencies up to
a given depth.

";

%feature("docstring") casadi::BinaryMX::~BinaryMX "[INTERNAL]  Destructor.

";

%feature("docstring") casadi::BinaryMX::getVertsplit "[INTERNAL]  Create a
vertical split node (vectors only)

";

%feature("docstring") casadi::BinaryMX::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") casadi::BinaryMX::evaluateD "[INTERNAL]  Evaluate the
function numerically.

";

%feature("docstring") casadi::BinaryMX::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") casadi::BinaryMX::evaluateMX "

>  void casadi::BinaryMX< ScX, ScY >::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void casadi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") casadi::BinaryMX::isUnaryOp "[INTERNAL]  Check if
unary operation.

";

%feature("docstring") casadi::BinaryMX::getHorzsplit "[INTERNAL]  Create a
horizontal split node.

";

%feature("docstring") casadi::BinaryMX::getSubRef "[INTERNAL]  Get
submatrix reference.

";

%feature("docstring") casadi::BinaryMX::getValue "[INTERNAL]  Get the value
(only for scalar constant nodes)

";

%feature("docstring") casadi::BinaryMX::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::BinaryMX::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") casadi::BinaryMX::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") casadi::BinaryMX::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") casadi::BinaryMX::getBinary "[INTERNAL]  Get a binary
operation operation.

";

%feature("docstring") casadi::BinaryMX::getBinarySwitch "[INTERNAL]  Get a
binary operation operation.

";

%feature("docstring") casadi::BinaryMX::clone "[INTERNAL]  Clone function.

";

%feature("docstring") casadi::BinaryMX::size "[INTERNAL] ";

%feature("docstring") casadi::BinaryMX::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") casadi::BinaryMX::assertInit "[INTERNAL]  Assert that
the object has been initialized.

";

%feature("docstring") casadi::BinaryMX::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") casadi::BinaryMX::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") casadi::BinaryMX::evaluateSX "[INTERNAL]  Evaluate
the function symbolically (SX)

";

%feature("docstring") casadi::BinaryMX::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::BinaryMX::BinaryMX "[INTERNAL]  Constructor.

";

%feature("docstring") casadi::BinaryMX::size1 "[INTERNAL] ";

%feature("docstring") casadi::BinaryMX::getFunction "[INTERNAL]  Get
function reference.

";

%feature("docstring") casadi::BinaryMX::numel "[INTERNAL]  Get shape.

";

%feature("docstring") casadi::BinaryMX::print "

>  void casadi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void casadi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") casadi::BinaryMX::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") casadi::BinaryMX::getInverse "[INTERNAL]   Inverse.

";

%feature("docstring") casadi::BinaryMX::getMatrixValue "[INTERNAL]  Get the
value (only for constant nodes)

";

%feature("docstring") casadi::BinaryMX::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") casadi::BinaryMX::getMultiplication "[INTERNAL]
Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") casadi::BinaryMX::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") casadi::BinaryMX::setDependencies "

>  void casadi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void casadi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") casadi::BinaryMX::getFunctionInput "[INTERNAL]  Get
function input.

";

%feature("docstring") casadi::BinaryMX::getSolve "[INTERNAL]   Solve a
system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") casadi::BinaryMX::getAddNonzeros "[INTERNAL]  Add the
nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::BinaryMX::getReshape "[INTERNAL]   Reshape.

";

%feature("docstring") casadi::BinaryMX::deepCopyMembers "[INTERNAL]  Deep
copy data members.

";

%feature("docstring") casadi::BinaryMX::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring") casadi::BinaryMX::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") casadi::BinaryMX::getSetSparse "[INTERNAL]  Create
set sparse.

";

%feature("docstring") casadi::BinaryMX::assign "

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") casadi::BinaryMX::getUnary "[INTERNAL]  Get a unary
operation.

";

%feature("docstring") casadi::BinaryMX::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") casadi::BinaryMX::isOutputNode "[INTERNAL]  Check if
evaluation output.

";

%feature("docstring") casadi::BinaryMX::simplifyMe "[INTERNAL]  Simplify
the expression (ex is a reference to the node)

";

%feature("docstring") casadi::BinaryMX::evaluateGen "[INTERNAL]  Evaluate
the function (template)

";

%feature("docstring") casadi::BinaryMX::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") casadi::BinaryMX::getGetNonzeros "[INTERNAL]  Get the
nonzeros of matrix.

";

%feature("docstring") casadi::BinaryMX::mapping "[INTERNAL]  Get an IMatrix
representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") casadi::BinaryMX::hasDep "[INTERNAL]  Does the node
depend on other nodes.

";

%feature("docstring") casadi::BinaryMX::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") casadi::BinaryMX "[INTERNAL]  Represents any binary
operation that involves two matrices.

Joel Andersson

C++ includes: binary_mx.hpp ";

%feature("docstring") casadi::BinaryMX::getNumOutputs "[INTERNAL]  Number
of outputs.

";

%feature("docstring") casadi::BinaryMX::getFunctionOutput "[INTERNAL]  Get
function output.

";

%feature("docstring") casadi::BinaryMX::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") casadi::BinaryMX::sparsity "

>  const Sparsity& casadi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & casadi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") casadi::BinaryMX::getSetNonzeros "[INTERNAL]  Assign
the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::BinaryMX::isNonLinear "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring") casadi::BinaryMX::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::BinaryMX::shape "[INTERNAL] ";


// File: structcasadi_1_1BinaryOperation.xml
%feature("docstring") casadi::BinaryOperation "[INTERNAL] C++ includes:
casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryOperation_3_01OP__ADD_01_4.xml
%feature("docstring") casadi::BinaryOperation< OP_ADD > " [INTERNAL]
Addition.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryOperation_3_01OP__AND_01_4.xml
%feature("docstring") casadi::BinaryOperation< OP_AND > " [INTERNAL]
Logical and.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryOperation_3_01OP__ATAN2_01_4.xml
%feature("docstring") casadi::BinaryOperation< OP_ATAN2 > " [INTERNAL]
Arctan2.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryOperation_3_01OP__CONSTPOW_01_4.xml
%feature("docstring") casadi::BinaryOperation< OP_CONSTPOW > " [INTERNAL]
Power, defined only for y constant.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryOperation_3_01OP__COPYSIGN_01_4.xml
%feature("docstring") casadi::BinaryOperation< OP_COPYSIGN > " [INTERNAL]
Copysign.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryOperation_3_01OP__DIV_01_4.xml
%feature("docstring") casadi::BinaryOperation< OP_DIV > " [INTERNAL]
Division.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryOperation_3_01OP__EQ_01_4.xml
%feature("docstring") casadi::BinaryOperation< OP_EQ > " [INTERNAL]  Equal
to.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryOperation_3_01OP__FMAX_01_4.xml
%feature("docstring") casadi::BinaryOperation< OP_FMAX > " [INTERNAL]
Maximum.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryOperation_3_01OP__FMIN_01_4.xml
%feature("docstring") casadi::BinaryOperation< OP_FMIN > " [INTERNAL]
Minimum.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryOperation_3_01OP__FMOD_01_4.xml
%feature("docstring") casadi::BinaryOperation< OP_FMOD > " [INTERNAL]
Remainder of division.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryOperation_3_01OP__IF__ELSE__ZERO_01_4.xml
%feature("docstring") casadi::BinaryOperation< OP_IF_ELSE_ZERO > "
[INTERNAL]  Conditional assignment.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryOperation_3_01OP__LE_01_4.xml
%feature("docstring") casadi::BinaryOperation< OP_LE > " [INTERNAL]  Less or
equal to.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryOperation_3_01OP__LIFT_01_4.xml
%feature("docstring") casadi::BinaryOperation< OP_LIFT > " [INTERNAL]
Inverse of error function.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryOperation_3_01OP__LT_01_4.xml
%feature("docstring") casadi::BinaryOperation< OP_LT > " [INTERNAL]  Less
than.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryOperation_3_01OP__MUL_01_4.xml
%feature("docstring") casadi::BinaryOperation< OP_MUL > " [INTERNAL]
Multiplication.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryOperation_3_01OP__NE_01_4.xml
%feature("docstring") casadi::BinaryOperation< OP_NE > " [INTERNAL]  Not
equal to.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryOperation_3_01OP__OR_01_4.xml
%feature("docstring") casadi::BinaryOperation< OP_OR > " [INTERNAL]  Logical
or.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryOperation_3_01OP__POW_01_4.xml
%feature("docstring") casadi::BinaryOperation< OP_POW > " [INTERNAL]  Power,
defined only for x>=0.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryOperation_3_01OP__PRINTME_01_4.xml
%feature("docstring") casadi::BinaryOperation< OP_PRINTME > " [INTERNAL]
Identity operator with the side effect of printing.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryOperation_3_01OP__SUB_01_4.xml
%feature("docstring") casadi::BinaryOperation< OP_SUB > " [INTERNAL]
Subtraction.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryOperationE.xml
%feature("docstring") casadi::BinaryOperationE "[INTERNAL] C++ includes:
casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryOperationSS.xml
%feature("docstring") casadi::BinaryOperationSS "[INTERNAL]  Perform a
binary operation on two scalars.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryOperationSV.xml
%feature("docstring") casadi::BinaryOperationSV "[INTERNAL]  Perform a
binary operation on a scalar and a vector.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryOperationVS.xml
%feature("docstring") casadi::BinaryOperationVS "[INTERNAL]  Perform a
binary operation on a vector and a scalar.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryOperationVV.xml
%feature("docstring") casadi::BinaryOperationVV "[INTERNAL]  Perform a
binary operation on two vectors.

C++ includes: casadi_calculus.hpp ";


// File: classcasadi_1_1BinarySX.xml
%feature("docstring") casadi::BinarySX::isInteger "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::BinarySX::isSymbolic "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::BinarySX::hasDep "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::BinarySX::dep "

>  virtual const SXElement& casadi::BinarySX::dep(int i) const 
------------------------------------------------------------------------
[INTERNAL] 
get the reference of a dependency

>  virtual SXElement& casadi::BinarySX::dep(int i)
------------------------------------------------------------------------
[INTERNAL] 
get the reference of a child

";

%feature("docstring") casadi::BinarySX::print "

>  virtual void casadi::BinarySX::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print the expression (recursively with a maximum number of levels)

>  void casadi::SXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
print

";

%feature("docstring") casadi::BinarySX::getValue "[INTERNAL]  Get value of
a constant node.

";

%feature("docstring") casadi::BinarySX::mark "[INTERNAL] ";

%feature("docstring") casadi::BinarySX::getName "[INTERNAL] ";

%feature("docstring") casadi::BinarySX::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") casadi::BinarySX::~BinarySX "[INTERNAL]  Destructor
This is a rather complex destructor which is necessary since the default
destructor can cause stack overflow due to recursive calling.

";

%feature("docstring") casadi::BinarySX "[INTERNAL]  Represents a basic
binary operation on two SXElement nodes.

Joel Andersson

C++ includes: binary_sx.hpp ";

%feature("docstring") casadi::BinarySX::isOne "[INTERNAL]  check properties
of a node

";

%feature("docstring") casadi::BinarySX::isConstant "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::BinarySX::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") casadi::BinarySX::isAlmostZero "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::BinarySX::isMinusInf "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::BinarySX::getIntValue "[INTERNAL]  Get value
of a constant node.

";

%feature("docstring") casadi::BinarySX::isInf "[INTERNAL]  check properties
of a node

";

%feature("docstring") casadi::BinarySX::isZero "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::BinarySX::isNan "[INTERNAL]  check properties
of a node

";

%feature("docstring") casadi::BinarySX::init "[INTERNAL]  Initialize the
node (currently used only to give a similar interface to MXNode)

";

%feature("docstring") casadi::BinarySX::isMinusOne "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::BinarySX::isSmooth "[INTERNAL]  Check if
smooth.

";

%feature("docstring") casadi::BinarySX::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") casadi::BinarySX::marked "[INTERNAL] ";


// File: classcasadi_1_1Callback.xml
%feature("docstring") casadi::Callback::isInit "

Is initialized?

";

%feature("docstring") casadi::Callback::swap "[INTERNAL]  Swap content with
another instance.

";

%feature("docstring") casadi::Callback::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::Callback::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::Callback "

Callback.

In C++, supply a CallbackCPtr function pointer When the callback function
returns a non-zero integer, the host is signalled of a problem. E.g. an
NLPSolver may halt iterations if the Callback is something else than 0

In python, supply a callable, annotated with pycallback decorator

C++ includes: functor.hpp ";

%feature("docstring") casadi::Callback::checkNode "[INTERNAL]  Assert that
the node is pointing to the right type of object

";

%feature("docstring") casadi::Callback::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::Callback::isNull "

Is a null pointer?

";

%feature("docstring") casadi::Callback::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::Callback::Callback "

>  casadi::Callback::Callback()
------------------------------------------------------------------------

Default constructor.

>  casadi::Callback::Callback(CallbackCPtr ptr)
------------------------------------------------------------------------

Construct from C pointer.

";

%feature("docstring") casadi::Callback::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::Callback::assignNode "[INTERNAL]  Assign the
node to a node class pointer (or null)

";

%feature("docstring") casadi::Callback::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::Callback::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::Callback::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::Callback::assertInit "[INTERNAL]  Assert that
it is initialized

";

%feature("docstring") casadi::Callback::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::Callback::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::Callback::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::Callback::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";


// File: classcasadi_1_1CallFunction.xml
%feature("docstring") casadi::CallFunction::isBinaryOp "[INTERNAL]  Check
if binary operation.

";

%feature("docstring") casadi::CallFunction::setDependencies "

>  void casadi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void casadi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") casadi::CallFunction::setSparsity "[INTERNAL]  Set
the sparsity.

";

%feature("docstring") casadi::CallFunction::isOutputNode "[INTERNAL]  Check
if evaluation output.

";

%feature("docstring") casadi::CallFunction::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") casadi::CallFunction::size2 "[INTERNAL] ";

%feature("docstring") casadi::CallFunction::init "[INTERNAL]  Initialize
the object.

";

%feature("docstring") casadi::CallFunction::getFunction "[INTERNAL]  Get
function reference.

";

%feature("docstring") casadi::CallFunction::isUnaryOp "[INTERNAL]  Check if
unary operation.

";

%feature("docstring") casadi::CallFunction::shape "[INTERNAL] ";

%feature("docstring") casadi::CallFunction::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") casadi::CallFunction::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::CallFunction::getVertcat "[INTERNAL]  Create
a vertical concatenation node (vectors only)

";

%feature("docstring") casadi::CallFunction::printPart "[INTERNAL]  Print a
part of the expression.

";

%feature("docstring") casadi::CallFunction::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") casadi::CallFunction::getMultiplication "[INTERNAL]
Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") casadi::CallFunction::isEqual "[INTERNAL]  Check if
two nodes are equivalent up to a given depth.

";

%feature("docstring") casadi::CallFunction::getInverse "[INTERNAL]
Inverse.

";

%feature("docstring") casadi::CallFunction::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") casadi::CallFunction::isNonLinear "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring") casadi::CallFunction::getFunctionOutput "[INTERNAL]
Get function output.

";

%feature("docstring") casadi::CallFunction::getHorzcat "[INTERNAL]  Create
a horizontal concatenation node.

";

%feature("docstring") casadi::CallFunction::assertInit "[INTERNAL]  Assert
that the object has been initialized.

";

%feature("docstring") casadi::CallFunction::hasDep "[INTERNAL]  Does the
node depend on other nodes.

";

%feature("docstring") casadi::CallFunction::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") casadi::CallFunction::size "[INTERNAL] ";

%feature("docstring") casadi::CallFunction::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") casadi::CallFunction::getHorzsplit "[INTERNAL]
Create a horizontal split node.

";

%feature("docstring") casadi::CallFunction::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") casadi::CallFunction::sparsity "

>  const Sparsity & casadi::CallFunction::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

>  const Sparsity& casadi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

";

%feature("docstring") casadi::CallFunction::evaluateMX "

>  void casadi::CallFunction::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void casadi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") casadi::CallFunction::getNormF "[INTERNAL]  Frobenius
norm.

";

%feature("docstring") casadi::CallFunction::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") casadi::CallFunction::dep "

>  const MX & casadi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & casadi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::CallFunction::getGetNonzeros "[INTERNAL]  Get
the nonzeros of matrix.

";

%feature("docstring") casadi::CallFunction::getBinarySwitch "[INTERNAL]
Get a binary operation operation.

";

%feature("docstring") casadi::CallFunction::isInit "[INTERNAL]  Check if
the object has been initialized.

";

%feature("docstring") casadi::CallFunction::getNumOutputs "[INTERNAL]
Number of outputs.

";

%feature("docstring") casadi::CallFunction::getMatrixValue "[INTERNAL]  Get
the value (only for constant nodes)

";

%feature("docstring") casadi::CallFunction::size1 "[INTERNAL] ";

%feature("docstring") casadi::CallFunction::getUnary "[INTERNAL]  Get a
unary operation.

";

%feature("docstring") casadi::CallFunction::isIdentity "[INTERNAL]  Check
if identity matrix.

";

%feature("docstring") casadi::CallFunction::getVertsplit "[INTERNAL]
Create a vertical split node (vectors only)

";

%feature("docstring") casadi::CallFunction::getSetNonzeros "[INTERNAL]
Assign the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::CallFunction::getSubRef "[INTERNAL]  Get
submatrix reference.

";

%feature("docstring") casadi::CallFunction::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") casadi::CallFunction::evaluateD "[INTERNAL]  Evaluate
the function numerically.

";

%feature("docstring") casadi::CallFunction::getAddNonzeros "[INTERNAL]  Add
the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::CallFunction::simplifyMe "[INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring") casadi::CallFunction::clone "[INTERNAL]  Clone
function.

";

%feature("docstring") casadi::CallFunction::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") casadi::CallFunction::getSetSparse "[INTERNAL]
Create set sparse.

";

%feature("docstring") casadi::CallFunction::sameOpAndDeps "[INTERNAL]
Checks if two nodes have the same operation and have equivalent dependencies
up to a given depth.

";

%feature("docstring") casadi::CallFunction::__nonzero__ "[INTERNAL]  Check
the truth value of this node.

";

%feature("docstring") casadi::CallFunction::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") casadi::CallFunction::getSolve "[INTERNAL]   Solve a
system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") casadi::CallFunction::getOutput "[INTERNAL]  Get an
output.

";

%feature("docstring") casadi::CallFunction::getNormInf "[INTERNAL]
Infinity norm.

";

%feature("docstring") casadi::CallFunction "[INTERNAL]

Joel Andersson

C++ includes: call_function.hpp ";

%feature("docstring") casadi::CallFunction::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::CallFunction::getReshape "[INTERNAL]
Reshape.

";

%feature("docstring") casadi::CallFunction::addDependency "[INTERNAL]  Add
a dependency.

";

%feature("docstring") casadi::CallFunction::CallFunction "[INTERNAL]
Constructor.

";

%feature("docstring") casadi::CallFunction::getValue "[INTERNAL]  Get the
value (only for scalar constant nodes)

";

%feature("docstring") casadi::CallFunction::getBinary "[INTERNAL]  Get a
binary operation operation (matrix-matrix)

";

%feature("docstring") casadi::CallFunction::deepCopyMembers "[INTERNAL]
Deep copy data members.

";

%feature("docstring") casadi::CallFunction::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") casadi::CallFunction::assign "

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") casadi::CallFunction::isMultipleOutput "[INTERNAL]
Check if a multiple output node.

";

%feature("docstring") casadi::CallFunction::evaluateSX "[INTERNAL]
Evaluate the function symbolically (SX)

";

%feature("docstring") casadi::CallFunction::~CallFunction "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::CallFunction::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::CallFunction::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") casadi::CallFunction::getNorm2 "[INTERNAL]  Spectral
norm.

";

%feature("docstring") casadi::CallFunction::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") casadi::CallFunction::getFunctionInput "[INTERNAL]
Get function input.

";

%feature("docstring") casadi::CallFunction::propagateSparsity "

>  void casadi::CallFunction::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity.

>  void casadi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity, no work.

";

%feature("docstring") casadi::CallFunction::print "

>  void casadi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void casadi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") casadi::CallFunction::getName "[INTERNAL]  Get the
name.

";

%feature("docstring") casadi::CallFunction::mapping "[INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") casadi::CallFunction::numel "[INTERNAL]  Get shape.

";


// File: classcasadi_1_1casadi__limits.xml
%feature("docstring") casadi::casadi_limits "

casadi_limits class

The following class, which acts as a complements to the standard
numeric_limits class, allows specifying certain properties of scalar
objects. The template can be specialized for e.g. symbolic scalars Joel
Andersson

C++ includes: casadi_limits.hpp ";


// File: classcasadi_1_1casadi__limits_3_01SXElement_01_4.xml
%feature("docstring") casadi::casadi_limits< SXElement > " [INTERNAL] C++
includes: sx_element.hpp ";


// File: structcasadi_1_1casadi__math.xml
%feature("docstring") casadi::casadi_math "[INTERNAL]  Easy access to all
the functions for a particular type.

C++ includes: casadi_math.hpp ";


// File: structcasadi_1_1casadi__math_3_01int_01_4.xml
%feature("docstring") casadi::casadi_math< int > " [INTERNAL]  Specialize
the class so that it can be used with integer type.

C++ includes: casadi_math.hpp ";


// File: classcasadi_1_1CasadiException.xml
%feature("docstring") casadi::CasadiException::what "throw () Display
error.

";

%feature("docstring") casadi::CasadiException::CasadiException "

>  casadi::CasadiException::CasadiException()
------------------------------------------------------------------------

Default constructor.

>  casadi::CasadiException::CasadiException(const std::string &msg)
------------------------------------------------------------------------

Form message string.

";

%feature("docstring") casadi::CasadiException "

Casadi exception class.

Joel Andersson

C++ includes: casadi_exception.hpp ";

%feature("docstring") casadi::CasadiException::~CasadiException "throw ()
Destructor.

";


// File: classcasadi_1_1CasadiMeta.xml
%feature("docstring") casadi::CasadiMeta "

Collects global CasADi meta information.

Joris Gillis

C++ includes: casadi_meta.hpp ";


// File: classcasadi_1_1CasadiOptions.xml
%feature("docstring") casadi::CasadiOptions "

Collects global CasADi options.

Note to developers: use sparingly. Global options are - in general - a
rather bad idea

this class must never be instantiated. Access its static members directly
Joris Gillis

C++ includes: casadi_options.hpp ";


// File: classcasadi_1_1CodeGenerator.xml
%feature("docstring") casadi::CodeGenerator::flush "[INTERNAL]  Flush
generated file to a stream.

";

%feature("docstring") casadi::CodeGenerator::addInclude "[INTERNAL]  Add an
include file optionally using a relative path \"...\" instead of an absolute
path <...>

";

%feature("docstring") casadi::CodeGenerator "[INTERNAL] C++ includes:
code_generator.hpp ";

%feature("docstring") casadi::CodeGenerator::addDependency "[INTERNAL]  Add
a dependent function.

";

%feature("docstring") casadi::CodeGenerator::addAuxiliary "[INTERNAL]  Add
a built-in auxiliary function.

";

%feature("docstring") casadi::CodeGenerator::getConstant "

>  int casadi::CodeGenerator::getConstant(const std::vector< double > &v, bool allow_adding=false)
------------------------------------------------------------------------
[INTERNAL] 
Get or add a constant.

>  int casadi::CodeGenerator::getConstant(const std::vector< int > &v, bool allow_adding=false)
------------------------------------------------------------------------
[INTERNAL] 
Get or add am integer constant.

";

%feature("docstring") casadi::CodeGenerator::getDependency "[INTERNAL]  Get
the index of an existing dependency.

";

%feature("docstring") casadi::CodeGenerator::addSparsity "[INTERNAL]  Add
an include file optionally using a relative path \"...\" instead of an
absolute path <...>

";

%feature("docstring") casadi::CodeGenerator::copyVector "[INTERNAL]  Copy a
vector to another.

";

%feature("docstring") casadi::CodeGenerator::getSparsity "[INTERNAL]  Get
the index of an existing sparsity pattern.

";

%feature("docstring") casadi::CodeGenerator::casadi_dot "[INTERNAL]
Codegen casadi_dot

";


// File: classcasadi_1_1CollocationIntegrator.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::CollocationIntegrator::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::CollocationIntegrator::outputScheme "[INTERNAL]  Access input/output scheme.

";

%feature("docstring") casadi::CollocationIntegrator::outputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::CollocationIntegrator::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::CollocationIntegrator::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::CollocationIntegrator::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::CollocationIntegrator::getDAE "

Get the DAE.

";

%feature("docstring") casadi::CollocationIntegrator::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::CollocationIntegrator::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::CollocationIntegrator::inputScheme "[INTERNAL]  Access input/output scheme.

";

%feature("docstring") casadi::CollocationIntegrator::checkInputs "[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::CollocationIntegrator::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::CollocationIntegrator::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::CollocationIntegrator::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::CollocationIntegrator::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::CollocationIntegrator::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::CollocationIntegrator::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::CollocationIntegrator::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::CollocationIntegrator::spCanEvaluate "[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::CollocationIntegrator::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::CollocationIntegrator::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") casadi::CollocationIntegrator::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::CollocationIntegrator::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::CollocationIntegrator::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::CollocationIntegrator::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::CollocationIntegrator::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::CollocationIntegrator::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::CollocationIntegrator::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::CollocationIntegrator::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::CollocationIntegrator::integrateB "

Integrate backward until a specified time point.

";

%feature("docstring") casadi::CollocationIntegrator::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::CollocationIntegrator::integrate "

Integrate forward until a specified time point.

";

%feature("docstring") casadi::CollocationIntegrator::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") casadi::CollocationIntegrator::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::CollocationIntegrator::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::CollocationIntegrator::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::CollocationIntegrator::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::CollocationIntegrator::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::CollocationIntegrator::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::CollocationIntegrator::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::CollocationIntegrator::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::CollocationIntegrator::isInit "

Is initialized?

";

%feature("docstring") casadi::CollocationIntegrator::getCount "[INTERNAL]
Get the reference count.

";

%feature("docstring") casadi::CollocationIntegrator::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::CollocationIntegrator::inputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::CollocationIntegrator::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::CollocationIntegrator::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::CollocationIntegrator::setOptionByAllowedIndex
"[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::CollocationIntegrator::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::CollocationIntegrator::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::CollocationIntegrator::printPtr "[INTERNAL]
Print the pointer to the internal class

";

%feature("docstring") casadi::CollocationIntegrator::spInit "[INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::CollocationIntegrator::resetB "

Reset the backward problem.

Time will be set to tf and backward state to input(INTEGRATOR_RX0)

";

%feature("docstring") casadi::CollocationIntegrator::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::CollocationIntegrator::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::CollocationIntegrator::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::CollocationIntegrator::input_struct "[INTERNAL]  Input/output structures of the function

";

%feature("docstring") casadi::CollocationIntegrator "

Fixed-step implicit Runge-Kutta integrator ODE/DAE integrator based on
collocation schemes.

The method is still under development

Base class for integrators. Solves an initial value problem (IVP) coupled to
a terminal value problem with differential equation given as an implicit ODE
coupled to an algebraic equation and a set of quadratures: Initial
conditions at t=t0  x(t0)  = x0  q(t0)  = 0   Forward integration from t=t0
to t=tf  der(x) = function(x, z, p, t) Forward ODE  0 = fz(x, z, p, t)
Forward algebraic equations  der(q) = fq(x, z, p, t)
Forward quadratures   Terminal conditions at t=tf  rx(tf)  = rx0  rq(tf)  =
0 Backward integration from t=tf to t=t0  der(rx) = gx(rx, rz, rp, x, z, p,
t)        Backward ODE  0 = gz(rx, rz, rp, x, z, p, t) Backward algebraic
equations  der(rq) = gq(rx, rz, rp, x, z, p, t) Backward quadratures   where
we assume that both the forward and backwards integrations are index-1
(i.e. dfz/dz, dgz/drz are invertible) and furthermore that  gx, gz and gq
have a linear dependency on rx, rz and rp.

Joel Andersson

>Input scheme: casadi::IntegratorInput (INTEGRATOR_NUM_IN = 7) [integratorIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_X0          | x0                     | Differential state at  |
|                        |                        | the initial time .     |
+------------------------+------------------------+------------------------+
| INTEGRATOR_P           | p                      | Parameters .           |
+------------------------+------------------------+------------------------+
| INTEGRATOR_Z0          | z0                     | Initial guess for the  |
|                        |                        | algebraic variable .   |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RX0         | rx0                    | Backward differential  |
|                        |                        | state at the final     |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RP          | rp                     | Backward parameter     |
|                        |                        | vector .               |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZ0         | rz0                    | Initial guess for the  |
|                        |                        | backwards algebraic    |
|                        |                        | variable .             |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::IntegratorOutput (INTEGRATOR_NUM_OUT = 7) [integratorOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_XF          | xf                     | Differential state at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_QF          | qf                     | Quadrature state at    |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_ZF          | zf                     | Algebraic variable at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RXF         | rxf                    | Backward differential  |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RQF         | rqf                    | Backward quadrature    |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZF         | rzf                    | Backward algebraic     |
|                        |                        | variable at the        |
|                        |                        | initial time .         |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| augmented_op | OT_DICTIONAR | GenericType( | Options to   | casadi::Inte |
| tions        | Y            | )            | be passed    | gratorIntern |
|              |              |              | down to the  | al           |
|              |              |              | augmented    |              |
|              |              |              | integrator,  |              |
|              |              |              | if one is    |              |
|              |              |              | constructed. |              |
+--------------+--------------+--------------+--------------+--------------+
| collocation_ | OT_STRING    | \"radau\"      | Collocation  | casadi::Coll |
| scheme       |              |              | scheme (rada | ocationInteg |
|              |              |              | u|legendre)  | ratorInterna |
|              |              |              |              | l            |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_augme | OT_BOOLEAN   | true         | If DAE       | casadi::Inte |
| nted         |              |              | callback     | gratorIntern |
|              |              |              | functions    | al           |
|              |              |              | are          |              |
|              |              |              | SXFunction , |              |
|              |              |              | have         |              |
|              |              |              | augmented    |              |
|              |              |              | DAE callback |              |
|              |              |              | function     |              |
|              |              |              | also be      |              |
|              |              |              | SXFunction . |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| implicit_sol | OT_IMPLICITF | GenericType( | An implicit  | casadi::Impl |
| ver          | UNCTION      | )            | function     | icitFixedSte |
|              |              |              | solver       | pIntegratorI |
|              |              |              |              | nternal      |
+--------------+--------------+--------------+--------------+--------------+
| implicit_sol | OT_DICTIONAR | GenericType( | Options to   | casadi::Impl |
| ver_options  | Y            | )            | be passed to | icitFixedSte |
|              |              |              | the NLP      | pIntegratorI |
|              |              |              | Solver       | nternal      |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| interpolatio | OT_INTEGER   | 3            | Order of the | casadi::Coll |
| n_order      |              |              | interpolatin | ocationInteg |
|              |              |              | g            | ratorInterna |
|              |              |              | polynomials  | l            |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| number_of_fi | OT_INTEGER   | 20           | Number of    | casadi::Fixe |
| nite_element |              |              | finite       | dStepIntegra |
| s            |              |              | elements     | torInternal  |
+--------------+--------------+--------------+--------------+--------------+
| print_stats  | OT_BOOLEAN   | false        | Print out    | casadi::Inte |
|              |              |              | statistics   | gratorIntern |
|              |              |              | after        | al           |
|              |              |              | integration  |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| t0           | OT_REAL      | 0            | Beginning of | casadi::Inte |
|              |              |              | the time     | gratorIntern |
|              |              |              | horizon      | al           |
+--------------+--------------+--------------+--------------+--------------+
| tf           | OT_REAL      | 1            | End of the   | casadi::Inte |
|              |              |              | time horizon | gratorIntern |
|              |              |              |              | al           |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: collocation_integrator.hpp ";

%feature("docstring") casadi::CollocationIntegrator::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::CollocationIntegrator::assignNodeNoCount "[INTERNAL]  Assign the node to a node class pointer without reference
counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::CollocationIntegrator::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::CollocationIntegrator::getOption "

get an option value

";

%feature("docstring") casadi::CollocationIntegrator::getAugmented "

Generate a augmented DAE system with nfwd forward sensitivities and nadj
adjoint sensitivities.

";

%feature("docstring") casadi::CollocationIntegrator::CollocationIntegrator "

>  casadi::CollocationIntegrator::CollocationIntegrator()
------------------------------------------------------------------------

Default constructor.

>  casadi::CollocationIntegrator::CollocationIntegrator(const Function &f, const Function &g=Function())
------------------------------------------------------------------------

Create an integrator for explicit ODEs.

Parameters:
-----------

f:  dynamical system

>Input scheme: casadi::DAEInput (DAE_NUM_IN = 5) [daeIn]
+-----------+-------+----------------------------+
| Full name | Short |        Description         |
+===========+=======+============================+
| DAE_X     | x     | Differential state .       |
+-----------+-------+----------------------------+
| DAE_Z     | z     | Algebraic state .          |
+-----------+-------+----------------------------+
| DAE_P     | p     | Parameter .                |
+-----------+-------+----------------------------+
| DAE_T     | t     | Explicit time dependence . |
+-----------+-------+----------------------------+

>Output scheme: casadi::DAEOutput (DAE_NUM_OUT = 4) [daeOut]
+-----------+-------+--------------------------------------------+
| Full name | Short |                Description                 |
+===========+=======+============================================+
| DAE_ODE   | ode   | Right hand side of the implicit ODE .      |
+-----------+-------+--------------------------------------------+
| DAE_ALG   | alg   | Right hand side of algebraic equations .   |
+-----------+-------+--------------------------------------------+
| DAE_QUAD  | quad  | Right hand side of quadratures equations . |
+-----------+-------+--------------------------------------------+

Parameters:
-----------

g:  backwards system

>Input scheme: casadi::RDAEInput (RDAE_NUM_IN = 8) [rdaeIn]
+-----------+-------+-------------------------------+
| Full name | Short |          Description          |
+===========+=======+===============================+
| RDAE_RX   | rx    | Backward differential state . |
+-----------+-------+-------------------------------+
| RDAE_RZ   | rz    | Backward algebraic state .    |
+-----------+-------+-------------------------------+
| RDAE_RP   | rp    | Backward parameter vector .   |
+-----------+-------+-------------------------------+
| RDAE_X    | x     | Forward differential state .  |
+-----------+-------+-------------------------------+
| RDAE_Z    | z     | Forward algebraic state .     |
+-----------+-------+-------------------------------+
| RDAE_P    | p     | Parameter vector .            |
+-----------+-------+-------------------------------+
| RDAE_T    | t     | Explicit time dependence .    |
+-----------+-------+-------------------------------+

>Output scheme: casadi::RDAEOutput (RDAE_NUM_OUT = 4) [rdaeOut]
+-----------+-------+-------------------------------------------+
| Full name | Short |                Description                |
+===========+=======+===========================================+
| RDAE_ODE  | ode   | Right hand side of ODE. .                 |
+-----------+-------+-------------------------------------------+
| RDAE_ALG  | alg   | Right hand side of algebraic equations. . |
+-----------+-------+-------------------------------------------+
| RDAE_QUAD | quad  | Right hand side of quadratures. .         |
+-----------+-------+-------------------------------------------+

";

%feature("docstring") casadi::CollocationIntegrator::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::CollocationIntegrator::clone "

Clone.

";

%feature("docstring") casadi::CollocationIntegrator::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::CollocationIntegrator::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::CollocationIntegrator::weak "[INTERNAL]  Get
a weak reference to the object.

";

%feature("docstring") casadi::CollocationIntegrator::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::CollocationIntegrator::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::CollocationIntegrator::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::CollocationIntegrator::evaluate "

Evaluate.

";

%feature("docstring") casadi::CollocationIntegrator::reset "

Reset the forward problem Time will be set to t0 and state to
input(INTEGRATOR_X0)

";

%feature("docstring") casadi::CollocationIntegrator::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::CollocationIntegrator::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::CollocationIntegrator::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::CollocationIntegrator::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::CollocationIntegrator::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::CollocationIntegrator::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::CollocationIntegrator::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::CollocationIntegrator::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") casadi::CollocationIntegrator::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") casadi::CollocationIntegrator::printStats "

Print solver statistics.

";

%feature("docstring") casadi::CollocationIntegrator::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::CollocationIntegrator::callDerivative "[INTERNAL]  Evaluate the function symbolically or numerically with
directional derivatives The first two arguments are the nondifferentiated
inputs and results of the evaluation, the next two arguments are a set of
forward directional seeds and the resulting forward directional derivatives,
the length of the vector being the number of forward directions. The next
two arguments are a set of adjoint directional seeds and the resulting
adjoint directional derivatives, the length of the vector being the number
of adjoint directions.

";

%feature("docstring") casadi::CollocationIntegrator::hasOption "

check if there is an option str

";

%feature("docstring") casadi::CollocationIntegrator::schemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::CollocationIntegrator::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::CollocationIntegrator::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::CollocationIntegrator::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") casadi::CollocationIntegrator::output_struct "[INTERNAL]  Input/output structures of the function

";

%feature("docstring") casadi::CollocationIntegrator::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::CollocationIntegrator::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::CollocationIntegrator::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::CollocationIntegrator::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::CollocationIntegrator::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::CollocationIntegrator::isNull "

Is a null pointer?

";


// File: structcasadi_1_1CommChecker.xml
%feature("docstring") casadi::CommChecker "[INTERNAL]  Is commutative

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1CommChecker_3_01OP__ADD_01_4.xml
%feature("docstring") casadi::CommChecker< OP_ADD > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1CommChecker_3_01OP__AND_01_4.xml
%feature("docstring") casadi::CommChecker< OP_AND > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1CommChecker_3_01OP__EQ_01_4.xml
%feature("docstring") casadi::CommChecker< OP_EQ > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1CommChecker_3_01OP__MUL_01_4.xml
%feature("docstring") casadi::CommChecker< OP_MUL > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1CommChecker_3_01OP__NE_01_4.xml
%feature("docstring") casadi::CommChecker< OP_NE > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1CommChecker_3_01OP__OR_01_4.xml
%feature("docstring") casadi::CommChecker< OP_OR > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1CompiletimeConst.xml
%feature("docstring") casadi::CompiletimeConst "[INTERNAL]   Constant known
at compiletime.

C++ includes: constant_mx.hpp ";


// File: classcasadi_1_1Concat.xml
%feature("docstring") casadi::Concat::getBinary "[INTERNAL]  Get a binary
operation operation (matrix-matrix)

";

%feature("docstring") casadi::Concat::getNormInf "[INTERNAL]  Infinity
norm.

";

%feature("docstring") casadi::Concat::size "[INTERNAL] ";

%feature("docstring") casadi::Concat::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") casadi::Concat::sparsity "

>  const Sparsity& casadi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & casadi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") casadi::Concat::sameOpAndDeps "[INTERNAL]  Checks if
two nodes have the same operation and have equivalent dependencies up to a
given depth.

";

%feature("docstring") casadi::Concat::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::Concat::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") casadi::Concat::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") casadi::Concat::shape "[INTERNAL] ";

%feature("docstring") casadi::Concat::getAssertion "[INTERNAL]   Assertion.

";

%feature("docstring") casadi::Concat::getName "[INTERNAL]  Get the name.

";

%feature("docstring") casadi::Concat::size1 "[INTERNAL] ";

%feature("docstring") casadi::Concat::getBinarySwitch "[INTERNAL]  Get a
binary operation operation.

";

%feature("docstring") casadi::Concat::simplifyMe "[INTERNAL]  Simplify the
expression (ex is a reference to the node)

";

%feature("docstring") casadi::Concat::isMultipleOutput "[INTERNAL]  Check
if a multiple output node.

";

%feature("docstring") casadi::Concat::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") casadi::Concat::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") casadi::Concat::getVertsplit "[INTERNAL]  Create a
vertical split node (vectors only)

";

%feature("docstring") casadi::Concat::getFunctionOutput "[INTERNAL]  Get
function output.

";

%feature("docstring") casadi::Concat::clone "[INTERNAL]  Clone function.

";

%feature("docstring") casadi::Concat::getSubRef "[INTERNAL]  Get submatrix
reference.

";

%feature("docstring") casadi::Concat::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") casadi::Concat::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") casadi::Concat::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") casadi::Concat::isNonLinear "[INTERNAL]  Is the node
nonlinear.

";

%feature("docstring") casadi::Concat::evaluateSX "[INTERNAL]  Evaluate the
function symbolically (SX)

";

%feature("docstring") casadi::Concat::getUnary "[INTERNAL]  Get a unary
operation.

";

%feature("docstring") casadi::Concat::getInverse "[INTERNAL]   Inverse.

";

%feature("docstring") casadi::Concat::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::Concat::getNorm2 "[INTERNAL]  Spectral norm.

";

%feature("docstring") casadi::Concat::isOutputNode "[INTERNAL]  Check if
evaluation output.

";

%feature("docstring") casadi::Concat::Concat "[INTERNAL]  Constructor.

";

%feature("docstring") casadi::Concat::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") casadi::Concat::evaluateGen "[INTERNAL]  Evaluate the
function (template)

";

%feature("docstring") casadi::Concat::deepCopyMembers "[INTERNAL]  Deep
copy data members.

";

%feature("docstring") casadi::Concat::getAddNonzeros "[INTERNAL]  Add the
nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::Concat::getHorzsplit "[INTERNAL]  Create a
horizontal split node.

";

%feature("docstring") casadi::Concat::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") casadi::Concat::dep "

>  const MX & casadi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & casadi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::Concat::printPart "[INTERNAL]  Print a part
of the expression.

";

%feature("docstring") casadi::Concat::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") casadi::Concat::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") casadi::Concat::evaluateMX "

>  void casadi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX)

>  void casadi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") casadi::Concat::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") casadi::Concat::assign "

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") casadi::Concat::getGetNonzeros "[INTERNAL]  Get the
nonzeros of matrix.

";

%feature("docstring") casadi::Concat::getOp "[INTERNAL]  Get the operation.

";

%feature("docstring") casadi::Concat::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::Concat::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") casadi::Concat::hasDep "[INTERNAL]  Does the node
depend on other nodes.

";

%feature("docstring") casadi::Concat::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") casadi::Concat::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring") casadi::Concat::numel "[INTERNAL]  Get shape.

";

%feature("docstring") casadi::Concat::getFunction "[INTERNAL]  Get function
reference.

";

%feature("docstring") casadi::Concat::mapping "[INTERNAL]  Get an IMatrix
representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") casadi::Concat::print "

>  void casadi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void casadi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") casadi::Concat::getNumOutputs "[INTERNAL]  Number of
outputs.

";

%feature("docstring") casadi::Concat::getValue "[INTERNAL]  Get the value
(only for scalar constant nodes)

";

%feature("docstring") casadi::Concat "[INTERNAL]  Concatenation: Join
multiple expressions stacking the nonzeros.

Joel Andersson

C++ includes: concat.hpp ";

%feature("docstring") casadi::Concat::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") casadi::Concat::propagateSparsity "[INTERNAL]
Propagate sparsity.

";

%feature("docstring") casadi::Concat::setDependencies "

>  void casadi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void casadi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") casadi::Concat::getReshape "[INTERNAL]   Reshape.

";

%feature("docstring") casadi::Concat::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") casadi::Concat::getNormF "[INTERNAL]  Frobenius norm.

";

%feature("docstring") casadi::Concat::getFunctionInput "[INTERNAL]  Get
function input.

";

%feature("docstring") casadi::Concat::size2 "[INTERNAL] ";

%feature("docstring") casadi::Concat::getSolve "[INTERNAL]   Solve a system
of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") casadi::Concat::getMatrixValue "[INTERNAL]  Get the
value (only for constant nodes)

";

%feature("docstring") casadi::Concat::getSetNonzeros "[INTERNAL]  Assign
the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::Concat::evaluateD "[INTERNAL]  Evaluate the
function numerically.

";

%feature("docstring") casadi::Concat::getTranspose "[INTERNAL]   Transpose.

";

%feature("docstring") casadi::Concat::~Concat "[INTERNAL]  Destructor.

";

%feature("docstring") casadi::Concat::isUnaryOp "[INTERNAL]  Check if unary
operation.

";

%feature("docstring") casadi::Concat::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") casadi::Concat::getOutput "[INTERNAL]  Get an output.

";

%feature("docstring") casadi::Concat::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") casadi::Concat::assertInit "[INTERNAL]  Assert that
the object has been initialized.

";

%feature("docstring") casadi::Concat::getMultiplication "[INTERNAL]
Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") casadi::Concat::getSetSparse "[INTERNAL]  Create set
sparse.

";

%feature("docstring") casadi::Concat::isOne "[INTERNAL]  Check if
identically one.

";


// File: classcasadi_1_1Constant.xml
%feature("docstring") casadi::Constant::evaluateD "[INTERNAL]  Evaluate the
function numerically.

";

%feature("docstring") casadi::Constant::getNumOutputs "[INTERNAL]  Number
of outputs.

";

%feature("docstring") casadi::Constant::getSetSparse "[INTERNAL]  Get
densification.

";

%feature("docstring") casadi::Constant::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::Constant::sparsity "

>  const Sparsity& casadi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & casadi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") casadi::Constant::getFunctionInput "[INTERNAL]  Get
function input.

";

%feature("docstring") casadi::Constant::mapping "[INTERNAL]  Get an IMatrix
representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") casadi::Constant::getName "[INTERNAL]  Get the name.

";

%feature("docstring") casadi::Constant::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::Constant::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") casadi::Constant::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") casadi::Constant::propagateSparsity "[INTERNAL]
Propagate sparsity.

";

%feature("docstring") casadi::Constant::sameOpAndDeps "[INTERNAL]  Checks
if two nodes have the same operation and have equivalent dependencies up to
a given depth.

";

%feature("docstring") casadi::Constant::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") casadi::Constant::getNormF "[INTERNAL]  Frobenius
norm.

";

%feature("docstring") casadi::Constant::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") casadi::Constant::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") casadi::Constant::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") casadi::Constant::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") casadi::Constant::getBinary "[INTERNAL]  Get a binary
operation operation.

";

%feature("docstring") casadi::Constant::getHorzsplit "[INTERNAL]  Create a
horizontal split node.

";

%feature("docstring") casadi::Constant::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") casadi::Constant::getFunction "[INTERNAL]  Get
function reference.

";

%feature("docstring") casadi::Constant::getVertsplit "[INTERNAL]  Create a
vertical split node (vectors only)

";

%feature("docstring") casadi::Constant::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::Constant::isZero "[INTERNAL]  Check if a
particular integer value.

";

%feature("docstring") casadi::Constant::isOutputNode "[INTERNAL]  Check if
evaluation output.

";

%feature("docstring") casadi::Constant::simplifyMe "[INTERNAL]  Simplify
the expression (ex is a reference to the node)

";

%feature("docstring") casadi::Constant::clone "[INTERNAL]  Clone function.

";

%feature("docstring") casadi::Constant::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") casadi::Constant::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") casadi::Constant::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") casadi::Constant::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") casadi::Constant::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") casadi::Constant::getSubRef "[INTERNAL]  Get
submatrix reference.

";

%feature("docstring") casadi::Constant::printPart "[INTERNAL]  Print a part
of the expression.

";

%feature("docstring") casadi::Constant::getSetNonzeros "[INTERNAL]  Assign
the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::Constant::deepCopyMembers "[INTERNAL]  Deep
copy data members.

";

%feature("docstring") casadi::Constant::getNorm2 "[INTERNAL]  Spectral
norm.

";

%feature("docstring") casadi::Constant::evaluateSX "[INTERNAL]  Evaluate
the function symbolically (SX)

";

%feature("docstring") casadi::Constant::getUnary "[INTERNAL]  Get a unary
operation.

";

%feature("docstring") casadi::Constant::getReshape "[INTERNAL]   Reshape.

";

%feature("docstring") casadi::Constant::getAddNonzeros "[INTERNAL]  Add the
nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::Constant::setDependencies "

>  void casadi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void casadi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") casadi::Constant::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") casadi::Constant::isMultipleOutput "[INTERNAL]  Check
if a multiple output node.

";

%feature("docstring") casadi::Constant::~Constant "[INTERNAL]  Destructor.

";

%feature("docstring") casadi::Constant::numel "[INTERNAL]  Get shape.

";

%feature("docstring") casadi::Constant::__nonzero__ "[INTERNAL]  Return
truth value of an MX.

";

%feature("docstring") casadi::Constant::getSolve "[INTERNAL]   Solve a
system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") casadi::Constant::assign "

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") casadi::Constant::isNonLinear "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring") casadi::Constant::getFunctionOutput "[INTERNAL]  Get
function output.

";

%feature("docstring") casadi::Constant::getInverse "[INTERNAL]   Inverse.

";

%feature("docstring") casadi::Constant::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") casadi::Constant::isUnaryOp "[INTERNAL]  Check if
unary operation.

";

%feature("docstring") casadi::Constant::print "

>  void casadi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void casadi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") casadi::Constant::evaluateMX "

>  void casadi::ConstantMX::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void casadi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") casadi::Constant::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") casadi::Constant::size1 "[INTERNAL] ";

%feature("docstring") casadi::Constant::shape "[INTERNAL] ";

%feature("docstring") casadi::Constant::size2 "[INTERNAL] ";

%feature("docstring") casadi::Constant::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") casadi::Constant::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") casadi::Constant::getMultiplication "[INTERNAL]
Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") casadi::Constant::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") casadi::Constant::getValue "[INTERNAL]  Get the value
(only for scalar constant nodes)

";

%feature("docstring") casadi::Constant::assertInit "[INTERNAL]  Assert that
the object has been initialized.

";

%feature("docstring") casadi::Constant::hasDep "[INTERNAL]  Does the node
depend on other nodes.

";

%feature("docstring") casadi::Constant::getMatrixValue "[INTERNAL]  Get the
value (only for constant nodes)

";

%feature("docstring") casadi::Constant::size "[INTERNAL] ";

%feature("docstring") casadi::Constant "[INTERNAL]  A constant with all
entries identical.

C++ includes: constant_mx.hpp ";

%feature("docstring") casadi::Constant::getGetNonzeros "[INTERNAL]  Get the
nonzeros of matrix.

";

%feature("docstring") casadi::Constant::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") casadi::Constant::dep "

>  const MX & casadi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & casadi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::Constant::Constant "[INTERNAL]  Constructor.

";

%feature("docstring") casadi::Constant::getInnerProd "[INTERNAL]   Matrix
multiplication.

Inner product

";

%feature("docstring") casadi::Constant::getNormInf "[INTERNAL]  Infinity
norm.

";

%feature("docstring") casadi::Constant::getOutput "[INTERNAL]  Get an
output.

";

%feature("docstring") casadi::Constant::getBinarySwitch "[INTERNAL]  Get a
binary operation operation.

";

%feature("docstring") casadi::Constant::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";


// File: classcasadi_1_1ConstantDMatrix.xml
%feature("docstring") casadi::ConstantDMatrix::isEqual "[INTERNAL]  Check
if two nodes are equivalent up to a given depth.

";

%feature("docstring") casadi::ConstantDMatrix::evaluateMX "

>  void casadi::ConstantMX::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void casadi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") casadi::ConstantDMatrix::propagateSparsity "[INTERNAL]  Propagate sparsity.

";

%feature("docstring") casadi::ConstantDMatrix::getNorm2 "[INTERNAL]
Spectral norm.

";

%feature("docstring") casadi::ConstantDMatrix::dep "

>  const MX & casadi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & casadi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::ConstantDMatrix::getSolve "[INTERNAL]   Solve
a system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") casadi::ConstantDMatrix::getOutput "[INTERNAL]  Get
an output.

";

%feature("docstring") casadi::ConstantDMatrix::getReshape "[INTERNAL]
Reshape.

";

%feature("docstring") casadi::ConstantDMatrix::printPart "[INTERNAL]  Print
a part of the expression.

";

%feature("docstring") casadi::ConstantDMatrix::isIdentity "[INTERNAL]
Check if identity matrix.

";

%feature("docstring") casadi::ConstantDMatrix::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") casadi::ConstantDMatrix::isZero "[INTERNAL]  Check if
a particular integer value.

";

%feature("docstring") casadi::ConstantDMatrix::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") casadi::ConstantDMatrix::addDependency "[INTERNAL]
Add a dependency.

";

%feature("docstring") casadi::ConstantDMatrix::size "[INTERNAL] ";

%feature("docstring") casadi::ConstantDMatrix::nTmp "[INTERNAL]  Get number
of temporary variables needed.

";

%feature("docstring") casadi::ConstantDMatrix::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") casadi::ConstantDMatrix::numel "[INTERNAL]  Get
shape.

";

%feature("docstring") casadi::ConstantDMatrix::generateOperation "[INTERNAL]  Generate code for the operation.

";

%feature("docstring") casadi::ConstantDMatrix::getMultiplication "[INTERNAL]   Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") casadi::ConstantDMatrix::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") casadi::ConstantDMatrix::__nonzero__ "[INTERNAL]
Return truth value of an MX.

";

%feature("docstring") casadi::ConstantDMatrix::getNumOutputs "[INTERNAL]
Number of outputs.

";

%feature("docstring") casadi::ConstantDMatrix::getSetSparse "[INTERNAL]
Create set sparse.

";

%feature("docstring") casadi::ConstantDMatrix::numInplace "[INTERNAL]  Can
the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") casadi::ConstantDMatrix::deepCopyMembers "[INTERNAL]
Deep copy data members.

";

%feature("docstring") casadi::ConstantDMatrix::assertInit "[INTERNAL]
Assert that the object has been initialized.

";

%feature("docstring") casadi::ConstantDMatrix::getVertsplit "[INTERNAL]
Create a vertical split node (vectors only)

";

%feature("docstring") casadi::ConstantDMatrix::getCount "[INTERNAL]  Get
the reference count.

";

%feature("docstring") casadi::ConstantDMatrix::getFunctionInput "[INTERNAL]
Get function input.

";

%feature("docstring") casadi::ConstantDMatrix::getHorzcat "[INTERNAL]
Create a horizontal concatenation node.

";

%feature("docstring") casadi::ConstantDMatrix::~ConstantDMatrix "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::ConstantDMatrix::getNormF "[INTERNAL]
Frobenius norm.

";

%feature("docstring") casadi::ConstantDMatrix::isNonLinear "[INTERNAL]  Is
the node nonlinear.

";

%feature("docstring") casadi::ConstantDMatrix::getFunction "[INTERNAL]  Get
function reference.

";

%feature("docstring") casadi::ConstantDMatrix::shape "[INTERNAL] ";

%feature("docstring") casadi::ConstantDMatrix::ConstantDMatrix "[INTERNAL]
Constructor.

";

%feature("docstring") casadi::ConstantDMatrix::sameOpAndDeps "[INTERNAL]
Checks if two nodes have the same operation and have equivalent dependencies
up to a given depth.

";

%feature("docstring") casadi::ConstantDMatrix::getUnary "[INTERNAL]  Get a
unary operation.

";

%feature("docstring") casadi::ConstantDMatrix::clone "[INTERNAL]  Clone
function.

";

%feature("docstring") casadi::ConstantDMatrix::isBinaryOp "[INTERNAL]
Check if binary operation.

";

%feature("docstring") casadi::ConstantDMatrix::getInverse "[INTERNAL]
Inverse.

";

%feature("docstring") casadi::ConstantDMatrix::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") casadi::ConstantDMatrix::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::ConstantDMatrix::init "[INTERNAL]  Initialize
the object.

";

%feature("docstring") casadi::ConstantDMatrix::isInit "[INTERNAL]  Check if
the object has been initialized.

";

%feature("docstring") casadi::ConstantDMatrix::sparsity "

>  const Sparsity& casadi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & casadi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") casadi::ConstantDMatrix::getFunctionOutput "[INTERNAL]  Get function output.

";

%feature("docstring") casadi::ConstantDMatrix::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") casadi::ConstantDMatrix "[INTERNAL]  A constant given
as a DMatrix.

C++ includes: constant_mx.hpp ";

%feature("docstring") casadi::ConstantDMatrix::size2 "[INTERNAL] ";

%feature("docstring") casadi::ConstantDMatrix::size1 "[INTERNAL] ";

%feature("docstring") casadi::ConstantDMatrix::setSparsity "[INTERNAL]  Set
the sparsity.

";

%feature("docstring") casadi::ConstantDMatrix::getNormInf "[INTERNAL]
Infinity norm.

";

%feature("docstring") casadi::ConstantDMatrix::isValue "[INTERNAL]  Check
if a certain value.

";

%feature("docstring") casadi::ConstantDMatrix::evaluateD "[INTERNAL]
Evaluate the function numerically.

";

%feature("docstring") casadi::ConstantDMatrix::getValue "[INTERNAL]  Get
the value (only for scalar constant nodes)

";

%feature("docstring") casadi::ConstantDMatrix::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") casadi::ConstantDMatrix::getVertcat "[INTERNAL]
Create a vertical concatenation node (vectors only)

";

%feature("docstring") casadi::ConstantDMatrix::isOutputNode "[INTERNAL]
Check if evaluation output.

";

%feature("docstring") casadi::ConstantDMatrix::evaluateSX "[INTERNAL]
Evaluate the function symbolically (SX)

";

%feature("docstring") casadi::ConstantDMatrix::hasDep "[INTERNAL]  Does the
node depend on other nodes.

";

%feature("docstring") casadi::ConstantDMatrix::mapping "[INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") casadi::ConstantDMatrix::getBinarySwitch "[INTERNAL]
Get a binary operation operation.

";

%feature("docstring") casadi::ConstantDMatrix::getBinary "[INTERNAL]  Get a
binary operation operation (matrix-matrix)

";

%feature("docstring") casadi::ConstantDMatrix::simplifyMe "[INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring") casadi::ConstantDMatrix::getGetNonzeros "[INTERNAL]
Get the nonzeros of matrix.

";

%feature("docstring") casadi::ConstantDMatrix::setDependencies "

>  void casadi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void casadi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") casadi::ConstantDMatrix::getSetNonzeros "[INTERNAL]
Assign the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::ConstantDMatrix::getSubRef "[INTERNAL]  Get
submatrix reference.

";

%feature("docstring") casadi::ConstantDMatrix::getSubAssign "[INTERNAL]
Get submatrix assignment.

";

%feature("docstring") casadi::ConstantDMatrix::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") casadi::ConstantDMatrix::getAddNonzeros "[INTERNAL]
Add the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::ConstantDMatrix::isMultipleOutput "[INTERNAL]
Check if a multiple output node.

";

%feature("docstring") casadi::ConstantDMatrix::print "

>  void casadi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void casadi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") casadi::ConstantDMatrix::assign "

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") casadi::ConstantDMatrix::getInnerProd "[INTERNAL]
Matrix multiplication.

Inner product

";

%feature("docstring") casadi::ConstantDMatrix::getHorzsplit "[INTERNAL]
Create a horizontal split node.

";

%feature("docstring") casadi::ConstantDMatrix::getMatrixValue "[INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring") casadi::ConstantDMatrix::isUnaryOp "[INTERNAL]  Check
if unary operation.

";

%feature("docstring") casadi::ConstantDMatrix::getName "[INTERNAL]  Get the
name.

";

%feature("docstring") casadi::ConstantDMatrix::isMinusOne "[INTERNAL] ";


// File: classcasadi_1_1ConstantMX.xml
%feature("docstring") casadi::ConstantMX::getBinary "[INTERNAL]  Get a
binary operation operation (matrix-matrix)

";

%feature("docstring") casadi::ConstantMX::dep "

>  const MX & casadi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & casadi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::ConstantMX::isMultipleOutput "[INTERNAL]
Check if a multiple output node.

";

%feature("docstring") casadi::ConstantMX::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") casadi::ConstantMX::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") casadi::ConstantMX::numel "[INTERNAL]  Get shape.

";

%feature("docstring") casadi::ConstantMX::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") casadi::ConstantMX::getBinarySwitch "[INTERNAL]  Get
a binary operation operation.

";

%feature("docstring") casadi::ConstantMX::setDependencies "

>  void casadi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void casadi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") casadi::ConstantMX::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") casadi::ConstantMX::~ConstantMX "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::ConstantMX::simplifyMe "[INTERNAL]  Simplify
the expression (ex is a reference to the node)

";

%feature("docstring") casadi::ConstantMX::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::ConstantMX::getInverse "[INTERNAL]   Inverse.

";

%feature("docstring") casadi::ConstantMX::propagateSparsity "[INTERNAL]
Propagate sparsity.

";

%feature("docstring") casadi::ConstantMX::getNormInf "[INTERNAL]  Infinity
norm.

";

%feature("docstring") casadi::ConstantMX::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") casadi::ConstantMX::getHorzsplit "[INTERNAL]  Create
a horizontal split node.

";

%feature("docstring") casadi::ConstantMX::getSolve "[INTERNAL]   Solve a
system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") casadi::ConstantMX::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") casadi::ConstantMX::sparsity "

>  const Sparsity& casadi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & casadi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") casadi::ConstantMX::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") casadi::ConstantMX::size "[INTERNAL] ";

%feature("docstring") casadi::ConstantMX::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") casadi::ConstantMX::clone "[INTERNAL]  Clone
function.

";

%feature("docstring") casadi::ConstantMX::hasDep "[INTERNAL]  Does the node
depend on other nodes.

";

%feature("docstring") casadi::ConstantMX::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") casadi::ConstantMX::printPart "[INTERNAL]  Print a
part of the expression.

";

%feature("docstring") casadi::ConstantMX::getNormF "[INTERNAL]  Frobenius
norm.

";

%feature("docstring") casadi::ConstantMX::getMatrixValue "[INTERNAL]  Get
the value (only for constant nodes)

";

%feature("docstring") casadi::ConstantMX::sameOpAndDeps "[INTERNAL]  Checks
if two nodes have the same operation and have equivalent dependencies up to
a given depth.

";

%feature("docstring") casadi::ConstantMX::print "

>  void casadi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void casadi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") casadi::ConstantMX::getVertsplit "[INTERNAL]  Create
a vertical split node (vectors only)

";

%feature("docstring") casadi::ConstantMX::getOutput "[INTERNAL]  Get an
output.

";

%feature("docstring") casadi::ConstantMX::getInnerProd "[INTERNAL]   Matrix
multiplication.

Inner product

";

%feature("docstring") casadi::ConstantMX::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") casadi::ConstantMX::__nonzero__ "[INTERNAL]  Return
truth value of an MX.

";

%feature("docstring") casadi::ConstantMX::evaluateD "[INTERNAL]  Evaluate
the function numerically.

";

%feature("docstring") casadi::ConstantMX::getMultiplication "[INTERNAL]
Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") casadi::ConstantMX::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") casadi::ConstantMX::ConstantMX "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::ConstantMX::size2 "[INTERNAL] ";

%feature("docstring") casadi::ConstantMX::assertInit "[INTERNAL]  Assert
that the object has been initialized.

";

%feature("docstring") casadi::ConstantMX::evaluateMX "

>  void casadi::ConstantMX::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void casadi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") casadi::ConstantMX::size1 "[INTERNAL] ";

%feature("docstring") casadi::ConstantMX::getFunctionInput "[INTERNAL]  Get
function input.

";

%feature("docstring") casadi::ConstantMX::isOutputNode "[INTERNAL]  Check
if evaluation output.

";

%feature("docstring") casadi::ConstantMX::getSetSparse "[INTERNAL]  Create
set sparse.

";

%feature("docstring") casadi::ConstantMX::getAddNonzeros "[INTERNAL]  Add
the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::ConstantMX::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") casadi::ConstantMX::getNorm2 "[INTERNAL]  Spectral
norm.

";

%feature("docstring") casadi::ConstantMX::evaluateSX "[INTERNAL]  Evaluate
the function symbolically (SX)

";

%feature("docstring") casadi::ConstantMX::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") casadi::ConstantMX::getSetNonzeros "[INTERNAL]
Assign the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::ConstantMX::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") casadi::ConstantMX::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") casadi::ConstantMX::getValue "[INTERNAL]  Get the
value (only for scalar constant nodes)

";

%feature("docstring") casadi::ConstantMX::shape "[INTERNAL] ";

%feature("docstring") casadi::ConstantMX::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") casadi::ConstantMX::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") casadi::ConstantMX::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::ConstantMX::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") casadi::ConstantMX::mapping "[INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") casadi::ConstantMX::assign "

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") casadi::ConstantMX::getName "[INTERNAL]  Get the
name.

";

%feature("docstring") casadi::ConstantMX::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") casadi::ConstantMX::getUnary "[INTERNAL]  Get a unary
operation.

";

%feature("docstring") casadi::ConstantMX::getFunction "[INTERNAL]  Get
function reference.

";

%feature("docstring") casadi::ConstantMX::deepCopyMembers "[INTERNAL]  Deep
copy data members.

";

%feature("docstring") casadi::ConstantMX::getNumOutputs "[INTERNAL]  Number
of outputs.

";

%feature("docstring") casadi::ConstantMX::isUnaryOp "[INTERNAL]  Check if
unary operation.

";

%feature("docstring") casadi::ConstantMX::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") casadi::ConstantMX::getGetNonzeros "[INTERNAL]  Get
the nonzeros of matrix.

";

%feature("docstring") casadi::ConstantMX::isNonLinear "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring") casadi::ConstantMX::getFunctionOutput "[INTERNAL]
Get function output.

";

%feature("docstring") casadi::ConstantMX::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::ConstantMX::getSubRef "[INTERNAL]  Get
submatrix reference.

";

%feature("docstring") casadi::ConstantMX "[INTERNAL]  Represents an MX that
is only composed of a constant.

Joel Andersson  A regular user is not supposed to work with this Node class.
This user can call MX(double) directly, or even rely on implicit
typecasting. See:  zeros , ones

C++ includes: constant_mx.hpp ";

%feature("docstring") casadi::ConstantMX::getReshape "[INTERNAL]   Reshape.

";

%feature("docstring") casadi::ConstantMX::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") casadi::ConstantMX::isBinaryOp "[INTERNAL]  Check if
binary operation.

";


// File: classcasadi_1_1ConstantSX.xml
%feature("docstring") casadi::ConstantSX::isOne "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::ConstantSX::isSymbolic "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::ConstantSX::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") casadi::ConstantSX::isMinusInf "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::ConstantSX::hasDep "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::ConstantSX::isInf "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::ConstantSX::print "[INTERNAL]  print

";

%feature("docstring") casadi::ConstantSX "[INTERNAL]  Represents a constant
SX.

Joel Andersson

C++ includes: constant_sx.hpp ";

%feature("docstring") casadi::ConstantSX::isConstant "[INTERNAL]
Properties.

";

%feature("docstring") casadi::ConstantSX::isAlmostZero "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::ConstantSX::getValue "[INTERNAL]  Get the
value must be defined.

";

%feature("docstring") casadi::ConstantSX::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") casadi::ConstantSX::getIntValue "[INTERNAL]  Get
value of a constant node.

";

%feature("docstring") casadi::ConstantSX::marked "[INTERNAL] ";

%feature("docstring") casadi::ConstantSX::~ConstantSX "[INTERNAL] ";

%feature("docstring") casadi::ConstantSX::getName "[INTERNAL] ";

%feature("docstring") casadi::ConstantSX::init "[INTERNAL]  Initialize the
node (currently used only to give a similar interface to MXNode)

";

%feature("docstring") casadi::ConstantSX::isNan "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::ConstantSX::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") casadi::ConstantSX::isZero "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::ConstantSX::mark "[INTERNAL] ";

%feature("docstring") casadi::ConstantSX::dep "[INTERNAL]  get the
reference of a child

";

%feature("docstring") casadi::ConstantSX::isInteger "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::ConstantSX::isSmooth "[INTERNAL]  Check if
smooth.

";

%feature("docstring") casadi::ConstantSX::isMinusOne "[INTERNAL]  check
properties of a node

";


// File: classcasadi_1_1ControlledDAEInputIOSchemeVector.xml
%feature("docstring") casadi::ControlledDAEInputIOSchemeVector::vector "[INTERNAL] ";

%feature("docstring") casadi::ControlledDAEInputIOSchemeVector::__getitem__
"[INTERNAL] ";

%feature("docstring") casadi::ControlledDAEInputIOSchemeVector::repr "[INTERNAL]  Print a representation of the object.

";

%feature("docstring")
casadi::ControlledDAEInputIOSchemeVector::getDescription "[INTERNAL]
Return a string with a description (for SWIG)

";

%feature("docstring")
casadi::ControlledDAEInputIOSchemeVector::ControlledDAEInputIOSchemeVector "[INTERNAL] ";

%feature("docstring")
casadi::ControlledDAEInputIOSchemeVector::getRepresentation "[INTERNAL]
Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::ControlledDAEInputIOSchemeVector::print "[INTERNAL]  Print a description of the object.

";

%feature("docstring") casadi::ControlledDAEInputIOSchemeVector "[INTERNAL]
Helper function for 'ControlledDAEInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::ControlledDAEInputIOSchemeVector::__len__ "[INTERNAL] ";


// File: classcasadi_1_1ControlSimulator.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::ControlSimulator::hasOption "

check if there is an option str

";

%feature("docstring") casadi::ControlSimulator::spInit "[INTERNAL]  Reset
the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::ControlSimulator::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::ControlSimulator::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::ControlSimulator::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::ControlSimulator::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::ControlSimulator::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::ControlSimulator::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::ControlSimulator::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::ControlSimulator::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::ControlSimulator::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") casadi::ControlSimulator::clone "[INTERNAL]  Deep
copy.

";

%feature("docstring") casadi::ControlSimulator::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::ControlSimulator::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::ControlSimulator::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::ControlSimulator::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::ControlSimulator::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::ControlSimulator::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::ControlSimulator::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::ControlSimulator::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::ControlSimulator::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::ControlSimulator::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::ControlSimulator::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::ControlSimulator::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::ControlSimulator::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::ControlSimulator::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") casadi::ControlSimulator::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::ControlSimulator::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::ControlSimulator::printPtr "[INTERNAL]  Print
the pointer to the internal class

";

%feature("docstring") casadi::ControlSimulator::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::ControlSimulator::spCanEvaluate "[INTERNAL]
Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::ControlSimulator::assignNodeNoCount "[INTERNAL]  Assign the node to a node class pointer without reference
counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::ControlSimulator::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::ControlSimulator::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::ControlSimulator::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::ControlSimulator "

Piecewise Simulation class.

A ControlSimulator can be seen as a chain of Simulators whereby some
parameters change from one Simulator to the next.

These changing parameters can typically be interpreted as \"controls\" in
the context of dynamic optimization.

We discriminate between the following time steps: Major time-steps. These
are the time steps provided by the supplied grid. Controls are constant
inbetween major time-steps  Minor time-steps. These are time steps linearly
interpolated from one major time-step to the next. The option 'nf' regulates
how many minor time-steps are taken.  Integration time-steps. Time steps
that the supplied integrator might choose to integrate the continuous
dynamics. They are not important what ControlSimulator is concerned.  np
Number of parameters nu Number of controls ns The number of major grid
points, as supplied in the constructor nf The number of minor grid points
per major interval

Joris Gillis

>Input scheme: casadi::ControlSimulatorInput (CONTROLSIMULATOR_NUM_IN = 4) [controlsimulatorIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| CONTROLSIMULATOR_X0    | x0                     | Differential or        |
|                        |                        | algebraic state at t0  |
|                        |                        | (dimension nx-by-1) .  |
+------------------------+------------------------+------------------------+
| CONTROLSIMULATOR_P     | p                      | Parameters that are    |
|                        |                        | fixed over the entire  |
|                        |                        | horizon (dimension np- |
|                        |                        | by-1) .                |
+------------------------+------------------------+------------------------+
| CONTROLSIMULATOR_U     | u                      | Parameters that change |
|                        |                        | over the integration   |
|                        |                        | intervals (dimension   |
|                        |                        | nu-by-(ns-1)) .        |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| control_endp | OT_BOOLEAN   | false        | Include a    | casadi::Cont |
| oint         |              |              | control      | rolSimulator |
|              |              |              | value at the | Internal     |
|              |              |              | end of the   |              |
|              |              |              | simulation   |              |
|              |              |              | domain. Used |              |
|              |              |              | for interpol |              |
|              |              |              | ation.       |              |
+--------------+--------------+--------------+--------------+--------------+
| control_inte | OT_STRING    | \"none\"       | none|nearest | casadi::Cont |
| rpolation    |              |              | |linear      | rolSimulator |
|              |              |              |              | Internal     |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| integrator   | OT_INTEGRATO | GenericType( | An           | casadi::Cont |
|              | R            | )            | integrator   | rolSimulator |
|              |              |              | creator      | Internal     |
|              |              |              | function     |              |
+--------------+--------------+--------------+--------------+--------------+
| integrator_o | OT_DICTIONAR | GenericType( | Options to   | casadi::Cont |
| ptions       | Y            | )            | be passed to | rolSimulator |
|              |              |              | the          | Internal     |
|              |              |              | integrator   |              |
+--------------+--------------+--------------+--------------+--------------+
| minor_grid   | OT_INTEGERVE | GenericType( | The local    | casadi::Cont |
|              | CTOR         | )            | grid used on | rolSimulator |
|              |              |              | each major   | Internal     |
|              |              |              | interval,    |              |
|              |              |              | with time    |              |
|              |              |              | normalized   |              |
|              |              |              | to 1. By     |              |
|              |              |              | default,     |              |
|              |              |              | option 'nf'  |              |
|              |              |              | is used to   |              |
|              |              |              | construct a  |              |
|              |              |              | linearly     |              |
|              |              |              | spaced grid. |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| nf           | OT_INTEGER   | 1            | Number of    | casadi::Cont |
|              |              |              | minor        | rolSimulator |
|              |              |              | grained      | Internal     |
|              |              |              | integration  |              |
|              |              |              | steps per    |              |
|              |              |              | major        |              |
|              |              |              | interval.    |              |
|              |              |              | nf>0 must    |              |
|              |              |              | hold. This   |              |
|              |              |              | option is    |              |
|              |              |              | not used     |              |
|              |              |              | when         |              |
|              |              |              | 'minor_grid' |              |
|              |              |              | is provided. |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| simulator_op | OT_DICTIONAR | GenericType( | Options to   | casadi::Cont |
| tions        | Y            | )            | be passed to | rolSimulator |
|              |              |              | the          | Internal     |
|              |              |              | simulator    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: control_simulator.hpp ";

%feature("docstring") casadi::ControlSimulator::isInit "

Is initialized?

";

%feature("docstring") casadi::ControlSimulator::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") casadi::ControlSimulator::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::ControlSimulator::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::ControlSimulator::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::ControlSimulator::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::ControlSimulator::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::ControlSimulator::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::ControlSimulator::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::ControlSimulator::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::ControlSimulator::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::ControlSimulator::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") casadi::ControlSimulator::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::ControlSimulator::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::ControlSimulator::isNull "

Is a null pointer?

";

%feature("docstring") casadi::ControlSimulator::schemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::ControlSimulator::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::ControlSimulator::evaluate "

Evaluate.

";

%feature("docstring") casadi::ControlSimulator::getMajorIndex "

Get the index i such that gridminor[i] == gridmajor

";

%feature("docstring") casadi::ControlSimulator::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") casadi::ControlSimulator::getCount "[INTERNAL]  Get
the reference count.

";

%feature("docstring") casadi::ControlSimulator::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::ControlSimulator::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::ControlSimulator::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::ControlSimulator::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::ControlSimulator::outputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::ControlSimulator::getMinorT "

Get the (minor) time grid The length is (ns-1)*nf + 1

";

%feature("docstring") casadi::ControlSimulator::getMinorU "

Get the controls, sampled on the minor timescale. Number of rows is
(ns-1)*nf.

";

%feature("docstring") casadi::ControlSimulator::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::ControlSimulator::inputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::ControlSimulator::getOption "

get an option value

";

%feature("docstring") casadi::ControlSimulator::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::ControlSimulator::ControlSimulator "

>  casadi::ControlSimulator::ControlSimulator()
------------------------------------------------------------------------

Default constructor.

>  casadi::ControlSimulator::ControlSimulator(const Function &dae, const Function &output_fcn, const std::vector< double > &grid)
------------------------------------------------------------------------

Creates a piecewise simulator.

Parameters:
-----------

ffcn:  Continuous time dynamics, an casadi::Function with the following
mapping:

>Input scheme: casadi::ControlledDAEInput (CONTROL_DAE_NUM_IN = 10) [controldaeIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| CONTROL_DAE_T          | t                      | Global physical time.  |
|                        |                        | (1-by-1) .             |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_X          | x                      | State vector           |
|                        |                        | (dimension nx-by-1).   |
|                        |                        | Should have the same   |
|                        |                        | amount of non-zeros as |
|                        |                        | DAEOutput:DAE_RES      |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_Z          | z                      | Algebraic state vector |
|                        |                        | (dimension np-by-1). . |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_P          | p                      | Parameter vector       |
|                        |                        | (dimension np-by-1). . |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_U          | u                      | Control vector         |
|                        |                        | (dimension nu-by-1). . |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_U_INTERP   | u_interp               | Control vector,        |
|                        |                        | linearly interpolated  |
|                        |                        | (dimension nu-by-1). . |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_X_MAJOR    | x_major                | State vector           |
|                        |                        | (dimension nx-by-1) at |
|                        |                        | the last major time-   |
|                        |                        | step .                 |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_T0         | t0                     | Time at start of       |
|                        |                        | control interval       |
|                        |                        | (1-by-1) .             |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_TF         | tf                     | Time at end of control |
|                        |                        | interval (1-by-1) .    |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::DAEOutput (DAE_NUM_OUT = 4) [daeOut]
+-----------+-------+--------------------------------------------+
| Full name | Short |                Description                 |
+===========+=======+============================================+
| DAE_ODE   | ode   | Right hand side of the implicit ODE .      |
+-----------+-------+--------------------------------------------+
| DAE_ALG   | alg   | Right hand side of algebraic equations .   |
+-----------+-------+--------------------------------------------+
| DAE_QUAD  | quad  | Right hand side of quadratures equations . |
+-----------+-------+--------------------------------------------+

Parameters:
-----------

output_fcn:  output function which maps ControlledDAEInput or DAEInput to n
outputs.

>Input scheme: casadi::DAEInput (DAE_NUM_IN = 5) [daeIn]
+-----------+-------+----------------------------+
| Full name | Short |        Description         |
+===========+=======+============================+
| DAE_X     | x     | Differential state .       |
+-----------+-------+----------------------------+
| DAE_Z     | z     | Algebraic state .          |
+-----------+-------+----------------------------+
| DAE_P     | p     | Parameter .                |
+-----------+-------+----------------------------+
| DAE_T     | t     | Explicit time dependence . |
+-----------+-------+----------------------------+

>Input scheme: casadi::ControlledDAEInput (CONTROL_DAE_NUM_IN = 10) [controldaeIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| CONTROL_DAE_T          | t                      | Global physical time.  |
|                        |                        | (1-by-1) .             |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_X          | x                      | State vector           |
|                        |                        | (dimension nx-by-1).   |
|                        |                        | Should have the same   |
|                        |                        | amount of non-zeros as |
|                        |                        | DAEOutput:DAE_RES      |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_Z          | z                      | Algebraic state vector |
|                        |                        | (dimension np-by-1). . |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_P          | p                      | Parameter vector       |
|                        |                        | (dimension np-by-1). . |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_U          | u                      | Control vector         |
|                        |                        | (dimension nu-by-1). . |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_U_INTERP   | u_interp               | Control vector,        |
|                        |                        | linearly interpolated  |
|                        |                        | (dimension nu-by-1). . |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_X_MAJOR    | x_major                | State vector           |
|                        |                        | (dimension nx-by-1) at |
|                        |                        | the last major time-   |
|                        |                        | step .                 |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_T0         | t0                     | Time at start of       |
|                        |                        | control interval       |
|                        |                        | (1-by-1) .             |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_TF         | tf                     | Time at end of control |
|                        |                        | interval (1-by-1) .    |
+------------------------+------------------------+------------------------+

Parameters:
-----------

grid:  the major time grid

>  casadi::ControlSimulator::ControlSimulator(const Function &dae, const std::vector< double > &grid)
------------------------------------------------------------------------

Output function equal to the state.

";

%feature("docstring") casadi::ControlSimulator::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::ControlSimulator::inputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::ControlSimulator::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::ControlSimulator::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::ControlSimulator::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::ControlSimulator::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::ControlSimulator::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::ControlSimulator::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::ControlSimulator::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::ControlSimulator::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::ControlSimulator::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::ControlSimulator::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::ControlSimulator::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::ControlSimulator::checkInputs "[INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::ControlSimulator::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::ControlSimulator::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::ControlSimulator::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::ControlSimulator::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::ControlSimulator::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::ControlSimulator::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::ControlSimulator::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::ControlSimulator::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::ControlSimulator::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::ControlSimulator::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::ControlSimulator::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";


// File: classcasadi_1_1ControlSimulatorInputIOSchemeVector.xml
%feature("docstring") casadi::ControlSimulatorInputIOSchemeVector::print "[INTERNAL]  Print a description of the object.

";

%feature("docstring")
casadi::ControlSimulatorInputIOSchemeVector::ControlSimulatorInputIOSchemeVector
"[INTERNAL] ";

%feature("docstring") casadi::ControlSimulatorInputIOSchemeVector::vector "[INTERNAL] ";

%feature("docstring") casadi::ControlSimulatorInputIOSchemeVector "[INTERNAL]  Helper function for 'ControlSimulatorInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::ControlSimulatorInputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring") casadi::ControlSimulatorInputIOSchemeVector::repr "[INTERNAL]  Print a representation of the object.

";

%feature("docstring")
casadi::ControlSimulatorInputIOSchemeVector::getRepresentation "[INTERNAL]
Return a string with a representation (for SWIG)

";

%feature("docstring")
casadi::ControlSimulatorInputIOSchemeVector::getDescription "[INTERNAL]
Return a string with a description (for SWIG)

";

%feature("docstring")
casadi::ControlSimulatorInputIOSchemeVector::__getitem__ "[INTERNAL] ";


// File: classcasadi_1_1CplexSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::CplexSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::CplexSolver::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::CplexSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::CplexSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::CplexSolver::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::CplexSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::CplexSolver::generateNativeCode "

Generate native code in the interfaced language for debugging

";

%feature("docstring") casadi::CplexSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::CplexSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::CplexSolver::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::CplexSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::CplexSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::CplexSolver::schemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::CplexSolver::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::CplexSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::CplexSolver::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::CplexSolver::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::CplexSolver::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") casadi::CplexSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::CplexSolver::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::CplexSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::CplexSolver "

Interface to Cplex solver for sparse Quadratic Programs.

Solves the following strictly convex problem:

min          1/2 x' H x + g' x  x  subject to             LBA <= A x <= UBA
LBX <= x   <= UBX      with :       H sparse (n x n) positive definite
g dense  (n x 1)      n: number of decision variables (x)     nc: number of
constraints (A)

If H is not positive-definite, the solver should throw an error. Attila
Kozma, Joel Andersson

>Input scheme: casadi::QPSolverInput (QP_SOLVER_NUM_IN = 10) [qpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_H            | h                      | The square matrix H:   |
|                        |                        | sparse, (n x n). Only  |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical.     |
+------------------------+------------------------+------------------------+
| QP_SOLVER_G            | g                      | The vector g: dense,   |
|                        |                        | (n x 1) .              |
+------------------------+------------------------+------------------------+
| QP_SOLVER_A            | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LBA          | lba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_UBA          | uba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LBX          | lbx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_UBX          | ubx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_X0           | x0                     | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X0       | lam_x0                 | dense                  |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::QPSolverOutput (QP_SOLVER_NUM_OUT = 5) [qpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_X            | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| QP_SOLVER_COST         | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_A        | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X        | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| barrier_maxi | OT_INTEGER   | 2.100e+09    | Maximum      | casadi::Cple |
| ter          |              |              | number of    | xInternal    |
|              |              |              | barrier      |              |
|              |              |              | iterations.  |              |
+--------------+--------------+--------------+--------------+--------------+
| convex       | OT_BOOLEAN   | true         | Indicates if | casadi::Cple |
|              |              |              | the QP is    | xInternal    |
|              |              |              | convex or    |              |
|              |              |              | not (affects |              |
|              |              |              | only the     |              |
|              |              |              | barrier      |              |
|              |              |              | method).     |              |
+--------------+--------------+--------------+--------------+--------------+
| dep_check    | OT_STRING    | \"off\"        | Detect       | casadi::Cple |
|              |              |              | redundant    | xInternal    |
|              |              |              | constraints. |              |
|              |              |              | (automatic:- |              |
|              |              |              | 1|off:0|begi |              |
|              |              |              | n:1|end:2|bo |              |
|              |              |              | th:3)        |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| dump_filenam | OT_STRING    | \"qp.dat\"     | The filename | casadi::Cple |
| e            |              |              | to dump to.  | xInternal    |
+--------------+--------------+--------------+--------------+--------------+
| dump_to_file | OT_BOOLEAN   | false        | Dumps QP to  | casadi::Cple |
|              |              |              | file in      | xInternal    |
|              |              |              | CPLEX        |              |
|              |              |              | format.      |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| qp_method    | OT_STRING    | \"automatic\"  | Determines   | casadi::Cple |
|              |              |              | which CPLEX  | xInternal    |
|              |              |              | algorithm to |              |
|              |              |              | use. (automa |              |
|              |              |              | tic|primal_s |              |
|              |              |              | implex|dual_ |              |
|              |              |              | simplex|netw |              |
|              |              |              | ork|barrier| |              |
|              |              |              | sifting|conc |              |
|              |              |              | urrent|cross |              |
|              |              |              | over)        |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| simplex_maxi | OT_INTEGER   | 2.100e+09    | Maximum      | casadi::Cple |
| ter          |              |              | number of    | xInternal    |
|              |              |              | simplex      |              |
|              |              |              | iterations.  |              |
+--------------+--------------+--------------+--------------+--------------+
| tol          | OT_REAL      | 0.000        | Tolerance of | casadi::Cple |
|              |              |              | solver       | xInternal    |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+
| warm_start   | OT_BOOLEAN   | false        | Use warm     | casadi::Cple |
|              |              |              | start with   | xInternal    |
|              |              |              | simplex      |              |
|              |              |              | methods      |              |
|              |              |              | (affects     |              |
|              |              |              | only the     |              |
|              |              |              | simplex      |              |
|              |              |              | methods).    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: cplex_solver.hpp ";

%feature("docstring") casadi::CplexSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::CplexSolver::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::CplexSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::CplexSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::CplexSolver::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::CplexSolver::checkInputs "[INTERNAL]  Check
if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::CplexSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::CplexSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::CplexSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::CplexSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::CplexSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::CplexSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::CplexSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::CplexSolver::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::CplexSolver::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::CplexSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::CplexSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::CplexSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::CplexSolver::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::CplexSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::CplexSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::CplexSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::CplexSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::CplexSolver::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::CplexSolver::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::CplexSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::CplexSolver::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::CplexSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::CplexSolver::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::CplexSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::CplexSolver::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::CplexSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::CplexSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::CplexSolver::isInit "

Is initialized?

";

%feature("docstring") casadi::CplexSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::CplexSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::CplexSolver::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::CplexSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::CplexSolver::spCanEvaluate "[INTERNAL]  Is
the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::CplexSolver::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::CplexSolver::getOption "

get an option value

";

%feature("docstring") casadi::CplexSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::CplexSolver::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") casadi::CplexSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::CplexSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::CplexSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::CplexSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::CplexSolver::hasOption "

check if there is an option str

";

%feature("docstring") casadi::CplexSolver::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::CplexSolver::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::CplexSolver::isNull "

Is a null pointer?

";

%feature("docstring") casadi::CplexSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::CplexSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::CplexSolver::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::CplexSolver::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::CplexSolver::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::CplexSolver::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::CplexSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::CplexSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::CplexSolver::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::CplexSolver::CplexSolver "

>  casadi::CplexSolver::CplexSolver()
------------------------------------------------------------------------

Default constructor.

>  casadi::CplexSolver::CplexSolver(const QPStructure &st)
------------------------------------------------------------------------

Constructor.

Parameters:
-----------

st:  Problem structure

";

%feature("docstring") casadi::CplexSolver::setLPOptions "

Set options that make the QP solver more suitable for solving LPs.

";

%feature("docstring") casadi::CplexSolver::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::CplexSolver::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::CplexSolver::evaluate "

Evaluate.

";

%feature("docstring") casadi::CplexSolver::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") casadi::CplexSolver::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::CplexSolver::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::CplexSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::CplexSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::CplexSolver::hasSetOption "

check if the user has there is an option str

";


// File: classcasadi_1_1CSparse.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring") casadi::CSparse::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::CSparse::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::CSparse::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::CSparse::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::CSparse::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::CSparse::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::CSparse::getOptionEnumValue "[INTERNAL]  Get
the enum value corresponding to th certain option.

";

%feature("docstring") casadi::CSparse::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::CSparse::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::CSparse::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::CSparse::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::CSparse::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::CSparse::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::CSparse::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::CSparse::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::CSparse::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::CSparse::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::CSparse::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::CSparse::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::CSparse::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::CSparse::isNull "

Is a null pointer?

";

%feature("docstring") casadi::CSparse::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::CSparse::getOption "

get an option value

";

%feature("docstring") casadi::CSparse::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::CSparse "

LinearSolver with CSparse Interface.

Solves the linear system A*X = B or A^T*X = B for X with A square and non-
singular

If A is structurally singular, an error will be thrown during init. If A is
numerically singular, the prepare step will fail.

CSparse is an casadi::Function mapping from 2 inputs [ A (matrix), b
(vector)] to one output [x (vector)].

The usual procedure to use CSparse is:  init()

set the first input (A)

prepare()

set the second input (b)

solve()

Repeat steps 4 and 5 to work with other b vectors.

The method evaluate() combines the prepare() and solve() step and is
therefore more expensive if A is invariant.

>Input scheme: casadi::LinsolInput (LINSOL_NUM_IN = 3) [linsolIn]
+-----------+-------+------------------------------------------------+
| Full name | Short |                  Description                   |
+===========+=======+================================================+
| LINSOL_A  | A     | The square matrix A: sparse, (n x n). .        |
+-----------+-------+------------------------------------------------+
| LINSOL_B  | B     | The right-hand-side matrix b: dense, (n x m) . |
+-----------+-------+------------------------------------------------+

>Output scheme: casadi::LinsolOutput (LINSOL_NUM_OUT = 2) [linsolOut]
+-----------+-------+----------------------------------------------+
| Full name | Short |                 Description                  |
+===========+=======+==============================================+
| LINSOL_X  | X     | Solution to the linear system of equations . |
+-----------+-------+----------------------------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: csparse.hpp ";

%feature("docstring") casadi::CSparse::outputSchemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::CSparse::solve "

>  void casadi::LinearSolver::solve(bool transpose=false)
------------------------------------------------------------------------

Solve the system of equations, internal vector.

>  void casadi::LinearSolver::solve(double *x, int nrhs=1, bool transpose=false)
------------------------------------------------------------------------
[INTERNAL] 
 Solve the factorized system of equations.

>  MX casadi::LinearSolver::solve(const MX &A, const MX &B, bool transpose=false)
------------------------------------------------------------------------

Create a solve node.

";

%feature("docstring") casadi::CSparse::prepare "

Factorize the matrix.

";

%feature("docstring") casadi::CSparse::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::CSparse::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::CSparse::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::CSparse::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::CSparse::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::CSparse::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::CSparse::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::CSparse::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::CSparse::hasOption "

check if there is an option str

";

%feature("docstring") casadi::CSparse::setOptionByAllowedIndex "[INTERNAL]
Set a certain option by giving its index into the allowed values.

";

%feature("docstring") casadi::CSparse::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::CSparse::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::CSparse::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::CSparse::callDerivative "[INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring") casadi::CSparse::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::CSparse::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::CSparse::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::CSparse::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::CSparse::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::CSparse::inputSchemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::CSparse::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::CSparse::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::CSparse::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::CSparse::evaluate "

Evaluate.

";

%feature("docstring") casadi::CSparse::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::CSparse::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::CSparse::assignNode "[INTERNAL]  Assign the
node to a node class pointer (or null)

";

%feature("docstring") casadi::CSparse::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::CSparse::assertInit "[INTERNAL]  Assert that
it is initialized

";

%feature("docstring") casadi::CSparse::spCanEvaluate "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::CSparse::spSolve "[INTERNAL]  Propagate
sparsity through a linear solve

";

%feature("docstring") casadi::CSparse::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::CSparse::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::CSparse::isInit "

Is initialized?

";

%feature("docstring") casadi::CSparse::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::CSparse::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::CSparse::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::CSparse::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::CSparse::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::CSparse::swap "[INTERNAL]  Swap content with
another instance.

";

%feature("docstring") casadi::CSparse::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::CSparse::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::CSparse::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::CSparse::CSparse "

>  casadi::CSparse::CSparse()
------------------------------------------------------------------------

Default (empty) constructor.

>  casadi::CSparse::CSparse(const Sparsity &sp, int nrhs=1)
------------------------------------------------------------------------

Create a linear solver given a sparsity pattern.

";

%feature("docstring") casadi::CSparse::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::CSparse::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::CSparse::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") casadi::CSparse::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::CSparse::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::CSparse::prepared "

Check if prepared.

";

%feature("docstring") casadi::CSparse::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::CSparse::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::CSparse::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::CSparse::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::CSparse::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::CSparse::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::CSparse::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::CSparse::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::CSparse::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::CSparse::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::CSparse::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::CSparse::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::CSparse::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::CSparse::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::CSparse::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::CSparse::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::CSparse::getOptionNames "

INTERNAL.

Get a list of all option names

";


// File: classcasadi_1_1CSparseCholesky.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::CSparseCholesky::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::CSparseCholesky::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::CSparseCholesky::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::CSparseCholesky::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::CSparseCholesky::assignNodeNoCount "[INTERNAL]  Assign the node to a node class pointer without reference
counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::CSparseCholesky::getFactorization "

Obtain a numeric Cholesky factorization.

";

%feature("docstring") casadi::CSparseCholesky::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::CSparseCholesky::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::CSparseCholesky::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::CSparseCholesky::spCanEvaluate "[INTERNAL]
Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::CSparseCholesky::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") casadi::CSparseCholesky::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::CSparseCholesky::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::CSparseCholesky::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::CSparseCholesky::prepare "

Factorize the matrix.

";

%feature("docstring") casadi::CSparseCholesky::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::CSparseCholesky::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::CSparseCholesky::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::CSparseCholesky::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::CSparseCholesky::printPtr "[INTERNAL]  Print
the pointer to the internal class

";

%feature("docstring") casadi::CSparseCholesky::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::CSparseCholesky::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::CSparseCholesky::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::CSparseCholesky::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::CSparseCholesky::evaluate "

Evaluate.

";

%feature("docstring") casadi::CSparseCholesky::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::CSparseCholesky::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::CSparseCholesky::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::CSparseCholesky::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::CSparseCholesky::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::CSparseCholesky::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::CSparseCholesky::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::CSparseCholesky::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") casadi::CSparseCholesky::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::CSparseCholesky::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::CSparseCholesky::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::CSparseCholesky::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::CSparseCholesky::hasOption "

check if there is an option str

";

%feature("docstring") casadi::CSparseCholesky::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::CSparseCholesky::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::CSparseCholesky::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::CSparseCholesky::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::CSparseCholesky::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::CSparseCholesky::isNull "

Is a null pointer?

";

%feature("docstring") casadi::CSparseCholesky::clone "[INTERNAL]  Deep
copy.

";

%feature("docstring") casadi::CSparseCholesky::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::CSparseCholesky::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::CSparseCholesky::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") casadi::CSparseCholesky::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::CSparseCholesky::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::CSparseCholesky::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::CSparseCholesky::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::CSparseCholesky::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::CSparseCholesky::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::CSparseCholesky::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::CSparseCholesky::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::CSparseCholesky::solve "

>  void casadi::LinearSolver::solve(bool transpose=false)
------------------------------------------------------------------------

Solve the system of equations, internal vector.

>  void casadi::LinearSolver::solve(double *x, int nrhs=1, bool transpose=false)
------------------------------------------------------------------------
[INTERNAL] 
 Solve the factorized system of equations.

>  MX casadi::LinearSolver::solve(const MX &A, const MX &B, bool transpose=false)
------------------------------------------------------------------------

Create a solve node.

";

%feature("docstring") casadi::CSparseCholesky "

LinearSolver with CSparseCholesky Interface.

Solves the linear system A*X = B or A^T*X = B for X with A square and non-
singular

If A is structurally singular, an error will be thrown during init. If A is
numerically singular, the prepare step will fail.

CSparseCholesky is an casadi::Function mapping from 2 inputs [ A (matrix), b
(vector)] to one output [x (vector)].

*  A = LL' *    Ax = b *    LL'x = b *    L'x = L^-1 b *

The usual procedure to use CSparseCholesky is:  init()

set the first input (A)

prepare()

set the second input (b)

solve()

Repeat steps 4 and 5 to work with other b vectors.

The method evaluate() combines the prepare() and solve() step and is
therefore more expensive if A is invariant.

>Input scheme: casadi::LinsolInput (LINSOL_NUM_IN = 3) [linsolIn]
+-----------+-------+------------------------------------------------+
| Full name | Short |                  Description                   |
+===========+=======+================================================+
| LINSOL_A  | A     | The square matrix A: sparse, (n x n). .        |
+-----------+-------+------------------------------------------------+
| LINSOL_B  | B     | The right-hand-side matrix b: dense, (n x m) . |
+-----------+-------+------------------------------------------------+

>Output scheme: casadi::LinsolOutput (LINSOL_NUM_OUT = 2) [linsolOut]
+-----------+-------+----------------------------------------------+
| Full name | Short |                 Description                  |
+===========+=======+==============================================+
| LINSOL_X  | X     | Solution to the linear system of equations . |
+-----------+-------+----------------------------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: csparse_cholesky.hpp ";

%feature("docstring") casadi::CSparseCholesky::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::CSparseCholesky::spSolve "[INTERNAL]
Propagate sparsity through a linear solve

";

%feature("docstring") casadi::CSparseCholesky::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::CSparseCholesky::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::CSparseCholesky::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::CSparseCholesky::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::CSparseCholesky::isInit "

Is initialized?

";

%feature("docstring") casadi::CSparseCholesky::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::CSparseCholesky::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::CSparseCholesky::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::CSparseCholesky::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::CSparseCholesky::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::CSparseCholesky::getFactorizationSparsity "

Obtain a symbolic Cholesky factorization.

";

%feature("docstring") casadi::CSparseCholesky::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::CSparseCholesky::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::CSparseCholesky::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::CSparseCholesky::getCount "[INTERNAL]  Get
the reference count.

";

%feature("docstring") casadi::CSparseCholesky::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::CSparseCholesky::checkInputs "[INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::CSparseCholesky::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::CSparseCholesky::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::CSparseCholesky::solveL "

Solve the system of equations Lx = b

";

%feature("docstring") casadi::CSparseCholesky::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::CSparseCholesky::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::CSparseCholesky::spInit "[INTERNAL]  Reset
the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::CSparseCholesky::prepared "

Check if prepared.

";

%feature("docstring") casadi::CSparseCholesky::CSparseCholesky "

>  casadi::CSparseCholesky::CSparseCholesky()
------------------------------------------------------------------------

Default (empty) constructor.

>  casadi::CSparseCholesky::CSparseCholesky(const Sparsity &sp, int nrhs=1)
------------------------------------------------------------------------

Create a linear solver given a sparsity pattern.

";

%feature("docstring") casadi::CSparseCholesky::getOption "

get an option value

";

%feature("docstring") casadi::CSparseCholesky::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::CSparseCholesky::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::CSparseCholesky::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::CSparseCholesky::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::CSparseCholesky::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::CSparseCholesky::schemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::CSparseCholesky::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::CSparseCholesky::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::CSparseCholesky::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") casadi::CSparseCholesky::inputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::CSparseCholesky::outputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::CSparseCholesky::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";


// File: classcasadi_1_1CustomEvaluate.xml
%feature("docstring") casadi::CustomEvaluate::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::CustomEvaluate::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::CustomEvaluate::checkNode "[INTERNAL]  Assert
that the node is pointing to the right type of object

";

%feature("docstring") casadi::CustomEvaluate::CustomEvaluate "

>  casadi::CustomEvaluate::CustomEvaluate()
------------------------------------------------------------------------

Default constructor.

>  casadi::CustomEvaluate::CustomEvaluate(CustomEvaluateCPtr ptr)
------------------------------------------------------------------------

Construct from C pointer.

";

%feature("docstring") casadi::CustomEvaluate::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") casadi::CustomEvaluate::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::CustomEvaluate::isInit "

Is initialized?

";

%feature("docstring") casadi::CustomEvaluate::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::CustomEvaluate::isNull "

Is a null pointer?

";

%feature("docstring") casadi::CustomEvaluate::printPtr "[INTERNAL]  Print
the pointer to the internal class

";

%feature("docstring") casadi::CustomEvaluate::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::CustomEvaluate "

CustomEvaluate.

In C++, supply a CustomEvaluateCPtr function pointer

In python, supply a callable, annotated with pyevaluate decorator

C++ includes: functor.hpp ";

%feature("docstring") casadi::CustomEvaluate::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") casadi::CustomEvaluate::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::CustomEvaluate::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") casadi::CustomEvaluate::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::CustomEvaluate::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::CustomEvaluate::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::CustomEvaluate::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::CustomEvaluate::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";


// File: classcasadi_1_1CustomFunction.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::CustomFunction::inputScheme " [INTERNAL]  Access input/output
scheme.

";

%feature("docstring") casadi::CustomFunction::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::CustomFunction::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::CustomFunction::checkNode "

Check if the pointer points towards a valid object.

";

%feature("docstring") casadi::CustomFunction::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::CustomFunction::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::CustomFunction::hasOption "

check if there is an option str

";

%feature("docstring") casadi::CustomFunction::checkInputs "[INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::CustomFunction::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::CustomFunction::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::CustomFunction::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::CustomFunction::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::CustomFunction::spCanEvaluate "[INTERNAL]  Is
the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::CustomFunction::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::CustomFunction::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::CustomFunction::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::CustomFunction::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::CustomFunction::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::CustomFunction::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::CustomFunction::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") casadi::CustomFunction::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::CustomFunction::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") casadi::CustomFunction::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") casadi::CustomFunction::getOption "

get an option value

";

%feature("docstring") casadi::CustomFunction::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::CustomFunction::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::CustomFunction::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::CustomFunction::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::CustomFunction::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::CustomFunction::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::CustomFunction::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::CustomFunction::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::CustomFunction::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::CustomFunction::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::CustomFunction::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::CustomFunction::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::CustomFunction::isInit "

Is initialized?

";

%feature("docstring") casadi::CustomFunction::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") casadi::CustomFunction::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::CustomFunction::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::CustomFunction::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::CustomFunction::schemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::CustomFunction::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::CustomFunction::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::CustomFunction::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::CustomFunction::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::CustomFunction::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::CustomFunction::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::CustomFunction "

Interface to a custom function.

Joel Andersson

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: custom_function.hpp ";

%feature("docstring") casadi::CustomFunction::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::CustomFunction::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::CustomFunction::CustomFunction "

>  casadi::CustomFunction::CustomFunction(const CustomEvaluate &c_fcn, const std::vector< Sparsity > &inputscheme, const std::vector< Sparsity > &outputscheme)

>  casadi::CustomFunction::CustomFunction(const CustomEvaluate &c_fcn, const IOSchemeVector< Sparsity > &inputscheme, const std::vector< Sparsity > &outputscheme)

>  casadi::CustomFunction::CustomFunction(const CustomEvaluate &c_fcn, const std::vector< Sparsity > &inputscheme, const IOSchemeVector< Sparsity > &outputscheme)

>  casadi::CustomFunction::CustomFunction(const CustomEvaluate &c_fcn, const IOSchemeVector< Sparsity > &inputscheme, const IOSchemeVector< Sparsity > &outputscheme)
------------------------------------------------------------------------

Create a function with input/output schemes given.

>  casadi::CustomFunction::CustomFunction()
------------------------------------------------------------------------

default constructor

>  casadi::CustomFunction::CustomFunction(const CustomEvaluate &c_fcn)
------------------------------------------------------------------------

Create a function, user sets inputs outputs manually.

";

%feature("docstring") casadi::CustomFunction::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::CustomFunction::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::CustomFunction::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::CustomFunction::evaluate "

Evaluate.

";

%feature("docstring") casadi::CustomFunction::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::CustomFunction::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::CustomFunction::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::CustomFunction::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::CustomFunction::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::CustomFunction::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::CustomFunction::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::CustomFunction::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::CustomFunction::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::CustomFunction::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::CustomFunction::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::CustomFunction::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::CustomFunction::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::CustomFunction::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::CustomFunction::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::CustomFunction::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::CustomFunction::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::CustomFunction::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::CustomFunction::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::CustomFunction::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::CustomFunction::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::CustomFunction::printPtr "[INTERNAL]  Print
the pointer to the internal class

";

%feature("docstring") casadi::CustomFunction::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::CustomFunction::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::CustomFunction::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::CustomFunction::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::CustomFunction::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::CustomFunction::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::CustomFunction::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::CustomFunction::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::CustomFunction::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::CustomFunction::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::CustomFunction::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::CustomFunction::isNull "

Is a null pointer?

";

%feature("docstring") casadi::CustomFunction::getInputScheme "

Get input scheme.

";


// File: classcasadi_1_1CVodesIntegrator.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::CVodesIntegrator::weak " [INTERNAL]  Get a weak reference to the
object.

";

%feature("docstring") casadi::CVodesIntegrator::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") casadi::CVodesIntegrator::hasOption "

check if there is an option str

";

%feature("docstring") casadi::CVodesIntegrator "

Interface to CVodes from the Sundials suite.

Base class for integrators. Solves an initial value problem (IVP) coupled to
a terminal value problem with differential equation given as an implicit ODE
coupled to an algebraic equation and a set of quadratures: Initial
conditions at t=t0  x(t0)  = x0  q(t0)  = 0   Forward integration from t=t0
to t=tf  der(x) = function(x, z, p, t) Forward ODE  0 = fz(x, z, p, t)
Forward algebraic equations  der(q) = fq(x, z, p, t)
Forward quadratures   Terminal conditions at t=tf  rx(tf)  = rx0  rq(tf)  =
0 Backward integration from t=tf to t=t0  der(rx) = gx(rx, rz, rp, x, z, p,
t)        Backward ODE  0 = gz(rx, rz, rp, x, z, p, t) Backward algebraic
equations  der(rq) = gq(rx, rz, rp, x, z, p, t) Backward quadratures   where
we assume that both the forward and backwards integrations are index-1
(i.e. dfz/dz, dgz/drz are invertible) and furthermore that  gx, gz and gq
have a linear dependency on rx, rz and rp.

A call to evaluate will integrate to the end.

You can retrieve the entire state trajectory as follows, after the evaluate
call: Call reset. Then call integrate(t_i) and getOuput for a series of
times t_i.

>Input scheme: casadi::IntegratorInput (INTEGRATOR_NUM_IN = 7) [integratorIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_X0          | x0                     | Differential state at  |
|                        |                        | the initial time .     |
+------------------------+------------------------+------------------------+
| INTEGRATOR_P           | p                      | Parameters .           |
+------------------------+------------------------+------------------------+
| INTEGRATOR_Z0          | z0                     | Initial guess for the  |
|                        |                        | algebraic variable .   |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RX0         | rx0                    | Backward differential  |
|                        |                        | state at the final     |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RP          | rp                     | Backward parameter     |
|                        |                        | vector .               |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZ0         | rz0                    | Initial guess for the  |
|                        |                        | backwards algebraic    |
|                        |                        | variable .             |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::IntegratorOutput (INTEGRATOR_NUM_OUT = 7) [integratorOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_XF          | xf                     | Differential state at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_QF          | qf                     | Quadrature state at    |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_ZF          | zf                     | Algebraic variable at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RXF         | rxf                    | Backward differential  |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RQF         | rqf                    | Backward quadrature    |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZF         | rzf                    | Backward algebraic     |
|                        |                        | variable at the        |
|                        |                        | initial time .         |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| abstol       | OT_REAL      | 0.000        | Absolute     | casadi::Sund |
|              |              |              | tolerence    | ialsInternal |
|              |              |              | for the IVP  |              |
|              |              |              | solution     |              |
+--------------+--------------+--------------+--------------+--------------+
| abstolB      | OT_REAL      | GenericType( | Absolute     | casadi::Sund |
|              |              | )            | tolerence    | ialsInternal |
|              |              |              | for the      |              |
|              |              |              | adjoint      |              |
|              |              |              | sensitivity  |              |
|              |              |              | solution     |              |
|              |              |              | [default:    |              |
|              |              |              | equal to     |              |
|              |              |              | abstol]      |              |
+--------------+--------------+--------------+--------------+--------------+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| augmented_op | OT_DICTIONAR | GenericType( | Options to   | casadi::Inte |
| tions        | Y            | )            | be passed    | gratorIntern |
|              |              |              | down to the  | al           |
|              |              |              | augmented    |              |
|              |              |              | integrator,  |              |
|              |              |              | if one is    |              |
|              |              |              | constructed. |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| disable_inte | OT_BOOLEAN   | false        | Disable      | casadi::CVod |
| rnal_warning |              |              | CVodes       | esInternal   |
| s            |              |              | internal     |              |
|              |              |              | warning      |              |
|              |              |              | messages     |              |
+--------------+--------------+--------------+--------------+--------------+
| exact_jacobi | OT_BOOLEAN   | true         | Use exact    | casadi::Sund |
| an           |              |              | Jacobian     | ialsInternal |
|              |              |              | information  |              |
|              |              |              | for the      |              |
|              |              |              | forward      |              |
|              |              |              | integration  |              |
+--------------+--------------+--------------+--------------+--------------+
| exact_jacobi | OT_BOOLEAN   | GenericType( | Use exact    | casadi::Sund |
| anB          |              | )            | Jacobian     | ialsInternal |
|              |              |              | information  |              |
|              |              |              | for the      |              |
|              |              |              | backward     |              |
|              |              |              | integration  |              |
|              |              |              | [default:    |              |
|              |              |              | equal to exa |              |
|              |              |              | ct_jacobian] |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_augme | OT_BOOLEAN   | true         | If DAE       | casadi::Inte |
| nted         |              |              | callback     | gratorIntern |
|              |              |              | functions    | al           |
|              |              |              | are          |              |
|              |              |              | SXFunction , |              |
|              |              |              | have         |              |
|              |              |              | augmented    |              |
|              |              |              | DAE callback |              |
|              |              |              | function     |              |
|              |              |              | also be      |              |
|              |              |              | SXFunction . |              |
+--------------+--------------+--------------+--------------+--------------+
| finite_diffe | OT_BOOLEAN   | false        | Use finite   | casadi::Sund |
| rence_fsens  |              |              | differences  | ialsInternal |
|              |              |              | to           |              |
|              |              |              | approximate  |              |
|              |              |              | the forward  |              |
|              |              |              | sensitivity  |              |
|              |              |              | equations    |              |
|              |              |              | (if AD is    |              |
|              |              |              | not          |              |
|              |              |              | available)   |              |
+--------------+--------------+--------------+--------------+--------------+
| fsens_abstol | OT_REAL      | GenericType( | Absolute     | casadi::Sund |
|              |              | )            | tolerence    | ialsInternal |
|              |              |              | for the      |              |
|              |              |              | forward      |              |
|              |              |              | sensitivity  |              |
|              |              |              | solution     |              |
|              |              |              | [default:    |              |
|              |              |              | equal to     |              |
|              |              |              | abstol]      |              |
+--------------+--------------+--------------+--------------+--------------+
| fsens_all_at | OT_BOOLEAN   | true         | Calculate    | casadi::CVod |
| _once        |              |              | all right    | esInternal   |
|              |              |              | hand sides   |              |
|              |              |              | of the       |              |
|              |              |              | sensitivity  |              |
|              |              |              | equations at |              |
|              |              |              | once         |              |
+--------------+--------------+--------------+--------------+--------------+
| fsens_err_co | OT_BOOLEAN   | true         | include the  | casadi::Sund |
| n            |              |              | forward sens | ialsInternal |
|              |              |              | itivities in |              |
|              |              |              | all error    |              |
|              |              |              | controls     |              |
+--------------+--------------+--------------+--------------+--------------+
| fsens_reltol | OT_REAL      | GenericType( | Relative     | casadi::Sund |
|              |              | )            | tolerence    | ialsInternal |
|              |              |              | for the      |              |
|              |              |              | forward      |              |
|              |              |              | sensitivity  |              |
|              |              |              | solution     |              |
|              |              |              | [default:    |              |
|              |              |              | equal to     |              |
|              |              |              | reltol]      |              |
+--------------+--------------+--------------+--------------+--------------+
| fsens_scalin | OT_REALVECTO | GenericType( | Scaling      | casadi::Sund |
| g_factors    | R            | )            | factor for   | ialsInternal |
|              |              |              | the          |              |
|              |              |              | components   |              |
|              |              |              | if finite    |              |
|              |              |              | differences  |              |
|              |              |              | is used      |              |
+--------------+--------------+--------------+--------------+--------------+
| fsens_sensit | OT_INTEGERVE | GenericType( | Specifies    | casadi::Sund |
| iviy_paramet | CTOR         | )            | which        | ialsInternal |
| ers          |              |              | components   |              |
|              |              |              | will be used |              |
|              |              |              | when         |              |
|              |              |              | estimating   |              |
|              |              |              | the          |              |
|              |              |              | sensitivity  |              |
|              |              |              | equations    |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| interpolatio | OT_STRING    | \"hermite\"    | Type of inte | casadi::Sund |
| n_type       |              |              | rpolation    | ialsInternal |
|              |              |              | for the      |              |
|              |              |              | adjoint sens |              |
|              |              |              | itivities (h |              |
|              |              |              | ermite|polyn |              |
|              |              |              | omial)       |              |
+--------------+--------------+--------------+--------------+--------------+
| iterative_so | OT_STRING    | \"gmres\"      | (gmres|bcgst | casadi::Sund |
| lver         |              |              | ab|tfqmr)    | ialsInternal |
+--------------+--------------+--------------+--------------+--------------+
| iterative_so | OT_STRING    | GenericType( | (gmres|bcgst | casadi::Sund |
| lverB        |              | )            | ab|tfqmr)    | ialsInternal |
+--------------+--------------+--------------+--------------+--------------+
| linear_multi | OT_STRING    | \"bdf\"        | Integrator   | casadi::CVod |
| step_method  |              |              | scheme       | esInternal   |
|              |              |              | (bdf|adams)  |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_LINEARSOL | GenericType( | A custom     | casadi::Sund |
| r            | VER          | )            | linear       | ialsInternal |
|              |              |              | solver       |              |
|              |              |              | creator      |              |
|              |              |              | function     |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_LINEARSOL | GenericType( | A custom     | casadi::Sund |
| rB           | VER          | )            | linear       | ialsInternal |
|              |              |              | solver       |              |
|              |              |              | creator      |              |
|              |              |              | function for |              |
|              |              |              | backwards    |              |
|              |              |              | integration  |              |
|              |              |              | [default:    |              |
|              |              |              | equal to lin |              |
|              |              |              | ear_solver]  |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_DICTIONAR | GenericType( | Options to   | casadi::Sund |
| r_options    | Y            | )            | be passed to | ialsInternal |
|              |              |              | the linear   |              |
|              |              |              | solver       |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_DICTIONAR | GenericType( | Options to   | casadi::Sund |
| r_optionsB   | Y            | )            | be passed to | ialsInternal |
|              |              |              | the linear   |              |
|              |              |              | solver for   |              |
|              |              |              | backwards    |              |
|              |              |              | integration  |              |
|              |              |              | [default:    |              |
|              |              |              | equal to lin |              |
|              |              |              | ear_solver_o |              |
|              |              |              | ptions]      |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_STRING    | \"dense\"      | (user_define | casadi::Sund |
| r_type       |              |              | d|dense|band | ialsInternal |
|              |              |              | ed|iterative |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_STRING    | GenericType( | (user_define | casadi::Sund |
| r_typeB      |              | )            | d|dense|band | ialsInternal |
|              |              |              | ed|iterative |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| lower_bandwi | OT_INTEGER   | GenericType( | Lower band-  | casadi::Sund |
| dth          |              | )            | width of     | ialsInternal |
|              |              |              | banded       |              |
|              |              |              | Jacobian (es |              |
|              |              |              | timations)   |              |
+--------------+--------------+--------------+--------------+--------------+
| lower_bandwi | OT_INTEGER   | GenericType( | lower band-  | casadi::Sund |
| dthB         |              | )            | width of     | ialsInternal |
|              |              |              | banded       |              |
|              |              |              | jacobians    |              |
|              |              |              | for backward |              |
|              |              |              | integration  |              |
|              |              |              | [default:    |              |
|              |              |              | equal to low |              |
|              |              |              | er_bandwidth |              |
|              |              |              | ]            |              |
+--------------+--------------+--------------+--------------+--------------+
| max_krylov   | OT_INTEGER   | 10           | Maximum      | casadi::Sund |
|              |              |              | Krylov       | ialsInternal |
|              |              |              | subspace     |              |
|              |              |              | size         |              |
+--------------+--------------+--------------+--------------+--------------+
| max_krylovB  | OT_INTEGER   | GenericType( | Maximum      | casadi::Sund |
|              |              | )            | krylov       | ialsInternal |
|              |              |              | subspace     |              |
|              |              |              | size         |              |
+--------------+--------------+--------------+--------------+--------------+
| max_multiste | OT_INTEGER   | 5            |              | casadi::Sund |
| p_order      |              |              |              | ialsInternal |
+--------------+--------------+--------------+--------------+--------------+
| max_num_step | OT_INTEGER   | 10000        | Maximum      | casadi::Sund |
| s            |              |              | number of    | ialsInternal |
|              |              |              | integrator   |              |
|              |              |              | steps        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp | casadi::CVod |
|              |              |              | uts)  (res|r | esInternal   |
|              |              |              | esB|resQB|re |              |
|              |              |              | set|psetupB| |              |
|              |              |              | djacB)       |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| nonlinear_so | OT_STRING    | \"newton\"     | (newton|func | casadi::CVod |
| lver_iterati |              |              | tional)      | esInternal   |
| on           |              |              |              |              |
+--------------+--------------+--------------+--------------+--------------+
| pretype      | OT_STRING    | \"none\"       | (none|left|r | casadi::Sund |
|              |              |              | ight|both)   | ialsInternal |
+--------------+--------------+--------------+--------------+--------------+
| pretypeB     | OT_STRING    | GenericType( | (none|left|r | casadi::Sund |
|              |              | )            | ight|both)   | ialsInternal |
+--------------+--------------+--------------+--------------+--------------+
| print_stats  | OT_BOOLEAN   | false        | Print out    | casadi::Inte |
|              |              |              | statistics   | gratorIntern |
|              |              |              | after        | al           |
|              |              |              | integration  |              |
+--------------+--------------+--------------+--------------+--------------+
| quad_err_con | OT_BOOLEAN   | false        | Should the   | casadi::Sund |
|              |              |              | quadratures  | ialsInternal |
|              |              |              | affect the   |              |
|              |              |              | step size    |              |
|              |              |              | control      |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| reltol       | OT_REAL      | 0.000        | Relative     | casadi::Sund |
|              |              |              | tolerence    | ialsInternal |
|              |              |              | for the IVP  |              |
|              |              |              | solution     |              |
+--------------+--------------+--------------+--------------+--------------+
| reltolB      | OT_REAL      | GenericType( | Relative     | casadi::Sund |
|              |              | )            | tolerence    | ialsInternal |
|              |              |              | for the      |              |
|              |              |              | adjoint      |              |
|              |              |              | sensitivity  |              |
|              |              |              | solution     |              |
|              |              |              | [default:    |              |
|              |              |              | equal to     |              |
|              |              |              | reltol]      |              |
+--------------+--------------+--------------+--------------+--------------+
| sensitivity_ | OT_STRING    | \"simultaneou | (simultaneou | casadi::Sund |
| method       |              | s\"           | s|staggered) | ialsInternal |
+--------------+--------------+--------------+--------------+--------------+
| steps_per_ch | OT_INTEGER   | 20           | Number of    | casadi::Sund |
| eckpoint     |              |              | steps        | ialsInternal |
|              |              |              | between two  |              |
|              |              |              | consecutive  |              |
|              |              |              | checkpoints  |              |
+--------------+--------------+--------------+--------------+--------------+
| stop_at_end  | OT_BOOLEAN   | true         | Stop the     | casadi::Sund |
|              |              |              | integrator   | ialsInternal |
|              |              |              | at the end   |              |
|              |              |              | of the       |              |
|              |              |              | interval     |              |
+--------------+--------------+--------------+--------------+--------------+
| t0           | OT_REAL      | 0            | Beginning of | casadi::Inte |
|              |              |              | the time     | gratorIntern |
|              |              |              | horizon      | al           |
+--------------+--------------+--------------+--------------+--------------+
| tf           | OT_REAL      | 1            | End of the   | casadi::Inte |
|              |              |              | time horizon | gratorIntern |
|              |              |              |              | al           |
+--------------+--------------+--------------+--------------+--------------+
| upper_bandwi | OT_INTEGER   | GenericType( | Upper band-  | casadi::Sund |
| dth          |              | )            | width of     | ialsInternal |
|              |              |              | banded       |              |
|              |              |              | Jacobian (es |              |
|              |              |              | timations)   |              |
+--------------+--------------+--------------+--------------+--------------+
| upper_bandwi | OT_INTEGER   | GenericType( | Upper band-  | casadi::Sund |
| dthB         |              | )            | width of     | ialsInternal |
|              |              |              | banded       |              |
|              |              |              | jacobians    |              |
|              |              |              | for backward |              |
|              |              |              | integration  |              |
|              |              |              | [default:    |              |
|              |              |              | equal to upp |              |
|              |              |              | er_bandwidth |              |
|              |              |              | ]            |              |
+--------------+--------------+--------------+--------------+--------------+
| use_precondi | OT_BOOLEAN   | false        | Precondition | casadi::Sund |
| tioner       |              |              | an iterative | ialsInternal |
|              |              |              | solver       |              |
+--------------+--------------+--------------+--------------+--------------+
| use_precondi | OT_BOOLEAN   | GenericType( | Precondition | casadi::Sund |
| tionerB      |              | )            | an iterative | ialsInternal |
|              |              |              | solver for   |              |
|              |              |              | the          |              |
|              |              |              | backwards    |              |
|              |              |              | problem      |              |
|              |              |              | [default:    |              |
|              |              |              | equal to use |              |
|              |              |              | _preconditio |              |
|              |              |              | ner]         |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available monitors
+---------+--------------------------+
|   Id    |         Used in          |
+=========+==========================+
| djacB   | casadi::CVodesInternal   |
+---------+--------------------------+
| inputs  | casadi::FunctionInternal |
+---------+--------------------------+
| outputs | casadi::FunctionInternal |
+---------+--------------------------+
| psetupB | casadi::CVodesInternal   |
+---------+--------------------------+
| res     | casadi::CVodesInternal   |
+---------+--------------------------+
| resB    | casadi::CVodesInternal   |
+---------+--------------------------+
| resQB   | casadi::CVodesInternal   |
+---------+--------------------------+
| reset   | casadi::CVodesInternal   |
+---------+--------------------------+

>List of available stats
+-------------+------------------------+
|     Id      |        Used in         |
+=============+========================+
| nlinsetups  | casadi::CVodesInternal |
+-------------+------------------------+
| nlinsetupsB | casadi::CVodesInternal |
+-------------+------------------------+
| nsteps      | casadi::CVodesInternal |
+-------------+------------------------+
| nstepsB     | casadi::CVodesInternal |
+-------------+------------------------+

Diagrams

C++ includes: cvodes_integrator.hpp ";

%feature("docstring") casadi::CVodesIntegrator::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::CVodesIntegrator::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::CVodesIntegrator::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::CVodesIntegrator::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::CVodesIntegrator::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::CVodesIntegrator::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::CVodesIntegrator::assignNodeNoCount "[INTERNAL]  Assign the node to a node class pointer without reference
counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::CVodesIntegrator::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::CVodesIntegrator::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::CVodesIntegrator::spInit "[INTERNAL]  Reset
the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::CVodesIntegrator::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::CVodesIntegrator::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::CVodesIntegrator::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::CVodesIntegrator::printStats "

Print solver statistics.

";

%feature("docstring") casadi::CVodesIntegrator::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::CVodesIntegrator::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::CVodesIntegrator::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::CVodesIntegrator::integrateB "

Integrate backward until a specified time point.

";

%feature("docstring") casadi::CVodesIntegrator::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::CVodesIntegrator::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::CVodesIntegrator::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::CVodesIntegrator::CVodesIntegrator "

>  casadi::CVodesIntegrator::CVodesIntegrator()
------------------------------------------------------------------------

Default constructor.

>  casadi::CVodesIntegrator::CVodesIntegrator(const Function &f, const Function &g=Function())
------------------------------------------------------------------------

Create an integrator for explicit ODEs.

Parameters:
-----------

f:  dynamical system

>Input scheme: casadi::DAEInput (DAE_NUM_IN = 5) [daeIn]
+-----------+-------+----------------------------+
| Full name | Short |        Description         |
+===========+=======+============================+
| DAE_X     | x     | Differential state .       |
+-----------+-------+----------------------------+
| DAE_Z     | z     | Algebraic state .          |
+-----------+-------+----------------------------+
| DAE_P     | p     | Parameter .                |
+-----------+-------+----------------------------+
| DAE_T     | t     | Explicit time dependence . |
+-----------+-------+----------------------------+

>Output scheme: casadi::DAEOutput (DAE_NUM_OUT = 4) [daeOut]
+-----------+-------+--------------------------------------------+
| Full name | Short |                Description                 |
+===========+=======+============================================+
| DAE_ODE   | ode   | Right hand side of the implicit ODE .      |
+-----------+-------+--------------------------------------------+
| DAE_ALG   | alg   | Right hand side of algebraic equations .   |
+-----------+-------+--------------------------------------------+
| DAE_QUAD  | quad  | Right hand side of quadratures equations . |
+-----------+-------+--------------------------------------------+

Parameters:
-----------

g:  backwards system

>Input scheme: casadi::RDAEInput (RDAE_NUM_IN = 8) [rdaeIn]
+-----------+-------+-------------------------------+
| Full name | Short |          Description          |
+===========+=======+===============================+
| RDAE_RX   | rx    | Backward differential state . |
+-----------+-------+-------------------------------+
| RDAE_RZ   | rz    | Backward algebraic state .    |
+-----------+-------+-------------------------------+
| RDAE_RP   | rp    | Backward parameter vector .   |
+-----------+-------+-------------------------------+
| RDAE_X    | x     | Forward differential state .  |
+-----------+-------+-------------------------------+
| RDAE_Z    | z     | Forward algebraic state .     |
+-----------+-------+-------------------------------+
| RDAE_P    | p     | Parameter vector .            |
+-----------+-------+-------------------------------+
| RDAE_T    | t     | Explicit time dependence .    |
+-----------+-------+-------------------------------+

>Output scheme: casadi::RDAEOutput (RDAE_NUM_OUT = 4) [rdaeOut]
+-----------+-------+-------------------------------------------+
| Full name | Short |                Description                |
+===========+=======+===========================================+
| RDAE_ODE  | ode   | Right hand side of ODE. .                 |
+-----------+-------+-------------------------------------------+
| RDAE_ALG  | alg   | Right hand side of algebraic equations. . |
+-----------+-------+-------------------------------------------+
| RDAE_QUAD | quad  | Right hand side of quadratures. .         |
+-----------+-------+-------------------------------------------+

";

%feature("docstring") casadi::CVodesIntegrator::isNull "

Is a null pointer?

";

%feature("docstring") casadi::CVodesIntegrator::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::CVodesIntegrator::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::CVodesIntegrator::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::CVodesIntegrator::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::CVodesIntegrator::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::CVodesIntegrator::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::CVodesIntegrator::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::CVodesIntegrator::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::CVodesIntegrator::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::CVodesIntegrator::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::CVodesIntegrator::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::CVodesIntegrator::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::CVodesIntegrator::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") casadi::CVodesIntegrator::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::CVodesIntegrator::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::CVodesIntegrator::setStopTime "

Set a stop time for the forward integration.

";

%feature("docstring") casadi::CVodesIntegrator::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::CVodesIntegrator::integrate "

Integrate forward until a specified time point.

";

%feature("docstring") casadi::CVodesIntegrator::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::CVodesIntegrator::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::CVodesIntegrator::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::CVodesIntegrator::outputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::CVodesIntegrator::inputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::CVodesIntegrator::getDAE "

Get the DAE.

";

%feature("docstring") casadi::CVodesIntegrator::printPtr "[INTERNAL]  Print
the pointer to the internal class

";

%feature("docstring") casadi::CVodesIntegrator::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::CVodesIntegrator::spCanEvaluate "[INTERNAL]
Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::CVodesIntegrator::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") casadi::CVodesIntegrator::resetB "

Reset the backward problem.

Time will be set to tf and backward state to input(INTEGRATOR_RX0)

";

%feature("docstring") casadi::CVodesIntegrator::isInit "

Is initialized?

";

%feature("docstring") casadi::CVodesIntegrator::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::CVodesIntegrator::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::CVodesIntegrator::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::CVodesIntegrator::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") casadi::CVodesIntegrator::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::CVodesIntegrator::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::CVodesIntegrator::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::CVodesIntegrator::clone "

Clone.

";

%feature("docstring") casadi::CVodesIntegrator::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::CVodesIntegrator::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::CVodesIntegrator::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::CVodesIntegrator::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::CVodesIntegrator::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::CVodesIntegrator::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::CVodesIntegrator::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::CVodesIntegrator::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::CVodesIntegrator::checkInputs "[INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::CVodesIntegrator::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::CVodesIntegrator::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::CVodesIntegrator::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::CVodesIntegrator::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::CVodesIntegrator::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::CVodesIntegrator::schemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::CVodesIntegrator::evaluate "

Evaluate.

";

%feature("docstring") casadi::CVodesIntegrator::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::CVodesIntegrator::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::CVodesIntegrator::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::CVodesIntegrator::reset "

Reset the forward problem Time will be set to t0 and state to
input(INTEGRATOR_X0)

";

%feature("docstring") casadi::CVodesIntegrator::inputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::CVodesIntegrator::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::CVodesIntegrator::getOption "

get an option value

";

%feature("docstring") casadi::CVodesIntegrator::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::CVodesIntegrator::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::CVodesIntegrator::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::CVodesIntegrator::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::CVodesIntegrator::getAugmented "

Generate a augmented DAE system with nfwd forward sensitivities and nadj
adjoint sensitivities.

";

%feature("docstring") casadi::CVodesIntegrator::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::CVodesIntegrator::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::CVodesIntegrator::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::CVodesIntegrator::getCount "[INTERNAL]  Get
the reference count.

";

%feature("docstring") casadi::CVodesIntegrator::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::CVodesIntegrator::addMonitor "

Add modules to be monitored.

";


// File: classcasadi_1_1DAEInputIOSchemeVector.xml
%feature("docstring") casadi::DAEInputIOSchemeVector::DAEInputIOSchemeVector
"[INTERNAL] ";

%feature("docstring") casadi::DAEInputIOSchemeVector "[INTERNAL]  Helper
function for 'DAEInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::DAEInputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::DAEInputIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::DAEInputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::DAEInputIOSchemeVector::vector "[INTERNAL] ";

%feature("docstring") casadi::DAEInputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") casadi::DAEInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::DAEInputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";


// File: classcasadi_1_1DAEOutputIOSchemeVector.xml
%feature("docstring")
casadi::DAEOutputIOSchemeVector::DAEOutputIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::DAEOutputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::DAEOutputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") casadi::DAEOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::DAEOutputIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::DAEOutputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::DAEOutputIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") casadi::DAEOutputIOSchemeVector "[INTERNAL]  Helper
function for 'DAEOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::DAEOutputIOSchemeVector::__len__ "[INTERNAL]
";


// File: classcasadi_1_1DenseMultiplication.xml
%feature("docstring") casadi::DenseMultiplication::getNormF "[INTERNAL]
Frobenius norm.

";

%feature("docstring") casadi::DenseMultiplication::getValue "[INTERNAL]
Get the value (only for scalar constant nodes)

";

%feature("docstring") casadi::DenseMultiplication::getFunction "[INTERNAL]
Get function reference.

";

%feature("docstring") casadi::DenseMultiplication::getFunctionInput "[INTERNAL]  Get function input.

";

%feature("docstring") casadi::DenseMultiplication::getHorzcat "[INTERNAL]
Create a horizontal concatenation node.

";

%feature("docstring") casadi::DenseMultiplication::__nonzero__ "[INTERNAL]
Check the truth value of this node.

";

%feature("docstring") casadi::DenseMultiplication::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") casadi::DenseMultiplication::dep "

>  const MX & casadi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & casadi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::DenseMultiplication::getNormInf "[INTERNAL]
Infinity norm.

";

%feature("docstring") casadi::DenseMultiplication::getReshape "[INTERNAL]
Reshape.

";

%feature("docstring") casadi::DenseMultiplication::isUnaryOp "[INTERNAL]
Check if unary operation.

";

%feature("docstring") casadi::DenseMultiplication::isInit "[INTERNAL]
Check if the object has been initialized.

";

%feature("docstring") casadi::DenseMultiplication::simplifyMe "[INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring") casadi::DenseMultiplication::assign "

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") casadi::DenseMultiplication::getOutput "[INTERNAL]
Get an output.

";

%feature("docstring") casadi::DenseMultiplication::isEqual "[INTERNAL]
Check if two nodes are equivalent up to a given depth.

";

%feature("docstring") casadi::DenseMultiplication::getDeterminant "[INTERNAL]   Determinant.

";

%feature("docstring") casadi::DenseMultiplication::getNumOutputs "[INTERNAL]  Number of outputs.

";

%feature("docstring") casadi::DenseMultiplication::isIdentity "[INTERNAL]
Check if identity matrix.

";

%feature("docstring") casadi::DenseMultiplication::getSubAssign "[INTERNAL]
Get submatrix assignment.

";

%feature("docstring") casadi::DenseMultiplication::ndep "[INTERNAL]  Number
of dependencies.

";

%feature("docstring") casadi::DenseMultiplication::getMatrixValue "[INTERNAL]  Get the value (only for constant nodes)

";

%feature("docstring") casadi::DenseMultiplication::evaluateD "[INTERNAL]
Evaluate the function numerically.

";

%feature("docstring") casadi::DenseMultiplication::getNorm2 "[INTERNAL]
Spectral norm.

";

%feature("docstring") casadi::DenseMultiplication::isOutputNode "[INTERNAL]
Check if evaluation output.

";

%feature("docstring") casadi::DenseMultiplication::setSparsity "[INTERNAL]
Set the sparsity.

";

%feature("docstring") casadi::DenseMultiplication::repr "[INTERNAL]  Print
a representation.

";

%feature("docstring") casadi::DenseMultiplication::sparsity "

>  const Sparsity& casadi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & casadi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") casadi::DenseMultiplication::isNonLinear "[INTERNAL]
Is the node nonlinear.

";

%feature("docstring") casadi::DenseMultiplication::clone "[INTERNAL]  Clone
function.

";

%feature("docstring") casadi::DenseMultiplication::mapping "[INTERNAL]  Get
an IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") casadi::DenseMultiplication::hasDep "[INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring") casadi::DenseMultiplication::numel "[INTERNAL]  Get
shape.

";

%feature("docstring") casadi::DenseMultiplication::~DenseMultiplication "[INTERNAL]  Destructor.

";

%feature("docstring") casadi::DenseMultiplication::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") casadi::DenseMultiplication::propagateSparsity "[INTERNAL]  Propagate sparsity.

";

%feature("docstring") casadi::DenseMultiplication::isValue "[INTERNAL]
Check if a certain value.

";

%feature("docstring") casadi::DenseMultiplication::printPart "[INTERNAL]
Print a part of the expression.

";

%feature("docstring") casadi::DenseMultiplication::getVertcat "[INTERNAL]
Create a vertical concatenation node (vectors only)

";

%feature("docstring") casadi::DenseMultiplication::assertInit "[INTERNAL]
Assert that the object has been initialized.

";

%feature("docstring") casadi::DenseMultiplication::evaluateGen "[INTERNAL]
Evaluate the function (template)

";

%feature("docstring") casadi::DenseMultiplication::deepCopyMembers "[INTERNAL]  Deep copy data members.

";

%feature("docstring") casadi::DenseMultiplication::getBinary "[INTERNAL]
Get a binary operation operation (matrix-matrix)

";

%feature("docstring") casadi::DenseMultiplication::size2 "[INTERNAL] ";

%feature("docstring") casadi::DenseMultiplication::size1 "[INTERNAL] ";

%feature("docstring") casadi::DenseMultiplication::getBinarySwitch "[INTERNAL]  Get a binary operation operation.

";

%feature("docstring") casadi::DenseMultiplication::getHorzsplit "[INTERNAL]
Create a horizontal split node.

";

%feature("docstring") casadi::DenseMultiplication::sameOpAndDeps "[INTERNAL]  Checks if two nodes have the same operation and have equivalent
dependencies up to a given depth.

";

%feature("docstring") casadi::DenseMultiplication::isOne "[INTERNAL]  Check
if identically one.

";

%feature("docstring") casadi::DenseMultiplication::getSetSparse "[INTERNAL]
Create set sparse.

";

%feature("docstring") casadi::DenseMultiplication::addDependency "[INTERNAL]  Add a dependency.

";

%feature("docstring") casadi::DenseMultiplication::getName "[INTERNAL]  Get
the name.

";

%feature("docstring") casadi::DenseMultiplication::getInnerProd "[INTERNAL]
Inner product.

";

%feature("docstring") casadi::DenseMultiplication::DenseMultiplication "[INTERNAL]  Constructor.

";

%feature("docstring") casadi::DenseMultiplication::getAddNonzeros "[INTERNAL]  Add the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::DenseMultiplication::evaluateSX "[INTERNAL]
Evaluate the function symbolically (SX)

";

%feature("docstring") casadi::DenseMultiplication::getSolve "[INTERNAL]
Solve a system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") casadi::DenseMultiplication::setDependencies "

>  void casadi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void casadi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") casadi::DenseMultiplication::evaluateMX "

>  void casadi::Multiplication< TrX, TrY >::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void casadi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") casadi::DenseMultiplication::getInverse "[INTERNAL]
Inverse.

";

%feature("docstring") casadi::DenseMultiplication::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") casadi::DenseMultiplication::getOp "[INTERNAL]  Get
the operation.

";

%feature("docstring") casadi::DenseMultiplication::isZero "[INTERNAL]
Check if identically zero.

";

%feature("docstring") casadi::DenseMultiplication::print "

>  void casadi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void casadi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") casadi::DenseMultiplication::init "[INTERNAL]
Initialize the object.

";

%feature("docstring") casadi::DenseMultiplication::isBinaryOp "[INTERNAL]
Check if binary operation.

";

%feature("docstring") casadi::DenseMultiplication::getGetNonzeros "[INTERNAL]  Get the nonzeros of matrix.

";

%feature("docstring") casadi::DenseMultiplication::isMultipleOutput "[INTERNAL]  Check if a multiple output node.

";

%feature("docstring") casadi::DenseMultiplication::getSetNonzeros "[INTERNAL]  Assign the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::DenseMultiplication::generateOperation "[INTERNAL]  Generate code for the operation.

";

%feature("docstring") casadi::DenseMultiplication::getMultiplication "[INTERNAL]   Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") casadi::DenseMultiplication::getVertsplit "[INTERNAL]
Create a vertical split node (vectors only)

";

%feature("docstring") casadi::DenseMultiplication::getFunctionOutput "[INTERNAL]  Get function output.

";

%feature("docstring") casadi::DenseMultiplication::getSubRef "[INTERNAL]
Get submatrix reference.

";

%feature("docstring") casadi::DenseMultiplication::nTmp "[INTERNAL]  Get
number of temporary variables needed.

";

%feature("docstring") casadi::DenseMultiplication::shape "[INTERNAL] ";

%feature("docstring") casadi::DenseMultiplication::getNorm1 "[INTERNAL]
1-norm

";

%feature("docstring") casadi::DenseMultiplication "[INTERNAL]  An MX atomic
for matrix-matrix product, note that the factor must be provided transposed.

Joel Andersson

C++ includes: multiplication.hpp ";

%feature("docstring") casadi::DenseMultiplication::getUnary "[INTERNAL]
Get a unary operation.

";

%feature("docstring") casadi::DenseMultiplication::size "[INTERNAL] ";

%feature("docstring") casadi::DenseMultiplication::getCount "[INTERNAL]
Get the reference count.

";

%feature("docstring") casadi::DenseMultiplication::numInplace "[INTERNAL]
Can the operation be performed inplace (i.e. overwrite the result)

";


// File: classcasadi_1_1DenseTranspose.xml
%feature("docstring") casadi::DenseTranspose::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::DenseTranspose::addDependency "[INTERNAL]
Add a dependency.

";

%feature("docstring") casadi::DenseTranspose::isIdentity "[INTERNAL]  Check
if identity matrix.

";

%feature("docstring") casadi::DenseTranspose::isNonLinear "[INTERNAL]  Is
the node nonlinear.

";

%feature("docstring") casadi::DenseTranspose::setDependencies "

>  void casadi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void casadi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") casadi::DenseTranspose::~DenseTranspose "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::DenseTranspose::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") casadi::DenseTranspose::sameOpAndDeps "[INTERNAL]
Checks if two nodes have the same operation and have equivalent dependencies
up to a given depth.

";

%feature("docstring") casadi::DenseTranspose::getInnerProd "[INTERNAL]
Inner product.

";

%feature("docstring") casadi::DenseTranspose::getNumOutputs "[INTERNAL]
Number of outputs.

";

%feature("docstring") casadi::DenseTranspose::getFunctionInput "[INTERNAL]
Get function input.

";

%feature("docstring") casadi::DenseTranspose::assertInit "[INTERNAL]
Assert that the object has been initialized.

";

%feature("docstring") casadi::DenseTranspose::getFunctionOutput "[INTERNAL]
Get function output.

";

%feature("docstring") casadi::DenseTranspose::size1 "[INTERNAL] ";

%feature("docstring") casadi::DenseTranspose::getSetSparse "[INTERNAL]
Create set sparse.

";

%feature("docstring") casadi::DenseTranspose::getSubRef "[INTERNAL]  Get
submatrix reference.

";

%feature("docstring") casadi::DenseTranspose::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") casadi::DenseTranspose "[INTERNAL]   Matrix transpose
(dense)

Joel Andersson

C++ includes: transpose.hpp ";

%feature("docstring") casadi::DenseTranspose::isMultipleOutput "[INTERNAL]
Check if a multiple output node.

";

%feature("docstring") casadi::DenseTranspose::isValue "[INTERNAL]  Check if
a certain value.

";

%feature("docstring") casadi::DenseTranspose::size2 "[INTERNAL] ";

%feature("docstring") casadi::DenseTranspose::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") casadi::DenseTranspose::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") casadi::DenseTranspose::size "[INTERNAL] ";

%feature("docstring") casadi::DenseTranspose::assign "

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") casadi::DenseTranspose::getBinary "[INTERNAL]  Get a
binary operation operation (matrix-matrix)

";

%feature("docstring") casadi::DenseTranspose::clone "[INTERNAL]  Clone
function.

";

%feature("docstring") casadi::DenseTranspose::isUnaryOp "[INTERNAL]  Check
if unary operation.

";

%feature("docstring") casadi::DenseTranspose::getFunction "[INTERNAL]  Get
function reference.

";

%feature("docstring") casadi::DenseTranspose::hasDep "[INTERNAL]  Does the
node depend on other nodes.

";

%feature("docstring") casadi::DenseTranspose::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") casadi::DenseTranspose::__nonzero__ "[INTERNAL]
Check the truth value of this node.

";

%feature("docstring") casadi::DenseTranspose::simplifyMe "[INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring") casadi::DenseTranspose::DenseTranspose "[INTERNAL]
Constructor.

";

%feature("docstring") casadi::DenseTranspose::print "

>  void casadi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void casadi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") casadi::DenseTranspose::isInit "[INTERNAL]  Check if
the object has been initialized.

";

%feature("docstring") casadi::DenseTranspose::evaluateSX "[INTERNAL]
Evaluate the function symbolically (SX)

";

%feature("docstring") casadi::DenseTranspose::getHorzcat "[INTERNAL]
Create a horizontal concatenation node.

";

%feature("docstring") casadi::DenseTranspose::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") casadi::DenseTranspose::getReshape "[INTERNAL]
Reshape.

";

%feature("docstring") casadi::DenseTranspose::getBinarySwitch "[INTERNAL]
Get a binary operation operation.

";

%feature("docstring") casadi::DenseTranspose::init "[INTERNAL]  Initialize
the object.

";

%feature("docstring") casadi::DenseTranspose::getSolve "[INTERNAL]   Solve
a system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") casadi::DenseTranspose::shape "[INTERNAL] ";

%feature("docstring") casadi::DenseTranspose::getUnary "[INTERNAL]  Get a
unary operation.

";

%feature("docstring") casadi::DenseTranspose::getNormF "[INTERNAL]
Frobenius norm.

";

%feature("docstring") casadi::DenseTranspose::isOutputNode "[INTERNAL]
Check if evaluation output.

";

%feature("docstring") casadi::DenseTranspose::getMatrixValue "[INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring") casadi::DenseTranspose::mapping "[INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") casadi::DenseTranspose::getVertsplit "[INTERNAL]
Create a vertical split node (vectors only)

";

%feature("docstring") casadi::DenseTranspose::numInplace "[INTERNAL]  Can
the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") casadi::DenseTranspose::propagateSparsity "

>  void casadi::DenseTranspose::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity.

>  void casadi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity, no work.

";

%feature("docstring") casadi::DenseTranspose::evaluateMX "

>  void casadi::Transpose::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void casadi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") casadi::DenseTranspose::numel "[INTERNAL]  Get shape.

";

%feature("docstring") casadi::DenseTranspose::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") casadi::DenseTranspose::getNorm2 "[INTERNAL]
Spectral norm.

";

%feature("docstring") casadi::DenseTranspose::nTmp "[INTERNAL]  Get number
of temporary variables needed.

";

%feature("docstring") casadi::DenseTranspose::evaluateGen "[INTERNAL]
Evaluate the function (template)

";

%feature("docstring") casadi::DenseTranspose::deepCopyMembers "[INTERNAL]
Deep copy data members.

";

%feature("docstring") casadi::DenseTranspose::getAddNonzeros "[INTERNAL]
Add the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::DenseTranspose::evaluateD "[INTERNAL]
Evaluate the function numerically.

";

%feature("docstring") casadi::DenseTranspose::getValue "[INTERNAL]  Get the
value (only for scalar constant nodes)

";

%feature("docstring") casadi::DenseTranspose::getHorzsplit "[INTERNAL]
Create a horizontal split node.

";

%feature("docstring") casadi::DenseTranspose::getGetNonzeros "[INTERNAL]
Get the nonzeros of matrix.

";

%feature("docstring") casadi::DenseTranspose::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") casadi::DenseTranspose::dep "

>  const MX & casadi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & casadi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::DenseTranspose::printPart "[INTERNAL]  Print
a part of the expression */.

";

%feature("docstring") casadi::DenseTranspose::getInverse "[INTERNAL]
Inverse.

";

%feature("docstring") casadi::DenseTranspose::getName "[INTERNAL]  Get the
name.

";

%feature("docstring") casadi::DenseTranspose::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") casadi::DenseTranspose::getMultiplication "[INTERNAL]
Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") casadi::DenseTranspose::sparsity "

>  const Sparsity& casadi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & casadi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") casadi::DenseTranspose::setSparsity "[INTERNAL]  Set
the sparsity.

";

%feature("docstring") casadi::DenseTranspose::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") casadi::DenseTranspose::isEqual "[INTERNAL]   Solve
for square linear system.

Check if two nodes are equivalent up to a given depth

";

%feature("docstring") casadi::DenseTranspose::isBinaryOp "[INTERNAL]  Check
if binary operation.

";

%feature("docstring") casadi::DenseTranspose::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::DenseTranspose::getOutput "[INTERNAL]  Get an
output.

";

%feature("docstring") casadi::DenseTranspose::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") casadi::DenseTranspose::getSetNonzeros "[INTERNAL]
Assign the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::DenseTranspose::getVertcat "[INTERNAL]
Create a vertical concatenation node (vectors only)

";

%feature("docstring") casadi::DenseTranspose::getNormInf "[INTERNAL]
Infinity norm.

";


// File: structcasadi_1_1DerBinaryOpertion.xml
%feature("docstring") casadi::DerBinaryOpertion "[INTERNAL]  Calculate
function and derivative.

C++ includes: casadi_calculus.hpp ";


// File: classcasadi_1_1DerivativeGenerator.xml
%feature("docstring") casadi::DerivativeGenerator::clone "[INTERNAL]  Deep
copy.

";

%feature("docstring") casadi::DerivativeGenerator::DerivativeGenerator "

>  casadi::DerivativeGenerator::DerivativeGenerator()
------------------------------------------------------------------------

Default constructor.

>  casadi::DerivativeGenerator::DerivativeGenerator(DerivativeGeneratorCPtr ptr)
------------------------------------------------------------------------

Construct from C pointer.

";

%feature("docstring") casadi::DerivativeGenerator::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::DerivativeGenerator::getCount "[INTERNAL]
Get the reference count.

";

%feature("docstring") casadi::DerivativeGenerator::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::DerivativeGenerator::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") casadi::DerivativeGenerator::repr "[INTERNAL]  Print
a representation of the object.

";

%feature("docstring") casadi::DerivativeGenerator::isInit "

Is initialized?

";

%feature("docstring") casadi::DerivativeGenerator::checkNode "[INTERNAL]
Assert that the node is pointing to the right type of object

";

%feature("docstring") casadi::DerivativeGenerator "

Derivative Generator Functor.

In C++, supply a DerivativeGeneratorCPtr function pointer

In python, supply a callable, annotated with derivativegenerator decorator

C++ includes: functor.hpp ";

%feature("docstring") casadi::DerivativeGenerator::printPtr "[INTERNAL]
Print the pointer to the internal class

";

%feature("docstring") casadi::DerivativeGenerator::isNull "

Is a null pointer?

";

%feature("docstring") casadi::DerivativeGenerator::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::DerivativeGenerator::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::DerivativeGenerator::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::DerivativeGenerator::assignNodeNoCount "[INTERNAL]  Assign the node to a node class pointer without reference
counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::DerivativeGenerator::print "[INTERNAL]  Print
a description of the object.

";

%feature("docstring") casadi::DerivativeGenerator::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") casadi::DerivativeGenerator::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") casadi::DerivativeGenerator::swap "[INTERNAL]  Swap
content with another instance.

";


// File: classcasadi_1_1Determinant.xml
%feature("docstring") casadi::Determinant::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") casadi::Determinant::dep "

>  const MX & casadi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & casadi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::Determinant::getFunctionOutput "[INTERNAL]
Get function output.

";

%feature("docstring") casadi::Determinant::getSubRef "[INTERNAL]  Get
submatrix reference.

";

%feature("docstring") casadi::Determinant::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::Determinant::getHorzsplit "[INTERNAL]  Create
a horizontal split node.

";

%feature("docstring") casadi::Determinant::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") casadi::Determinant::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") casadi::Determinant::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::Determinant::size2 "[INTERNAL] ";

%feature("docstring") casadi::Determinant::~Determinant "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::Determinant::isOutputNode "[INTERNAL]  Check
if evaluation output.

";

%feature("docstring") casadi::Determinant::getNorm2 "[INTERNAL]  Spectral
norm.

";

%feature("docstring") casadi::Determinant::getMultiplication "[INTERNAL]
Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") casadi::Determinant::getReshape "[INTERNAL]
Reshape.

";

%feature("docstring") casadi::Determinant::propagateSparsity "

>  virtual void casadi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity.

>  void casadi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity, no work.

";

%feature("docstring") casadi::Determinant::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") casadi::Determinant::getName "[INTERNAL]  Get the
name.

";

%feature("docstring") casadi::Determinant::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") casadi::Determinant::getBinary "[INTERNAL]  Get a
binary operation operation (matrix-matrix)

";

%feature("docstring") casadi::Determinant::getBinarySwitch "[INTERNAL]  Get
a binary operation operation.

";

%feature("docstring") casadi::Determinant::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") casadi::Determinant::getFunctionInput "[INTERNAL]
Get function input.

";

%feature("docstring") casadi::Determinant::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") casadi::Determinant::simplifyMe "[INTERNAL]  Simplify
the expression (ex is a reference to the node)

";

%feature("docstring") casadi::Determinant::numel "[INTERNAL]  Get shape.

";

%feature("docstring") casadi::Determinant::getVertsplit "[INTERNAL]  Create
a vertical split node (vectors only)

";

%feature("docstring") casadi::Determinant::getGetNonzeros "[INTERNAL]  Get
the nonzeros of matrix.

";

%feature("docstring") casadi::Determinant::sparsity "

>  const Sparsity& casadi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & casadi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") casadi::Determinant::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") casadi::Determinant::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") casadi::Determinant::evaluateD "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") casadi::Determinant::getFunction "[INTERNAL]  Get
function reference.

";

%feature("docstring") casadi::Determinant::isNonLinear "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring") casadi::Determinant::evaluateSX "[INTERNAL]  Evaluate
symbolically (SX)

";

%feature("docstring") casadi::Determinant::printPart "[INTERNAL]  Print a
part of the expression */.

";

%feature("docstring") casadi::Determinant::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") casadi::Determinant::getNormInf "[INTERNAL]  Infinity
norm.

";

%feature("docstring") casadi::Determinant::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") casadi::Determinant::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") casadi::Determinant::__nonzero__ "[INTERNAL]  Check
the truth value of this node.

";

%feature("docstring") casadi::Determinant::isUnaryOp "[INTERNAL]  Check if
unary operation.

";

%feature("docstring") casadi::Determinant::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") casadi::Determinant::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") casadi::Determinant::getInverse "[INTERNAL]
Inverse.

";

%feature("docstring") casadi::Determinant::size1 "[INTERNAL] ";

%feature("docstring") casadi::Determinant::clone "[INTERNAL]  Clone
function.

";

%feature("docstring") casadi::Determinant::getSetNonzeros "[INTERNAL]
Assign the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::Determinant::getUnary "[INTERNAL]  Get a
unary operation.

";

%feature("docstring") casadi::Determinant::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") casadi::Determinant::isMultipleOutput "[INTERNAL]
Check if a multiple output node.

";

%feature("docstring") casadi::Determinant::deepCopyMembers "[INTERNAL]
Deep copy data members.

";

%feature("docstring") casadi::Determinant::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") casadi::Determinant::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") casadi::Determinant::size "[INTERNAL] ";

%feature("docstring") casadi::Determinant::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::Determinant::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") casadi::Determinant::mapping "[INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") casadi::Determinant::getMatrixValue "[INTERNAL]  Get
the value (only for constant nodes)

";

%feature("docstring") casadi::Determinant::setDependencies "

>  void casadi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void casadi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") casadi::Determinant::getOutput "[INTERNAL]  Get an
output.

";

%feature("docstring") casadi::Determinant::print "

>  void casadi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void casadi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") casadi::Determinant::getAddNonzeros "[INTERNAL]  Add
the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::Determinant::Determinant "[INTERNAL]
Constructor.

";

%feature("docstring") casadi::Determinant::getValue "[INTERNAL]  Get the
value (only for scalar constant nodes)

";

%feature("docstring") casadi::Determinant::assertInit "[INTERNAL]  Assert
that the object has been initialized.

";

%feature("docstring") casadi::Determinant::isEqual "[INTERNAL]  Check if
two nodes are equivalent up to a given depth.

";

%feature("docstring") casadi::Determinant::shape "[INTERNAL] ";

%feature("docstring") casadi::Determinant::getSolve "[INTERNAL]   Solve a
system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") casadi::Determinant::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") casadi::Determinant::evaluateMX "

>  void casadi::Determinant::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void casadi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") casadi::Determinant::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") casadi::Determinant::hasDep "[INTERNAL]  Does the
node depend on other nodes.

";

%feature("docstring") casadi::Determinant::getSetSparse "[INTERNAL]  Create
set sparse.

";

%feature("docstring") casadi::Determinant "[INTERNAL]   Matrix determinant.

Joel Andersson

C++ includes: determinant.hpp ";

%feature("docstring") casadi::Determinant::getNormF "[INTERNAL]  Frobenius
norm.

";

%feature("docstring") casadi::Determinant::getNumOutputs "[INTERNAL]
Number of outputs.

";

%feature("docstring") casadi::Determinant::sameOpAndDeps "[INTERNAL]
Checks if two nodes have the same operation and have equivalent dependencies
up to a given depth.

";

%feature("docstring") casadi::Determinant::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") casadi::Determinant::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") casadi::Determinant::assign "

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";


// File: classcasadi_1_1DirectCollocation.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::DirectCollocation::getOptionAllowedIndex " [INTERNAL]  Get the index
into allowed options of a certain option.

";

%feature("docstring") casadi::DirectCollocation::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::DirectCollocation::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") casadi::DirectCollocation::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::DirectCollocation::getRfcn "";

%feature("docstring") casadi::DirectCollocation::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::DirectCollocation::hasOption "

check if there is an option str

";

%feature("docstring") casadi::DirectCollocation::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::DirectCollocation::spInit "[INTERNAL]  Reset
the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::DirectCollocation::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::DirectCollocation::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::DirectCollocation::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::DirectCollocation::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::DirectCollocation::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::DirectCollocation::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::DirectCollocation::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::DirectCollocation::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::DirectCollocation::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::DirectCollocation::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::DirectCollocation::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::DirectCollocation::isNull "

Is a null pointer?

";

%feature("docstring") casadi::DirectCollocation::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") casadi::DirectCollocation::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::DirectCollocation::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::DirectCollocation::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::DirectCollocation::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::DirectCollocation::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::DirectCollocation::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") casadi::DirectCollocation::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::DirectCollocation "

Direct collocation.

Joel Andersson

>Input scheme: casadi::OCPInput (OCP_NUM_IN = 14) [ocpIn]
+------------+--------+----------------------------------------------+
| Full name  | Short  |                 Description                  |
+============+========+==============================================+
| OCP_LBX    | lbx    | States lower bounds (nx x (ns+1)) .          |
+------------+--------+----------------------------------------------+
| OCP_UBX    | ubx    | States upper bounds (nx x (ns+1)) .          |
+------------+--------+----------------------------------------------+
| OCP_X_INIT | x_init | States initial guess (nx x (ns+1)) .         |
+------------+--------+----------------------------------------------+
| OCP_LBU    | lbu    | Controls lower bounds (nu x ns) .            |
+------------+--------+----------------------------------------------+
| OCP_UBU    | ubu    | Controls upper bounds (nu x ns) .            |
+------------+--------+----------------------------------------------+
| OCP_U_INIT | u_init | Controls initial guess (nu x ns) .           |
+------------+--------+----------------------------------------------+
| OCP_LBP    | lbp    | Parameters lower bounds (np x 1) .           |
+------------+--------+----------------------------------------------+
| OCP_UBP    | ubp    | Parameters upper bounds (np x 1) .           |
+------------+--------+----------------------------------------------+
| OCP_P_INIT | p_init | Parameters initial guess (np x 1) .          |
+------------+--------+----------------------------------------------+
| OCP_LBH    | lbh    | Point constraint lower bound (nh x (ns+1)) . |
+------------+--------+----------------------------------------------+
| OCP_UBH    | ubh    | Point constraint upper bound (nh x (ns+1)) . |
+------------+--------+----------------------------------------------+
| OCP_LBG    | lbg    | Lower bound for the coupling constraints .   |
+------------+--------+----------------------------------------------+
| OCP_UBG    | ubg    | Upper bound for the coupling constraints .   |
+------------+--------+----------------------------------------------+

>Output scheme: casadi::OCPOutput (OCP_NUM_OUT = 5) [ocpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| OCP_X_OPT              | x_opt                  | Optimal state          |
|                        |                        | trajectory .           |
+------------------------+------------------------+------------------------+
| OCP_U_OPT              | u_opt                  | Optimal control        |
|                        |                        | trajectory .           |
+------------------------+------------------------+------------------------+
| OCP_P_OPT              | p_opt                  | Optimal parameters .   |
+------------------------+------------------------+------------------------+
| OCP_COST               | cost                   | Objective/cost         |
|                        |                        | function for optimal   |
|                        |                        | solution (1 x 1) .     |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| collocation_ | OT_STRING    | \"radau\"      | Collocation  | casadi::Dire |
| scheme       |              |              | scheme (rada | ctCollocatio |
|              |              |              | u|legendre)  | nInternal    |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| final_time   | OT_REAL      | 1            |              | casadi::OCPS |
|              |              |              |              | olverInterna |
|              |              |              |              | l            |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| interpolatio | OT_INTEGER   | 3            | Order of the | casadi::Dire |
| n_order      |              |              | interpolatin | ctCollocatio |
|              |              |              | g            | nInternal    |
|              |              |              | polynomials  |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| nlp_solver   | OT_NLPSOLVER | GenericType( | An NLPSolver | casadi::Dire |
|              |              | )            | creator      | ctCollocatio |
|              |              |              | function     | nInternal    |
+--------------+--------------+--------------+--------------+--------------+
| nlp_solver_o | OT_DICTIONAR | GenericType( | Options to   | casadi::Dire |
| ptions       | Y            | )            | be passed to | ctCollocatio |
|              |              |              | the NLP      | nInternal    |
|              |              |              | Solver       |              |
+--------------+--------------+--------------+--------------+--------------+
| number_of_gr | OT_INTEGER   | 20           |              | casadi::OCPS |
| id_points    |              |              |              | olverInterna |
|              |              |              |              | l            |
+--------------+--------------+--------------+--------------+--------------+
| number_of_pa | OT_INTEGER   | 0            |              | casadi::OCPS |
| rameters     |              |              |              | olverInterna |
|              |              |              |              | l            |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: direct_collocation.hpp ";

%feature("docstring") casadi::DirectCollocation::DirectCollocation "

>  casadi::DirectCollocation::DirectCollocation()
------------------------------------------------------------------------

Default constructor.

>  casadi::DirectCollocation::DirectCollocation(const Function &ffcn, const Function &mfcn, const Function &cfcn=Function(), const Function &rfcn=Function())
------------------------------------------------------------------------

Constructor.

";

%feature("docstring") casadi::DirectCollocation::getConstraintBounds "

Get the constraints.

";

%feature("docstring") casadi::DirectCollocation::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::DirectCollocation::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::DirectCollocation::setOptimalSolution "

Set the optimal solution.

";

%feature("docstring") casadi::DirectCollocation::isInit "

Is initialized?

";

%feature("docstring") casadi::DirectCollocation::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") casadi::DirectCollocation::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::DirectCollocation::checkInputs "[INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::DirectCollocation::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::DirectCollocation::printPtr "[INTERNAL]
Print the pointer to the internal class

";

%feature("docstring") casadi::DirectCollocation::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::DirectCollocation::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::DirectCollocation::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::DirectCollocation::getCfcn "";

%feature("docstring") casadi::DirectCollocation::clone "[INTERNAL]  Deep
copy.

";

%feature("docstring") casadi::DirectCollocation::checkNode "[INTERNAL]
Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::DirectCollocation::getReportConstraints "

Return the report as a string.

";

%feature("docstring") casadi::DirectCollocation::getGuess "

Get the variables.

";

%feature("docstring") casadi::DirectCollocation::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::DirectCollocation::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::DirectCollocation::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::DirectCollocation::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::DirectCollocation::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::DirectCollocation::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::DirectCollocation::getOption "

get an option value

";

%feature("docstring") casadi::DirectCollocation::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::DirectCollocation::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::DirectCollocation::getVariableBounds "

Get the variables.

";

%feature("docstring") casadi::DirectCollocation::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::DirectCollocation::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::DirectCollocation::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::DirectCollocation::assignNodeNoCount "[INTERNAL]  Assign the node to a node class pointer without reference
counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::DirectCollocation::inputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::DirectCollocation::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::DirectCollocation::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::DirectCollocation::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::DirectCollocation::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") casadi::DirectCollocation::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::DirectCollocation::getCount "[INTERNAL]  Get
the reference count.

";

%feature("docstring") casadi::DirectCollocation::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::DirectCollocation::getNLPSolver "

Access the underlying NLPSolver object.

";

%feature("docstring") casadi::DirectCollocation::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::DirectCollocation::getFfcn "";

%feature("docstring") casadi::DirectCollocation::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::DirectCollocation::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::DirectCollocation::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::DirectCollocation::inputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::DirectCollocation::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::DirectCollocation::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::DirectCollocation::reportConstraints "

Prints out a human readable report about possible constraint violations,
after solving.

";

%feature("docstring") casadi::DirectCollocation::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::DirectCollocation::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::DirectCollocation::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::DirectCollocation::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::DirectCollocation::spCanEvaluate "[INTERNAL]
Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::DirectCollocation::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::DirectCollocation::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::DirectCollocation::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::DirectCollocation::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::DirectCollocation::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::DirectCollocation::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::DirectCollocation::outputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::DirectCollocation::evaluate "

Evaluate.

";

%feature("docstring") casadi::DirectCollocation::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::DirectCollocation::schemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::DirectCollocation::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::DirectCollocation::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::DirectCollocation::getMfcn "";

%feature("docstring") casadi::DirectCollocation::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::DirectCollocation::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::DirectCollocation::setOutputScheme "

Set output scheme.

";


// File: classcasadi_1_1DirectMultipleShooting.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::DirectMultipleShooting::inputScheme " [INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::DirectMultipleShooting::outputScheme "[INTERNAL]  Access input/output scheme.

";

%feature("docstring") casadi::DirectMultipleShooting::getReportConstraints "";

%feature("docstring") casadi::DirectMultipleShooting::setOptimalSolution "

Set the optimal solution.

";

%feature("docstring") casadi::DirectMultipleShooting::checkInputs "[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::DirectMultipleShooting::getOption "

get an option value

";

%feature("docstring") casadi::DirectMultipleShooting::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")
casadi::DirectMultipleShooting::setOptionByAllowedIndex "[INTERNAL]  Set a
certain option by giving its index into the allowed values.

";

%feature("docstring") casadi::DirectMultipleShooting::getOptionAllowedIndex
"[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::DirectMultipleShooting::output_struct "[INTERNAL]  Input/output structures of the function

";

%feature("docstring") casadi::DirectMultipleShooting::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::DirectMultipleShooting::input_struct "[INTERNAL]  Input/output structures of the function

";

%feature("docstring") casadi::DirectMultipleShooting::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::DirectMultipleShooting::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::DirectMultipleShooting::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::DirectMultipleShooting::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::DirectMultipleShooting::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::DirectMultipleShooting::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::DirectMultipleShooting::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::DirectMultipleShooting::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::DirectMultipleShooting::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::DirectMultipleShooting::isInit "

Is initialized?

";

%feature("docstring") casadi::DirectMultipleShooting::clone "[INTERNAL]
Deep copy.

";

%feature("docstring") casadi::DirectMultipleShooting::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::DirectMultipleShooting::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::DirectMultipleShooting::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::DirectMultipleShooting::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::DirectMultipleShooting::getVariableBounds "

Get the variables.

";

%feature("docstring") casadi::DirectMultipleShooting::getGuess "

Get the variables.

";

%feature("docstring") casadi::DirectMultipleShooting::assignNode "[INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring") casadi::DirectMultipleShooting::spCanEvaluate "[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::DirectMultipleShooting::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::DirectMultipleShooting::assertInit "[INTERNAL]  Assert that it is initialized

";

%feature("docstring") casadi::DirectMultipleShooting::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::DirectMultipleShooting::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::DirectMultipleShooting::callDerivative "[INTERNAL]  Evaluate the function symbolically or numerically with
directional derivatives The first two arguments are the nondifferentiated
inputs and results of the evaluation, the next two arguments are a set of
forward directional seeds and the resulting forward directional derivatives,
the length of the vector being the number of forward directions. The next
two arguments are a set of adjoint directional seeds and the resulting
adjoint directional derivatives, the length of the vector being the number
of adjoint directions.

";

%feature("docstring") casadi::DirectMultipleShooting::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::DirectMultipleShooting::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::DirectMultipleShooting::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::DirectMultipleShooting::isNull "

Is a null pointer?

";

%feature("docstring") casadi::DirectMultipleShooting::inputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::DirectMultipleShooting::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::DirectMultipleShooting::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::DirectMultipleShooting::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::DirectMultipleShooting::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::DirectMultipleShooting::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::DirectMultipleShooting::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::DirectMultipleShooting::reportConstraints "";

%feature("docstring") casadi::DirectMultipleShooting::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::DirectMultipleShooting::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::DirectMultipleShooting::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") casadi::DirectMultipleShooting::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::DirectMultipleShooting::printPtr "[INTERNAL]
Print the pointer to the internal class

";

%feature("docstring") casadi::DirectMultipleShooting::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::DirectMultipleShooting::schemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::DirectMultipleShooting::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::DirectMultipleShooting::weak "[INTERNAL]  Get
a weak reference to the object.

";

%feature("docstring") casadi::DirectMultipleShooting::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::DirectMultipleShooting::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::DirectMultipleShooting::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::DirectMultipleShooting "

Direct Multiple Shooting.

ns: Number of shooting nodes: from option number_of_grid_points  nx: Number
of differential states: from ffcn.input(INTEGRATOR_X0).size()  nc: Number of
constants during integration: ffcn.input(INTEGRATOR_P).size() nu: Number of
controls: from nc - np  np: Number of parameters: from option
number_of_parameters  nh: Number of point constraints: from
cfcn.input(0).size()

Joel Andersson

>Input scheme: casadi::OCPInput (OCP_NUM_IN = 14) [ocpIn]
+------------+--------+----------------------------------------------+
| Full name  | Short  |                 Description                  |
+============+========+==============================================+
| OCP_LBX    | lbx    | States lower bounds (nx x (ns+1)) .          |
+------------+--------+----------------------------------------------+
| OCP_UBX    | ubx    | States upper bounds (nx x (ns+1)) .          |
+------------+--------+----------------------------------------------+
| OCP_X_INIT | x_init | States initial guess (nx x (ns+1)) .         |
+------------+--------+----------------------------------------------+
| OCP_LBU    | lbu    | Controls lower bounds (nu x ns) .            |
+------------+--------+----------------------------------------------+
| OCP_UBU    | ubu    | Controls upper bounds (nu x ns) .            |
+------------+--------+----------------------------------------------+
| OCP_U_INIT | u_init | Controls initial guess (nu x ns) .           |
+------------+--------+----------------------------------------------+
| OCP_LBP    | lbp    | Parameters lower bounds (np x 1) .           |
+------------+--------+----------------------------------------------+
| OCP_UBP    | ubp    | Parameters upper bounds (np x 1) .           |
+------------+--------+----------------------------------------------+
| OCP_P_INIT | p_init | Parameters initial guess (np x 1) .          |
+------------+--------+----------------------------------------------+
| OCP_LBH    | lbh    | Point constraint lower bound (nh x (ns+1)) . |
+------------+--------+----------------------------------------------+
| OCP_UBH    | ubh    | Point constraint upper bound (nh x (ns+1)) . |
+------------+--------+----------------------------------------------+
| OCP_LBG    | lbg    | Lower bound for the coupling constraints .   |
+------------+--------+----------------------------------------------+
| OCP_UBG    | ubg    | Upper bound for the coupling constraints .   |
+------------+--------+----------------------------------------------+

>Output scheme: casadi::OCPOutput (OCP_NUM_OUT = 5) [ocpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| OCP_X_OPT              | x_opt                  | Optimal state          |
|                        |                        | trajectory .           |
+------------------------+------------------------+------------------------+
| OCP_U_OPT              | u_opt                  | Optimal control        |
|                        |                        | trajectory .           |
+------------------------+------------------------+------------------------+
| OCP_P_OPT              | p_opt                  | Optimal parameters .   |
+------------------------+------------------------+------------------------+
| OCP_COST               | cost                   | Objective/cost         |
|                        |                        | function for optimal   |
|                        |                        | solution (1 x 1) .     |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| final_time   | OT_REAL      | 1            |              | casadi::OCPS |
|              |              |              |              | olverInterna |
|              |              |              |              | l            |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| integrator   | OT_INTEGRATO | GenericType( | An           | casadi::Dire |
|              | R            | )            | integrator   | ctMultipleSh |
|              |              |              | creator      | ootingIntern |
|              |              |              | function     | al           |
+--------------+--------------+--------------+--------------+--------------+
| integrator_o | OT_DICTIONAR | GenericType( | Options to   | casadi::Dire |
| ptions       | Y            | )            | be passed to | ctMultipleSh |
|              |              |              | the          | ootingIntern |
|              |              |              | integrator   | al           |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| nlp_solver   | OT_NLPSOLVER | GenericType( | An NLPSolver | casadi::Dire |
|              |              | )            | creator      | ctMultipleSh |
|              |              |              | function     | ootingIntern |
|              |              |              |              | al           |
+--------------+--------------+--------------+--------------+--------------+
| nlp_solver_o | OT_DICTIONAR | GenericType( | Options to   | casadi::Dire |
| ptions       | Y            | )            | be passed to | ctMultipleSh |
|              |              |              | the NLP      | ootingIntern |
|              |              |              | Solver       | al           |
+--------------+--------------+--------------+--------------+--------------+
| number_of_gr | OT_INTEGER   | 20           |              | casadi::OCPS |
| id_points    |              |              |              | olverInterna |
|              |              |              |              | l            |
+--------------+--------------+--------------+--------------+--------------+
| number_of_pa | OT_INTEGER   | 0            |              | casadi::OCPS |
| rameters     |              |              |              | olverInterna |
|              |              |              |              | l            |
+--------------+--------------+--------------+--------------+--------------+
| parallelizat | OT_STRING    | GenericType( | Passed on to | casadi::Dire |
| ion          |              | )            | casadi::Para | ctMultipleSh |
|              |              |              | llelizer     | ootingIntern |
|              |              |              |              | al           |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: direct_multiple_shooting.hpp ";

%feature("docstring") casadi::DirectMultipleShooting::getMfcn "";

%feature("docstring") casadi::DirectMultipleShooting::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::DirectMultipleShooting::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::DirectMultipleShooting::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::DirectMultipleShooting::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::DirectMultipleShooting::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::DirectMultipleShooting::assignNodeNoCount "[INTERNAL]  Assign the node to a node class pointer without reference
counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::DirectMultipleShooting::spEvaluate "[INTERNAL]  Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::DirectMultipleShooting::getCount "[INTERNAL]
Get the reference count.

";

%feature("docstring") casadi::DirectMultipleShooting::hasOption "

check if there is an option str

";

%feature("docstring") casadi::DirectMultipleShooting::getFfcn "";

%feature("docstring") casadi::DirectMultipleShooting::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::DirectMultipleShooting::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::DirectMultipleShooting::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::DirectMultipleShooting::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::DirectMultipleShooting::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::DirectMultipleShooting::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::DirectMultipleShooting::checkNode "[INTERNAL]
Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::DirectMultipleShooting::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::DirectMultipleShooting::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::DirectMultipleShooting::DirectMultipleShooting
"

>  casadi::DirectMultipleShooting::DirectMultipleShooting()
------------------------------------------------------------------------

Default constructor.

>  casadi::DirectMultipleShooting::DirectMultipleShooting(const Function &ffcn, const Function &mfcn, const Function &cfcn=Function(), const Function &rfcn=Function())
------------------------------------------------------------------------

Create a multiple shooting OCP solver.

Parameters:
-----------

ffcn:  Continuous time dynamics, an casadi::Function with the following
mapping:

>Input scheme: casadi::DAEInput (DAE_NUM_IN = 5) [daeIn]
+-----------+-------+----------------------------+
| Full name | Short |        Description         |
+===========+=======+============================+
| DAE_X     | x     | Differential state .       |
+-----------+-------+----------------------------+
| DAE_Z     | z     | Algebraic state .          |
+-----------+-------+----------------------------+
| DAE_P     | p     | Parameter .                |
+-----------+-------+----------------------------+
| DAE_T     | t     | Explicit time dependence . |
+-----------+-------+----------------------------+

>Output scheme: casadi::DAEOutput (DAE_NUM_OUT = 4) [daeOut]
+-----------+-------+--------------------------------------------+
| Full name | Short |                Description                 |
+===========+=======+============================================+
| DAE_ODE   | ode   | Right hand side of the implicit ODE .      |
+-----------+-------+--------------------------------------------+
| DAE_ALG   | alg   | Right hand side of algebraic equations .   |
+-----------+-------+--------------------------------------------+
| DAE_QUAD  | quad  | Right hand side of quadratures equations . |
+-----------+-------+--------------------------------------------+
 Important notes:
In the above table, INTEGRATOR_P input is not really of shape (np x
1), but rather ( (np+nu) x 1 ).

The first np entries of the INTEGRATOR_P input are interpreted as parameters
to be optimized but constant over the whole domain. The remainder are
interpreted as controls.

BEWARE: if the right hand side of ffcn is dependent on time, the results
will be incorrect.

Parameters:
-----------

mfcn:  Mayer term, casadi::Function mapping to cost (1 x 1)

>Input scheme: casadi::MayerInput (MAYER_NUM_IN = 3) [mayerIn]
+-----------+-------+---------------------------------------------+
| Full name | Short |                 Description                 |
+===========+=======+=============================================+
| MAYER_X   | x     | States at the end of integration (nx x 1) . |
+-----------+-------+---------------------------------------------+
| MAYER_P   | p     | Problem parameters (np x 1) .               |
+-----------+-------+---------------------------------------------+

Parameters:
-----------

cfcn:  Path constraints, casadi::Function mapping to (nh x 1)

>Input scheme: casadi::DAEInput (DAE_NUM_IN = 5) [daeIn]
+-----------+-------+----------------------------+
| Full name | Short |        Description         |
+===========+=======+============================+
| DAE_X     | x     | Differential state .       |
+-----------+-------+----------------------------+
| DAE_Z     | z     | Algebraic state .          |
+-----------+-------+----------------------------+
| DAE_P     | p     | Parameter .                |
+-----------+-------+----------------------------+
| DAE_T     | t     | Explicit time dependence . |
+-----------+-------+----------------------------+

Parameters:
-----------

rfcn:  Initial value constraints

";

%feature("docstring") casadi::DirectMultipleShooting::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::DirectMultipleShooting::getRfcn "";

%feature("docstring") casadi::DirectMultipleShooting::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::DirectMultipleShooting::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::DirectMultipleShooting::getCfcn "";

%feature("docstring") casadi::DirectMultipleShooting::getNLPSolver "";

%feature("docstring") casadi::DirectMultipleShooting::spInit "[INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::DirectMultipleShooting::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::DirectMultipleShooting::evaluate "

Evaluate.

";

%feature("docstring") casadi::DirectMultipleShooting::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::DirectMultipleShooting::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::DirectMultipleShooting::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::DirectMultipleShooting::outputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::DirectMultipleShooting::swap "[INTERNAL]
Swap content with another instance.

";

%feature("docstring") casadi::DirectMultipleShooting::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::DirectMultipleShooting::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::DirectMultipleShooting::getConstraintBounds "

Get the constraints.

";

%feature("docstring") casadi::DirectMultipleShooting::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") casadi::DirectMultipleShooting::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::DirectMultipleShooting::addMonitor "

Add modules to be monitored.

";


// File: classcasadi_1_1DirectSingleShooting.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::DirectSingleShooting::getConstraintBounds "

Get the constraints.

";

%feature("docstring") casadi::DirectSingleShooting::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::DirectSingleShooting::getCount "[INTERNAL]
Get the reference count.

";

%feature("docstring") casadi::DirectSingleShooting::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::DirectSingleShooting::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::DirectSingleShooting::printPtr "[INTERNAL]
Print the pointer to the internal class

";

%feature("docstring") casadi::DirectSingleShooting::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::DirectSingleShooting::getCfcn "";

%feature("docstring") casadi::DirectSingleShooting::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::DirectSingleShooting::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::DirectSingleShooting::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::DirectSingleShooting::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::DirectSingleShooting::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::DirectSingleShooting::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::DirectSingleShooting::inputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::DirectSingleShooting::getFfcn "";

%feature("docstring") casadi::DirectSingleShooting::setOptimalSolution "

Set the optimal solution.

";

%feature("docstring") casadi::DirectSingleShooting::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::DirectSingleShooting::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::DirectSingleShooting::schemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::DirectSingleShooting::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::DirectSingleShooting::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::DirectSingleShooting::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::DirectSingleShooting::getNLPSolver "";

%feature("docstring") casadi::DirectSingleShooting::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::DirectSingleShooting::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::DirectSingleShooting::hasOption "

check if there is an option str

";

%feature("docstring") casadi::DirectSingleShooting::input_struct "[INTERNAL]  Input/output structures of the function

";

%feature("docstring") casadi::DirectSingleShooting::spInit "[INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::DirectSingleShooting::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::DirectSingleShooting::output_struct "[INTERNAL]  Input/output structures of the function

";

%feature("docstring") casadi::DirectSingleShooting::repr "[INTERNAL]  Print
a representation of the object.

";

%feature("docstring") casadi::DirectSingleShooting::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::DirectSingleShooting::checkNode "[INTERNAL]
Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::DirectSingleShooting::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::DirectSingleShooting::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::DirectSingleShooting::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::DirectSingleShooting::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::DirectSingleShooting::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::DirectSingleShooting::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::DirectSingleShooting::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::DirectSingleShooting::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::DirectSingleShooting::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::DirectSingleShooting::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::DirectSingleShooting::clone "[INTERNAL]  Deep
copy.

";

%feature("docstring") casadi::DirectSingleShooting "

Direct Single Shooting.

ns: Number of shooting nodes: from option number_of_grid_points  nx: Number
of differential states: from ffcn.input(INTEGRATOR_X0).size()  nc: Number of
constants during integration: ffcn.input(INTEGRATOR_P).size() nu: Number of
controls: from nc - np  np: Number of parameters: from option
number_of_parameters  nh: Number of point constraints: from
cfcn.input(0).size()

Joel Andersson

>Input scheme: casadi::OCPInput (OCP_NUM_IN = 14) [ocpIn]
+------------+--------+----------------------------------------------+
| Full name  | Short  |                 Description                  |
+============+========+==============================================+
| OCP_LBX    | lbx    | States lower bounds (nx x (ns+1)) .          |
+------------+--------+----------------------------------------------+
| OCP_UBX    | ubx    | States upper bounds (nx x (ns+1)) .          |
+------------+--------+----------------------------------------------+
| OCP_X_INIT | x_init | States initial guess (nx x (ns+1)) .         |
+------------+--------+----------------------------------------------+
| OCP_LBU    | lbu    | Controls lower bounds (nu x ns) .            |
+------------+--------+----------------------------------------------+
| OCP_UBU    | ubu    | Controls upper bounds (nu x ns) .            |
+------------+--------+----------------------------------------------+
| OCP_U_INIT | u_init | Controls initial guess (nu x ns) .           |
+------------+--------+----------------------------------------------+
| OCP_LBP    | lbp    | Parameters lower bounds (np x 1) .           |
+------------+--------+----------------------------------------------+
| OCP_UBP    | ubp    | Parameters upper bounds (np x 1) .           |
+------------+--------+----------------------------------------------+
| OCP_P_INIT | p_init | Parameters initial guess (np x 1) .          |
+------------+--------+----------------------------------------------+
| OCP_LBH    | lbh    | Point constraint lower bound (nh x (ns+1)) . |
+------------+--------+----------------------------------------------+
| OCP_UBH    | ubh    | Point constraint upper bound (nh x (ns+1)) . |
+------------+--------+----------------------------------------------+
| OCP_LBG    | lbg    | Lower bound for the coupling constraints .   |
+------------+--------+----------------------------------------------+
| OCP_UBG    | ubg    | Upper bound for the coupling constraints .   |
+------------+--------+----------------------------------------------+

>Output scheme: casadi::OCPOutput (OCP_NUM_OUT = 5) [ocpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| OCP_X_OPT              | x_opt                  | Optimal state          |
|                        |                        | trajectory .           |
+------------------------+------------------------+------------------------+
| OCP_U_OPT              | u_opt                  | Optimal control        |
|                        |                        | trajectory .           |
+------------------------+------------------------+------------------------+
| OCP_P_OPT              | p_opt                  | Optimal parameters .   |
+------------------------+------------------------+------------------------+
| OCP_COST               | cost                   | Objective/cost         |
|                        |                        | function for optimal   |
|                        |                        | solution (1 x 1) .     |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| final_time   | OT_REAL      | 1            |              | casadi::OCPS |
|              |              |              |              | olverInterna |
|              |              |              |              | l            |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| integrator   | OT_INTEGRATO | GenericType( | An           | casadi::Dire |
|              | R            | )            | integrator   | ctSingleShoo |
|              |              |              | creator      | tingInternal |
|              |              |              | function     |              |
+--------------+--------------+--------------+--------------+--------------+
| integrator_o | OT_DICTIONAR | GenericType( | Options to   | casadi::Dire |
| ptions       | Y            | )            | be passed to | ctSingleShoo |
|              |              |              | the          | tingInternal |
|              |              |              | integrator   |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| nlp_solver   | OT_NLPSOLVER | GenericType( | An NLPSolver | casadi::Dire |
|              |              | )            | creator      | ctSingleShoo |
|              |              |              | function     | tingInternal |
+--------------+--------------+--------------+--------------+--------------+
| nlp_solver_o | OT_DICTIONAR | GenericType( | Options to   | casadi::Dire |
| ptions       | Y            | )            | be passed to | ctSingleShoo |
|              |              |              | the NLP      | tingInternal |
|              |              |              | Solver       |              |
+--------------+--------------+--------------+--------------+--------------+
| number_of_gr | OT_INTEGER   | 20           |              | casadi::OCPS |
| id_points    |              |              |              | olverInterna |
|              |              |              |              | l            |
+--------------+--------------+--------------+--------------+--------------+
| number_of_pa | OT_INTEGER   | 0            |              | casadi::OCPS |
| rameters     |              |              |              | olverInterna |
|              |              |              |              | l            |
+--------------+--------------+--------------+--------------+--------------+
| parallelizat | OT_STRING    | GenericType( | Passed on to | casadi::Dire |
| ion          |              | )            | casadi::Para | ctSingleShoo |
|              |              |              | llelizer     | tingInternal |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: direct_single_shooting.hpp ";

%feature("docstring") casadi::DirectSingleShooting::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::DirectSingleShooting::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") casadi::DirectSingleShooting::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::DirectSingleShooting::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") casadi::DirectSingleShooting::outputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::DirectSingleShooting::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::DirectSingleShooting::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::DirectSingleShooting::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::DirectSingleShooting::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::DirectSingleShooting::getVariableBounds "

Get the variables.

";

%feature("docstring") casadi::DirectSingleShooting::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::DirectSingleShooting::inputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::DirectSingleShooting::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::DirectSingleShooting::setOptionByAllowedIndex
"[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::DirectSingleShooting::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") casadi::DirectSingleShooting::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::DirectSingleShooting::getReportConstraints "";

%feature("docstring") casadi::DirectSingleShooting::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::DirectSingleShooting::getMfcn "";

%feature("docstring") casadi::DirectSingleShooting::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::DirectSingleShooting::getOption "

get an option value

";

%feature("docstring") casadi::DirectSingleShooting::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") casadi::DirectSingleShooting::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::DirectSingleShooting::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::DirectSingleShooting::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::DirectSingleShooting::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::DirectSingleShooting::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::DirectSingleShooting::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::DirectSingleShooting::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::DirectSingleShooting::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::DirectSingleShooting::getGuess "

Get the variables.

";

%feature("docstring") casadi::DirectSingleShooting::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::DirectSingleShooting::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::DirectSingleShooting::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::DirectSingleShooting::isInit "

Is initialized?

";

%feature("docstring") casadi::DirectSingleShooting::isNull "

Is a null pointer?

";

%feature("docstring") casadi::DirectSingleShooting::outputScheme "[INTERNAL]  Access input/output scheme.

";

%feature("docstring") casadi::DirectSingleShooting::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::DirectSingleShooting::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") casadi::DirectSingleShooting::spCanEvaluate "[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::DirectSingleShooting::callDerivative "[INTERNAL]  Evaluate the function symbolically or numerically with
directional derivatives The first two arguments are the nondifferentiated
inputs and results of the evaluation, the next two arguments are a set of
forward directional seeds and the resulting forward directional derivatives,
the length of the vector being the number of forward directions. The next
two arguments are a set of adjoint directional seeds and the resulting
adjoint directional derivatives, the length of the vector being the number
of adjoint directions.

";

%feature("docstring") casadi::DirectSingleShooting::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::DirectSingleShooting::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::DirectSingleShooting::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::DirectSingleShooting::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::DirectSingleShooting::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::DirectSingleShooting::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::DirectSingleShooting::getRfcn "";

%feature("docstring") casadi::DirectSingleShooting::reportConstraints "";

%feature("docstring") casadi::DirectSingleShooting::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::DirectSingleShooting::checkInputs "[INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::DirectSingleShooting::assignNodeNoCount "[INTERNAL]  Assign the node to a node class pointer without reference
counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::DirectSingleShooting::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::DirectSingleShooting::evaluate "

Evaluate.

";

%feature("docstring") casadi::DirectSingleShooting::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::DirectSingleShooting::DirectSingleShooting "

>  casadi::DirectSingleShooting::DirectSingleShooting()
------------------------------------------------------------------------

Default constructor.

>  casadi::DirectSingleShooting::DirectSingleShooting(const Function &ffcn, const Function &mfcn, const Function &cfcn=Function(), const Function &rfcn=Function())
------------------------------------------------------------------------

Create a multiple shooting OCP solver.

Parameters:
-----------

ffcn:  Continuous time dynamics, an casadi::Function with the following
mapping:

>Input scheme: casadi::DAEInput (DAE_NUM_IN = 5) [daeIn]
+-----------+-------+----------------------------+
| Full name | Short |        Description         |
+===========+=======+============================+
| DAE_X     | x     | Differential state .       |
+-----------+-------+----------------------------+
| DAE_Z     | z     | Algebraic state .          |
+-----------+-------+----------------------------+
| DAE_P     | p     | Parameter .                |
+-----------+-------+----------------------------+
| DAE_T     | t     | Explicit time dependence . |
+-----------+-------+----------------------------+

>Output scheme: casadi::DAEOutput (DAE_NUM_OUT = 4) [daeOut]
+-----------+-------+--------------------------------------------+
| Full name | Short |                Description                 |
+===========+=======+============================================+
| DAE_ODE   | ode   | Right hand side of the implicit ODE .      |
+-----------+-------+--------------------------------------------+
| DAE_ALG   | alg   | Right hand side of algebraic equations .   |
+-----------+-------+--------------------------------------------+
| DAE_QUAD  | quad  | Right hand side of quadratures equations . |
+-----------+-------+--------------------------------------------+
 Important notes:
In the above table, INTEGRATOR_P input is not really of shape (np x
1), but rather ( (np+nu) x 1 ).

The first np entries of the INTEGRATOR_P input are interpreted as parameters
to be optimized but constant over the whole domain. The remainder are
interpreted as controls.

BEWARE: if the right hand side of ffcn is dependent on time, the results
will be incorrect.

Parameters:
-----------

mfcn:  Mayer term, casadi::Function mapping to cost (1 x 1)

>Input scheme: casadi::MayerInput (MAYER_NUM_IN = 3) [mayerIn]
+-----------+-------+---------------------------------------------+
| Full name | Short |                 Description                 |
+===========+=======+=============================================+
| MAYER_X   | x     | States at the end of integration (nx x 1) . |
+-----------+-------+---------------------------------------------+
| MAYER_P   | p     | Problem parameters (np x 1) .               |
+-----------+-------+---------------------------------------------+

Parameters:
-----------

cfcn:  Path constraints, casadi::Function mapping to (nh x 1)

>Input scheme: casadi::DAEInput (DAE_NUM_IN = 5) [daeIn]
+-----------+-------+----------------------------+
| Full name | Short |        Description         |
+===========+=======+============================+
| DAE_X     | x     | Differential state .       |
+-----------+-------+----------------------------+
| DAE_Z     | z     | Algebraic state .          |
+-----------+-------+----------------------------+
| DAE_P     | p     | Parameter .                |
+-----------+-------+----------------------------+
| DAE_T     | t     | Explicit time dependence . |
+-----------+-------+----------------------------+

Parameters:
-----------

rfcn:  Initial value constraints

";


// File: classcasadi_1_1DPLEInputIOSchemeVector.xml
%feature("docstring") casadi::DPLEInputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::DPLEInputIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") casadi::DPLEInputIOSchemeVector "[INTERNAL]  Helper
function for 'DPLEInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::DPLEInputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::DPLEInputIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::DPLEInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring")
casadi::DPLEInputIOSchemeVector::DPLEInputIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::DPLEInputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") casadi::DPLEInputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";


// File: classcasadi_1_1DPLEOutputIOSchemeVector.xml
%feature("docstring") casadi::DPLEOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::DPLEOutputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") casadi::DPLEOutputIOSchemeVector "[INTERNAL]  Helper
function for 'DPLEOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::DPLEOutputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::DPLEOutputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::DPLEOutputIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") casadi::DPLEOutputIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::DPLEOutputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring")
casadi::DPLEOutputIOSchemeVector::DPLEOutputIOSchemeVector "[INTERNAL] ";


// File: classcasadi_1_1DpleSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::DpleSolver::printStats "

Print solver statistics.

";

%feature("docstring") casadi::DpleSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::DpleSolver::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::DpleSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::DpleSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::DpleSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::DpleSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::DpleSolver::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::DpleSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::DpleSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::DpleSolver::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::DpleSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::DpleSolver::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::DpleSolver::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::DpleSolver::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::DpleSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::DpleSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::DpleSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::DpleSolver::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::DpleSolver::evaluate "

Evaluate.

";

%feature("docstring") casadi::DpleSolver::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::DpleSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::DpleSolver::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::DpleSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::DpleSolver::getOption "

get an option value

";

%feature("docstring") casadi::DpleSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::DpleSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::DpleSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::DpleSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::DpleSolver::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::DpleSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::DpleSolver::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::DpleSolver::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::DpleSolver::clone "

Clone.

";

%feature("docstring") casadi::DpleSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::DpleSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::DpleSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::DpleSolver::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::DpleSolver::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::DpleSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::DpleSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::DpleSolver::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::DpleSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::DpleSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::DpleSolver::isInit "

Is initialized?

";

%feature("docstring") casadi::DpleSolver::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") casadi::DpleSolver::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::DpleSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::DpleSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::DpleSolver::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::DpleSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::DpleSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::DpleSolver::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::DpleSolver::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::DpleSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::DpleSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::DpleSolver::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::DpleSolver::spCanEvaluate "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::DpleSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::DpleSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::DpleSolver::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::DpleSolver::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") casadi::DpleSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::DpleSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::DpleSolver::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::DpleSolver::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::DpleSolver::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::DpleSolver::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::DpleSolver::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::DpleSolver::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::DpleSolver "

Base class for Discrete Periodic Lyapunov Equation Solvers.

Given matrices $A_k$ and symmetric $V_k, k = 0..K-1$

A_k in R^(n x n) V_k in R^n

provides all of $P_k$ that satisfy:

P_0 = A_(K-1)*P_(K-1)*A_(K-1)' + V_k P_k+1 = A_k*P_k*A_k' + V_k  for k =
1..K-1 Joris Gillis

>Input scheme: casadi::DPLEInput (DPLE_NUM_IN = 3) [dpleIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| DPLE_A                 | a                      | A matrices (horzcat    |
|                        |                        | when const_dim,        |
|                        |                        | blkdiag otherwise) .   |
+------------------------+------------------------+------------------------+
| DPLE_V                 | v                      | V matrices (horzcat    |
|                        |                        | when const_dim,        |
|                        |                        | blkdiag otherwise) .   |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::DPLEOutput (DPLE_NUM_OUT = 2) [dpleOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| DPLE_P                 | p                      | Lyapunov matrix        |
|                        |                        | (horzcat when          |
|                        |                        | const_dim, blkdiag     |
|                        |                        | otherwise) (Cholesky   |
|                        |                        | of P if pos_def) .     |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| const_dim    | OT_BOOLEAN   | true         | Assume       | casadi::Dple |
|              |              |              | constant     | Internal     |
|              |              |              | dimension of |              |
|              |              |              | P            |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| eps_unstable | OT_REAL      | 0.000        | A margin for | casadi::Dple |
|              |              |              | unstability  | Internal     |
|              |              |              | detection    |              |
+--------------+--------------+--------------+--------------+--------------+
| error_unstab | OT_BOOLEAN   | false        | Throw an     | casadi::Dple |
| le           |              |              | exception    | Internal     |
|              |              |              | when it is   |              |
|              |              |              | detected     |              |
|              |              |              | that         |              |
|              |              |              | Product(A_i, |              |
|              |              |              | i=N..1) has  |              |
|              |              |              | eigenvalues  |              |
|              |              |              | greater than |              |
|              |              |              | 1-eps_unstab |              |
|              |              |              | le           |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| pos_def      | OT_BOOLEAN   | false        | Assume P     | casadi::Dple |
|              |              |              | positive     | Internal     |
|              |              |              | definite     |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: dple_solver.hpp ";

%feature("docstring") casadi::DpleSolver::hasOption "

check if there is an option str

";

%feature("docstring") casadi::DpleSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::DpleSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::DpleSolver::isNull "

Is a null pointer?

";

%feature("docstring") casadi::DpleSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::DpleSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::DpleSolver::DpleSolver "

Default constructor.

";

%feature("docstring") casadi::DpleSolver::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") casadi::DpleSolver::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::DpleSolver::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::DpleSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::DpleSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::DpleSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::DpleSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::DpleSolver::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::DpleSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::DpleSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::DpleSolver::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::DpleSolver::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::DpleSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::DpleSolver::getNumOutputs "

Get the number of function outputs.

";


// File: classcasadi_1_1DSDPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::DSDPSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::DSDPSolver::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::DSDPSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::DSDPSolver::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::DSDPSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::DSDPSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::DSDPSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::DSDPSolver::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::DSDPSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::DSDPSolver::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::DSDPSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::DSDPSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::DSDPSolver::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::DSDPSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::DSDPSolver::spCanEvaluate "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::DSDPSolver::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::DSDPSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::DSDPSolver::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::DSDPSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::DSDPSolver::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::DSDPSolver::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::DSDPSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::DSDPSolver::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::DSDPSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::DSDPSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::DSDPSolver::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::DSDPSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::DSDPSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::DSDPSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::DSDPSolver::setSOCPOptions "

Set options that make the SDP solver more suitable for solving SOCPs.

";

%feature("docstring") casadi::DSDPSolver::getOption "

get an option value

";

%feature("docstring") casadi::DSDPSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::DSDPSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::DSDPSolver::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::DSDPSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::DSDPSolver::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::DSDPSolver::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::DSDPSolver::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::DSDPSolver::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::DSDPSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::DSDPSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::DSDPSolver::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::DSDPSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::DSDPSolver "

Interface to DSDP Solver for semi definite programming.

Solves an SDP problem in standard form.
Seehttp://sdpa.indsys.chuo-u.ac.jp/sdpa/files/sdpa-c.6.2.0.manual.pdf

Primal:

min          c' x  x subject to               P = Sum_i^m F_i x_i - G P
negative semidefinite              LBA <= A x <= UBA             LBX <= x
<= UBX      with x ( n x 1)          c ( n x 1 )          G, F_i  sparse
symmetric (m x m)          X dense symmetric ( m x m ) A sparse matrix ( nc
x n)          LBA, UBA dense vector (nc x 1) LBX, UBX dense vector (n x 1)

This formulation is chosen as primal, because it does not call for a large
decision variable space.

Dual:

max          trace(G Y)  Y  subject to             trace(F_i Y) = c_i Y
positive semidefinite      with Y dense symmetric ( m x m)

On generality: you might have formulation with block partitioning:

Primal:

min          c' x  x subject to               Pj = Sum_i^m F_ij x_i - gj
for all j               Pj negative semidefinite   for all j with x ( n x 1)
c ( n x 1 )          G, F_i  sparse symmetric (m x m)          X dense
symmetric ( m x m )

Dual:max          Sum_j trace(Gj Yj)  Yj  subject to             Sum_j
trace(F_ij Yj) = c_i   for all j             Yj positive semidefinite for
all j      with Y dense symmetric ( m x m)

You can cast this into the standard form with: G = blkdiag(Gj for all j) Fi
= blkdiag(F_ij for all j)

Implementations of SDPSolver are encouraged to exploit this block structure.

Warning: The solver DSDP is not good at handling linear equalities. There
are several options if you notice difficulties: play around with the
parameter \"_penalty\" leave a gap manually switch to another SDP Solver

Joris Gillis

>Input scheme: casadi::SDPInput (SDP_SOLVER_NUM_IN = 9) [sdpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SDP_SOLVER_F           | f                      | The horizontal stack   |
|                        |                        | of all matrices F_i: ( |
|                        |                        | m x nm) .              |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_C           | c                      | The vector c: ( n x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_G           | g                      | The matrix G: ( m x m) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_A           | a                      | The matrix A: ( nc x   |
|                        |                        | n) .                   |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_LBA         | lba                    | Lower bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_UBA         | uba                    | Upper bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_LBX         | lbx                    | Lower bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_UBX         | ubx                    | Upper bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::SDPOutput (SDP_SOLVER_NUM_OUT = 8) [sdpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SDP_SOLVER_X           | x                      | The primal solution (n |
|                        |                        | x 1) - may be used as  |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_P           | p                      | The solution P (m x m) |
|                        |                        | - may be used as       |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_DUAL        | dual                   | The dual solution (m x |
|                        |                        | m) - may be used as    |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_COST        | cost                   | The primal optimal     |
|                        |                        | cost (1 x 1) .         |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_DUAL_COST   | dual_cost              | The dual optimal cost  |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_LAM_A       | lam_a                  | The dual solution      |
|                        |                        | corresponding to the   |
|                        |                        | linear constraints (nc |
|                        |                        | x 1) .                 |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_LAM_X       | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds (n x 1)  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| _loglevel    | OT_INTEGER   | 0            | An integer   | casadi::DSDP |
|              |              |              | that         | Internal     |
|              |              |              | specifies    |              |
|              |              |              | how much     |              |
|              |              |              | logging is   |              |
|              |              |              | done on      |              |
|              |              |              | stdout.      |              |
+--------------+--------------+--------------+--------------+--------------+
| _penalty     | OT_REAL      | 100000       | Penality     | casadi::DSDP |
|              |              |              | parameter    | Internal     |
|              |              |              | lambda. Must |              |
|              |              |              | exceed the   |              |
|              |              |              | trace of Y.  |              |
|              |              |              | This         |              |
|              |              |              | parameter    |              |
|              |              |              | heavily      |              |
|              |              |              | influences   |              |
|              |              |              | the ability  |              |
|              |              |              | of DSDP to   |              |
|              |              |              | treat linear |              |
|              |              |              | equalities.  |              |
|              |              |              | The DSDP     |              |
|              |              |              | standard     |              |
|              |              |              | default      |              |
|              |              |              | (1e8) will   |              |
|              |              |              | make a       |              |
|              |              |              | problem with |              |
|              |              |              | linear       |              |
|              |              |              | equality     |              |
|              |              |              | return       |              |
|              |              |              | unusable     |              |
|              |              |              | solutions.   |              |
+--------------+--------------+--------------+--------------+--------------+
| _printlevel  | OT_INTEGER   | 1            | A printlevel | casadi::DSDP |
|              |              |              | of zero will | Internal     |
|              |              |              | disable all  |              |
|              |              |              | output.      |              |
|              |              |              | Another      |              |
|              |              |              | number       |              |
|              |              |              | indicates    |              |
|              |              |              | how often a  |              |
|              |              |              | line is      |              |
|              |              |              | printed.     |              |
+--------------+--------------+--------------+--------------+--------------+
| _reuse       | OT_INTEGER   | 4            | Maximum on   | casadi::DSDP |
|              |              |              | the number   | Internal     |
|              |              |              | of times the |              |
|              |              |              | Schur        |              |
|              |              |              | complement   |              |
|              |              |              | matrix is    |              |
|              |              |              | reused       |              |
+--------------+--------------+--------------+--------------+--------------+
| _rho         | OT_REAL      | 4            | Potential    | casadi::DSDP |
|              |              |              | parameter.   | Internal     |
|              |              |              | Must be >=1  |              |
+--------------+--------------+--------------+--------------+--------------+
| _use_penalty | OT_BOOLEAN   | true         | Modifies the | casadi::DSDP |
|              |              |              | algorithm to | Internal     |
|              |              |              | use a        |              |
|              |              |              | penality     |              |
|              |              |              | gamma on r.  |              |
+--------------+--------------+--------------+--------------+--------------+
| _zbar        | OT_REAL      | 1.000e+10    | Initial      | casadi::DSDP |
|              |              |              | upper bound  | Internal     |
|              |              |              | on the       |              |
|              |              |              | objective of |              |
|              |              |              | the dual     |              |
|              |              |              | problem.     |              |
+--------------+--------------+--------------+--------------+--------------+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| calc_dual    | OT_BOOLEAN   | true         | Indicate if  | casadi::SDPS |
|              |              |              | dual should  | olverInterna |
|              |              |              | be allocated | l            |
|              |              |              | and          |              |
|              |              |              | calculated.  |              |
|              |              |              | You may want |              |
|              |              |              | to avoid     |              |
|              |              |              | calculating  |              |
|              |              |              | this         |              |
|              |              |              | variable for |              |
|              |              |              | problems     |              |
|              |              |              | with n       |              |
|              |              |              | large, as is |              |
|              |              |              | always dense |              |
|              |              |              | (m x m).     |              |
+--------------+--------------+--------------+--------------+--------------+
| calc_p       | OT_BOOLEAN   | true         | Indicate if  | casadi::SDPS |
|              |              |              | the P-part   | olverInterna |
|              |              |              | of primal    | l            |
|              |              |              | solution     |              |
|              |              |              | should be    |              |
|              |              |              | allocated    |              |
|              |              |              | and          |              |
|              |              |              | calculated.  |              |
|              |              |              | You may want |              |
|              |              |              | to avoid     |              |
|              |              |              | calculating  |              |
|              |              |              | this         |              |
|              |              |              | variable for |              |
|              |              |              | problems     |              |
|              |              |              | with n       |              |
|              |              |              | large, as is |              |
|              |              |              | always dense |              |
|              |              |              | (m x m).     |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| dualTol      | OT_REAL      | 0.000        | Tolerance    | casadi::DSDP |
|              |              |              | for dual inf | Internal     |
|              |              |              | easibility   |              |
|              |              |              | (translates  |              |
|              |              |              | to primal in |              |
|              |              |              | feasibility  |              |
|              |              |              | in dsdp      |              |
|              |              |              | terms)       |              |
+--------------+--------------+--------------+--------------+--------------+
| gapTol       | OT_REAL      | 0.000        | Convergence  | casadi::DSDP |
|              |              |              | criterion    | Internal     |
|              |              |              | based on     |              |
|              |              |              | distance     |              |
|              |              |              | between      |              |
|              |              |              | primal and   |              |
|              |              |              | dual         |              |
|              |              |              | objective    |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inf          | OT_REAL      | 1.000e+30    | Treat        | casadi::DSDP |
|              |              |              | numbers      | Internal     |
|              |              |              | higher than  |              |
|              |              |              | this as      |              |
|              |              |              | infinity     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| maxIter      | OT_INTEGER   | 500          | Maximum      | casadi::DSDP |
|              |              |              | number of    | Internal     |
|              |              |              | iterations   |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| primalTol    | OT_REAL      | 0.000        | Tolerance    | casadi::DSDP |
|              |              |              | for primal i | Internal     |
|              |              |              | nfeasibility |              |
|              |              |              | (translates  |              |
|              |              |              | to dual infe |              |
|              |              |              | asibility in |              |
|              |              |              | dsdp terms)  |              |
+--------------+--------------+--------------+--------------+--------------+
| print_proble | OT_BOOLEAN   | false        | Print out    | casadi::SDPS |
| m            |              |              | problem      | olverInterna |
|              |              |              | statement    | l            |
|              |              |              | for          |              |
|              |              |              | debugging.   |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| stepTol      | OT_REAL      | 0.050        | Terminate    | casadi::DSDP |
|              |              |              | the solver   | Internal     |
|              |              |              | if the step  |              |
|              |              |              | length in    |              |
|              |              |              | the primal   |              |
|              |              |              | is below     |              |
|              |              |              | this         |              |
|              |              |              | tolerance.   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available stats
+--------------------+----------------------+
|         Id         |       Used in        |
+====================+======================+
| solution_type      | casadi::DSDPInternal |
+--------------------+----------------------+
| termination_reason | casadi::DSDPInternal |
+--------------------+----------------------+

Diagrams

C++ includes: dsdp_solver.hpp ";

%feature("docstring") casadi::DSDPSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::DSDPSolver::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::DSDPSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::DSDPSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::DSDPSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::DSDPSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::DSDPSolver::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::DSDPSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::DSDPSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::DSDPSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::DSDPSolver::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::DSDPSolver::evaluate "

Evaluate.

";

%feature("docstring") casadi::DSDPSolver::DSDPSolver "

>  casadi::DSDPSolver::DSDPSolver()
------------------------------------------------------------------------

Default constructor.

";

%feature("docstring") casadi::DSDPSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::DSDPSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::DSDPSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::DSDPSolver::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::DSDPSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::DSDPSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::DSDPSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::DSDPSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::DSDPSolver::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::DSDPSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::DSDPSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::DSDPSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::DSDPSolver::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::DSDPSolver::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") casadi::DSDPSolver::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::DSDPSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::DSDPSolver::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::DSDPSolver::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::DSDPSolver::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::DSDPSolver::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::DSDPSolver::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::DSDPSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::DSDPSolver::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::DSDPSolver::isNull "

Is a null pointer?

";

%feature("docstring") casadi::DSDPSolver::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::DSDPSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::DSDPSolver::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") casadi::DSDPSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::DSDPSolver::hasOption "

check if there is an option str

";

%feature("docstring") casadi::DSDPSolver::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::DSDPSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::DSDPSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::DSDPSolver::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") casadi::DSDPSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::DSDPSolver::isInit "

Is initialized?

";


// File: classcasadi_1_1EmptySparsity.xml


/*  Check if two sparsity patterns are identical  */

/*  Size and element counting  */ %feature("docstring")
casadi::EmptySparsity::row "

>  const std::vector< int > & casadi::Sparsity::row() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a reference to row-vector, containing rows for all non-zero
elements (see class description)

>  int casadi::Sparsity::row(int el) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the row of a non-zero element.

";

%feature("docstring") casadi::EmptySparsity::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::EmptySparsity::reserve "[INTERNAL]  Reserve
space.

";

%feature("docstring") casadi::EmptySparsity::patternUnion "[INTERNAL]
Union of two sparsity patterns.

";

%feature("docstring") casadi::EmptySparsity::compress "[INTERNAL]  Compress
a sparsity pattern.

";

%feature("docstring") casadi::EmptySparsity::makeDense "[INTERNAL]  Make a
patten dense.

";

%feature("docstring") casadi::EmptySparsity::enlarge "[INTERNAL]  Enlarge
matrix Make the matrix larger by inserting empty rows and columns, keeping
the existing non-zeros.

For the matrices A to B A(m, n) length(jj)=m , length(ii)=n B(nrow, ncol)

A=enlarge(m, n, ii, jj) makes sure that

B[jj, ii] == A

";

%feature("docstring") casadi::EmptySparsity::getUpperNZ "[INTERNAL]  Get
nonzeros in upper triangular part.

";

%feature("docstring") casadi::EmptySparsity::set "

>  void casadi::Sparsity::set(T *data, const T *val_data, const Sparsity &val_sp) const 
------------------------------------------------------------------------
[INTERNAL] 
Assign the nonzero entries of one sparsity pattern to the nonzero
entries of another sparsity pattern.

>  void casadi::Sparsity::set(DataType *data, const DataType *val_data, const Sparsity &val_sp) const 
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::EmptySparsity::isEmpty "[INTERNAL]  Check if
the sparsity is empty.

A sparsity is considered empty if one of the dimensions is zero (or
optionally both dimensions)

";

%feature("docstring") casadi::EmptySparsity::patternInverse "[INTERNAL]
Take the inverse of a sparsity pattern; flip zeros and non-zeros.

";

%feature("docstring") casadi::EmptySparsity::removeDuplicates "[INTERNAL]
Remove duplicate entries.

The same indices will be removed from the mapping vector, which must have
the same length as the number of nonzeros

";

%feature("docstring") casadi::EmptySparsity::appendColumns "[INTERNAL]
Append another sparsity patten horizontally.

";

%feature("docstring") casadi::EmptySparsity::diag "[INTERNAL]  Create
diagonal sparsity pattern.

";

%feature("docstring") casadi::EmptySparsity::sub "[INTERNAL]  Get a
submatrix.

Returns the sparsity of the submatrix, with a mapping such that submatrix[k]
= originalmatrix[mapping[k]]

";

%feature("docstring") casadi::EmptySparsity::resize "[INTERNAL]  Resize.

";

%feature("docstring") casadi::EmptySparsity::rowsSequential "[INTERNAL]  Do
the rows appear sequentially on each column.

Parameters:
-----------

strictly:  if true, then do not allow multiple entries

";

%feature("docstring") casadi::EmptySparsity::T "[INTERNAL]   Transpose the
matrix (shorthand)

";

%feature("docstring") casadi::EmptySparsity::isReshape "[INTERNAL]  Check
if the sparsity is a reshape of another.

";

%feature("docstring") casadi::EmptySparsity::scalar "[INTERNAL]  Create a
scalar sparsity pattern.

";

%feature("docstring") casadi::EmptySparsity::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::EmptySparsity::spyMatlab "[INTERNAL]
Generate a script for Matlab or Octave which visualizes the sparsity using
the spy command.

";

%feature("docstring") casadi::EmptySparsity::starColoring2 "[INTERNAL]
Perform a star coloring of a symmetric matrix: A new greedy distance-2
coloring algorithm (Algorithm 4.1 in A. H. GEBREMEDHIN, A. TARAFDAR, F.
MANNE, A. POTHEN) Ordering options: None (0), largest first (1)

";

%feature("docstring") casadi::EmptySparsity::isDiagonal "[INTERNAL]  Is
diagonal?

";

%feature("docstring") casadi::EmptySparsity::hash "[INTERNAL] ";

%feature("docstring") casadi::EmptySparsity::isDense "[INTERNAL]  Is dense?

";

%feature("docstring") casadi::EmptySparsity::printCompact "[INTERNAL]
Print a compact description of the sparsity pattern.

";

%feature("docstring") casadi::EmptySparsity::isEqual "[INTERNAL] ";

%feature("docstring") casadi::EmptySparsity::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::EmptySparsity::compressed "[INTERNAL]  Create
from a single vector containing the pattern in compressed column storage
format: The format: The first two entries are the number of rows (nrow) and
columns (ncol) The next ncol+1 entries are the column offsets (colind). Note
that the last element, colind[ncol], gives the number of nonzeros The last
colind[ncol] entries are the row indices

";

%feature("docstring") casadi::EmptySparsity::size2 "[INTERNAL]  Get the
number of columns.

";

%feature("docstring") casadi::EmptySparsity::getCRS "[INTERNAL]  Get the
sparsity in compressed row storage (CRS) format.

";

%feature("docstring") casadi::EmptySparsity::size1 "[INTERNAL]  Get the
number of rows.

";

%feature("docstring") casadi::EmptySparsity::isInit "[INTERNAL]  Is
initialized?

";

%feature("docstring") casadi::EmptySparsity::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::EmptySparsity::unit "[INTERNAL]  Create the
sparsity pattern for a unit vector of length n and a nonzero on position el.

";

%feature("docstring") casadi::EmptySparsity::checkNode "[INTERNAL]  Check
if the node is pointing to the right type of object.

";

%feature("docstring") casadi::EmptySparsity::transpose "

>  Sparsity casadi::Sparsity::transpose() const 
------------------------------------------------------------------------
[INTERNAL] 
 Transpose the matrix.

>  Sparsity casadi::Sparsity::transpose(std::vector< int > &mapping, bool invert_mapping=false) const 
------------------------------------------------------------------------
[INTERNAL] 
 Transpose the matrix and get the reordering of the non-zero entries.

Parameters:
-----------

mapping:  the non-zeros of the original matrix for each non-zero of the new
matrix

";

%feature("docstring") casadi::EmptySparsity::eliminationTree "[INTERNAL]
Calculate the elimination tree See Direct Methods for Sparse Linear Systems
by Davis (2006). If the parameter ata is false, the algorithm is equivalent
to Matlab's etree(A), except that the indices are zero- based. If ata is
true, the algorithm is equivalent to Matlab's etree(A, 'row').

";

%feature("docstring") casadi::EmptySparsity "[INTERNAL] ";

%feature("docstring") casadi::EmptySparsity::getRepresentation "[INTERNAL]
Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::EmptySparsity::getNZ "

>  int casadi::Sparsity::getNZ(int rr, int cc)
------------------------------------------------------------------------
[INTERNAL] 
Get the index of a non-zero element Add the element if it does not
exist and copy object if it's not unique.

>  int casadi::Sparsity::getNZ(int rr, int cc) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the index of an existing non-zero element return -1 if the element
does not exist.

>  std::vector< int > casadi::Sparsity::getNZ(const std::vector< int > &rr, const std::vector< int > &cc) const 
------------------------------------------------------------------------
[INTERNAL] 
Get a set of non-zero element return -1 if the element does not exist.

";

%feature("docstring") casadi::EmptySparsity::depthFirstSearch "[INTERNAL]
Depth-first search on the adjacency graph of the sparsity See Direct Methods
for Sparse Linear Systems by Davis (2006).

";

%feature("docstring") casadi::EmptySparsity::starColoring "[INTERNAL]
Perform a star coloring of a symmetric matrix: A greedy distance-2 coloring
algorithm (Algorithm 4.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN) Ordering
options: None (0), largest first (1)

";

%feature("docstring") casadi::EmptySparsity::patternProduct "[INTERNAL]
Sparsity pattern for a matrix-matrix product Returns the sparsity pattern
resulting from pre-multiplying the pattern with the transpose of x. Returns
the new sparsity pattern as well as a mapping with the same length as the
number of non-zero elements The mapping contains a vector of the index pairs
that makes up the scalar products for each non-zero.

";

%feature("docstring") casadi::EmptySparsity::append "[INTERNAL]  Append
another sparsity patten vertically (NOTE: only efficient if vector)

";

%feature("docstring") casadi::EmptySparsity::rowRef "[INTERNAL]  Get a
reference to the rows of all non-zero element (copy if not unique!)

";

%feature("docstring") casadi::EmptySparsity::getTriplet "[INTERNAL]  Get
the sparsity in sparse triplet format.

";

%feature("docstring") casadi::EmptySparsity::getDescription "[INTERNAL]
Return a string with a description (for SWIG)

";

%feature("docstring") casadi::EmptySparsity::isSquare "[INTERNAL]  Is
square?

";

%feature("docstring") casadi::EmptySparsity::erase "[INTERNAL]  Erase rows
and/or columns of a matrix.

";

%feature("docstring") casadi::EmptySparsity::bor "

>  void casadi::Sparsity::bor(T *data, const T *val_data, const Sparsity &val_sp) const 
------------------------------------------------------------------------
[INTERNAL] 
Bitwise or of the nonzero entries of one sparsity pattern and the
nonzero entries of another sparsity pattern.

>  void casadi::Sparsity::bor(DataType *data, const DataType *val_data, const Sparsity &val_sp) const 
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::EmptySparsity::colind "

>  const std::vector< int > & casadi::Sparsity::colind() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a reference to the colindex of all column element (see class
description)

>  int casadi::Sparsity::colind(int i) const 
------------------------------------------------------------------------
[INTERNAL] 
Get a reference to the colindex of col i (see class description)

";

%feature("docstring") casadi::EmptySparsity::size "[INTERNAL]  Get the
number of (structural) non-zeros.

See:   numel()

";

%feature("docstring") casadi::EmptySparsity::patternCombine "[INTERNAL]
Combine two sparsity patterns Returns the new sparsity pattern as well as a
mapping with the same length as the number of non-zero elements The mapping
matrix contains the arguments for each nonzero, the first bit indicates if
the first argument is nonzero, the second bit indicates if the second
argument is nonzero (note that none of, one of or both of the arguments can
be nonzero)

";

%feature("docstring") casadi::EmptySparsity::dulmageMendelsohn "[INTERNAL]
Compute the Dulmage-Mendelsohn decomposition See Direct Methods for Sparse
Linear Systems by Davis (2006).

Dulmage-Mendelsohn will try to bring your matrix into lower block-
triangular (LBT) form. It will not care about the distance of off- diagonal
elements to the diagonal: there is no guarantee you will get a block-
diagonal matrix if you supply a randomly permuted block- diagonal matrix.

If your matrix is symmetrical, this method is of limited use; permutation
can make it non-symmetric.

See:   stronglyConnectedComponents

";

%feature("docstring") casadi::EmptySparsity::enlargeColumns "[INTERNAL]
Enlarge the matrix along the second dimension (i.e. insert columns)

";

%feature("docstring") casadi::EmptySparsity::sizeU "[INTERNAL]  Number of
non-zeros in the upper triangular half, i.e. the number of elements (i, j)
with j>=i.

";

%feature("docstring") casadi::EmptySparsity::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::EmptySparsity::sizeL "[INTERNAL]  Number of
non-zeros in the lower triangular half, i.e. the number of elements (i, j)
with j<=i.

";

%feature("docstring") casadi::EmptySparsity::sizeD "[INTERNAL]  Number of
non-zeros on the diagonal, i.e. the number of elements (i, j) with j==i.

";

%feature("docstring") casadi::EmptySparsity::isVector "[INTERNAL]  Is
vector (i.e. size2()==1)

";

%feature("docstring") casadi::EmptySparsity::numel "[INTERNAL]  The total
number of elements, including structural zeros, i.e. size2()*size1()

See:   size()

";

%feature("docstring") casadi::EmptySparsity::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::EmptySparsity::getDiag "[INTERNAL]  Get the
diagonal of the matrix/create a diagonal matrix (mapping will contain the
nonzero mapping) When the input is square, the diagonal elements are
returned. If the input is vector-like, a diagonal matrix is constructed with
it.

";

%feature("docstring") casadi::EmptySparsity::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::EmptySparsity::sparse "[INTERNAL]  Create a
sparse (empty) rectangular sparsity pattern.

";

%feature("docstring") casadi::EmptySparsity::isNull "[INTERNAL]  Is a null
pointer?

";

%feature("docstring") casadi::EmptySparsity::getTril "[INTERNAL]  Get lower
triangular part.

";

%feature("docstring") casadi::EmptySparsity::unidirectionalColoring "[INTERNAL]  Perform a unidirectional coloring: A greedy distance-2 coloring
algorithm (Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN)

";

%feature("docstring") casadi::EmptySparsity::patternIntersection "[INTERNAL]  Intersection of two sparsity patterns Returns the new sparsity
pattern as well as a mapping with the same length as the number of non-zero
elements The value is 1 if the non-zero comes from the first (i.e. this)
object, 2 if it is from the second and 3 (i.e. 1 | 2) if from both.

";

%feature("docstring") casadi::EmptySparsity::dimString "[INTERNAL]  Get the
dimension as a string.

";

%feature("docstring") casadi::EmptySparsity::sanityCheck "[INTERNAL]  Check
if the dimensions and colind, row vectors are compatible.

Parameters:
-----------

complete:  set to true to also check elementwise throws an error as possible
result

";

%feature("docstring") casadi::EmptySparsity::reCache "[INTERNAL]  Check if
there is an identical copy of the sparsity pattern in the cache, and if so,
make a shallow copy of that one.

";

%feature("docstring") casadi::EmptySparsity::isTril "[INTERNAL]  Is lower
triangular?

";

%feature("docstring") casadi::EmptySparsity::init "[INTERNAL]  Initialize
or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::EmptySparsity::getTriu "[INTERNAL]  Get upper
triangular part.

";

%feature("docstring") casadi::EmptySparsity::reshape "[INTERNAL]   Reshape
a sparsity, order of nonzeros remains the same.

";

%feature("docstring") casadi::EmptySparsity::stronglyConnectedComponents "[INTERNAL]  Find the strongly connected components of the bigraph defined by
the sparsity pattern of a square matrix.

See Direct Methods for Sparse Linear Systems by Davis (2006). Returns:
Number of components

Offset for each components (length: 1 + number of components)

Indices for each components, component i has indices index[offset[i]], ...,
index[offset[i+1]]

In the case that the matrix is symmetric, the result has a particular
interpretation: Given a symmetric matrix A and n =
A.stronglyConnectedComponents(p, r)

=> A[p, p] will appear block-diagonal with n blocks and with the indices of
the block boundaries to be found in r.

";

%feature("docstring") casadi::EmptySparsity::largestFirstOrdering "[INTERNAL]  Order the cols by decreasing degree.

";

%feature("docstring") casadi::EmptySparsity::spy "[INTERNAL]  Print a
textual representation of sparsity.

";

%feature("docstring") casadi::EmptySparsity::isSingular "[INTERNAL]  Check
whether the sparsity-pattern indicates structural singularity.

";

%feature("docstring") casadi::EmptySparsity::getCCS "[INTERNAL]  Get the
sparsity in compressed column storage (CCS) format.

";

%feature("docstring") casadi::EmptySparsity::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::EmptySparsity::EmptySparsity "[INTERNAL] ";

%feature("docstring") casadi::EmptySparsity::isScalar "[INTERNAL]  Is
scalar?

";

%feature("docstring") casadi::EmptySparsity::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") casadi::EmptySparsity::isTranspose "[INTERNAL]  Check
if the sparsity is the transpose of another.

";

%feature("docstring") casadi::EmptySparsity::getNZInplace "[INTERNAL]  Get
the nonzero index for a set of elements The index vector is used both for
input and outputs and must be sorted by increasing nonzero index, i.e.
column-wise. Elements not found in the sparsity pattern are set to -1.

";

%feature("docstring") casadi::EmptySparsity::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") casadi::EmptySparsity::hasNZ "[INTERNAL]  Returns
true if the pattern has a non-zero at location rr, cc.

";

%feature("docstring") casadi::EmptySparsity::isSymmetric "[INTERNAL]  Is
symmetric?

";

%feature("docstring") casadi::EmptySparsity::shape "[INTERNAL]  Get the
shape.

";

%feature("docstring") casadi::EmptySparsity::printPtr "[INTERNAL]  Print
the pointer to the internal class

";

%feature("docstring") casadi::EmptySparsity::pmult "[INTERNAL]  Permute
rows and/or columns Multiply the sparsity with a permutation matrix from the
left and/or from the right P * A * trans(P), A * trans(P) or A * trans(P)
with P defined by an index vector containing the row for each col. As an
alternative, P can be transposed (inverted).

";

%feature("docstring") casadi::EmptySparsity::getCol "[INTERNAL]  Get the
column for each non-zero entry Together with the row-vector, this vector
gives the sparsity of the matrix in sparse triplet format, i.e. the column
and row for each non-zero elements.

";

%feature("docstring") casadi::EmptySparsity::isTriu "[INTERNAL]  Is upper
triangular?

";

%feature("docstring") casadi::EmptySparsity::enlargeRows "[INTERNAL]
Enlarge the matrix along the first dimension (i.e. insert rows)

";

%feature("docstring") casadi::EmptySparsity::getElements "

>  std::vector< int > casadi::Sparsity::getElements(bool col_major=true) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the location of all non-zero elements as they would appear in a
Dense matrix A : DenseMatrix 4 x 3 B : SparseMatrix 4 x 3 , 5
structural non-zeros.

k = A.getElements() A[k] will contain the elements of A that are non- zero
in B

>  void casadi::Sparsity::getElements(std::vector< int > &loc, bool col_major=true) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the location of all nonzero elements (inplace version)

";

%feature("docstring") casadi::EmptySparsity::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::EmptySparsity::dense "[INTERNAL]  Create a
dense rectangular sparsity pattern.

";

%feature("docstring") casadi::EmptySparsity::getLowerNZ "[INTERNAL]  Get
nonzeros in lower triangular part.

";

%feature("docstring") casadi::EmptySparsity::add "

>  void casadi::Sparsity::add(T *data, const T *val_data, const Sparsity &val_sp) const 
------------------------------------------------------------------------
[INTERNAL] 
Add the nonzero entries of one sparsity pattern to the nonzero entries
of another sparsity pattern.

>  void casadi::Sparsity::add(DataType *data, const DataType *val_data, const Sparsity &val_sp) const 
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::EmptySparsity::colindRef "[INTERNAL]  Get a
reference to the colindex of all column element (copy if not unique!)

";


// File: classcasadi_1_1ExternalFunction.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::ExternalFunction::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::ExternalFunction::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::ExternalFunction::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::ExternalFunction::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::ExternalFunction::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::ExternalFunction::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::ExternalFunction::printPtr "[INTERNAL]  Print
the pointer to the internal class

";

%feature("docstring") casadi::ExternalFunction::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") casadi::ExternalFunction::isNull "

Is a null pointer?

";

%feature("docstring") casadi::ExternalFunction::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::ExternalFunction::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::ExternalFunction::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::ExternalFunction::inputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::ExternalFunction::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::ExternalFunction::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::ExternalFunction::schemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::ExternalFunction::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::ExternalFunction::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::ExternalFunction::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::ExternalFunction::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::ExternalFunction::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::ExternalFunction::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::ExternalFunction::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") casadi::ExternalFunction::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::ExternalFunction::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::ExternalFunction::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::ExternalFunction::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::ExternalFunction::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::ExternalFunction::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") casadi::ExternalFunction::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::ExternalFunction::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::ExternalFunction::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::ExternalFunction::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::ExternalFunction::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::ExternalFunction::checkInputs "[INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::ExternalFunction::getCount "[INTERNAL]  Get
the reference count.

";

%feature("docstring") casadi::ExternalFunction::evaluate "

Evaluate.

";

%feature("docstring") casadi::ExternalFunction "

Interface for a function that is not implemented by CasADi symbolics.

Joel Andersson

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: external_function.hpp ";

%feature("docstring") casadi::ExternalFunction::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::ExternalFunction::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::ExternalFunction::outputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::ExternalFunction::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::ExternalFunction::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::ExternalFunction::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::ExternalFunction::isInit "

Is initialized?

";

%feature("docstring") casadi::ExternalFunction::hasOption "

check if there is an option str

";

%feature("docstring") casadi::ExternalFunction::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::ExternalFunction::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") casadi::ExternalFunction::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::ExternalFunction::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::ExternalFunction::assignNodeNoCount "[INTERNAL]  Assign the node to a node class pointer without reference
counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::ExternalFunction::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::ExternalFunction::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::ExternalFunction::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::ExternalFunction::spInit "[INTERNAL]  Reset
the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::ExternalFunction::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::ExternalFunction::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::ExternalFunction::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::ExternalFunction::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::ExternalFunction::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::ExternalFunction::inputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::ExternalFunction::spCanEvaluate "[INTERNAL]
Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::ExternalFunction::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::ExternalFunction::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::ExternalFunction::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::ExternalFunction::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::ExternalFunction::getOption "

get an option value

";

%feature("docstring") casadi::ExternalFunction::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::ExternalFunction::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::ExternalFunction::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::ExternalFunction::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::ExternalFunction::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::ExternalFunction::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::ExternalFunction::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::ExternalFunction::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::ExternalFunction::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::ExternalFunction::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::ExternalFunction::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::ExternalFunction::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::ExternalFunction::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::ExternalFunction::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::ExternalFunction::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::ExternalFunction::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") casadi::ExternalFunction::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::ExternalFunction::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::ExternalFunction::checkNode "

Check if the pointer points towards a valid object.

";

%feature("docstring") casadi::ExternalFunction::ExternalFunction "

>  casadi::ExternalFunction::ExternalFunction()
------------------------------------------------------------------------

CONSTRUCTORS:

default constructor

>  casadi::ExternalFunction::ExternalFunction(const std::string &bin_name)
------------------------------------------------------------------------

Create an empty function.

";

%feature("docstring") casadi::ExternalFunction::clone "[INTERNAL]  Deep
copy.

";

%feature("docstring") casadi::ExternalFunction::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::ExternalFunction::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::ExternalFunction::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";


// File: structcasadi_1_1F00Checker.xml
%feature("docstring") casadi::F00Checker "[INTERNAL]  If evaluated with
both arguments zero, is the result zero?

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F00Checker_3_01OP__ADD_01_4.xml
%feature("docstring") casadi::F00Checker< OP_ADD > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F00Checker_3_01OP__AND_01_4.xml
%feature("docstring") casadi::F00Checker< OP_AND > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F00Checker_3_01OP__COPYSIGN_01_4.xml
%feature("docstring") casadi::F00Checker< OP_COPYSIGN > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F00Checker_3_01OP__FMAX_01_4.xml
%feature("docstring") casadi::F00Checker< OP_FMAX > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F00Checker_3_01OP__FMIN_01_4.xml
%feature("docstring") casadi::F00Checker< OP_FMIN > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F00Checker_3_01OP__OR_01_4.xml
%feature("docstring") casadi::F00Checker< OP_OR > " [INTERNAL] C++ includes:
casadi_calculus.hpp ";


// File: structcasadi_1_1F00Checker_3_01OP__SUB_01_4.xml
%feature("docstring") casadi::F00Checker< OP_SUB > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F0XChecker.xml
%feature("docstring") casadi::F0XChecker "[INTERNAL]  If evaluated with the
first argument zero, is the result zero?

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F0XChecker_3_01OP__AND_01_4.xml
%feature("docstring") casadi::F0XChecker< OP_AND > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F0XChecker_3_01OP__ASIN_01_4.xml
%feature("docstring") casadi::F0XChecker< OP_ASIN > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F0XChecker_3_01OP__ASINH_01_4.xml
%feature("docstring") casadi::F0XChecker< OP_ASINH > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F0XChecker_3_01OP__ASSIGN_01_4.xml
%feature("docstring") casadi::F0XChecker< OP_ASSIGN > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F0XChecker_3_01OP__ATAN_01_4.xml
%feature("docstring") casadi::F0XChecker< OP_ATAN > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F0XChecker_3_01OP__ATANH_01_4.xml
%feature("docstring") casadi::F0XChecker< OP_ATANH > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F0XChecker_3_01OP__CEIL_01_4.xml
%feature("docstring") casadi::F0XChecker< OP_CEIL > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F0XChecker_3_01OP__CONSTPOW_01_4.xml
%feature("docstring") casadi::F0XChecker< OP_CONSTPOW > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F0XChecker_3_01OP__COPYSIGN_01_4.xml
%feature("docstring") casadi::F0XChecker< OP_COPYSIGN > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F0XChecker_3_01OP__DIV_01_4.xml
%feature("docstring") casadi::F0XChecker< OP_DIV > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F0XChecker_3_01OP__ERF_01_4.xml
%feature("docstring") casadi::F0XChecker< OP_ERF > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F0XChecker_3_01OP__ERFINV_01_4.xml
%feature("docstring") casadi::F0XChecker< OP_ERFINV > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F0XChecker_3_01OP__FABS_01_4.xml
%feature("docstring") casadi::F0XChecker< OP_FABS > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F0XChecker_3_01OP__FLOOR_01_4.xml
%feature("docstring") casadi::F0XChecker< OP_FLOOR > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F0XChecker_3_01OP__FMOD_01_4.xml
%feature("docstring") casadi::F0XChecker< OP_FMOD > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F0XChecker_3_01OP__IF__ELSE__ZERO_01_4.xml
%feature("docstring") casadi::F0XChecker< OP_IF_ELSE_ZERO > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F0XChecker_3_01OP__MUL_01_4.xml
%feature("docstring") casadi::F0XChecker< OP_MUL > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F0XChecker_3_01OP__NEG_01_4.xml
%feature("docstring") casadi::F0XChecker< OP_NEG > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F0XChecker_3_01OP__POW_01_4.xml
%feature("docstring") casadi::F0XChecker< OP_POW > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F0XChecker_3_01OP__SIGN_01_4.xml
%feature("docstring") casadi::F0XChecker< OP_SIGN > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F0XChecker_3_01OP__SIN_01_4.xml
%feature("docstring") casadi::F0XChecker< OP_SIN > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F0XChecker_3_01OP__SINH_01_4.xml
%feature("docstring") casadi::F0XChecker< OP_SINH > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F0XChecker_3_01OP__SQ_01_4.xml
%feature("docstring") casadi::F0XChecker< OP_SQ > " [INTERNAL] C++ includes:
casadi_calculus.hpp ";


// File: structcasadi_1_1F0XChecker_3_01OP__SQRT_01_4.xml
%feature("docstring") casadi::F0XChecker< OP_SQRT > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F0XChecker_3_01OP__TAN_01_4.xml
%feature("docstring") casadi::F0XChecker< OP_TAN > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F0XChecker_3_01OP__TANH_01_4.xml
%feature("docstring") casadi::F0XChecker< OP_TANH > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F0XChecker_3_01OP__TWICE_01_4.xml
%feature("docstring") casadi::F0XChecker< OP_TWICE > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: classcasadi_1_1FixedStepIntegrator.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::FixedStepIntegrator::getCount " [INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::FixedStepIntegrator::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::FixedStepIntegrator::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::FixedStepIntegrator::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::FixedStepIntegrator::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::FixedStepIntegrator::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::FixedStepIntegrator::outputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::FixedStepIntegrator::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::FixedStepIntegrator::getDAE "

Get the DAE.

";

%feature("docstring") casadi::FixedStepIntegrator::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::FixedStepIntegrator::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::FixedStepIntegrator::isInit "

Is initialized?

";

%feature("docstring") casadi::FixedStepIntegrator::inputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::FixedStepIntegrator::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::FixedStepIntegrator::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::FixedStepIntegrator::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::FixedStepIntegrator::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::FixedStepIntegrator::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::FixedStepIntegrator::schemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::FixedStepIntegrator::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::FixedStepIntegrator::spCanEvaluate "[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::FixedStepIntegrator::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::FixedStepIntegrator::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::FixedStepIntegrator::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::FixedStepIntegrator::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::FixedStepIntegrator::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::FixedStepIntegrator::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::FixedStepIntegrator::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::FixedStepIntegrator::resetB "

Reset the backward problem.

Time will be set to tf and backward state to input(INTEGRATOR_RX0)

";

%feature("docstring") casadi::FixedStepIntegrator::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::FixedStepIntegrator::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::FixedStepIntegrator::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::FixedStepIntegrator::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::FixedStepIntegrator::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::FixedStepIntegrator::integrateB "

Integrate backward until a specified time point.

";

%feature("docstring") casadi::FixedStepIntegrator::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::FixedStepIntegrator::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::FixedStepIntegrator::printStats "

Print solver statistics.

";

%feature("docstring") casadi::FixedStepIntegrator::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") casadi::FixedStepIntegrator::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::FixedStepIntegrator::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::FixedStepIntegrator::repr "[INTERNAL]  Print
a representation of the object.

";

%feature("docstring") casadi::FixedStepIntegrator::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::FixedStepIntegrator::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::FixedStepIntegrator::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::FixedStepIntegrator::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::FixedStepIntegrator::integrate "

Integrate forward until a specified time point.

";

%feature("docstring") casadi::FixedStepIntegrator::assignNodeNoCount "[INTERNAL]  Assign the node to a node class pointer without reference
counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::FixedStepIntegrator::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::FixedStepIntegrator::FixedStepIntegrator "

Default constructor.

";

%feature("docstring") casadi::FixedStepIntegrator::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") casadi::FixedStepIntegrator::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::FixedStepIntegrator::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") casadi::FixedStepIntegrator::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::FixedStepIntegrator::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::FixedStepIntegrator::getOption "

get an option value

";

%feature("docstring") casadi::FixedStepIntegrator::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::FixedStepIntegrator::clone "

Clone.

";

%feature("docstring") casadi::FixedStepIntegrator "

Base class for fixed step integrators.

Joel Andersson

>Input scheme: casadi::IntegratorInput (INTEGRATOR_NUM_IN = 7) [integratorIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_X0          | x0                     | Differential state at  |
|                        |                        | the initial time .     |
+------------------------+------------------------+------------------------+
| INTEGRATOR_P           | p                      | Parameters .           |
+------------------------+------------------------+------------------------+
| INTEGRATOR_Z0          | z0                     | Initial guess for the  |
|                        |                        | algebraic variable .   |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RX0         | rx0                    | Backward differential  |
|                        |                        | state at the final     |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RP          | rp                     | Backward parameter     |
|                        |                        | vector .               |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZ0         | rz0                    | Initial guess for the  |
|                        |                        | backwards algebraic    |
|                        |                        | variable .             |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::IntegratorOutput (INTEGRATOR_NUM_OUT = 7) [integratorOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_XF          | xf                     | Differential state at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_QF          | qf                     | Quadrature state at    |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_ZF          | zf                     | Algebraic variable at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RXF         | rxf                    | Backward differential  |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RQF         | rqf                    | Backward quadrature    |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZF         | rzf                    | Backward algebraic     |
|                        |                        | variable at the        |
|                        |                        | initial time .         |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| augmented_op | OT_DICTIONAR | GenericType( | Options to   | casadi::Inte |
| tions        | Y            | )            | be passed    | gratorIntern |
|              |              |              | down to the  | al           |
|              |              |              | augmented    |              |
|              |              |              | integrator,  |              |
|              |              |              | if one is    |              |
|              |              |              | constructed. |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_augme | OT_BOOLEAN   | true         | If DAE       | casadi::Inte |
| nted         |              |              | callback     | gratorIntern |
|              |              |              | functions    | al           |
|              |              |              | are          |              |
|              |              |              | SXFunction , |              |
|              |              |              | have         |              |
|              |              |              | augmented    |              |
|              |              |              | DAE callback |              |
|              |              |              | function     |              |
|              |              |              | also be      |              |
|              |              |              | SXFunction . |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| number_of_fi | OT_INTEGER   | 20           | Number of    | casadi::Fixe |
| nite_element |              |              | finite       | dStepIntegra |
| s            |              |              | elements     | torInternal  |
+--------------+--------------+--------------+--------------+--------------+
| print_stats  | OT_BOOLEAN   | false        | Print out    | casadi::Inte |
|              |              |              | statistics   | gratorIntern |
|              |              |              | after        | al           |
|              |              |              | integration  |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| t0           | OT_REAL      | 0            | Beginning of | casadi::Inte |
|              |              |              | the time     | gratorIntern |
|              |              |              | horizon      | al           |
+--------------+--------------+--------------+--------------+--------------+
| tf           | OT_REAL      | 1            | End of the   | casadi::Inte |
|              |              |              | time horizon | gratorIntern |
|              |              |              |              | al           |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: fixed_step_integrator.hpp ";

%feature("docstring") casadi::FixedStepIntegrator::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::FixedStepIntegrator::evaluate "

Evaluate.

";

%feature("docstring") casadi::FixedStepIntegrator::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::FixedStepIntegrator::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") casadi::FixedStepIntegrator::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::FixedStepIntegrator::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") casadi::FixedStepIntegrator::print "[INTERNAL]  Print
a description of the object.

";

%feature("docstring") casadi::FixedStepIntegrator::hasOption "

check if there is an option str

";

%feature("docstring") casadi::FixedStepIntegrator::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::FixedStepIntegrator::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::FixedStepIntegrator::spInit "[INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::FixedStepIntegrator::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::FixedStepIntegrator::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::FixedStepIntegrator::inputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::FixedStepIntegrator::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::FixedStepIntegrator::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::FixedStepIntegrator::checkInputs "[INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::FixedStepIntegrator::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::FixedStepIntegrator::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::FixedStepIntegrator::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::FixedStepIntegrator::getAugmented "

Generate a augmented DAE system with nfwd forward sensitivities and nadj
adjoint sensitivities.

";

%feature("docstring") casadi::FixedStepIntegrator::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::FixedStepIntegrator::reset "

Reset the forward problem Time will be set to t0 and state to
input(INTEGRATOR_X0)

";

%feature("docstring") casadi::FixedStepIntegrator::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::FixedStepIntegrator::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::FixedStepIntegrator::output_struct "[INTERNAL]  Input/output structures of the function

";

%feature("docstring") casadi::FixedStepIntegrator::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::FixedStepIntegrator::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::FixedStepIntegrator::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::FixedStepIntegrator::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::FixedStepIntegrator::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::FixedStepIntegrator::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::FixedStepIntegrator::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::FixedStepIntegrator::printPtr "[INTERNAL]
Print the pointer to the internal class

";

%feature("docstring") casadi::FixedStepIntegrator::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::FixedStepIntegrator::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::FixedStepIntegrator::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::FixedStepIntegrator::isNull "

Is a null pointer?

";

%feature("docstring") casadi::FixedStepIntegrator::callDerivative "[INTERNAL]  Evaluate the function symbolically or numerically with
directional derivatives The first two arguments are the nondifferentiated
inputs and results of the evaluation, the next two arguments are a set of
forward directional seeds and the resulting forward directional derivatives,
the length of the vector being the number of forward directions. The next
two arguments are a set of adjoint directional seeds and the resulting
adjoint directional derivatives, the length of the vector being the number
of adjoint directions.

";


// File: classcasadi_1_1Function.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring") casadi::Function::repr "
[INTERNAL]  Print a representation of the object.

";

%feature("docstring") casadi::Function::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::Function::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::Function::hasOption "

check if there is an option str

";

%feature("docstring") casadi::Function::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::Function::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::Function::outputSchemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::Function::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::Function::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::Function::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::Function::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::Function::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::Function::getOption "

get an option value

";

%feature("docstring") casadi::Function::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::Function::setOptionByAllowedIndex "[INTERNAL]
Set a certain option by giving its index into the allowed values.

";

%feature("docstring") casadi::Function::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::Function::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::Function::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::Function::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::Function::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::Function::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::Function::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::Function::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::Function::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::Function::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::Function::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::Function::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::Function::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::Function::assertInit "[INTERNAL]  Assert that
it is initialized

";

%feature("docstring") casadi::Function::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::Function::Function "

default constructor

";

%feature("docstring") casadi::Function::inputSchemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::Function::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::Function::isInit "

Is initialized?

";

%feature("docstring") casadi::Function::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::Function::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::Function::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::Function::~Function "

Destructor.

";

%feature("docstring") casadi::Function::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::Function::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::Function::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::Function::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::Function::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::Function::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::Function::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::Function::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::Function::isNull "

Is a null pointer?

";

%feature("docstring") casadi::Function::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::Function::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::Function::getOptionEnumValue "[INTERNAL]  Get
the enum value corresponding to th certain option.

";

%feature("docstring") casadi::Function::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::Function::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::Function::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::Function::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::Function::checkNode "[INTERNAL]  Check if the
node is pointing to the right type of object.

";

%feature("docstring") casadi::Function::evaluate "

Evaluate.

";

%feature("docstring") casadi::Function::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::Function::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::Function::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::Function::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::Function::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::Function::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::Function::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::Function::assignNode "[INTERNAL]  Assign the
node to a node class pointer (or null)

";

%feature("docstring") casadi::Function::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::Function "

General function.

A general function $f$ in casadi can be multi-input, multi-output. Number of
inputs: nin getNumInputs() Number of outputs: nout getNumOutputs()  We can
view this function as a being composed of a ( nin, nout) grid of single-
input, single-output primitive functions. Each such primitive function $f_
{i, j} \\\\forall i \\\\in [0, nin-1], j \\\\in [0, nout-1]$ can map as
$\\\\mathbf {R}^{n, m}\\\\to\\\\mathbf{R}^{p, q}$, in which n, m, p, q can
take different values for every (i, j) pair.  When passing input, you
specify which partition $i$ is active. You pass the numbers vectorized, as a
vector of size $(n*m)$. When requesting output, you specify which partition
$j$ is active. You get the numbers vectorized, as a vector of size $(p*q)$.
To calculate Jacobians, you need to have $(m=1, q=1)$.

Write the Jacobian as $J_ {i, j} = \\\\nabla f_{i, j} = \\\\frac
{\\\\partial f_{i, j}(\\\\vec{x})}{\\\\partial \\\\vec{x}}$.

Using $\\\\vec {v} \\\\in \\\\mathbf{R}^n$ as a forward seed: setFwdSeed(v,
i) Retrieving $\\\\vec {s}_f \\\\in \\\\mathbf{R}^p$ from: getFwdSens(sf, j)
Using $\\\\vec {w} \\\\in \\\\mathbf{R}^p$ as a forward seed: setAdjSeed(w,
j) Retrieving $\\\\vec {s}_a \\\\in \\\\mathbf{R}^n $ from: getAdjSens(sa,
i)  We have the following relationships for function mapping from a row
vector to a row vector:

$ \\\\vec {s}_f = \\\\nabla f_{i, j} . \\\\vec{v}$ $ \\\\vec {s}_a =
(\\\\nabla f_{i, j})^T . \\\\vec{w}$

Some quantities in these formulas must be transposed: input col: transpose $
\\\\vec {v} $ and $\\\\vec{s}_a$ output col: transpose $ \\\\vec {w} $ and
$\\\\vec{s}_f$  NOTE: Functions are allowed to modify their input arguments
when evaluating: implicitFunction, IDAS solver Further releases may disallow
this.

Joel Andersson

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available monitors
+---------+--------------------------+
|   Id    |         Used in          |
+=========+==========================+
| inputs  | casadi::FunctionInternal |
+---------+--------------------------+
| outputs | casadi::FunctionInternal |
+---------+--------------------------+

Diagrams

C++ includes: function.hpp ";

%feature("docstring") casadi::Function::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::Function::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") casadi::Function::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::Function::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::Function::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::Function::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::Function::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::Function::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::Function::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::Function::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::Function::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::Function::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::Function::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::Function::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::Function::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::Function::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::Function::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::Function::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::Function::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::Function::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::Function::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::Function::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::Function::swap "[INTERNAL]  Swap content with
another instance.

";

%feature("docstring") casadi::Function::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::Function::spCanEvaluate "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::Function::getDescription "

Return a string with a description (for SWIG)

";


// File: structcasadi_1_1Function0Checker.xml
%feature("docstring") casadi::Function0Checker "[INTERNAL]  If evaluated
with the second argument zero, is the result zero?

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1Function0Checker_3_01OP__AND_01_4.xml
%feature("docstring") casadi::Function0Checker< OP_AND > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1Function0Checker_3_01OP__IF__ELSE__ZERO_01_4.xml
%feature("docstring") casadi::Function0Checker< OP_IF_ELSE_ZERO > "
[INTERNAL] C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1Function0Checker_3_01OP__MUL_01_4.xml
%feature("docstring") casadi::Function0Checker< OP_MUL > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: classcasadi_1_1Functor.xml
%feature("docstring") casadi::Functor::isNull "

Is a null pointer?

";

%feature("docstring") casadi::Functor::checkNode "[INTERNAL]  Assert that
the node is pointing to the right type of object

";

%feature("docstring") casadi::Functor::swap "[INTERNAL]  Swap content with
another instance.

";

%feature("docstring") casadi::Functor::assignNode "[INTERNAL]  Assign the
node to a node class pointer (or null)

";

%feature("docstring") casadi::Functor::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::Functor::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::Functor::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::Functor "

Functor.

Joris Gillis

C++ includes: functor.hpp ";

%feature("docstring") casadi::Functor::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::Functor::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::Functor::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::Functor::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::Functor::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::Functor::assertInit "[INTERNAL]  Assert that
it is initialized

";

%feature("docstring") casadi::Functor::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::Functor::isInit "

Is initialized?

";

%feature("docstring") casadi::Functor::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::Functor::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::Functor::clone "[INTERNAL]  Deep copy.

";


// File: classcasadi_1_1GenericExpression.xml


/*  Operations from the left  */

/* For Python

*/ %feature("docstring") casadi::GenericExpression::__rne__ " ";

%feature("docstring") casadi::GenericExpression::__rtruediv__ "";

%feature("docstring") casadi::GenericExpression::__rle__ "";

%feature("docstring") casadi::GenericExpression::__rge__ "";

%feature("docstring") casadi::GenericExpression::__ge__ "

No need to have both <= and >=.

";

%feature("docstring") casadi::GenericExpression::__rsub__ "";

%feature("docstring") casadi::GenericExpression::__rdiv__ "";

%feature("docstring") casadi::GenericExpression::__req__ "";

%feature("docstring") casadi::GenericExpression::__rmul__ "";

%feature("docstring") casadi::GenericExpression::__mldivide__ "

Matrix division from left.

";

%feature("docstring") casadi::GenericExpression::__radd__ "";

%feature("docstring") casadi::GenericExpression::__truediv__ "

Division (with __future__.division in effect)

";

%feature("docstring") casadi::GenericExpression "

Expression interface.

This is a common base class for SX, MX and Matrix<>, introducing a uniform
syntax and implementing common functionality using the curiously recurring
template pattern (CRTP) idiom. Joel Andersson

C++ includes: generic_expression.hpp ";

%feature("docstring") casadi::GenericExpression::__rlt__ "";

%feature("docstring") casadi::GenericExpression::__gt__ "

No need to have both < and >

";

%feature("docstring") casadi::GenericExpression::__rgt__ "";


// File: classcasadi_1_1GenericMatrix.xml


/*  Construct symbolic primitives  */

/* The \"sym\" function is intended to work in a similar way as \"sym\" used
in the Symbolic Toolbox for Matlab but instead creating a CasADi symbolic
primitive.

*/ %feature("docstring") casadi::GenericMatrix::shape " [INTERNAL]  Get the
shape.

";

%feature("docstring") casadi::GenericMatrix::size2 "

Get the second dimension (i.e. number of columns)

";

%feature("docstring") casadi::GenericMatrix::isDense "

Check if the matrix expression is dense.

";

%feature("docstring") casadi::GenericMatrix::isScalar "

Check if the matrix expression is scalar.

";

%feature("docstring") casadi::GenericMatrix::isTril "

Check if the matrix is lower triangular.

";

%feature("docstring") casadi::GenericMatrix::sparsityRef "

Access the sparsity, make a copy if there are multiple references to it.

";

%feature("docstring") casadi::GenericMatrix::dimString "

Get string representation of dimensions. The representation is (nrow x ncol
= numel | size)

";

%feature("docstring") casadi::GenericMatrix::sparsity "

Get the sparsity pattern.

";

%feature("docstring") casadi::GenericMatrix::sizeD "

Get get the number of non-zeros on the diagonal.

";

%feature("docstring") casadi::GenericMatrix::isSquare "

Check if the matrix expression is square.

";

%feature("docstring") casadi::GenericMatrix::sizeL "

Get the number of non-zeros in the lower triangular half.

";

%feature("docstring") casadi::GenericMatrix::isVector "

Check if the matrix is a vector (i.e. size2()==1)

";

%feature("docstring") casadi::GenericMatrix::sizeU "

Get the number of non-zeros in the upper triangular half.

";

%feature("docstring") casadi::GenericMatrix::size "

>  int casadi::GenericMatrix< MatType >::size() const 
------------------------------------------------------------------------

Get the number of (structural) non-zero elements.

>  int casadi::GenericMatrix< MatType >::size(SparsityType sp) const 
------------------------------------------------------------------------

Get the number if non-zeros for a given sparsity pattern.

";

%feature("docstring") casadi::GenericMatrix "

Matrix base class.

This is a common base class for MX and Matrix<>, introducing a uniform
syntax and implementing common functionality using the curiously recurring
template pattern (CRTP) idiom.  The class is designed with the idea that
\"everything is a matrix\", that is, also scalars and vectors. This
philosophy makes it easy to use and to interface in particularly with Python
and Matlab/Octave.  The syntax tries to stay as close as possible to the
ublas syntax when it comes to vector/matrix operations.  Index starts with
0. Index vec happens as follows: (rr, cc) -> k = rr+cc*size1() Vectors are
column vectors.  The storage format is Compressed Column Storage (CCS),
similar to that used for sparse matrices in Matlab, but unlike this format,
we do allow for elements to be structurally non-zero but numerically zero.
The sparsity pattern, which is reference counted and cached, can be accessed
with Sparsity& sparsity() Joel Andersson

C++ includes: generic_matrix.hpp ";

%feature("docstring") casadi::GenericMatrix::mul_smart "

Matrix-matrix multiplication. Attempts to identify quick returns on matrix-
level and delegates to MatType::mul_full if no such quick returns are found.

";

%feature("docstring") casadi::GenericMatrix::isTriu "

Check if the matrix is upper triangular.

";

%feature("docstring") casadi::GenericMatrix::size1 "

Get the first dimension (i.e. number of rows)

";

%feature("docstring") casadi::GenericMatrix::numel "

Get the number of elements.

";

%feature("docstring") casadi::GenericMatrix::zeros "

Create a dense matrix or a matrix with specified sparsity with all entries
zero.

";

%feature("docstring") casadi::GenericMatrix::sparse "

create a sparse matrix with all zeros

";

%feature("docstring") casadi::GenericMatrix::isEmpty "

Check if the sparsity is empty, i.e. if one of the dimensions is zero (or
optionally both dimensions)

";

%feature("docstring") casadi::GenericMatrix::sym "

>  static MatType casadi::GenericMatrix< MatType >::sym(const std::string &name, int nrow=1, int ncol=1)
------------------------------------------------------------------------

Create an nrow-by-ncol symbolic primitive.

>  static MatType casadi::GenericMatrix< MatType >::sym(const std::string &name, const std::pair< int, int > &rc)
------------------------------------------------------------------------

Construct a symbolic primitive with given dimensions.

>  MatType casadi::GenericMatrix< MatType >::sym(const std::string &name, const Sparsity &sp)
------------------------------------------------------------------------

Create symbolic primitive with a given sparsity pattern.

>  std::vector< MatType > casadi::GenericMatrix< MatType >::sym(const std::string &name, const Sparsity &sp, int p)
------------------------------------------------------------------------

Create a vector of length p with with matrices with symbolic primitives of
given sparsity.

>  static std::vector<MatType > casadi::GenericMatrix< MatType >::sym(const std::string &name, int nrow, int ncol, int p)
------------------------------------------------------------------------

Create a vector of length p with nrow-by-ncol symbolic primitives.

>  std::vector< std::vector< MatType > > casadi::GenericMatrix< MatType >::sym(const std::string &name, const Sparsity &sp, int p, int r)
------------------------------------------------------------------------

Create a vector of length r of vectors of length p with symbolic primitives
with given sparsity.

>  static std::vector<std::vector<MatType> > casadi::GenericMatrix< MatType >::sym(const std::string &name, int nrow, int ncol, int p, int r)
------------------------------------------------------------------------

Create a vector of length r of vectors of length p with nrow-by-ncol
symbolic primitives.

";

%feature("docstring") casadi::GenericMatrix::ones "

Create a dense matrix or a matrix with specified sparsity with all entries
one.

";


// File: classcasadi_1_1GenericType.xml
%feature("docstring") casadi::GenericType::isDouble "

Is a double?

";

%feature("docstring") casadi::GenericType::isBool "

Is boolean?

";

%feature("docstring") casadi::GenericType::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::GenericType::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::GenericType::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") casadi::GenericType::checkNode "[INTERNAL]  Assert
that the node is pointing to the right type of object

";

%feature("docstring") casadi::GenericType::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::GenericType::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::GenericType::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::GenericType::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::GenericType::isString "

Is a string?

";

%feature("docstring") casadi::GenericType::toFunction "

Convert to shared object.

";

%feature("docstring") casadi::GenericType::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::GenericType::isDoubleVector "

Is a vector of doubles?

";

%feature("docstring") casadi::GenericType "

Generic data type.

Joel Andersson

C++ includes: generic_type.hpp ";

%feature("docstring") casadi::GenericType::isEmptyVector "

Is an empty vector?

";

%feature("docstring") casadi::GenericType::isSharedObject "

Is a shared object?

";

%feature("docstring") casadi::GenericType::getType "";

%feature("docstring") casadi::GenericType::isNull "

Is a null pointer?

";

%feature("docstring") casadi::GenericType::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::GenericType::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::GenericType::isInt "

Is an integer?

";

%feature("docstring") casadi::GenericType::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::GenericType::can_cast_to "";

%feature("docstring") casadi::GenericType::isInit "

Is initialized?

";

%feature("docstring") casadi::GenericType::toStringVector "

Convert to vector of strings.

";

%feature("docstring") casadi::GenericType::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::GenericType::toSharedObject "

Convert to shared object.

";

%feature("docstring") casadi::GenericType::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") casadi::GenericType::isDictionary "

Is a shared object?

";

%feature("docstring") casadi::GenericType::toDoubleVector "[INTERNAL]
Convert to vector of doubles.

";

%feature("docstring") casadi::GenericType::toInt "

Convert to int.

";

%feature("docstring") casadi::GenericType::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::GenericType::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::GenericType::toBool "

Convert to boolean.

";

%feature("docstring") casadi::GenericType::isFunction "

Is a shared object?

";

%feature("docstring") casadi::GenericType::is_a "[INTERNAL]  Check if it is
of a certain type (implementation in generic_type_internal.hpp)

";

%feature("docstring") casadi::GenericType::GenericType "

>  casadi::GenericType::GenericType(void *ptr)
------------------------------------------------------------------------
[INTERNAL]

>  casadi::GenericType::GenericType(NLPSolverCreator ptr)
------------------------------------------------------------------------

Creator functions.

";

%feature("docstring") casadi::GenericType::toString "

Convert to string.

";

%feature("docstring") casadi::GenericType::isStringVector "

Is a vector of strings.

";

%feature("docstring") casadi::GenericType::toVoidPointer "

Convert to void pointer.

";

%feature("docstring") casadi::GenericType::isIntVector "

Is a vector of ints?

";

%feature("docstring") casadi::GenericType::get_description "

Get a description of the object's type.

";

%feature("docstring") casadi::GenericType::toDouble "

Convert to double.

";

%feature("docstring") casadi::GenericType::toDictionary "[INTERNAL]
Convert to Dictionary.

";

%feature("docstring") casadi::GenericType::toIntVector "[INTERNAL]  Convert
to vector of ints.

";


// File: classcasadi_1_1GetNonzeros.xml
%feature("docstring") casadi::GetNonzeros::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") casadi::GetNonzeros::evaluateSX "[INTERNAL]  Evaluate
symbolically (SX)

";

%feature("docstring") casadi::GetNonzeros::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") casadi::GetNonzeros::getBinarySwitch "[INTERNAL]  Get
a binary operation operation.

";

%feature("docstring") casadi::GetNonzeros::GetNonzeros "[INTERNAL]
Constructor.

";

%feature("docstring") casadi::GetNonzeros::getName "[INTERNAL]  Get the
name.

";

%feature("docstring") casadi::GetNonzeros::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::GetNonzeros::numel "[INTERNAL]  Get shape.

";

%feature("docstring") casadi::GetNonzeros::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") casadi::GetNonzeros::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") casadi::GetNonzeros::simplifyMe "[INTERNAL]  Simplify
the expression (ex is a reference to the node)

";

%feature("docstring") casadi::GetNonzeros::__nonzero__ "[INTERNAL]  Check
the truth value of this node.

";

%feature("docstring") casadi::GetNonzeros::sameOpAndDeps "[INTERNAL]
Checks if two nodes have the same operation and have equivalent dependencies
up to a given depth.

";

%feature("docstring") casadi::GetNonzeros::getBinary "[INTERNAL]  Get a
binary operation operation (matrix-matrix)

";

%feature("docstring") casadi::GetNonzeros::dep "

>  const MX & casadi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & casadi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::GetNonzeros::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") casadi::GetNonzeros::getOutput "[INTERNAL]  Get an
output.

";

%feature("docstring") casadi::GetNonzeros::getMultiplication "[INTERNAL]
Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") casadi::GetNonzeros::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") casadi::GetNonzeros::assertInit "[INTERNAL]  Assert
that the object has been initialized.

";

%feature("docstring") casadi::GetNonzeros::isNonLinear "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring") casadi::GetNonzeros::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") casadi::GetNonzeros::isEqual "[INTERNAL]  Check if
two nodes are equivalent up to a given depth.

";

%feature("docstring") casadi::GetNonzeros::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") casadi::GetNonzeros::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") casadi::GetNonzeros::~GetNonzeros "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::GetNonzeros::size1 "[INTERNAL] ";

%feature("docstring") casadi::GetNonzeros::size2 "[INTERNAL] ";

%feature("docstring") casadi::GetNonzeros::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") casadi::GetNonzeros::print "

>  void casadi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void casadi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") casadi::GetNonzeros::getAll "[INTERNAL]  Get all the
nonzeros.

";

%feature("docstring") casadi::GetNonzeros::mapping "[INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") casadi::GetNonzeros::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::GetNonzeros::isUnaryOp "[INTERNAL]  Check if
unary operation.

";

%feature("docstring") casadi::GetNonzeros::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") casadi::GetNonzeros::getMatrixValue "[INTERNAL]  Get
the value (only for constant nodes)

";

%feature("docstring") casadi::GetNonzeros::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") casadi::GetNonzeros::shape "[INTERNAL] ";

%feature("docstring") casadi::GetNonzeros::assign "

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") casadi::GetNonzeros::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") casadi::GetNonzeros::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") casadi::GetNonzeros::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") casadi::GetNonzeros::getInverse "[INTERNAL]
Inverse.

";

%feature("docstring") casadi::GetNonzeros::getUnary "[INTERNAL]  Get a
unary operation.

";

%feature("docstring") casadi::GetNonzeros::getSetSparse "[INTERNAL]  Create
set sparse.

";

%feature("docstring") casadi::GetNonzeros::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") casadi::GetNonzeros::getGetNonzeros "[INTERNAL]  Get
the nonzeros of matrix.

";

%feature("docstring") casadi::GetNonzeros::getFunctionOutput "[INTERNAL]
Get function output.

";

%feature("docstring") casadi::GetNonzeros::size "[INTERNAL] ";

%feature("docstring") casadi::GetNonzeros::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") casadi::GetNonzeros::getHorzsplit "[INTERNAL]  Create
a horizontal split node.

";

%feature("docstring") casadi::GetNonzeros::clone "[INTERNAL]  Clone
function.

";

%feature("docstring") casadi::GetNonzeros::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") casadi::GetNonzeros::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::GetNonzeros::getSetNonzeros "[INTERNAL]
Assign the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::GetNonzeros::deepCopyMembers "[INTERNAL]
Deep copy data members.

";

%feature("docstring") casadi::GetNonzeros::evaluateMX "

>  void casadi::GetNonzeros::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void casadi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") casadi::GetNonzeros::hasDep "[INTERNAL]  Does the
node depend on other nodes.

";

%feature("docstring") casadi::GetNonzeros::evaluateD "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") casadi::GetNonzeros::getVertsplit "[INTERNAL]  Create
a vertical split node (vectors only)

";

%feature("docstring") casadi::GetNonzeros::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") casadi::GetNonzeros::setDependencies "

>  void casadi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void casadi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") casadi::GetNonzeros "[INTERNAL]  Get nonzeros of a
matrix.

Joel Andersson

C++ includes: getnonzeros.hpp ";

%feature("docstring") casadi::GetNonzeros::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") casadi::GetNonzeros::getSolve "[INTERNAL]   Solve a
system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") casadi::GetNonzeros::getAddNonzeros "[INTERNAL]  Add
the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::GetNonzeros::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") casadi::GetNonzeros::sparsity "

>  const Sparsity& casadi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & casadi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") casadi::GetNonzeros::getFunction "[INTERNAL]  Get
function reference.

";

%feature("docstring") casadi::GetNonzeros::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") casadi::GetNonzeros::propagateSparsity "

>  virtual void casadi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity.

>  void casadi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity, no work.

";

%feature("docstring") casadi::GetNonzeros::printPart "[INTERNAL]  Print a
part of the expression.

";

%feature("docstring") casadi::GetNonzeros::getReshape "[INTERNAL]
Reshape.

";

%feature("docstring") casadi::GetNonzeros::getNormF "[INTERNAL]  Frobenius
norm.

";

%feature("docstring") casadi::GetNonzeros::isOutputNode "[INTERNAL]  Check
if evaluation output.

";

%feature("docstring") casadi::GetNonzeros::getNorm2 "[INTERNAL]  Spectral
norm.

";

%feature("docstring") casadi::GetNonzeros::getNormInf "[INTERNAL]  Infinity
norm.

";

%feature("docstring") casadi::GetNonzeros::getNumOutputs "[INTERNAL]
Number of outputs.

";

%feature("docstring") casadi::GetNonzeros::getFunctionInput "[INTERNAL]
Get function input.

";

%feature("docstring") casadi::GetNonzeros::getSubRef "[INTERNAL]  Get
submatrix reference.

";

%feature("docstring") casadi::GetNonzeros::getValue "[INTERNAL]  Get the
value (only for scalar constant nodes)

";

%feature("docstring") casadi::GetNonzeros::isMultipleOutput "[INTERNAL]
Check if a multiple output node.

";


// File: classcasadi_1_1GetNonzerosSlice.xml
%feature("docstring") casadi::GetNonzerosSlice::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") casadi::GetNonzerosSlice::print "

>  void casadi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void casadi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") casadi::GetNonzerosSlice::shape "[INTERNAL] ";

%feature("docstring") casadi::GetNonzerosSlice::size1 "[INTERNAL] ";

%feature("docstring") casadi::GetNonzerosSlice::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") casadi::GetNonzerosSlice::isEqual "[INTERNAL]  Check
if two nodes are equivalent up to a given depth.

";

%feature("docstring") casadi::GetNonzerosSlice::evaluateSX "[INTERNAL]
Evaluate the function symbolically (SX)

";

%feature("docstring") casadi::GetNonzerosSlice::isZero "[INTERNAL]  Check
if identically zero.

";

%feature("docstring") casadi::GetNonzerosSlice::sameOpAndDeps "[INTERNAL]
Checks if two nodes have the same operation and have equivalent dependencies
up to a given depth.

";

%feature("docstring") casadi::GetNonzerosSlice::size "[INTERNAL] ";

%feature("docstring") casadi::GetNonzerosSlice::getAddNonzeros "[INTERNAL]
Add the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::GetNonzerosSlice::getSetSparse "[INTERNAL]
Create set sparse.

";

%feature("docstring") casadi::GetNonzerosSlice::hasDep "[INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring") casadi::GetNonzerosSlice::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") casadi::GetNonzerosSlice::numel "[INTERNAL]  Get
shape.

";

%feature("docstring") casadi::GetNonzerosSlice::getMatrixValue "[INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring") casadi::GetNonzerosSlice::getNorm2 "[INTERNAL]
Spectral norm.

";

%feature("docstring") casadi::GetNonzerosSlice::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") casadi::GetNonzerosSlice::setDependencies "

>  void casadi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void casadi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") casadi::GetNonzerosSlice::GetNonzerosSlice "[INTERNAL]  Constructor.

";

%feature("docstring") casadi::GetNonzerosSlice::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") casadi::GetNonzerosSlice::size2 "[INTERNAL] ";

%feature("docstring") casadi::GetNonzerosSlice::isOutputNode "[INTERNAL]
Check if evaluation output.

";

%feature("docstring") casadi::GetNonzerosSlice::getSubAssign "[INTERNAL]
Get submatrix assignment.

";

%feature("docstring") casadi::GetNonzerosSlice::getCount "[INTERNAL]  Get
the reference count.

";

%feature("docstring") casadi::GetNonzerosSlice::setSparsity "[INTERNAL]
Set the sparsity.

";

%feature("docstring") casadi::GetNonzerosSlice::isUnaryOp "[INTERNAL]
Check if unary operation.

";

%feature("docstring") casadi::GetNonzerosSlice::~GetNonzerosSlice "[INTERNAL]  Destructor.

";

%feature("docstring") casadi::GetNonzerosSlice::isInit "[INTERNAL]  Check
if the object has been initialized.

";

%feature("docstring") casadi::GetNonzerosSlice::generateOperation "[INTERNAL]  Generate code for the operation.

";

%feature("docstring") casadi::GetNonzerosSlice::getFunction "[INTERNAL]
Get function reference.

";

%feature("docstring") casadi::GetNonzerosSlice::evaluateGen "[INTERNAL]
Evaluate the function (template)

";

%feature("docstring") casadi::GetNonzerosSlice::init "[INTERNAL]
Initialize the object.

";

%feature("docstring") casadi::GetNonzerosSlice::nTmp "[INTERNAL]  Get
number of temporary variables needed.

";

%feature("docstring") casadi::GetNonzerosSlice::getFunctionInput "[INTERNAL]  Get function input.

";

%feature("docstring") casadi::GetNonzerosSlice::isValue "[INTERNAL]  Check
if a certain value.

";

%feature("docstring") casadi::GetNonzerosSlice::isIdentity "[INTERNAL]
Check if the instance is in fact an identity mapping (that can be
simplified)

";

%feature("docstring") casadi::GetNonzerosSlice::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") casadi::GetNonzerosSlice::getName "[INTERNAL]  Get
the name.

";

%feature("docstring") casadi::GetNonzerosSlice::mapping "[INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") casadi::GetNonzerosSlice::getSubRef "[INTERNAL]  Get
submatrix reference.

";

%feature("docstring") casadi::GetNonzerosSlice::propagateSparsity "[INTERNAL]  Propagate sparsity.

";

%feature("docstring") casadi::GetNonzerosSlice::getValue "[INTERNAL]  Get
the value (only for scalar constant nodes)

";

%feature("docstring") casadi::GetNonzerosSlice::getHorzsplit "[INTERNAL]
Create a horizontal split node.

";

%feature("docstring") casadi::GetNonzerosSlice::getFunctionOutput "[INTERNAL]  Get function output.

";

%feature("docstring") casadi::GetNonzerosSlice::deepCopyMembers "[INTERNAL]
Deep copy data members.

";

%feature("docstring") casadi::GetNonzerosSlice::getSolve "[INTERNAL]
Solve a system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") casadi::GetNonzerosSlice::sparsity "

>  const Sparsity& casadi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & casadi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") casadi::GetNonzerosSlice::assertInit "[INTERNAL]
Assert that the object has been initialized.

";

%feature("docstring") casadi::GetNonzerosSlice::assign "

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") casadi::GetNonzerosSlice "[INTERNAL] C++ includes:
getnonzeros.hpp ";

%feature("docstring") casadi::GetNonzerosSlice::getUnary "[INTERNAL]  Get a
unary operation.

";

%feature("docstring") casadi::GetNonzerosSlice::isBinaryOp "[INTERNAL]
Check if binary operation.

";

%feature("docstring") casadi::GetNonzerosSlice::getHorzcat "[INTERNAL]
Create a horizontal concatenation node.

";

%feature("docstring") casadi::GetNonzerosSlice::dep "

>  const MX & casadi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & casadi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::GetNonzerosSlice::getVertcat "[INTERNAL]
Create a vertical concatenation node (vectors only)

";

%feature("docstring") casadi::GetNonzerosSlice::isNonLinear "[INTERNAL]  Is
the node nonlinear.

";

%feature("docstring") casadi::GetNonzerosSlice::evaluateD "[INTERNAL]
Evaluate the function numerically.

";

%feature("docstring") casadi::GetNonzerosSlice::getInnerProd "[INTERNAL]
Inner product.

";

%feature("docstring") casadi::GetNonzerosSlice::getMultiplication "[INTERNAL]   Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") casadi::GetNonzerosSlice::addDependency "[INTERNAL]
Add a dependency.

";

%feature("docstring") casadi::GetNonzerosSlice::getGetNonzeros "[INTERNAL]
Get the nonzeros of matrix.

";

%feature("docstring") casadi::GetNonzerosSlice::getSetNonzeros "[INTERNAL]
Assign the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::GetNonzerosSlice::getVertsplit "[INTERNAL]
Create a vertical split node (vectors only)

";

%feature("docstring") casadi::GetNonzerosSlice::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") casadi::GetNonzerosSlice::numInplace "[INTERNAL]  Can
the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") casadi::GetNonzerosSlice::getBinarySwitch "[INTERNAL]
Get a binary operation operation.

";

%feature("docstring") casadi::GetNonzerosSlice::getInverse "[INTERNAL]
Inverse.

";

%feature("docstring") casadi::GetNonzerosSlice::getNumOutputs "[INTERNAL]
Number of outputs.

";

%feature("docstring") casadi::GetNonzerosSlice::getBinary "[INTERNAL]  Get
a binary operation operation (matrix-matrix)

";

%feature("docstring") casadi::GetNonzerosSlice::getAll "[INTERNAL]  Get all
the nonzeros.

";

%feature("docstring") casadi::GetNonzerosSlice::__nonzero__ "[INTERNAL]
Check the truth value of this node.

";

%feature("docstring") casadi::GetNonzerosSlice::simplifyMe "[INTERNAL]
Simplify.

";

%feature("docstring") casadi::GetNonzerosSlice::evaluateMX "

>  void casadi::GetNonzeros::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void casadi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") casadi::GetNonzerosSlice::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") casadi::GetNonzerosSlice::getNormF "[INTERNAL]
Frobenius norm.

";

%feature("docstring") casadi::GetNonzerosSlice::getReshape "[INTERNAL]
Reshape.

";

%feature("docstring") casadi::GetNonzerosSlice::isMultipleOutput "[INTERNAL]  Check if a multiple output node.

";

%feature("docstring") casadi::GetNonzerosSlice::getNormInf "[INTERNAL]
Infinity norm.

";

%feature("docstring") casadi::GetNonzerosSlice::printPart "[INTERNAL]
Print a part of the expression */.

";

%feature("docstring") casadi::GetNonzerosSlice::getOutput "[INTERNAL]  Get
an output.

";

%feature("docstring") casadi::GetNonzerosSlice::getNorm1 "[INTERNAL]
1-norm

";

%feature("docstring") casadi::GetNonzerosSlice::clone "[INTERNAL]  Clone
function.

";


// File: classcasadi_1_1GetNonzerosSlice2.xml
%feature("docstring") casadi::GetNonzerosSlice2::getVertsplit "[INTERNAL]
Create a vertical split node (vectors only)

";

%feature("docstring") casadi::GetNonzerosSlice2::getBinary "[INTERNAL]  Get
a binary operation operation (matrix-matrix)

";

%feature("docstring") casadi::GetNonzerosSlice2::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") casadi::GetNonzerosSlice2::getNumOutputs "[INTERNAL]
Number of outputs.

";

%feature("docstring") casadi::GetNonzerosSlice2::setDependencies "

>  void casadi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void casadi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") casadi::GetNonzerosSlice2::getAddNonzeros "[INTERNAL]
Add the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::GetNonzerosSlice2::getSubRef "[INTERNAL]  Get
submatrix reference.

";

%feature("docstring") casadi::GetNonzerosSlice2::setSparsity "[INTERNAL]
Set the sparsity.

";

%feature("docstring") casadi::GetNonzerosSlice2::evaluateMX "

>  void casadi::GetNonzeros::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void casadi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") casadi::GetNonzerosSlice2::getCount "[INTERNAL]  Get
the reference count.

";

%feature("docstring") casadi::GetNonzerosSlice2::evaluateSX "[INTERNAL]
Evaluate the function symbolically (SX)

";

%feature("docstring") casadi::GetNonzerosSlice2::getBinarySwitch "[INTERNAL]  Get a binary operation operation.

";

%feature("docstring") casadi::GetNonzerosSlice2::getInverse "[INTERNAL]
Inverse.

";

%feature("docstring") casadi::GetNonzerosSlice2::generateOperation "[INTERNAL]  Generate code for the operation.

";

%feature("docstring") casadi::GetNonzerosSlice2::evaluateGen "[INTERNAL]
Evaluate the function (template)

";

%feature("docstring") casadi::GetNonzerosSlice2::getFunction "[INTERNAL]
Get function reference.

";

%feature("docstring") casadi::GetNonzerosSlice2::getNormF "[INTERNAL]
Frobenius norm.

";

%feature("docstring") casadi::GetNonzerosSlice2::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") casadi::GetNonzerosSlice2::getOutput "[INTERNAL]  Get
an output.

";

%feature("docstring") casadi::GetNonzerosSlice2::isMultipleOutput "[INTERNAL]  Check if a multiple output node.

";

%feature("docstring") casadi::GetNonzerosSlice2::sparsity "

>  const Sparsity& casadi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & casadi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") casadi::GetNonzerosSlice2::isValue "[INTERNAL]  Check
if a certain value.

";

%feature("docstring") casadi::GetNonzerosSlice2::getName "[INTERNAL]  Get
the name.

";

%feature("docstring") casadi::GetNonzerosSlice2::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") casadi::GetNonzerosSlice2::size1 "[INTERNAL] ";

%feature("docstring") casadi::GetNonzerosSlice2::assign "

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") casadi::GetNonzerosSlice2::getSolve "[INTERNAL]
Solve a system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") casadi::GetNonzerosSlice2::getHorzsplit "[INTERNAL]
Create a horizontal split node.

";

%feature("docstring") casadi::GetNonzerosSlice2::assertInit "[INTERNAL]
Assert that the object has been initialized.

";

%feature("docstring") casadi::GetNonzerosSlice2::getValue "[INTERNAL]  Get
the value (only for scalar constant nodes)

";

%feature("docstring") casadi::GetNonzerosSlice2::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") casadi::GetNonzerosSlice2::propagateSparsity "[INTERNAL]  Propagate sparsity.

";

%feature("docstring") casadi::GetNonzerosSlice2 "[INTERNAL] C++ includes:
getnonzeros.hpp ";

%feature("docstring") casadi::GetNonzerosSlice2::addDependency "[INTERNAL]
Add a dependency.

";

%feature("docstring") casadi::GetNonzerosSlice2::getReshape "[INTERNAL]
Reshape.

";

%feature("docstring") casadi::GetNonzerosSlice2::simplifyMe "[INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring") casadi::GetNonzerosSlice2::isIdentity "[INTERNAL]
Check if identity matrix.

";

%feature("docstring") casadi::GetNonzerosSlice2::dep "

>  const MX & casadi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & casadi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::GetNonzerosSlice2::getNormInf "[INTERNAL]
Infinity norm.

";

%feature("docstring") casadi::GetNonzerosSlice2::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") casadi::GetNonzerosSlice2::getUnary "[INTERNAL]  Get
a unary operation.

";

%feature("docstring") casadi::GetNonzerosSlice2::getNorm2 "[INTERNAL]
Spectral norm.

";

%feature("docstring") casadi::GetNonzerosSlice2::getMultiplication "[INTERNAL]   Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") casadi::GetNonzerosSlice2::evaluateD "[INTERNAL]
Evaluate the function numerically.

";

%feature("docstring") casadi::GetNonzerosSlice2::getHorzcat "[INTERNAL]
Create a horizontal concatenation node.

";

%feature("docstring") casadi::GetNonzerosSlice2::getMatrixValue "[INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring") casadi::GetNonzerosSlice2::numInplace "[INTERNAL]
Can the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") casadi::GetNonzerosSlice2::ndep "[INTERNAL]  Number
of dependencies.

";

%feature("docstring") casadi::GetNonzerosSlice2::init "[INTERNAL]
Initialize the object.

";

%feature("docstring") casadi::GetNonzerosSlice2::numel "[INTERNAL]  Get
shape.

";

%feature("docstring") casadi::GetNonzerosSlice2::getInnerProd "[INTERNAL]
Inner product.

";

%feature("docstring") casadi::GetNonzerosSlice2::getNorm1 "[INTERNAL]
1-norm

";

%feature("docstring") casadi::GetNonzerosSlice2::getAll "[INTERNAL]  Get
all the nonzeros.

";

%feature("docstring") casadi::GetNonzerosSlice2::isOutputNode "[INTERNAL]
Check if evaluation output.

";

%feature("docstring") casadi::GetNonzerosSlice2::isInit "[INTERNAL]  Check
if the object has been initialized.

";

%feature("docstring") casadi::GetNonzerosSlice2::getSubAssign "[INTERNAL]
Get submatrix assignment.

";

%feature("docstring") casadi::GetNonzerosSlice2::__nonzero__ "[INTERNAL]
Check the truth value of this node.

";

%feature("docstring") casadi::GetNonzerosSlice2::isUnaryOp "[INTERNAL]
Check if unary operation.

";

%feature("docstring") casadi::GetNonzerosSlice2::size2 "[INTERNAL] ";

%feature("docstring") casadi::GetNonzerosSlice2::GetNonzerosSlice2 "[INTERNAL]  Constructor.

";

%feature("docstring") casadi::GetNonzerosSlice2::hasDep "[INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring") casadi::GetNonzerosSlice2::shape "[INTERNAL] ";

%feature("docstring") casadi::GetNonzerosSlice2::printPart "[INTERNAL]
Print a part of the expression */.

";

%feature("docstring") casadi::GetNonzerosSlice2::print "

>  void casadi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void casadi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") casadi::GetNonzerosSlice2::isOne "[INTERNAL]  Check
if identically one.

";

%feature("docstring") casadi::GetNonzerosSlice2::clone "[INTERNAL]  Clone
function.

";

%feature("docstring") casadi::GetNonzerosSlice2::getSetSparse "[INTERNAL]
Create set sparse.

";

%feature("docstring") casadi::GetNonzerosSlice2::sameOpAndDeps "[INTERNAL]
Checks if two nodes have the same operation and have equivalent dependencies
up to a given depth.

";

%feature("docstring") casadi::GetNonzerosSlice2::isEqual "[INTERNAL]  Check
if two nodes are equivalent up to a given depth.

";

%feature("docstring") casadi::GetNonzerosSlice2::mapping "[INTERNAL]  Get
an IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") casadi::GetNonzerosSlice2::isZero "[INTERNAL]  Check
if identically zero.

";

%feature("docstring") casadi::GetNonzerosSlice2::getVertcat "[INTERNAL]
Create a vertical concatenation node (vectors only)

";

%feature("docstring") casadi::GetNonzerosSlice2::getFunctionOutput "[INTERNAL]  Get function output.

";

%feature("docstring") casadi::GetNonzerosSlice2::deepCopyMembers "[INTERNAL]  Deep copy data members.

";

%feature("docstring") casadi::GetNonzerosSlice2::size "[INTERNAL] ";

%feature("docstring") casadi::GetNonzerosSlice2::isBinaryOp "[INTERNAL]
Check if binary operation.

";

%feature("docstring") casadi::GetNonzerosSlice2::~GetNonzerosSlice2 "[INTERNAL]  Destructor.

";

%feature("docstring") casadi::GetNonzerosSlice2::getFunctionInput "[INTERNAL]  Get function input.

";

%feature("docstring") casadi::GetNonzerosSlice2::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") casadi::GetNonzerosSlice2::nTmp "[INTERNAL]  Get
number of temporary variables needed.

";

%feature("docstring") casadi::GetNonzerosSlice2::isNonLinear "[INTERNAL]
Is the node nonlinear.

";

%feature("docstring") casadi::GetNonzerosSlice2::getSetNonzeros "[INTERNAL]
Assign the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::GetNonzerosSlice2::getGetNonzeros "[INTERNAL]
Get the nonzeros of matrix.

";


// File: classcasadi_1_1GetNonzerosVector.xml
%feature("docstring") casadi::GetNonzerosVector::propagateSparsity "[INTERNAL]  Propagate sparsity.

";

%feature("docstring") casadi::GetNonzerosVector::getInnerProd "[INTERNAL]
Inner product.

";

%feature("docstring") casadi::GetNonzerosVector::getMatrixValue "[INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring") casadi::GetNonzerosVector::init "[INTERNAL]
Initialize the object.

";

%feature("docstring") casadi::GetNonzerosVector::getFunctionInput "[INTERNAL]  Get function input.

";

%feature("docstring") casadi::GetNonzerosVector::getHorzcat "[INTERNAL]
Create a horizontal concatenation node.

";

%feature("docstring") casadi::GetNonzerosVector::isOutputNode "[INTERNAL]
Check if evaluation output.

";

%feature("docstring") casadi::GetNonzerosVector::getSetSparse "[INTERNAL]
Create set sparse.

";

%feature("docstring") casadi::GetNonzerosVector::getUnary "[INTERNAL]  Get
a unary operation.

";

%feature("docstring") casadi::GetNonzerosVector::evaluateD "[INTERNAL]
Evaluate the function numerically.

";

%feature("docstring") casadi::GetNonzerosVector::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") casadi::GetNonzerosVector::getGetNonzeros "[INTERNAL]
Get the nonzeros of matrix.

";

%feature("docstring") casadi::GetNonzerosVector::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") casadi::GetNonzerosVector::getBinarySwitch "[INTERNAL]  Get a binary operation operation.

";

%feature("docstring") casadi::GetNonzerosVector::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") casadi::GetNonzerosVector::evaluateMX "

>  void casadi::GetNonzeros::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void casadi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") casadi::GetNonzerosVector::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") casadi::GetNonzerosVector::getNumOutputs "[INTERNAL]
Number of outputs.

";

%feature("docstring") casadi::GetNonzerosVector::getSetNonzeros "[INTERNAL]
Assign the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::GetNonzerosVector::isZero "[INTERNAL]  Check
if identically zero.

";

%feature("docstring") casadi::GetNonzerosVector::assertInit "[INTERNAL]
Assert that the object has been initialized.

";

%feature("docstring") casadi::GetNonzerosVector::getHorzsplit "[INTERNAL]
Create a horizontal split node.

";

%feature("docstring") casadi::GetNonzerosVector::hasDep "[INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring") casadi::GetNonzerosVector::GetNonzerosVector "[INTERNAL]  Constructor.

";

%feature("docstring") casadi::GetNonzerosVector::isOne "[INTERNAL]  Check
if identically one.

";

%feature("docstring") casadi::GetNonzerosVector::clone "[INTERNAL]  Clone
function.

";

%feature("docstring") casadi::GetNonzerosVector::mapping "[INTERNAL]  Get
an IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") casadi::GetNonzerosVector::isValue "[INTERNAL]  Check
if a certain value.

";

%feature("docstring") casadi::GetNonzerosVector::addDependency "[INTERNAL]
Add a dependency.

";

%feature("docstring") casadi::GetNonzerosVector::isIdentity "[INTERNAL]
Check if identity matrix.

";

%feature("docstring") casadi::GetNonzerosVector::getMultiplication "[INTERNAL]   Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") casadi::GetNonzerosVector::getOutput "[INTERNAL]  Get
an output.

";

%feature("docstring") casadi::GetNonzerosVector::assign "

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") casadi::GetNonzerosVector::printPart "[INTERNAL]
Print a part of the expression */.

";

%feature("docstring") casadi::GetNonzerosVector::dep "

>  const MX & casadi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & casadi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::GetNonzerosVector::isNonLinear "[INTERNAL]
Is the node nonlinear.

";

%feature("docstring") casadi::GetNonzerosVector "[INTERNAL] C++ includes:
getnonzeros.hpp ";

%feature("docstring") casadi::GetNonzerosVector::getVertsplit "[INTERNAL]
Create a vertical split node (vectors only)

";

%feature("docstring") casadi::GetNonzerosVector::setDependencies "

>  void casadi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void casadi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") casadi::GetNonzerosVector::shape "[INTERNAL] ";

%feature("docstring") casadi::GetNonzerosVector::getNorm1 "[INTERNAL]
1-norm

";

%feature("docstring") casadi::GetNonzerosVector::getFunction "[INTERNAL]
Get function reference.

";

%feature("docstring") casadi::GetNonzerosVector::sparsity "

>  const Sparsity& casadi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & casadi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") casadi::GetNonzerosVector::getNorm2 "[INTERNAL]
Spectral norm.

";

%feature("docstring") casadi::GetNonzerosVector::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") casadi::GetNonzerosVector::evaluateSX "[INTERNAL]
Evaluate the function symbolically (SX)

";

%feature("docstring") casadi::GetNonzerosVector::getName "[INTERNAL]  Get
the name.

";

%feature("docstring") casadi::GetNonzerosVector::isInit "[INTERNAL]  Check
if the object has been initialized.

";

%feature("docstring") casadi::GetNonzerosVector::size "[INTERNAL] ";

%feature("docstring") casadi::GetNonzerosVector::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") casadi::GetNonzerosVector::simplifyMe "[INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring") casadi::GetNonzerosVector::isEqual "[INTERNAL]  Check
if two nodes are equivalent up to a given depth.

";

%feature("docstring") casadi::GetNonzerosVector::getInverse "[INTERNAL]
Inverse.

";

%feature("docstring") casadi::GetNonzerosVector::sameOpAndDeps "[INTERNAL]
Checks if two nodes have the same operation and have equivalent dependencies
up to a given depth.

";

%feature("docstring") casadi::GetNonzerosVector::size1 "[INTERNAL] ";

%feature("docstring") casadi::GetNonzerosVector::getNormInf "[INTERNAL]
Infinity norm.

";

%feature("docstring") casadi::GetNonzerosVector::isMultipleOutput "[INTERNAL]  Check if a multiple output node.

";

%feature("docstring") casadi::GetNonzerosVector::getCount "[INTERNAL]  Get
the reference count.

";

%feature("docstring") casadi::GetNonzerosVector::evaluateGen "[INTERNAL]
Evaluate the function (template)

";

%feature("docstring") casadi::GetNonzerosVector::~GetNonzerosVector "[INTERNAL]  Destructor.

";

%feature("docstring") casadi::GetNonzerosVector::getFunctionOutput "[INTERNAL]  Get function output.

";

%feature("docstring") casadi::GetNonzerosVector::deepCopyMembers "[INTERNAL]  Deep copy data members.

";

%feature("docstring") casadi::GetNonzerosVector::__nonzero__ "[INTERNAL]
Check the truth value of this node.

";

%feature("docstring") casadi::GetNonzerosVector::size2 "[INTERNAL] ";

%feature("docstring") casadi::GetNonzerosVector::getBinary "[INTERNAL]  Get
a binary operation operation (matrix-matrix)

";

%feature("docstring") casadi::GetNonzerosVector::getVertcat "[INTERNAL]
Create a vertical concatenation node (vectors only)

";

%feature("docstring") casadi::GetNonzerosVector::numInplace "[INTERNAL]
Can the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") casadi::GetNonzerosVector::setSparsity "[INTERNAL]
Set the sparsity.

";

%feature("docstring") casadi::GetNonzerosVector::getNormF "[INTERNAL]
Frobenius norm.

";

%feature("docstring") casadi::GetNonzerosVector::nTmp "[INTERNAL]  Get
number of temporary variables needed.

";

%feature("docstring") casadi::GetNonzerosVector::getValue "[INTERNAL]  Get
the value (only for scalar constant nodes)

";

%feature("docstring") casadi::GetNonzerosVector::isUnaryOp "[INTERNAL]
Check if unary operation.

";

%feature("docstring") casadi::GetNonzerosVector::getAddNonzeros "[INTERNAL]
Add the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::GetNonzerosVector::getReshape "[INTERNAL]
Reshape.

";

%feature("docstring") casadi::GetNonzerosVector::generateOperation "[INTERNAL]  Generate code for the operation.

";

%feature("docstring") casadi::GetNonzerosVector::getSubRef "[INTERNAL]  Get
submatrix reference.

";

%feature("docstring") casadi::GetNonzerosVector::ndep "[INTERNAL]  Number
of dependencies.

";

%feature("docstring") casadi::GetNonzerosVector::numel "[INTERNAL]  Get
shape.

";

%feature("docstring") casadi::GetNonzerosVector::getAll "[INTERNAL]  Get
all the nonzeros.

";

%feature("docstring") casadi::GetNonzerosVector::print "

>  void casadi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void casadi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") casadi::GetNonzerosVector::getSubAssign "[INTERNAL]
Get submatrix assignment.

";

%feature("docstring") casadi::GetNonzerosVector::getSolve "[INTERNAL]
Solve a system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") casadi::GetNonzerosVector::isBinaryOp "[INTERNAL]
Check if binary operation.

";


// File: classcasadi_1_1GradFInputIOSchemeVector.xml
%feature("docstring") casadi::GradFInputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::GradFInputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::GradFInputIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") casadi::GradFInputIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::GradFInputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::GradFInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::GradFInputIOSchemeVector "[INTERNAL]  Helper
function for 'GradFInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::GradFInputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring")
casadi::GradFInputIOSchemeVector::GradFInputIOSchemeVector "[INTERNAL] ";


// File: classcasadi_1_1GradFOutputIOSchemeVector.xml
%feature("docstring") casadi::GradFOutputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring") casadi::GradFOutputIOSchemeVector "[INTERNAL]  Helper
function for 'GradFOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::GradFOutputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::GradFOutputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::GradFOutputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") casadi::GradFOutputIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring")
casadi::GradFOutputIOSchemeVector::GradFOutputIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::GradFOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::GradFOutputIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";


// File: classcasadi_1_1HessLagInputIOSchemeVector.xml
%feature("docstring") casadi::HessLagInputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring") casadi::HessLagInputIOSchemeVector "[INTERNAL]
Helper function for 'HessLagInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::HessLagInputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring")
casadi::HessLagInputIOSchemeVector::HessLagInputIOSchemeVector "[INTERNAL]
";

%feature("docstring") casadi::HessLagInputIOSchemeVector::getRepresentation
"[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::HessLagInputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") casadi::HessLagInputIOSchemeVector::vector "[INTERNAL] ";

%feature("docstring") casadi::HessLagInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::HessLagInputIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";


// File: classcasadi_1_1HessLagOutputIOSchemeVector.xml
%feature("docstring") casadi::HessLagOutputIOSchemeVector "[INTERNAL]
Helper function for 'HessLagOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring")
casadi::HessLagOutputIOSchemeVector::HessLagOutputIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::HessLagOutputIOSchemeVector::vector "[INTERNAL] ";

%feature("docstring") casadi::HessLagOutputIOSchemeVector::print "[INTERNAL]  Print a description of the object.

";

%feature("docstring") casadi::HessLagOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::HessLagOutputIOSchemeVector::getRepresentation
"[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::HessLagOutputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring") casadi::HessLagOutputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::HessLagOutputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";


// File: classcasadi_1_1HNLPInputIOSchemeVector.xml
%feature("docstring") casadi::HNLPInputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::HNLPInputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") casadi::HNLPInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::HNLPInputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::HNLPInputIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") casadi::HNLPInputIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::HNLPInputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::HNLPInputIOSchemeVector "[INTERNAL]  Helper
function for 'HNLPInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring")
casadi::HNLPInputIOSchemeVector::HNLPInputIOSchemeVector "[INTERNAL] ";


// File: classcasadi_1_1HomotopyNLPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::HomotopyNLPSolver::setOptionByEnumValue " [INTERNAL]  Set a certain
option by giving an enum value.

";

%feature("docstring") casadi::HomotopyNLPSolver::isInit "

Is initialized?

";

%feature("docstring") casadi::HomotopyNLPSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::HomotopyNLPSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::HomotopyNLPSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::HomotopyNLPSolver::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::HomotopyNLPSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::HomotopyNLPSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::HomotopyNLPSolver::hasOption "

check if there is an option str

";

%feature("docstring") casadi::HomotopyNLPSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::HomotopyNLPSolver::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::HomotopyNLPSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::HomotopyNLPSolver::evaluate "

Evaluate.

";

%feature("docstring") casadi::HomotopyNLPSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::HomotopyNLPSolver::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::HomotopyNLPSolver::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::HomotopyNLPSolver::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::HomotopyNLPSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::HomotopyNLPSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::HomotopyNLPSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::HomotopyNLPSolver::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::HomotopyNLPSolver::printPtr "[INTERNAL]
Print the pointer to the internal class

";

%feature("docstring") casadi::HomotopyNLPSolver::spCanEvaluate "[INTERNAL]
Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::HomotopyNLPSolver::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::HomotopyNLPSolver::inputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::HomotopyNLPSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::HomotopyNLPSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::HomotopyNLPSolver::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::HomotopyNLPSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::HomotopyNLPSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::HomotopyNLPSolver::assignNodeNoCount "[INTERNAL]  Assign the node to a node class pointer without reference
counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::HomotopyNLPSolver::getCount "[INTERNAL]  Get
the reference count.

";

%feature("docstring") casadi::HomotopyNLPSolver::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::HomotopyNLPSolver::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::HomotopyNLPSolver::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::HomotopyNLPSolver::isNull "

Is a null pointer?

";

%feature("docstring") casadi::HomotopyNLPSolver::HomotopyNLPSolver "

Default constructor.

";

%feature("docstring") casadi::HomotopyNLPSolver::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") casadi::HomotopyNLPSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::HomotopyNLPSolver::schemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::HomotopyNLPSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::HomotopyNLPSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::HomotopyNLPSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::HomotopyNLPSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::HomotopyNLPSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::HomotopyNLPSolver::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") casadi::HomotopyNLPSolver::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::HomotopyNLPSolver::checkInputs "[INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::HomotopyNLPSolver::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::HomotopyNLPSolver "

Base class for Homotopy NLP Solvers.

Solves the following parametric nonlinear program (NLP):min          F(x, p,
tau)  x  subject to             LBX <=   x    <= UBX             LBG <= G(x,
p) <= UBG                        p  == P nx: number of decision variables
ng: number of constraints     np: number of parameters

In a homotopy from tau = 0 to tau = 1.

Joris Gillis

>Input scheme: casadi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| expand       | OT_BOOLEAN   | false        | Expand the   | casadi::Homo |
|              |              |              | NLP function | topyNLPInter |
|              |              |              | in terms of  | nal          |
|              |              |              | scalar       |              |
|              |              |              | operations,  |              |
|              |              |              | i.e. MX->SX  |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: homotopy_nlp_solver.hpp ";

%feature("docstring") casadi::HomotopyNLPSolver::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::HomotopyNLPSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::HomotopyNLPSolver::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::HomotopyNLPSolver::outputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::HomotopyNLPSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::HomotopyNLPSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::HomotopyNLPSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::HomotopyNLPSolver::inputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::HomotopyNLPSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::HomotopyNLPSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::HomotopyNLPSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::HomotopyNLPSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::HomotopyNLPSolver::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::HomotopyNLPSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::HomotopyNLPSolver::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::HomotopyNLPSolver::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::HomotopyNLPSolver::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::HomotopyNLPSolver::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::HomotopyNLPSolver::getOption "

get an option value

";

%feature("docstring") casadi::HomotopyNLPSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::HomotopyNLPSolver::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::HomotopyNLPSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::HomotopyNLPSolver::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::HomotopyNLPSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::HomotopyNLPSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::HomotopyNLPSolver::clone "[INTERNAL]  Deep
copy.

";

%feature("docstring") casadi::HomotopyNLPSolver::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") casadi::HomotopyNLPSolver::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::HomotopyNLPSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::HomotopyNLPSolver::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") casadi::HomotopyNLPSolver::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::HomotopyNLPSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::HomotopyNLPSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::HomotopyNLPSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::HomotopyNLPSolver::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::HomotopyNLPSolver::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::HomotopyNLPSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::HomotopyNLPSolver::spInit "[INTERNAL]  Reset
the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::HomotopyNLPSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::HomotopyNLPSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::HomotopyNLPSolver::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";


// File: classcasadi_1_1Horzcat.xml
%feature("docstring") casadi::Horzcat::isNonLinear "[INTERNAL]  Is the node
nonlinear.

";

%feature("docstring") casadi::Horzcat::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::Horzcat::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") casadi::Horzcat::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") casadi::Horzcat::printPart "[INTERNAL]  Print a part
of the expression */.

";

%feature("docstring") casadi::Horzcat::getMatrixValue "[INTERNAL]  Get the
value (only for constant nodes)

";

%feature("docstring") casadi::Horzcat::sameOpAndDeps "[INTERNAL]  Checks if
two nodes have the same operation and have equivalent dependencies up to a
given depth.

";

%feature("docstring") casadi::Horzcat::sparsity "

>  const Sparsity& casadi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & casadi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") casadi::Horzcat::getSetSparse "[INTERNAL]  Create set
sparse.

";

%feature("docstring") casadi::Horzcat::getHorzsplit "[INTERNAL]  Create a
horizontal split node.

";

%feature("docstring") casadi::Horzcat::simplifyMe "[INTERNAL]  Simplify the
expression (ex is a reference to the node)

";

%feature("docstring") casadi::Horzcat::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") casadi::Horzcat::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") casadi::Horzcat::print "

>  void casadi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void casadi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") casadi::Horzcat::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") casadi::Horzcat::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") casadi::Horzcat::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::Horzcat::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") casadi::Horzcat::isUnaryOp "[INTERNAL]  Check if
unary operation.

";

%feature("docstring") casadi::Horzcat::hasDep "[INTERNAL]  Does the node
depend on other nodes.

";

%feature("docstring") casadi::Horzcat::getNormF "[INTERNAL]  Frobenius
norm.

";

%feature("docstring") casadi::Horzcat::getFunction "[INTERNAL]  Get
function reference.

";

%feature("docstring") casadi::Horzcat::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") casadi::Horzcat::getGetNonzeros "[INTERNAL]  Get the
nonzeros of matrix.

";

%feature("docstring") casadi::Horzcat::getVertsplit "[INTERNAL]  Create a
vertical split node (vectors only)

";

%feature("docstring") casadi::Horzcat::getFunctionInput "[INTERNAL]  Get
function input.

";

%feature("docstring") casadi::Horzcat::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") casadi::Horzcat::evaluateGen "[INTERNAL]  Evaluate
the function (template)

";

%feature("docstring") casadi::Horzcat::isOutputNode "[INTERNAL]  Check if
evaluation output.

";

%feature("docstring") casadi::Horzcat::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") casadi::Horzcat::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") casadi::Horzcat::getNormInf "[INTERNAL]  Infinity
norm.

";

%feature("docstring") casadi::Horzcat::getReshape "[INTERNAL]   Reshape.

";

%feature("docstring") casadi::Horzcat::~Horzcat "[INTERNAL]  Destructor.

";

%feature("docstring") casadi::Horzcat::dep "

>  const MX & casadi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & casadi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::Horzcat::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") casadi::Horzcat::mapping "[INTERNAL]  Get an IMatrix
representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") casadi::Horzcat "[INTERNAL]  Horizontal
concatenation.

Joel Andersson

C++ includes: concat.hpp ";

%feature("docstring") casadi::Horzcat::evaluateMX "

>  void casadi::Horzcat::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void casadi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") casadi::Horzcat::deepCopyMembers "[INTERNAL]  Deep
copy data members.

";

%feature("docstring") casadi::Horzcat::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") casadi::Horzcat::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") casadi::Horzcat::clone "[INTERNAL]  Clone function.

";

%feature("docstring") casadi::Horzcat::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring") casadi::Horzcat::getBinarySwitch "[INTERNAL]  Get a
binary operation operation.

";

%feature("docstring") casadi::Horzcat::size2 "[INTERNAL] ";

%feature("docstring") casadi::Horzcat::propagateSparsity "[INTERNAL]
Propagate sparsity.

";

%feature("docstring") casadi::Horzcat::getInverse "[INTERNAL]   Inverse.

";

%feature("docstring") casadi::Horzcat::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::Horzcat::getOutput "[INTERNAL]  Get an
output.

";

%feature("docstring") casadi::Horzcat::numel "[INTERNAL]  Get shape.

";

%feature("docstring") casadi::Horzcat::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") casadi::Horzcat::assertInit "[INTERNAL]  Assert that
the object has been initialized.

";

%feature("docstring") casadi::Horzcat::getMultiplication "[INTERNAL]
Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") casadi::Horzcat::getUnary "[INTERNAL]  Get a unary
operation.

";

%feature("docstring") casadi::Horzcat::getFunctionOutput "[INTERNAL]  Get
function output.

";

%feature("docstring") casadi::Horzcat::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") casadi::Horzcat::getName "[INTERNAL]  Get the name.

";

%feature("docstring") casadi::Horzcat::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") casadi::Horzcat::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") casadi::Horzcat::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") casadi::Horzcat::size "[INTERNAL] ";

%feature("docstring") casadi::Horzcat::getNorm2 "[INTERNAL]  Spectral norm.

";

%feature("docstring") casadi::Horzcat::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") casadi::Horzcat::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") casadi::Horzcat::getNumOutputs "[INTERNAL]  Number of
outputs.

";

%feature("docstring") casadi::Horzcat::getSetNonzeros "[INTERNAL]  Assign
the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::Horzcat::evaluateSX "[INTERNAL]  Evaluate the
function symbolically (SX)

";

%feature("docstring") casadi::Horzcat::size1 "[INTERNAL] ";

%feature("docstring") casadi::Horzcat::getAddNonzeros "[INTERNAL]  Add the
nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::Horzcat::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") casadi::Horzcat::getValue "[INTERNAL]  Get the value
(only for scalar constant nodes)

";

%feature("docstring") casadi::Horzcat::getSolve "[INTERNAL]   Solve a
system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") casadi::Horzcat::assign "

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") casadi::Horzcat::evaluateD "[INTERNAL]  Evaluate the
function numerically.

";

%feature("docstring") casadi::Horzcat::isMultipleOutput "[INTERNAL]  Check
if a multiple output node.

";

%feature("docstring") casadi::Horzcat::getBinary "[INTERNAL]  Get a binary
operation operation (matrix-matrix)

";

%feature("docstring") casadi::Horzcat::setDependencies "

>  void casadi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void casadi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") casadi::Horzcat::Horzcat "[INTERNAL]  Constructor.

";

%feature("docstring") casadi::Horzcat::getSubRef "[INTERNAL]  Get submatrix
reference.

";

%feature("docstring") casadi::Horzcat::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") casadi::Horzcat::shape "[INTERNAL] ";


// File: classcasadi_1_1Horzsplit.xml
%feature("docstring") casadi::Horzsplit::shape "[INTERNAL] ";

%feature("docstring") casadi::Horzsplit::size "[INTERNAL] ";

%feature("docstring") casadi::Horzsplit::setDependencies "

>  void casadi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void casadi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") casadi::Horzsplit::~Horzsplit "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::Horzsplit::size1 "[INTERNAL] ";

%feature("docstring") casadi::Horzsplit::getSetNonzeros "[INTERNAL]  Assign
the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::Horzsplit::getSolve "[INTERNAL]   Solve a
system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") casadi::Horzsplit::getValue "[INTERNAL]  Get the
value (only for scalar constant nodes)

";

%feature("docstring") casadi::Horzsplit::print "

>  void casadi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void casadi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") casadi::Horzsplit::size2 "[INTERNAL] ";

%feature("docstring") casadi::Horzsplit::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") casadi::Horzsplit::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") casadi::Horzsplit::getFunction "[INTERNAL]  Get
function reference.

";

%feature("docstring") casadi::Horzsplit::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") casadi::Horzsplit::getNormF "[INTERNAL]  Frobenius
norm.

";

%feature("docstring") casadi::Horzsplit::hasDep "[INTERNAL]  Does the node
depend on other nodes.

";

%feature("docstring") casadi::Horzsplit::getMatrixValue "[INTERNAL]  Get
the value (only for constant nodes)

";

%feature("docstring") casadi::Horzsplit::printPart "[INTERNAL]  Print a
part of the expression */.

";

%feature("docstring") casadi::Horzsplit::mapping "[INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") casadi::Horzsplit::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") casadi::Horzsplit::clone "[INTERNAL]  Clone function.

";

%feature("docstring") casadi::Horzsplit::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") casadi::Horzsplit::simplifyMe "[INTERNAL]  Simplify
the expression (ex is a reference to the node)

";

%feature("docstring") casadi::Horzsplit::sparsity "

>  virtual const Sparsity& casadi::Split::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

>  const Sparsity& casadi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

";

%feature("docstring") casadi::Horzsplit::getFunctionInput "[INTERNAL]  Get
function input.

";

%feature("docstring") casadi::Horzsplit::dep "

>  const MX & casadi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & casadi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::Horzsplit::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") casadi::Horzsplit::assign "

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") casadi::Horzsplit::getNorm2 "[INTERNAL]  Spectral
norm.

";

%feature("docstring") casadi::Horzsplit::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") casadi::Horzsplit::evaluateSX "[INTERNAL]  Evaluate
the function symbolically (SX)

";

%feature("docstring") casadi::Horzsplit::getName "[INTERNAL]  Get the name.

";

%feature("docstring") casadi::Horzsplit::evaluateMX "

>  void casadi::Horzsplit::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void casadi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") casadi::Horzsplit::isNonLinear "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring") casadi::Horzsplit::getFunctionOutput "[INTERNAL]  Get
function output.

";

%feature("docstring") casadi::Horzsplit::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") casadi::Horzsplit::getGetNonzeros "[INTERNAL]  Get
the nonzeros of matrix.

";

%feature("docstring") casadi::Horzsplit::isOutputNode "[INTERNAL]  Check if
evaluation output.

";

%feature("docstring") casadi::Horzsplit "[INTERNAL]  Horizontal split, x ->
x0, x1, ...

Joel Andersson

C++ includes: split.hpp ";

%feature("docstring") casadi::Horzsplit::getNumOutputs "[INTERNAL]  Number
of outputs.

";

%feature("docstring") casadi::Horzsplit::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::Horzsplit::propagateSparsity "[INTERNAL]
Propagate sparsity.

";

%feature("docstring") casadi::Horzsplit::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring") casadi::Horzsplit::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") casadi::Horzsplit::evaluateD "[INTERNAL]  Evaluate
the function numerically.

";

%feature("docstring") casadi::Horzsplit::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") casadi::Horzsplit::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") casadi::Horzsplit::getSubRef "[INTERNAL]  Get
submatrix reference.

";

%feature("docstring") casadi::Horzsplit::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::Horzsplit::assertInit "[INTERNAL]  Assert
that the object has been initialized.

";

%feature("docstring") casadi::Horzsplit::getOutput "[INTERNAL]  Get an
output.

";

%feature("docstring") casadi::Horzsplit::deepCopyMembers "[INTERNAL]  Deep
copy data members.

";

%feature("docstring") casadi::Horzsplit::getMultiplication "[INTERNAL]
Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") casadi::Horzsplit::getBinarySwitch "[INTERNAL]  Get a
binary operation operation.

";

%feature("docstring") casadi::Horzsplit::getUnary "[INTERNAL]  Get a unary
operation.

";

%feature("docstring") casadi::Horzsplit::getReshape "[INTERNAL]   Reshape.

";

%feature("docstring") casadi::Horzsplit::isMultipleOutput "[INTERNAL]
Check if a multiple output node.

";

%feature("docstring") casadi::Horzsplit::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") casadi::Horzsplit::getNormInf "[INTERNAL]  Infinity
norm.

";

%feature("docstring") casadi::Horzsplit::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") casadi::Horzsplit::getInverse "[INTERNAL]   Inverse.

";

%feature("docstring") casadi::Horzsplit::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::Horzsplit::getBinary "[INTERNAL]  Get a
binary operation operation (matrix-matrix)

";

%feature("docstring") casadi::Horzsplit::getHorzsplit "[INTERNAL]  Create a
horizontal split node.

";

%feature("docstring") casadi::Horzsplit::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") casadi::Horzsplit::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") casadi::Horzsplit::isUnaryOp "[INTERNAL]  Check if
unary operation.

";

%feature("docstring") casadi::Horzsplit::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") casadi::Horzsplit::getVertsplit "[INTERNAL]  Create a
vertical split node (vectors only)

";

%feature("docstring") casadi::Horzsplit::evaluateGen "[INTERNAL]  Evaluate
the function (template)

";

%feature("docstring") casadi::Horzsplit::Horzsplit "[INTERNAL]
Constructor.

";

%feature("docstring") casadi::Horzsplit::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") casadi::Horzsplit::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") casadi::Horzsplit::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") casadi::Horzsplit::getAddNonzeros "[INTERNAL]  Add
the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::Horzsplit::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") casadi::Horzsplit::sameOpAndDeps "[INTERNAL]  Checks
if two nodes have the same operation and have equivalent dependencies up to
a given depth.

";

%feature("docstring") casadi::Horzsplit::getSetSparse "[INTERNAL]  Create
set sparse.

";

%feature("docstring") casadi::Horzsplit::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") casadi::Horzsplit::numel "[INTERNAL]  Get shape.

";

%feature("docstring") casadi::Horzsplit::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") casadi::Horzsplit::isIdentity "[INTERNAL]  Check if
identity matrix.

";


// File: classcasadi_1_1IdasIntegrator.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::IdasIntegrator::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::IdasIntegrator::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::IdasIntegrator::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::IdasIntegrator::integrate "

Integrate forward until a specified time point.

";

%feature("docstring") casadi::IdasIntegrator::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") casadi::IdasIntegrator::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::IdasIntegrator::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::IdasIntegrator::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::IdasIntegrator::inputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::IdasIntegrator::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::IdasIntegrator::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") casadi::IdasIntegrator::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::IdasIntegrator::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::IdasIntegrator::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::IdasIntegrator::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::IdasIntegrator::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::IdasIntegrator::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::IdasIntegrator::printPtr "[INTERNAL]  Print
the pointer to the internal class

";

%feature("docstring") casadi::IdasIntegrator::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::IdasIntegrator::getAugmented "

Generate a augmented DAE system with nfwd forward sensitivities and nadj
adjoint sensitivities.

";

%feature("docstring") casadi::IdasIntegrator::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::IdasIntegrator::isInit "

Is initialized?

";

%feature("docstring") casadi::IdasIntegrator::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::IdasIntegrator::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::IdasIntegrator::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::IdasIntegrator::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::IdasIntegrator::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::IdasIntegrator::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::IdasIntegrator::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::IdasIntegrator::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::IdasIntegrator::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::IdasIntegrator::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::IdasIntegrator::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::IdasIntegrator::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::IdasIntegrator::schemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::IdasIntegrator::getOption "

get an option value

";

%feature("docstring") casadi::IdasIntegrator::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::IdasIntegrator::reset "

Reset the forward problem Time will be set to t0 and state to
input(INTEGRATOR_X0)

";

%feature("docstring") casadi::IdasIntegrator::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") casadi::IdasIntegrator::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::IdasIntegrator::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::IdasIntegrator::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::IdasIntegrator::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::IdasIntegrator::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::IdasIntegrator::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::IdasIntegrator::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::IdasIntegrator::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::IdasIntegrator::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::IdasIntegrator::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::IdasIntegrator::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::IdasIntegrator::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::IdasIntegrator::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::IdasIntegrator::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::IdasIntegrator::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::IdasIntegrator::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::IdasIntegrator::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::IdasIntegrator::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::IdasIntegrator::hasOption "

check if there is an option str

";

%feature("docstring") casadi::IdasIntegrator::printStats "

Print solver statistics.

";

%feature("docstring") casadi::IdasIntegrator::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::IdasIntegrator::resetB "

Reset the backward problem.

Time will be set to tf and backward state to input(INTEGRATOR_RX0)

";

%feature("docstring") casadi::IdasIntegrator::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::IdasIntegrator::isNull "

Is a null pointer?

";

%feature("docstring") casadi::IdasIntegrator::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::IdasIntegrator "

Interface to IDAS from the Sundials suite.

Base class for integrators. Solves an initial value problem (IVP) coupled to
a terminal value problem with differential equation given as an implicit ODE
coupled to an algebraic equation and a set of quadratures: Initial
conditions at t=t0  x(t0)  = x0  q(t0)  = 0   Forward integration from t=t0
to t=tf  der(x) = function(x, z, p, t) Forward ODE  0 = fz(x, z, p, t)
Forward algebraic equations  der(q) = fq(x, z, p, t)
Forward quadratures   Terminal conditions at t=tf  rx(tf)  = rx0  rq(tf)  =
0 Backward integration from t=tf to t=t0  der(rx) = gx(rx, rz, rp, x, z, p,
t)        Backward ODE  0 = gz(rx, rz, rp, x, z, p, t) Backward algebraic
equations  der(rq) = gq(rx, rz, rp, x, z, p, t) Backward quadratures   where
we assume that both the forward and backwards integrations are index-1
(i.e. dfz/dz, dgz/drz are invertible) and furthermore that  gx, gz and gq
have a linear dependency on rx, rz and rp.

Joel Andersson

>Input scheme: casadi::IntegratorInput (INTEGRATOR_NUM_IN = 7) [integratorIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_X0          | x0                     | Differential state at  |
|                        |                        | the initial time .     |
+------------------------+------------------------+------------------------+
| INTEGRATOR_P           | p                      | Parameters .           |
+------------------------+------------------------+------------------------+
| INTEGRATOR_Z0          | z0                     | Initial guess for the  |
|                        |                        | algebraic variable .   |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RX0         | rx0                    | Backward differential  |
|                        |                        | state at the final     |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RP          | rp                     | Backward parameter     |
|                        |                        | vector .               |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZ0         | rz0                    | Initial guess for the  |
|                        |                        | backwards algebraic    |
|                        |                        | variable .             |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::IntegratorOutput (INTEGRATOR_NUM_OUT = 7) [integratorOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_XF          | xf                     | Differential state at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_QF          | qf                     | Quadrature state at    |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_ZF          | zf                     | Algebraic variable at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RXF         | rxf                    | Backward differential  |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RQF         | rqf                    | Backward quadrature    |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZF         | rzf                    | Backward algebraic     |
|                        |                        | variable at the        |
|                        |                        | initial time .         |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| abstol       | OT_REAL      | 0.000        | Absolute     | casadi::Sund |
|              |              |              | tolerence    | ialsInternal |
|              |              |              | for the IVP  |              |
|              |              |              | solution     |              |
+--------------+--------------+--------------+--------------+--------------+
| abstolB      | OT_REAL      | GenericType( | Absolute     | casadi::Sund |
|              |              | )            | tolerence    | ialsInternal |
|              |              |              | for the      |              |
|              |              |              | adjoint      |              |
|              |              |              | sensitivity  |              |
|              |              |              | solution     |              |
|              |              |              | [default:    |              |
|              |              |              | equal to     |              |
|              |              |              | abstol]      |              |
+--------------+--------------+--------------+--------------+--------------+
| abstolv      | OT_REALVECTO |              |              | casadi::Idas |
|              | R            |              |              | Internal     |
+--------------+--------------+--------------+--------------+--------------+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| augmented_op | OT_DICTIONAR | GenericType( | Options to   | casadi::Inte |
| tions        | Y            | )            | be passed    | gratorIntern |
|              |              |              | down to the  | al           |
|              |              |              | augmented    |              |
|              |              |              | integrator,  |              |
|              |              |              | if one is    |              |
|              |              |              | constructed. |              |
+--------------+--------------+--------------+--------------+--------------+
| calc_ic      | OT_BOOLEAN   | true         | Use          | casadi::Idas |
|              |              |              | IDACalcIC to | Internal     |
|              |              |              | get          |              |
|              |              |              | consistent   |              |
|              |              |              | initial      |              |
|              |              |              | conditions.  |              |
+--------------+--------------+--------------+--------------+--------------+
| calc_icB     | OT_BOOLEAN   | GenericType( | Use          | casadi::Idas |
|              |              | )            | IDACalcIC to | Internal     |
|              |              |              | get          |              |
|              |              |              | consistent   |              |
|              |              |              | initial      |              |
|              |              |              | conditions   |              |
|              |              |              | for          |              |
|              |              |              | backwards    |              |
|              |              |              | system       |              |
|              |              |              | [default:    |              |
|              |              |              | equal to     |              |
|              |              |              | calc_ic].    |              |
+--------------+--------------+--------------+--------------+--------------+
| cj_scaling   | OT_BOOLEAN   | false        | IDAS scaling | casadi::Idas |
|              |              |              | on cj for    | Internal     |
|              |              |              | the user-    |              |
|              |              |              | defined      |              |
|              |              |              | linear       |              |
|              |              |              | solver       |              |
|              |              |              | module       |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| disable_inte | OT_BOOLEAN   | false        | Disable IDAS | casadi::Idas |
| rnal_warning |              |              | internal     | Internal     |
| s            |              |              | warning      |              |
|              |              |              | messages     |              |
+--------------+--------------+--------------+--------------+--------------+
| exact_jacobi | OT_BOOLEAN   | true         | Use exact    | casadi::Sund |
| an           |              |              | Jacobian     | ialsInternal |
|              |              |              | information  |              |
|              |              |              | for the      |              |
|              |              |              | forward      |              |
|              |              |              | integration  |              |
+--------------+--------------+--------------+--------------+--------------+
| exact_jacobi | OT_BOOLEAN   | GenericType( | Use exact    | casadi::Sund |
| anB          |              | )            | Jacobian     | ialsInternal |
|              |              |              | information  |              |
|              |              |              | for the      |              |
|              |              |              | backward     |              |
|              |              |              | integration  |              |
|              |              |              | [default:    |              |
|              |              |              | equal to exa |              |
|              |              |              | ct_jacobian] |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_augme | OT_BOOLEAN   | true         | If DAE       | casadi::Inte |
| nted         |              |              | callback     | gratorIntern |
|              |              |              | functions    | al           |
|              |              |              | are          |              |
|              |              |              | SXFunction , |              |
|              |              |              | have         |              |
|              |              |              | augmented    |              |
|              |              |              | DAE callback |              |
|              |              |              | function     |              |
|              |              |              | also be      |              |
|              |              |              | SXFunction . |              |
+--------------+--------------+--------------+--------------+--------------+
| extra_fsens_ | OT_BOOLEAN   | false        | Call calc ic | casadi::Idas |
| calc_ic      |              |              | an extra     | Internal     |
|              |              |              | time, with   |              |
|              |              |              | fsens=0      |              |
+--------------+--------------+--------------+--------------+--------------+
| finite_diffe | OT_BOOLEAN   | false        | Use finite   | casadi::Sund |
| rence_fsens  |              |              | differences  | ialsInternal |
|              |              |              | to           |              |
|              |              |              | approximate  |              |
|              |              |              | the forward  |              |
|              |              |              | sensitivity  |              |
|              |              |              | equations    |              |
|              |              |              | (if AD is    |              |
|              |              |              | not          |              |
|              |              |              | available)   |              |
+--------------+--------------+--------------+--------------+--------------+
| first_time   | OT_REAL      | GenericType( | First        | casadi::Idas |
|              |              | )            | requested    | Internal     |
|              |              |              | time as a    |              |
|              |              |              | fraction of  |              |
|              |              |              | the time     |              |
|              |              |              | interval     |              |
+--------------+--------------+--------------+--------------+--------------+
| fsens_abstol | OT_REAL      | GenericType( | Absolute     | casadi::Sund |
|              |              | )            | tolerence    | ialsInternal |
|              |              |              | for the      |              |
|              |              |              | forward      |              |
|              |              |              | sensitivity  |              |
|              |              |              | solution     |              |
|              |              |              | [default:    |              |
|              |              |              | equal to     |              |
|              |              |              | abstol]      |              |
+--------------+--------------+--------------+--------------+--------------+
| fsens_abstol | OT_REALVECTO |              |              | casadi::Idas |
| v            | R            |              |              | Internal     |
+--------------+--------------+--------------+--------------+--------------+
| fsens_err_co | OT_BOOLEAN   | true         | include the  | casadi::Sund |
| n            |              |              | forward sens | ialsInternal |
|              |              |              | itivities in |              |
|              |              |              | all error    |              |
|              |              |              | controls     |              |
+--------------+--------------+--------------+--------------+--------------+
| fsens_reltol | OT_REAL      | GenericType( | Relative     | casadi::Sund |
|              |              | )            | tolerence    | ialsInternal |
|              |              |              | for the      |              |
|              |              |              | forward      |              |
|              |              |              | sensitivity  |              |
|              |              |              | solution     |              |
|              |              |              | [default:    |              |
|              |              |              | equal to     |              |
|              |              |              | reltol]      |              |
+--------------+--------------+--------------+--------------+--------------+
| fsens_scalin | OT_REALVECTO | GenericType( | Scaling      | casadi::Sund |
| g_factors    | R            | )            | factor for   | ialsInternal |
|              |              |              | the          |              |
|              |              |              | components   |              |
|              |              |              | if finite    |              |
|              |              |              | differences  |              |
|              |              |              | is used      |              |
+--------------+--------------+--------------+--------------+--------------+
| fsens_sensit | OT_INTEGERVE | GenericType( | Specifies    | casadi::Sund |
| iviy_paramet | CTOR         | )            | which        | ialsInternal |
| ers          |              |              | components   |              |
|              |              |              | will be used |              |
|              |              |              | when         |              |
|              |              |              | estimating   |              |
|              |              |              | the          |              |
|              |              |              | sensitivity  |              |
|              |              |              | equations    |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| init_xdot    | OT_REALVECTO | GenericType( | Initial      | casadi::Idas |
|              | R            | )            | values for   | Internal     |
|              |              |              | the state    |              |
|              |              |              | derivatives  |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| interpolatio | OT_STRING    | \"hermite\"    | Type of inte | casadi::Sund |
| n_type       |              |              | rpolation    | ialsInternal |
|              |              |              | for the      |              |
|              |              |              | adjoint sens |              |
|              |              |              | itivities (h |              |
|              |              |              | ermite|polyn |              |
|              |              |              | omial)       |              |
+--------------+--------------+--------------+--------------+--------------+
| iterative_so | OT_STRING    | \"gmres\"      | (gmres|bcgst | casadi::Sund |
| lver         |              |              | ab|tfqmr)    | ialsInternal |
+--------------+--------------+--------------+--------------+--------------+
| iterative_so | OT_STRING    | GenericType( | (gmres|bcgst | casadi::Sund |
| lverB        |              | )            | ab|tfqmr)    | ialsInternal |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_LINEARSOL | GenericType( | A custom     | casadi::Sund |
| r            | VER          | )            | linear       | ialsInternal |
|              |              |              | solver       |              |
|              |              |              | creator      |              |
|              |              |              | function     |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_LINEARSOL | GenericType( | A custom     | casadi::Sund |
| rB           | VER          | )            | linear       | ialsInternal |
|              |              |              | solver       |              |
|              |              |              | creator      |              |
|              |              |              | function for |              |
|              |              |              | backwards    |              |
|              |              |              | integration  |              |
|              |              |              | [default:    |              |
|              |              |              | equal to lin |              |
|              |              |              | ear_solver]  |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_DICTIONAR | GenericType( | Options to   | casadi::Sund |
| r_options    | Y            | )            | be passed to | ialsInternal |
|              |              |              | the linear   |              |
|              |              |              | solver       |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_DICTIONAR | GenericType( | Options to   | casadi::Sund |
| r_optionsB   | Y            | )            | be passed to | ialsInternal |
|              |              |              | the linear   |              |
|              |              |              | solver for   |              |
|              |              |              | backwards    |              |
|              |              |              | integration  |              |
|              |              |              | [default:    |              |
|              |              |              | equal to lin |              |
|              |              |              | ear_solver_o |              |
|              |              |              | ptions]      |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_STRING    | \"dense\"      | (user_define | casadi::Sund |
| r_type       |              |              | d|dense|band | ialsInternal |
|              |              |              | ed|iterative |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_STRING    | GenericType( | (user_define | casadi::Sund |
| r_typeB      |              | )            | d|dense|band | ialsInternal |
|              |              |              | ed|iterative |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| lower_bandwi | OT_INTEGER   | GenericType( | Lower band-  | casadi::Sund |
| dth          |              | )            | width of     | ialsInternal |
|              |              |              | banded       |              |
|              |              |              | Jacobian (es |              |
|              |              |              | timations)   |              |
+--------------+--------------+--------------+--------------+--------------+
| lower_bandwi | OT_INTEGER   | GenericType( | lower band-  | casadi::Sund |
| dthB         |              | )            | width of     | ialsInternal |
|              |              |              | banded       |              |
|              |              |              | jacobians    |              |
|              |              |              | for backward |              |
|              |              |              | integration  |              |
|              |              |              | [default:    |              |
|              |              |              | equal to low |              |
|              |              |              | er_bandwidth |              |
|              |              |              | ]            |              |
+--------------+--------------+--------------+--------------+--------------+
| max_krylov   | OT_INTEGER   | 10           | Maximum      | casadi::Sund |
|              |              |              | Krylov       | ialsInternal |
|              |              |              | subspace     |              |
|              |              |              | size         |              |
+--------------+--------------+--------------+--------------+--------------+
| max_krylovB  | OT_INTEGER   | GenericType( | Maximum      | casadi::Sund |
|              |              | )            | krylov       | ialsInternal |
|              |              |              | subspace     |              |
|              |              |              | size         |              |
+--------------+--------------+--------------+--------------+--------------+
| max_multiste | OT_INTEGER   | 5            |              | casadi::Sund |
| p_order      |              |              |              | ialsInternal |
+--------------+--------------+--------------+--------------+--------------+
| max_num_step | OT_INTEGER   | 10000        | Maximum      | casadi::Sund |
| s            |              |              | number of    | ialsInternal |
|              |              |              | integrator   |              |
|              |              |              | steps        |              |
+--------------+--------------+--------------+--------------+--------------+
| max_step_siz | OT_REAL      | 0            | Maximim step | casadi::Idas |
| e            |              |              | size         | Internal     |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp | casadi::Idas |
|              |              |              | uts)  (corre | Internal     |
|              |              |              | ctInitialCon |              |
|              |              |              | ditions|res| |              |
|              |              |              | resS|resB|rh |              |
|              |              |              | sQB|bjacB|jt |              |
|              |              |              | imesB|psetup |              |
|              |              |              | B|psolveB|ps |              |
|              |              |              | etup)        |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| pretype      | OT_STRING    | \"none\"       | (none|left|r | casadi::Sund |
|              |              |              | ight|both)   | ialsInternal |
+--------------+--------------+--------------+--------------+--------------+
| pretypeB     | OT_STRING    | GenericType( | (none|left|r | casadi::Sund |
|              |              | )            | ight|both)   | ialsInternal |
+--------------+--------------+--------------+--------------+--------------+
| print_stats  | OT_BOOLEAN   | false        | Print out    | casadi::Inte |
|              |              |              | statistics   | gratorIntern |
|              |              |              | after        | al           |
|              |              |              | integration  |              |
+--------------+--------------+--------------+--------------+--------------+
| quad_err_con | OT_BOOLEAN   | false        | Should the   | casadi::Sund |
|              |              |              | quadratures  | ialsInternal |
|              |              |              | affect the   |              |
|              |              |              | step size    |              |
|              |              |              | control      |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| reltol       | OT_REAL      | 0.000        | Relative     | casadi::Sund |
|              |              |              | tolerence    | ialsInternal |
|              |              |              | for the IVP  |              |
|              |              |              | solution     |              |
+--------------+--------------+--------------+--------------+--------------+
| reltolB      | OT_REAL      | GenericType( | Relative     | casadi::Sund |
|              |              | )            | tolerence    | ialsInternal |
|              |              |              | for the      |              |
|              |              |              | adjoint      |              |
|              |              |              | sensitivity  |              |
|              |              |              | solution     |              |
|              |              |              | [default:    |              |
|              |              |              | equal to     |              |
|              |              |              | reltol]      |              |
+--------------+--------------+--------------+--------------+--------------+
| sensitivity_ | OT_STRING    | \"simultaneou | (simultaneou | casadi::Sund |
| method       |              | s\"           | s|staggered) | ialsInternal |
+--------------+--------------+--------------+--------------+--------------+
| steps_per_ch | OT_INTEGER   | 20           | Number of    | casadi::Sund |
| eckpoint     |              |              | steps        | ialsInternal |
|              |              |              | between two  |              |
|              |              |              | consecutive  |              |
|              |              |              | checkpoints  |              |
+--------------+--------------+--------------+--------------+--------------+
| stop_at_end  | OT_BOOLEAN   | true         | Stop the     | casadi::Sund |
|              |              |              | integrator   | ialsInternal |
|              |              |              | at the end   |              |
|              |              |              | of the       |              |
|              |              |              | interval     |              |
+--------------+--------------+--------------+--------------+--------------+
| suppress_alg | OT_BOOLEAN   | false        | Supress      | casadi::Idas |
| ebraic       |              |              | algebraic    | Internal     |
|              |              |              | variables in |              |
|              |              |              | the error    |              |
|              |              |              | testing      |              |
+--------------+--------------+--------------+--------------+--------------+
| t0           | OT_REAL      | 0            | Beginning of | casadi::Inte |
|              |              |              | the time     | gratorIntern |
|              |              |              | horizon      | al           |
+--------------+--------------+--------------+--------------+--------------+
| tf           | OT_REAL      | 1            | End of the   | casadi::Inte |
|              |              |              | time horizon | gratorIntern |
|              |              |              |              | al           |
+--------------+--------------+--------------+--------------+--------------+
| upper_bandwi | OT_INTEGER   | GenericType( | Upper band-  | casadi::Sund |
| dth          |              | )            | width of     | ialsInternal |
|              |              |              | banded       |              |
|              |              |              | Jacobian (es |              |
|              |              |              | timations)   |              |
+--------------+--------------+--------------+--------------+--------------+
| upper_bandwi | OT_INTEGER   | GenericType( | Upper band-  | casadi::Sund |
| dthB         |              | )            | width of     | ialsInternal |
|              |              |              | banded       |              |
|              |              |              | jacobians    |              |
|              |              |              | for backward |              |
|              |              |              | integration  |              |
|              |              |              | [default:    |              |
|              |              |              | equal to upp |              |
|              |              |              | er_bandwidth |              |
|              |              |              | ]            |              |
+--------------+--------------+--------------+--------------+--------------+
| use_precondi | OT_BOOLEAN   | false        | Precondition | casadi::Sund |
| tioner       |              |              | an iterative | ialsInternal |
|              |              |              | solver       |              |
+--------------+--------------+--------------+--------------+--------------+
| use_precondi | OT_BOOLEAN   | GenericType( | Precondition | casadi::Sund |
| tionerB      |              | )            | an iterative | ialsInternal |
|              |              |              | solver for   |              |
|              |              |              | the          |              |
|              |              |              | backwards    |              |
|              |              |              | problem      |              |
|              |              |              | [default:    |              |
|              |              |              | equal to use |              |
|              |              |              | _preconditio |              |
|              |              |              | ner]         |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available monitors
+--------------------------+--------------------------+
|            Id            |         Used in          |
+==========================+==========================+
| bjacB                    | casadi::IdasInternal     |
+--------------------------+--------------------------+
| correctInitialConditions | casadi::IdasInternal     |
+--------------------------+--------------------------+
| inputs                   | casadi::FunctionInternal |
+--------------------------+--------------------------+
| jtimesB                  | casadi::IdasInternal     |
+--------------------------+--------------------------+
| outputs                  | casadi::FunctionInternal |
+--------------------------+--------------------------+
| psetup                   | casadi::IdasInternal     |
+--------------------------+--------------------------+
| psetupB                  | casadi::IdasInternal     |
+--------------------------+--------------------------+
| psolveB                  | casadi::IdasInternal     |
+--------------------------+--------------------------+
| res                      | casadi::IdasInternal     |
+--------------------------+--------------------------+
| resB                     | casadi::IdasInternal     |
+--------------------------+--------------------------+
| resS                     | casadi::IdasInternal     |
+--------------------------+--------------------------+
| rhsQB                    | casadi::IdasInternal     |
+--------------------------+--------------------------+

>List of available stats
+-------------+----------------------+
|     Id      |       Used in        |
+=============+======================+
| nlinsetups  | casadi::IdasInternal |
+-------------+----------------------+
| nlinsetupsB | casadi::IdasInternal |
+-------------+----------------------+
| nsteps      | casadi::IdasInternal |
+-------------+----------------------+
| nstepsB     | casadi::IdasInternal |
+-------------+----------------------+

Diagrams

C++ includes: idas_integrator.hpp ";

%feature("docstring") casadi::IdasIntegrator::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::IdasIntegrator::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::IdasIntegrator::setStopTime "

Set a stop time for the forward integration.

";

%feature("docstring") casadi::IdasIntegrator::IdasIntegrator "

>  casadi::IdasIntegrator::IdasIntegrator()
------------------------------------------------------------------------

Default constructor.

>  casadi::IdasIntegrator::IdasIntegrator(const Function &f, const Function &g=Function())
------------------------------------------------------------------------

Create an integrator for a fully implicit DAE with quadrature states ( nz is
the number of states not to be included in the state vector)

Parameters:
-----------

f:  dynamical system

>Input scheme: casadi::DAEInput (DAE_NUM_IN = 5) [daeIn]
+-----------+-------+----------------------------+
| Full name | Short |        Description         |
+===========+=======+============================+
| DAE_X     | x     | Differential state .       |
+-----------+-------+----------------------------+
| DAE_Z     | z     | Algebraic state .          |
+-----------+-------+----------------------------+
| DAE_P     | p     | Parameter .                |
+-----------+-------+----------------------------+
| DAE_T     | t     | Explicit time dependence . |
+-----------+-------+----------------------------+

>Output scheme: casadi::DAEOutput (DAE_NUM_OUT = 4) [daeOut]
+-----------+-------+--------------------------------------------+
| Full name | Short |                Description                 |
+===========+=======+============================================+
| DAE_ODE   | ode   | Right hand side of the implicit ODE .      |
+-----------+-------+--------------------------------------------+
| DAE_ALG   | alg   | Right hand side of algebraic equations .   |
+-----------+-------+--------------------------------------------+
| DAE_QUAD  | quad  | Right hand side of quadratures equations . |
+-----------+-------+--------------------------------------------+

Parameters:
-----------

g:  backwards system

>Input scheme: casadi::RDAEInput (RDAE_NUM_IN = 8) [rdaeIn]
+-----------+-------+-------------------------------+
| Full name | Short |          Description          |
+===========+=======+===============================+
| RDAE_RX   | rx    | Backward differential state . |
+-----------+-------+-------------------------------+
| RDAE_RZ   | rz    | Backward algebraic state .    |
+-----------+-------+-------------------------------+
| RDAE_RP   | rp    | Backward parameter vector .   |
+-----------+-------+-------------------------------+
| RDAE_X    | x     | Forward differential state .  |
+-----------+-------+-------------------------------+
| RDAE_Z    | z     | Forward algebraic state .     |
+-----------+-------+-------------------------------+
| RDAE_P    | p     | Parameter vector .            |
+-----------+-------+-------------------------------+
| RDAE_T    | t     | Explicit time dependence .    |
+-----------+-------+-------------------------------+

>Output scheme: casadi::RDAEOutput (RDAE_NUM_OUT = 4) [rdaeOut]
+-----------+-------+-------------------------------------------+
| Full name | Short |                Description                |
+===========+=======+===========================================+
| RDAE_ODE  | ode   | Right hand side of ODE. .                 |
+-----------+-------+-------------------------------------------+
| RDAE_ALG  | alg   | Right hand side of algebraic equations. . |
+-----------+-------+-------------------------------------------+
| RDAE_QUAD | quad  | Right hand side of quadratures. .         |
+-----------+-------+-------------------------------------------+

";

%feature("docstring") casadi::IdasIntegrator::clone "

Clone.

";

%feature("docstring") casadi::IdasIntegrator::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::IdasIntegrator::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") casadi::IdasIntegrator::checkInputs "[INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::IdasIntegrator::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::IdasIntegrator::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::IdasIntegrator::integrateB "

Integrate backward until a specified time point.

";

%feature("docstring") casadi::IdasIntegrator::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::IdasIntegrator::spCanEvaluate "[INTERNAL]  Is
the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::IdasIntegrator::getDAE "

Get the DAE.

";

%feature("docstring") casadi::IdasIntegrator::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::IdasIntegrator::evaluate "

Evaluate.

";

%feature("docstring") casadi::IdasIntegrator::correctInitialConditions "

Correct the initial value for yp and z after resetting the solver.

";

%feature("docstring") casadi::IdasIntegrator::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::IdasIntegrator::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::IdasIntegrator::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::IdasIntegrator::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::IdasIntegrator::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::IdasIntegrator::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::IdasIntegrator::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::IdasIntegrator::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::IdasIntegrator::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::IdasIntegrator::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::IdasIntegrator::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::IdasIntegrator::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::IdasIntegrator::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::IdasIntegrator::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::IdasIntegrator::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::IdasIntegrator::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::IdasIntegrator::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::IdasIntegrator::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";


// File: classcasadi_1_1ImplicitFixedStepIntegrator.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::ImplicitFixedStepIntegrator::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::printStats "

Print solver statistics.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::spCanEvaluate "[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::outputScheme "[INTERNAL]  Access input/output scheme.

";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::getCount "[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::getOption "

get an option value

";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::setOptionByEnumValue "[INTERNAL]  Set
a certain option by giving an enum value.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::inputSchemeEntry
"[INTERNAL]  Find the index for a string describing a particular entry of
an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::getOptionAllowed
"

Get the allowed values of a certain option.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::swap "[INTERNAL]
Swap content with another instance.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::assertInit "[INTERNAL]  Assert that it is initialized

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::spInit "[INTERNAL]  Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::getRepresentation
"

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator "

Base class for implicit fixed step integrators.

Joel Andersson

>Input scheme: casadi::IntegratorInput (INTEGRATOR_NUM_IN = 7) [integratorIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_X0          | x0                     | Differential state at  |
|                        |                        | the initial time .     |
+------------------------+------------------------+------------------------+
| INTEGRATOR_P           | p                      | Parameters .           |
+------------------------+------------------------+------------------------+
| INTEGRATOR_Z0          | z0                     | Initial guess for the  |
|                        |                        | algebraic variable .   |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RX0         | rx0                    | Backward differential  |
|                        |                        | state at the final     |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RP          | rp                     | Backward parameter     |
|                        |                        | vector .               |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZ0         | rz0                    | Initial guess for the  |
|                        |                        | backwards algebraic    |
|                        |                        | variable .             |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::IntegratorOutput (INTEGRATOR_NUM_OUT = 7) [integratorOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_XF          | xf                     | Differential state at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_QF          | qf                     | Quadrature state at    |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_ZF          | zf                     | Algebraic variable at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RXF         | rxf                    | Backward differential  |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RQF         | rqf                    | Backward quadrature    |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZF         | rzf                    | Backward algebraic     |
|                        |                        | variable at the        |
|                        |                        | initial time .         |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| augmented_op | OT_DICTIONAR | GenericType( | Options to   | casadi::Inte |
| tions        | Y            | )            | be passed    | gratorIntern |
|              |              |              | down to the  | al           |
|              |              |              | augmented    |              |
|              |              |              | integrator,  |              |
|              |              |              | if one is    |              |
|              |              |              | constructed. |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_augme | OT_BOOLEAN   | true         | If DAE       | casadi::Inte |
| nted         |              |              | callback     | gratorIntern |
|              |              |              | functions    | al           |
|              |              |              | are          |              |
|              |              |              | SXFunction , |              |
|              |              |              | have         |              |
|              |              |              | augmented    |              |
|              |              |              | DAE callback |              |
|              |              |              | function     |              |
|              |              |              | also be      |              |
|              |              |              | SXFunction . |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| implicit_sol | OT_IMPLICITF | GenericType( | An implicit  | casadi::Impl |
| ver          | UNCTION      | )            | function     | icitFixedSte |
|              |              |              | solver       | pIntegratorI |
|              |              |              |              | nternal      |
+--------------+--------------+--------------+--------------+--------------+
| implicit_sol | OT_DICTIONAR | GenericType( | Options to   | casadi::Impl |
| ver_options  | Y            | )            | be passed to | icitFixedSte |
|              |              |              | the NLP      | pIntegratorI |
|              |              |              | Solver       | nternal      |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| number_of_fi | OT_INTEGER   | 20           | Number of    | casadi::Fixe |
| nite_element |              |              | finite       | dStepIntegra |
| s            |              |              | elements     | torInternal  |
+--------------+--------------+--------------+--------------+--------------+
| print_stats  | OT_BOOLEAN   | false        | Print out    | casadi::Inte |
|              |              |              | statistics   | gratorIntern |
|              |              |              | after        | al           |
|              |              |              | integration  |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| t0           | OT_REAL      | 0            | Beginning of | casadi::Inte |
|              |              |              | the time     | gratorIntern |
|              |              |              | horizon      | al           |
+--------------+--------------+--------------+--------------+--------------+
| tf           | OT_REAL      | 1            | End of the   | casadi::Inte |
|              |              |              | time horizon | gratorIntern |
|              |              |              |              | al           |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: implicit_fixed_step_integrator.hpp ";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::getOptionEnumValue "[INTERNAL]  Get
the enum value corresponding to th certain option.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::outputSchemeEntry
"[INTERNAL]  Find the index for a string describing a particular entry of
an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::assignNode "[INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::getOptionAllowedIndex "[INTERNAL]  Get
the index into allowed options of a certain option.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::reset "

Reset the forward problem Time will be set to t0 and state to
input(INTEGRATOR_X0)

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::output_struct "[INTERNAL]  Input/output structures of the function

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::hasOption "

check if there is an option str

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::integrate "

Integrate forward until a specified time point.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::getOptionDefault
"

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::isNull "

Is a null pointer?

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::print "[INTERNAL]  Print a description of the object.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::setOptionByAllowedIndex "[INTERNAL]
Set a certain option by giving its index into the allowed values.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::checkInputs "[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::inputScheme "[INTERNAL]  Access input/output scheme.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::getOptionTypeName
"

Get the type name of a certain option.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::getDAE "

Get the DAE.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::clone "

Clone.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::weak "[INTERNAL]
Get a weak reference to the object.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::printPtr "[INTERNAL]  Print the pointer to the internal class

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::getAugmented "

Generate a augmented DAE system with nfwd forward sensitivities and nadj
adjoint sensitivities.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::spEvaluate "[INTERNAL]  Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::input_struct "[INTERNAL]  Input/output structures of the function

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::evaluate "

Evaluate.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::getSanitizedName
"

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::isInit "

Is initialized?

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::assignNodeNoCount
"[INTERNAL]  Assign the node to a node class pointer without reference
counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::integrateB "

Integrate backward until a specified time point.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::resetB "

Reset the backward problem.

Time will be set to tf and backward state to input(INTEGRATOR_RX0)

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::schemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::callDerivative "[INTERNAL]  Evaluate the function symbolically or numerically with
directional derivatives The first two arguments are the nondifferentiated
inputs and results of the evaluation, the next two arguments are a set of
forward directional seeds and the resulting forward directional derivatives,
the length of the vector being the number of forward directions. The next
two arguments are a set of adjoint directional seeds and the resulting
adjoint directional derivatives, the length of the vector being the number
of adjoint directions.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::ImplicitFixedStepIntegrator "

Default constructor.

";


// File: classcasadi_1_1ImplicitFunction.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::ImplicitFunction::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::ImplicitFunction::assignNodeNoCount "[INTERNAL]  Assign the node to a node class pointer without reference
counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::ImplicitFunction::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::ImplicitFunction::hasOption "

check if there is an option str

";

%feature("docstring") casadi::ImplicitFunction::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::ImplicitFunction::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") casadi::ImplicitFunction::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::ImplicitFunction::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::ImplicitFunction::getOption "

get an option value

";

%feature("docstring") casadi::ImplicitFunction::spInit "[INTERNAL]  Reset
the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::ImplicitFunction::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::ImplicitFunction::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::ImplicitFunction::spCanEvaluate "[INTERNAL]
Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::ImplicitFunction::checkInputs "[INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::ImplicitFunction::outputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::ImplicitFunction::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::ImplicitFunction::getCount "[INTERNAL]  Get
the reference count.

";

%feature("docstring") casadi::ImplicitFunction::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::ImplicitFunction::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::ImplicitFunction::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::ImplicitFunction::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::ImplicitFunction::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::ImplicitFunction::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::ImplicitFunction::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::ImplicitFunction::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::ImplicitFunction::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::ImplicitFunction::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::ImplicitFunction::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::ImplicitFunction::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::ImplicitFunction::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::ImplicitFunction::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::ImplicitFunction::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::ImplicitFunction::schemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::ImplicitFunction "

Abstract base class for the implicit function classes.

The equation:

F(z, x1, x2, ..., xn) == 0

where d_F/dz is invertible, implicitly defines the equation:

z := G(x1, x2, ..., xn)

F should be an Function mapping from (n+1) inputs to m outputs. The first
output is the residual that should be zero.

ImplicitFunction (G) is an Function mapping from n inputs to m outputs. n
may be zero. The first output is the solved for z.

You can provide an initial guess for z by setting output(0) of
ImplicitFunction.

Joel Andersson

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| constraints  | OT_INTEGERVE | GenericType( | Constrain    | casadi::Impl |
|              | CTOR         | )            | the          | icitFunction |
|              |              |              | unknowns. 0  | Internal     |
|              |              |              | (default):   |              |
|              |              |              | no           |              |
|              |              |              | constraint   |              |
|              |              |              | on ui, 1: ui |              |
|              |              |              | >= 0.0, -1:  |              |
|              |              |              | ui <= 0.0,   |              |
|              |              |              | 2: ui > 0.0, |              |
|              |              |              | -2: ui <     |              |
|              |              |              | 0.0.         |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| implicit_inp | OT_INTEGER   | 0            | Index of the | casadi::Impl |
| ut           |              |              | input that   | icitFunction |
|              |              |              | corresponds  | Internal     |
|              |              |              | to the       |              |
|              |              |              | actual root- |              |
|              |              |              | finding      |              |
+--------------+--------------+--------------+--------------+--------------+
| implicit_out | OT_INTEGER   | 0            | Index of the | casadi::Impl |
| put          |              |              | output that  | icitFunction |
|              |              |              | corresponds  | Internal     |
|              |              |              | to the       |              |
|              |              |              | actual root- |              |
|              |              |              | finding      |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_LINEARSOL | GenericType( | User-defined | casadi::Impl |
| r            | VER          | )            | linear       | icitFunction |
|              |              |              | solver       | Internal     |
|              |              |              | class.       |              |
|              |              |              | Needed for s |              |
|              |              |              | ensitivities |              |
|              |              |              | .            |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_DICTIONAR | GenericType( | Options to   | casadi::Impl |
| r_options    | Y            | )            | be passed to | icitFunction |
|              |              |              | the linear   | Internal     |
|              |              |              | solver.      |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: implicit_function.hpp ";

%feature("docstring") casadi::ImplicitFunction::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::ImplicitFunction::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::ImplicitFunction::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::ImplicitFunction::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::ImplicitFunction::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::ImplicitFunction::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") casadi::ImplicitFunction::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::ImplicitFunction::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::ImplicitFunction::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::ImplicitFunction::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") casadi::ImplicitFunction::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::ImplicitFunction::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::ImplicitFunction::inputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::ImplicitFunction::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::ImplicitFunction::clone "[INTERNAL]  Deep
copy.

";

%feature("docstring") casadi::ImplicitFunction::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::ImplicitFunction::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::ImplicitFunction::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::ImplicitFunction::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::ImplicitFunction::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::ImplicitFunction::getLinsol "

Access linear solver.

";

%feature("docstring") casadi::ImplicitFunction::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::ImplicitFunction::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") casadi::ImplicitFunction::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::ImplicitFunction::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::ImplicitFunction::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::ImplicitFunction::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::ImplicitFunction::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") casadi::ImplicitFunction::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::ImplicitFunction::getF "

Access F.

";

%feature("docstring") casadi::ImplicitFunction::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::ImplicitFunction::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::ImplicitFunction::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::ImplicitFunction::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::ImplicitFunction::evaluate "

Evaluate.

";

%feature("docstring") casadi::ImplicitFunction::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::ImplicitFunction::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::ImplicitFunction::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::ImplicitFunction::getJac "

Access Jacobian.

";

%feature("docstring") casadi::ImplicitFunction::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::ImplicitFunction::printPtr "[INTERNAL]  Print
the pointer to the internal class

";

%feature("docstring") casadi::ImplicitFunction::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::ImplicitFunction::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::ImplicitFunction::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::ImplicitFunction::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::ImplicitFunction::isInit "

Is initialized?

";

%feature("docstring") casadi::ImplicitFunction::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::ImplicitFunction::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::ImplicitFunction::inputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::ImplicitFunction::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::ImplicitFunction::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::ImplicitFunction::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::ImplicitFunction::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::ImplicitFunction::isNull "

Is a null pointer?

";

%feature("docstring") casadi::ImplicitFunction::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::ImplicitFunction::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::ImplicitFunction::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::ImplicitFunction::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::ImplicitFunction::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";


// File: classcasadi_1_1IndexList.xml
%feature("docstring") casadi::IndexList::IndexList "

>  casadi::IndexList::IndexList()
------------------------------------------------------------------------
[INTERNAL] 
Constructor.

>  casadi::IndexList::IndexList(int i)

>  casadi::IndexList::IndexList(const std::vector< int > &i)

>  casadi::IndexList::IndexList(const Slice &i)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::IndexList "[INTERNAL]  Class representing a
non-regular (and thus non-slice) index list

C++ includes: slice.hpp ";

%feature("docstring") casadi::IndexList::getAll "[INTERNAL]  Get a vector
of indices.

";


// File: classcasadi_1_1InfSX.xml
%feature("docstring") casadi::InfSX::InfSX "[INTERNAL] ";

%feature("docstring") casadi::InfSX::isSymbolic "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::InfSX::isMinusOne "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::InfSX::getIntValue "[INTERNAL]  Get value of
a constant node.

";

%feature("docstring") casadi::InfSX::getName "[INTERNAL] ";

%feature("docstring") casadi::InfSX::getOp "[INTERNAL]  Get the operation.

";

%feature("docstring") casadi::InfSX::mark "[INTERNAL] ";

%feature("docstring") casadi::InfSX::hasDep "[INTERNAL]  check properties
of a node

";

%feature("docstring") casadi::InfSX::isOne "[INTERNAL]  check properties of
a node

";

%feature("docstring") casadi::InfSX::init "[INTERNAL]  Initialize the node
(currently used only to give a similar interface to MXNode)

";

%feature("docstring") casadi::InfSX::print "[INTERNAL]  print

";

%feature("docstring") casadi::InfSX::isAlmostZero "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::InfSX::isNan "[INTERNAL]  check properties of
a node

";

%feature("docstring") casadi::InfSX::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") casadi::InfSX::isConstant "[INTERNAL]  Properties.

";

%feature("docstring") casadi::InfSX::isInteger "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::InfSX::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") casadi::InfSX::dep "[INTERNAL]  get the reference of
a child

";

%feature("docstring") casadi::InfSX::isSmooth "[INTERNAL]  Check if smooth.

";

%feature("docstring") casadi::InfSX::getValue "[INTERNAL]  Get the value.

";

%feature("docstring") casadi::InfSX::isZero "[INTERNAL]  check properties
of a node

";

%feature("docstring") casadi::InfSX::isMinusInf "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::InfSX::marked "[INTERNAL] ";

%feature("docstring") casadi::InfSX::~InfSX "[INTERNAL] ";

%feature("docstring") casadi::InfSX "[INTERNAL]  Represents an infinity SX.

Joel Andersson

C++ includes: constant_sx.hpp ";

%feature("docstring") casadi::InfSX::isInf "[INTERNAL]  Properties.

";


// File: classcasadi_1_1InnerProd.xml
%feature("docstring") casadi::InnerProd::propagateSparsity "[INTERNAL]
Propagate sparsity.

";

%feature("docstring") casadi::InnerProd::getInverse "[INTERNAL]   Inverse.

";

%feature("docstring") casadi::InnerProd::getFunctionOutput "[INTERNAL]  Get
function output.

";

%feature("docstring") casadi::InnerProd::getBinary "[INTERNAL]  Get a
binary operation operation (matrix-matrix)

";

%feature("docstring") casadi::InnerProd::InnerProd "[INTERNAL]
Constructor.

";

%feature("docstring") casadi::InnerProd::sameOpAndDeps "[INTERNAL]  Checks
if two nodes have the same operation and have equivalent dependencies up to
a given depth.

";

%feature("docstring") casadi::InnerProd::size2 "[INTERNAL] ";

%feature("docstring") casadi::InnerProd::getOutput "[INTERNAL]  Get an
output.

";

%feature("docstring") casadi::InnerProd::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") casadi::InnerProd::hasDep "[INTERNAL]  Does the node
depend on other nodes.

";

%feature("docstring") casadi::InnerProd::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") casadi::InnerProd::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") casadi::InnerProd::shape "[INTERNAL] ";

%feature("docstring") casadi::InnerProd::isOutputNode "[INTERNAL]  Check if
evaluation output.

";

%feature("docstring") casadi::InnerProd::sparsity "

>  const Sparsity& casadi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & casadi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") casadi::InnerProd::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") casadi::InnerProd::evaluateGen "[INTERNAL]  Evaluate
the function (template)

";

%feature("docstring") casadi::InnerProd::getSetNonzeros "[INTERNAL]  Assign
the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::InnerProd::getMultiplication "[INTERNAL]
Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") casadi::InnerProd::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") casadi::InnerProd::printPart "[INTERNAL]  Print a
part of the expression */.

";

%feature("docstring") casadi::InnerProd::isUnaryOp "[INTERNAL]  Check if
unary operation.

";

%feature("docstring") casadi::InnerProd::mapping "[INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") casadi::InnerProd::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") casadi::InnerProd::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") casadi::InnerProd::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") casadi::InnerProd::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::InnerProd::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") casadi::InnerProd::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") casadi::InnerProd::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") casadi::InnerProd::deepCopyMembers "[INTERNAL]  Deep
copy data members.

";

%feature("docstring") casadi::InnerProd::getUnary "[INTERNAL]  Get a unary
operation.

";

%feature("docstring") casadi::InnerProd::getHorzsplit "[INTERNAL]  Create a
horizontal split node.

";

%feature("docstring") casadi::InnerProd::numel "[INTERNAL]  Get shape.

";

%feature("docstring") casadi::InnerProd::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") casadi::InnerProd::clone "[INTERNAL]  Clone function.

";

%feature("docstring") casadi::InnerProd::getNormF "[INTERNAL]  Frobenius
norm.

";

%feature("docstring") casadi::InnerProd::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") casadi::InnerProd::getAddNonzeros "[INTERNAL]  Add
the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::InnerProd::getMatrixValue "[INTERNAL]  Get
the value (only for constant nodes)

";

%feature("docstring") casadi::InnerProd::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") casadi::InnerProd::getFunctionInput "[INTERNAL]  Get
function input.

";

%feature("docstring") casadi::InnerProd::evaluateD "[INTERNAL]  Evaluate
the function numerically.

";

%feature("docstring") casadi::InnerProd "[INTERNAL]   Matrix inner_prod.

Joel Andersson

C++ includes: inner_prod.hpp ";

%feature("docstring") casadi::InnerProd::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") casadi::InnerProd::getName "[INTERNAL]  Get the name.

";

%feature("docstring") casadi::InnerProd::isMultipleOutput "[INTERNAL]
Check if a multiple output node.

";

%feature("docstring") casadi::InnerProd::assertInit "[INTERNAL]  Assert
that the object has been initialized.

";

%feature("docstring") casadi::InnerProd::getNumOutputs "[INTERNAL]  Number
of outputs.

";

%feature("docstring") casadi::InnerProd::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") casadi::InnerProd::setDependencies "

>  void casadi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void casadi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") casadi::InnerProd::getSolve "[INTERNAL]   Solve a
system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") casadi::InnerProd::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") casadi::InnerProd::size1 "[INTERNAL] ";

%feature("docstring") casadi::InnerProd::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") casadi::InnerProd::simplifyMe "[INTERNAL]  Simplify
the expression (ex is a reference to the node)

";

%feature("docstring") casadi::InnerProd::print "

>  void casadi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void casadi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") casadi::InnerProd::evaluateMX "

>  void casadi::InnerProd::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void casadi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") casadi::InnerProd::~InnerProd "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::InnerProd::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::InnerProd::getSubRef "[INTERNAL]  Get
submatrix reference.

";

%feature("docstring") casadi::InnerProd::getValue "[INTERNAL]  Get the
value (only for scalar constant nodes)

";

%feature("docstring") casadi::InnerProd::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") casadi::InnerProd::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring") casadi::InnerProd::getFunction "[INTERNAL]  Get
function reference.

";

%feature("docstring") casadi::InnerProd::isNonLinear "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring") casadi::InnerProd::dep "

>  const MX & casadi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & casadi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::InnerProd::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") casadi::InnerProd::assign "

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") casadi::InnerProd::getGetNonzeros "[INTERNAL]  Get
the nonzeros of matrix.

";

%feature("docstring") casadi::InnerProd::size "[INTERNAL] ";

%feature("docstring") casadi::InnerProd::getReshape "[INTERNAL]   Reshape.

";

%feature("docstring") casadi::InnerProd::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::InnerProd::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") casadi::InnerProd::getBinarySwitch "[INTERNAL]  Get a
binary operation operation.

";

%feature("docstring") casadi::InnerProd::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") casadi::InnerProd::evaluateSX "[INTERNAL]  Evaluate
the function symbolically (SX)

";

%feature("docstring") casadi::InnerProd::getNormInf "[INTERNAL]  Infinity
norm.

";

%feature("docstring") casadi::InnerProd::getSetSparse "[INTERNAL]  Create
set sparse.

";

%feature("docstring") casadi::InnerProd::getVertsplit "[INTERNAL]  Create a
vertical split node (vectors only)

";

%feature("docstring") casadi::InnerProd::getNorm2 "[INTERNAL]  Spectral
norm.

";

%feature("docstring") casadi::InnerProd::isBinaryOp "[INTERNAL]  Check if
binary operation.

";


// File: classcasadi_1_1IntegerSX.xml
%feature("docstring") casadi::IntegerSX::init "[INTERNAL]  Initialize the
node (currently used only to give a similar interface to MXNode)

";

%feature("docstring") casadi::IntegerSX::print "[INTERNAL]  print

";

%feature("docstring") casadi::IntegerSX::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") casadi::IntegerSX::isSmooth "[INTERNAL]  Check if
smooth.

";

%feature("docstring") casadi::IntegerSX::isInteger "[INTERNAL]  Properties.

";

%feature("docstring") casadi::IntegerSX::getValue "[INTERNAL]  evaluate
function

";

%feature("docstring") casadi::IntegerSX "[INTERNAL]  Represents a constant
integer SX.

Joel Andersson

C++ includes: constant_sx.hpp ";

%feature("docstring") casadi::IntegerSX::~IntegerSX "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::IntegerSX::isMinusInf "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::IntegerSX::mark "[INTERNAL] ";

%feature("docstring") casadi::IntegerSX::isMinusOne "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::IntegerSX::isConstant "[INTERNAL]
Properties.

";

%feature("docstring") casadi::IntegerSX::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") casadi::IntegerSX::isNan "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::IntegerSX::isSymbolic "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::IntegerSX::isZero "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::IntegerSX::isInf "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::IntegerSX::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") casadi::IntegerSX::getIntValue "[INTERNAL]  evaluate
function

";

%feature("docstring") casadi::IntegerSX::getName "[INTERNAL] ";

%feature("docstring") casadi::IntegerSX::isOne "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::IntegerSX::dep "[INTERNAL]  get the reference
of a child

";

%feature("docstring") casadi::IntegerSX::hasDep "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::IntegerSX::marked "[INTERNAL] ";

%feature("docstring") casadi::IntegerSX::isAlmostZero "[INTERNAL]  check
properties of a node

";


// File: classcasadi_1_1Integrator.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::Integrator::spCanEvaluate " [INTERNAL]  Is the class able to
propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::Integrator::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::Integrator::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::Integrator::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::Integrator::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::Integrator::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::Integrator::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::Integrator::hasOption "

check if there is an option str

";

%feature("docstring") casadi::Integrator::clone "

Clone.

";

%feature("docstring") casadi::Integrator::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::Integrator::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::Integrator::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::Integrator::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::Integrator::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::Integrator::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::Integrator::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::Integrator::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::Integrator::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::Integrator::resetB "

Reset the backward problem.

Time will be set to tf and backward state to input(INTEGRATOR_RX0)

";

%feature("docstring") casadi::Integrator::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::Integrator::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::Integrator::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::Integrator::getDAE "

Get the DAE.

";

%feature("docstring") casadi::Integrator::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::Integrator::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::Integrator::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::Integrator::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::Integrator::getOption "

get an option value

";

%feature("docstring") casadi::Integrator::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::Integrator::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::Integrator::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::Integrator::Integrator "

Default constructor.

";

%feature("docstring") casadi::Integrator::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::Integrator::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::Integrator::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::Integrator::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::Integrator::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::Integrator::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::Integrator::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::Integrator "

Base class for integrators.

Integrator abstract base class

Solves an initial value problem (IVP) coupled to a terminal value problem
with differential equation given as an implicit ODE coupled to an algebraic
equation and a set of quadratures: Initial conditions at t=t0  x(t0)  = x0
q(t0)  = 0   Forward integration from t=t0 to t=tf  der(x) = function(x, z,
p, t) Forward ODE  0 = fz(x, z, p, t)                  Forward algebraic
equations  der(q) = fq(x, z, p, t)                  Forward quadratures
Terminal conditions at t=tf  rx(tf)  = rx0  rq(tf)  = 0 Backward integration
from t=tf to t=t0  der(rx) = gx(rx, rz, rp, x, z, p, t)        Backward ODE
0 = gz(rx, rz, rp, x, z, p, t) Backward algebraic equations  der(rq) =
gq(rx, rz, rp, x, z, p, t) Backward quadratures   where we assume that both
the forward and backwards integrations are index-1  (i.e. dfz/dz, dgz/drz
are invertible) and furthermore that  gx, gz and gq have a linear dependency
on rx, rz and rp.

The Integrator class provides some additional functionality, such as getting
the value of the state and/or sensitivities at certain time points.

The class does not specify the method used for the integration. This is
defined in derived classes.

Joel Andersson

>Input scheme: casadi::IntegratorInput (INTEGRATOR_NUM_IN = 7) [integratorIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_X0          | x0                     | Differential state at  |
|                        |                        | the initial time .     |
+------------------------+------------------------+------------------------+
| INTEGRATOR_P           | p                      | Parameters .           |
+------------------------+------------------------+------------------------+
| INTEGRATOR_Z0          | z0                     | Initial guess for the  |
|                        |                        | algebraic variable .   |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RX0         | rx0                    | Backward differential  |
|                        |                        | state at the final     |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RP          | rp                     | Backward parameter     |
|                        |                        | vector .               |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZ0         | rz0                    | Initial guess for the  |
|                        |                        | backwards algebraic    |
|                        |                        | variable .             |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::IntegratorOutput (INTEGRATOR_NUM_OUT = 7) [integratorOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_XF          | xf                     | Differential state at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_QF          | qf                     | Quadrature state at    |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_ZF          | zf                     | Algebraic variable at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RXF         | rxf                    | Backward differential  |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RQF         | rqf                    | Backward quadrature    |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZF         | rzf                    | Backward algebraic     |
|                        |                        | variable at the        |
|                        |                        | initial time .         |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| augmented_op | OT_DICTIONAR | GenericType( | Options to   | casadi::Inte |
| tions        | Y            | )            | be passed    | gratorIntern |
|              |              |              | down to the  | al           |
|              |              |              | augmented    |              |
|              |              |              | integrator,  |              |
|              |              |              | if one is    |              |
|              |              |              | constructed. |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_augme | OT_BOOLEAN   | true         | If DAE       | casadi::Inte |
| nted         |              |              | callback     | gratorIntern |
|              |              |              | functions    | al           |
|              |              |              | are          |              |
|              |              |              | SXFunction , |              |
|              |              |              | have         |              |
|              |              |              | augmented    |              |
|              |              |              | DAE callback |              |
|              |              |              | function     |              |
|              |              |              | also be      |              |
|              |              |              | SXFunction . |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| print_stats  | OT_BOOLEAN   | false        | Print out    | casadi::Inte |
|              |              |              | statistics   | gratorIntern |
|              |              |              | after        | al           |
|              |              |              | integration  |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| t0           | OT_REAL      | 0            | Beginning of | casadi::Inte |
|              |              |              | the time     | gratorIntern |
|              |              |              | horizon      | al           |
+--------------+--------------+--------------+--------------+--------------+
| tf           | OT_REAL      | 1            | End of the   | casadi::Inte |
|              |              |              | time horizon | gratorIntern |
|              |              |              |              | al           |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: integrator.hpp ";

%feature("docstring") casadi::Integrator::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::Integrator::isInit "

Is initialized?

";

%feature("docstring") casadi::Integrator::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::Integrator::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::Integrator::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::Integrator::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::Integrator::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") casadi::Integrator::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::Integrator::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::Integrator::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::Integrator::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::Integrator::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::Integrator::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") casadi::Integrator::evaluate "

Evaluate.

";

%feature("docstring") casadi::Integrator::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") casadi::Integrator::isNull "

Is a null pointer?

";

%feature("docstring") casadi::Integrator::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::Integrator::getAugmented "

Generate a augmented DAE system with nfwd forward sensitivities and nadj
adjoint sensitivities.

";

%feature("docstring") casadi::Integrator::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::Integrator::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::Integrator::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::Integrator::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::Integrator::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::Integrator::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::Integrator::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::Integrator::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::Integrator::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::Integrator::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::Integrator::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::Integrator::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::Integrator::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::Integrator::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::Integrator::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::Integrator::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::Integrator::integrateB "

Integrate backward until a specified time point.

";

%feature("docstring") casadi::Integrator::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::Integrator::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::Integrator::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::Integrator::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::Integrator::integrate "

Integrate forward until a specified time point.

";

%feature("docstring") casadi::Integrator::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::Integrator::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::Integrator::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::Integrator::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::Integrator::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::Integrator::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::Integrator::reset "

Reset the forward problem Time will be set to t0 and state to
input(INTEGRATOR_X0)

";

%feature("docstring") casadi::Integrator::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::Integrator::printStats "

Print solver statistics.

";

%feature("docstring") casadi::Integrator::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::Integrator::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::Integrator::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::Integrator::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::Integrator::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::Integrator::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::Integrator::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::Integrator::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::Integrator::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";


// File: classcasadi_1_1IntegratorInputIOSchemeVector.xml
%feature("docstring") casadi::IntegratorInputIOSchemeVector "[INTERNAL]
Helper function for 'IntegratorInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::IntegratorInputIOSchemeVector::repr "[INTERNAL]  Print a representation of the object.

";

%feature("docstring")
casadi::IntegratorInputIOSchemeVector::getRepresentation "[INTERNAL]
Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::IntegratorInputIOSchemeVector::vector "[INTERNAL] ";

%feature("docstring") casadi::IntegratorInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::IntegratorInputIOSchemeVector::print "[INTERNAL]  Print a description of the object.

";

%feature("docstring") casadi::IntegratorInputIOSchemeVector::getDescription
"[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring")
casadi::IntegratorInputIOSchemeVector::IntegratorInputIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::IntegratorInputIOSchemeVector::__len__ "[INTERNAL] ";


// File: classcasadi_1_1IntegratorOutputIOSchemeVector.xml
%feature("docstring") casadi::IntegratorOutputIOSchemeVector "[INTERNAL]
Helper function for 'IntegratorOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring")
casadi::IntegratorOutputIOSchemeVector::getRepresentation "[INTERNAL]
Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::IntegratorOutputIOSchemeVector::repr "[INTERNAL]  Print a representation of the object.

";

%feature("docstring") casadi::IntegratorOutputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring")
casadi::IntegratorOutputIOSchemeVector::IntegratorOutputIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::IntegratorOutputIOSchemeVector::getDescription
"[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::IntegratorOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::IntegratorOutputIOSchemeVector::vector "[INTERNAL] ";

%feature("docstring") casadi::IntegratorOutputIOSchemeVector::print "[INTERNAL]  Print a description of the object.

";


// File: classcasadi_1_1Inverse.xml
%feature("docstring") casadi::Inverse::getFunctionInput "[INTERNAL]  Get
function input.

";

%feature("docstring") casadi::Inverse::propagateSparsity "

>  virtual void casadi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity.

>  void casadi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity, no work.

";

%feature("docstring") casadi::Inverse::assertInit "[INTERNAL]  Assert that
the object has been initialized.

";

%feature("docstring") casadi::Inverse::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") casadi::Inverse::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") casadi::Inverse::evaluateMX "

>  void casadi::Inverse::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void casadi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") casadi::Inverse "[INTERNAL]   Matrix inverse.

Joel Andersson

C++ includes: inverse.hpp ";

%feature("docstring") casadi::Inverse::Inverse "[INTERNAL]  Constructor.

";

%feature("docstring") casadi::Inverse::getHorzsplit "[INTERNAL]  Create a
horizontal split node.

";

%feature("docstring") casadi::Inverse::evaluateD "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") casadi::Inverse::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::Inverse::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") casadi::Inverse::getBinary "[INTERNAL]  Get a binary
operation operation (matrix-matrix)

";

%feature("docstring") casadi::Inverse::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") casadi::Inverse::hasDep "[INTERNAL]  Does the node
depend on other nodes.

";

%feature("docstring") casadi::Inverse::size "[INTERNAL] ";

%feature("docstring") casadi::Inverse::getSetNonzeros "[INTERNAL]  Assign
the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::Inverse::sameOpAndDeps "[INTERNAL]  Checks if
two nodes have the same operation and have equivalent dependencies up to a
given depth.

";

%feature("docstring") casadi::Inverse::dep "

>  const MX & casadi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & casadi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::Inverse::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") casadi::Inverse::getReshape "[INTERNAL]   Reshape.

";

%feature("docstring") casadi::Inverse::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") casadi::Inverse::~Inverse "[INTERNAL]  Destructor.

";

%feature("docstring") casadi::Inverse::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") casadi::Inverse::getAddNonzeros "[INTERNAL]  Add the
nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::Inverse::getNormF "[INTERNAL]  Frobenius
norm.

";

%feature("docstring") casadi::Inverse::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::Inverse::getMultiplication "[INTERNAL]
Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") casadi::Inverse::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") casadi::Inverse::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") casadi::Inverse::getOutput "[INTERNAL]  Get an
output.

";

%feature("docstring") casadi::Inverse::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") casadi::Inverse::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") casadi::Inverse::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") casadi::Inverse::numel "[INTERNAL]  Get shape.

";

%feature("docstring") casadi::Inverse::getNumOutputs "[INTERNAL]  Number of
outputs.

";

%feature("docstring") casadi::Inverse::size1 "[INTERNAL] ";

%feature("docstring") casadi::Inverse::getGetNonzeros "[INTERNAL]  Get the
nonzeros of matrix.

";

%feature("docstring") casadi::Inverse::getSolve "[INTERNAL]   Solve a
system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") casadi::Inverse::getVertsplit "[INTERNAL]  Create a
vertical split node (vectors only)

";

%feature("docstring") casadi::Inverse::getSetSparse "[INTERNAL]  Create set
sparse.

";

%feature("docstring") casadi::Inverse::getValue "[INTERNAL]  Get the value
(only for scalar constant nodes)

";

%feature("docstring") casadi::Inverse::getName "[INTERNAL]  Get the name.

";

%feature("docstring") casadi::Inverse::getNormInf "[INTERNAL]  Infinity
norm.

";

%feature("docstring") casadi::Inverse::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") casadi::Inverse::assign "

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") casadi::Inverse::getBinarySwitch "[INTERNAL]  Get a
binary operation operation.

";

%feature("docstring") casadi::Inverse::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") casadi::Inverse::setDependencies "

>  void casadi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void casadi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") casadi::Inverse::isNonLinear "[INTERNAL]  Is the node
nonlinear.

";

%feature("docstring") casadi::Inverse::getFunctionOutput "[INTERNAL]  Get
function output.

";

%feature("docstring") casadi::Inverse::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring") casadi::Inverse::evaluateSX "[INTERNAL]  Evaluate
symbolically (SX)

";

%feature("docstring") casadi::Inverse::getFunction "[INTERNAL]  Get
function reference.

";

%feature("docstring") casadi::Inverse::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") casadi::Inverse::getUnary "[INTERNAL]  Get a unary
operation.

";

%feature("docstring") casadi::Inverse::print "

>  void casadi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void casadi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") casadi::Inverse::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") casadi::Inverse::getNorm2 "[INTERNAL]  Spectral norm.

";

%feature("docstring") casadi::Inverse::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") casadi::Inverse::printPart "[INTERNAL]  Print a part
of the expression */.

";

%feature("docstring") casadi::Inverse::sparsity "

>  const Sparsity& casadi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & casadi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") casadi::Inverse::shape "[INTERNAL] ";

%feature("docstring") casadi::Inverse::size2 "[INTERNAL] ";

%feature("docstring") casadi::Inverse::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::Inverse::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") casadi::Inverse::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") casadi::Inverse::isMultipleOutput "[INTERNAL]  Check
if a multiple output node.

";

%feature("docstring") casadi::Inverse::deepCopyMembers "[INTERNAL]  Deep
copy data members.

";

%feature("docstring") casadi::Inverse::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") casadi::Inverse::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") casadi::Inverse::isUnaryOp "[INTERNAL]  Check if
unary operation.

";

%feature("docstring") casadi::Inverse::getInverse "[INTERNAL]   Inverse.

";

%feature("docstring") casadi::Inverse::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") casadi::Inverse::getSubRef "[INTERNAL]  Get submatrix
reference.

";

%feature("docstring") casadi::Inverse::isOutputNode "[INTERNAL]  Check if
evaluation output.

";

%feature("docstring") casadi::Inverse::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") casadi::Inverse::mapping "[INTERNAL]  Get an IMatrix
representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") casadi::Inverse::clone "[INTERNAL]  Clone function.

";

%feature("docstring") casadi::Inverse::getMatrixValue "[INTERNAL]  Get the
value (only for constant nodes)

";

%feature("docstring") casadi::Inverse::simplifyMe "[INTERNAL]  Simplify the
expression (ex is a reference to the node)

";


// File: classcasadi_1_1IOInterface.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */ %feature("docstring") casadi::IOInterface::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::IOInterface::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::IOInterface::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::IOInterface::getInput "

>  Matrix<double> casadi::IOInterface< Derived >::getInput(int iind=0) const 
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Derived >::getInput(const std::string &iname) const 
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Derived >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Derived >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::IOInterface::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::IOInterface::inputS "

>  DMatrix& casadi::IOInterface< Derived >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Derived >::inputS(int i) const 
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::IOInterface::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::IOInterface::setOutput "

>  void casadi::IOInterface< Derived >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Derived >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::IOInterface::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::IOInterface::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::IOInterface::schemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::IOInterface::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::IOInterface "

Interface for accessing input and output data structures.

Joel Andersson

C++ includes: io_interface.hpp ";

%feature("docstring") casadi::IOInterface::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::IOInterface::setInput "

>  void casadi::IOInterface< Derived >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Derived >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::IOInterface::outputS "

>  DMatrix& casadi::IOInterface< Derived >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Derived >::outputS(int i) const 
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::IOInterface::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::IOInterface::getOutput "

>  Matrix<double> casadi::IOInterface< Derived >::getOutput(int oind=0) const 
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Derived >::getOutput(const std::string &oname) const 
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Derived >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Derived >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::IOInterface::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::IOInterface::getOutputScheme "

Get output scheme.

";


// File: classcasadi_1_1IOScheme.xml
%feature("docstring") casadi::IOScheme::describeOutput "

Describe the index as an output.

";

%feature("docstring") casadi::IOScheme::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::IOScheme::describe "

Describe the index.

";

%feature("docstring") casadi::IOScheme::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::IOScheme::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::IOScheme::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::IOScheme::entry "

Get the entry name by index.

";

%feature("docstring") casadi::IOScheme::index "

Get index by entry name.

";

%feature("docstring") casadi::IOScheme::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::IOScheme "

Class with mapping between names and indices.

Joris Gillis

C++ includes: io_scheme.hpp ";

%feature("docstring") casadi::IOScheme::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::IOScheme::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::IOScheme::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::IOScheme::assertInit "[INTERNAL]  Assert that
it is initialized

";

%feature("docstring") casadi::IOScheme::compatibleSize "

Check whether this scheme is compatible with the given size.

";

%feature("docstring") casadi::IOScheme::assignNode "[INTERNAL]  Assign the
node to a node class pointer (or null)

";

%feature("docstring") casadi::IOScheme::entryEnum "

Get the entry enum name by index.

";

%feature("docstring") casadi::IOScheme::isInit "

Is initialized?

";

%feature("docstring") casadi::IOScheme::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::IOScheme::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::IOScheme::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::IOScheme::isNull "

Is a null pointer?

";

%feature("docstring") casadi::IOScheme::IOScheme "

>  casadi::IOScheme::IOScheme()
------------------------------------------------------------------------

Default constructor.

>  casadi::IOScheme::IOScheme(InputOutputScheme scheme)
------------------------------------------------------------------------

Constructor with enum.

>  casadi::IOScheme::IOScheme(const std::vector< std::string > &entries, const std::vector< std::string > &descriptions=std::vector< std::string >())
------------------------------------------------------------------------

Constructor with entry names.

";

%feature("docstring") casadi::IOScheme::name "

Name of the scheme.

";

%feature("docstring") casadi::IOScheme::describeInput "

Describe the index as an input.

";

%feature("docstring") casadi::IOScheme::size "

Number of entries.

";

%feature("docstring") casadi::IOScheme::entryNames "

List available entries.

";

%feature("docstring") casadi::IOScheme::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::IOScheme::swap "[INTERNAL]  Swap content with
another instance.

";

%feature("docstring") casadi::IOScheme::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::IOScheme::known "

Check whether the scheme is known.

";

%feature("docstring") casadi::IOScheme::entryLabel "

Get the entry label by index If scheme is unknown, returns the index as a
string.

";


// File: classcasadi_1_1IOSchemeVector.xml
%feature("docstring") casadi::IOSchemeVector::__len__ "";

%feature("docstring") casadi::IOSchemeVector::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::IOSchemeVector::IOSchemeVector "";

%feature("docstring") casadi::IOSchemeVector::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::IOSchemeVector::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::IOSchemeVector "

A vector container with associated IOScheme A class.

C++ includes: io_scheme_vector.hpp ";

%feature("docstring") casadi::IOSchemeVector::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::IOSchemeVector::__getitem__ "";

%feature("docstring") casadi::IOSchemeVector::vector "";


// File: classcasadi_1_1IpoptSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::IpoptSolver::outputScheme " [INTERNAL]  Access input/output scheme.

";

%feature("docstring") casadi::IpoptSolver::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::IpoptSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::IpoptSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::IpoptSolver::checkInputs "[INTERNAL]  Check
if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::IpoptSolver::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::IpoptSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::IpoptSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::IpoptSolver::nlp "

Access the NLP.

>Input scheme: casadi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::IpoptSolver::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::IpoptSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::IpoptSolver::hessLag "

Access the Hessian of the Lagrangian function.

>Input scheme: casadi::JacGInput (JACG_NUM_IN = 3) [jacGIn]
+-----------+-------+---------------------+
| Full name | Short |     Description     |
+===========+=======+=====================+
| JACG_X    | x     | Decision variable . |
+-----------+-------+---------------------+
| JACG_P    | p     | Fixed parameter .   |
+-----------+-------+---------------------+

>Output scheme: casadi::JacGOutput (JACG_NUM_OUT = 4) [jacGOut]
+-----------+-------+-------------------------------+
| Full name | Short |          Description          |
+===========+=======+===============================+
| JACG_JAC  | jac   | Jacobian of the constraints . |
+-----------+-------+-------------------------------+
| JACG_F    | f     | Objective function .          |
+-----------+-------+-------------------------------+
| JACG_G    | g     | Constraint function .         |
+-----------+-------+-------------------------------+

";

%feature("docstring") casadi::IpoptSolver::reportConstraints "

Prints out a human readable report about possible constraint violations,
after solving.

";

%feature("docstring") casadi::IpoptSolver::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::IpoptSolver::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::IpoptSolver "

interface to IPOPT NLP solver

Solves the following parametric nonlinear program (NLP):min          F(x, p)
x  subject to             LBX <=   x    <= UBX LBG <= G(x, p) <= UBG
p  == P      nx: number of decision variables     ng: number of constraints
np: number of parameters

When in warmstart mode, output NLP_SOLVER_LAM_X may be used as input

NOTE: Even when max_iter == 0, it is not guaranteed that
input(NLP_SOLVER_X0) == output(NLP_SOLVER_X). Indeed if bounds on X or
constraints are unmet, they will differ.

For a good tutorial on IPOPT,
seehttp://drops.dagstuhl.de/volltexte/2009/2089/pdf/09061.WaechterAndreas.Paper.2089.pdf

A good resource about the algorithms in IPOPT is: Wachter and L. T. Biegler,
On the Implementation of an Interior-Point Filter Line-Search Algorithm for
Large-Scale Nonlinear Programming, Mathematical Programming 106(1), pp.
25-57, 2006 (As Research Report RC 23149, IBM T. J. Watson Research Center,
Yorktown, USA

Caveats: with default options, multipliers for the decision variables are
wrong for equality constraints. Change the 'fixed_variable_treatment' to
'make_constraint' or 'relax_bounds' to obtain correct results.

>Input scheme: casadi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| accept_after | OT_INTEGER   | -1           | Accept a     | casadi::Ipop |
| _max_steps   |              |              | trial point  | tInternal    |
|              |              |              | after        |              |
|              |              |              | maximal this |              |
|              |              |              | number of    |              |
|              |              |              | steps. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| accept_every | OT_STRING    | no           | Always       | casadi::Ipop |
| _trial_step  |              |              | accept the   | tInternal    |
|              |              |              | first trial  |              |
|              |              |              | step. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| acceptable_c | OT_REAL      | 0.010        | \"Acceptance\" | casadi::Ipop |
| ompl_inf_tol |              |              | threshold    | tInternal    |
|              |              |              | for the comp |              |
|              |              |              | lementarity  |              |
|              |              |              | conditions.  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| acceptable_c | OT_REAL      | 0.010        | \"Acceptance\" | casadi::Ipop |
| onstr_viol_t |              |              | threshold    | tInternal    |
| ol           |              |              | for the      |              |
|              |              |              | constraint   |              |
|              |              |              | violation.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| acceptable_d | OT_REAL      | 1.000e+10    | \"Acceptance\" | casadi::Ipop |
| ual_inf_tol  |              |              | threshold    | tInternal    |
|              |              |              | for the dual |              |
|              |              |              | infeasibilit |              |
|              |              |              | y. (see      |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| acceptable_i | OT_INTEGER   | 15           | Number of    | casadi::Ipop |
| ter          |              |              | \"acceptable\" | tInternal    |
|              |              |              | iterates     |              |
|              |              |              | before       |              |
|              |              |              | triggering   |              |
|              |              |              | termination. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| acceptable_o | OT_REAL      | 1.000e+20    | \"Acceptance\" | casadi::Ipop |
| bj_change_to |              |              | stopping     | tInternal    |
| l            |              |              | criterion    |              |
|              |              |              | based on     |              |
|              |              |              | objective    |              |
|              |              |              | function     |              |
|              |              |              | change. (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| acceptable_t | OT_REAL      | 0.000        | \"Acceptable\" | casadi::Ipop |
| ol           |              |              | convergence  | tInternal    |
|              |              |              | tolerance    |              |
|              |              |              | (relative).  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| adaptive_mu_ | OT_STRING    | obj-constr-  | Globalizatio | casadi::Ipop |
| globalizatio |              | filter       | n strategy   | tInternal    |
| n            |              |              | for the      |              |
|              |              |              | adaptive mu  |              |
|              |              |              | selection    |              |
|              |              |              | mode. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| adaptive_mu_ | OT_STRING    | 2-norm-      | Norm used    | casadi::Ipop |
| kkt_norm_typ |              | squared      | for the KKT  | tInternal    |
| e            |              |              | error in the |              |
|              |              |              | adaptive mu  |              |
|              |              |              | globalizatio |              |
|              |              |              | n            |              |
|              |              |              | strategies.  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| adaptive_mu_ | OT_REAL      | 1.000        | Sufficient   | casadi::Ipop |
| kkterror_red |              |              | decrease     | tInternal    |
| _fact        |              |              | factor for   |              |
|              |              |              | \"kkt-error\"  |              |
|              |              |              | globalizatio |              |
|              |              |              | n strategy.  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| adaptive_mu_ | OT_INTEGER   | 4            | Maximum      | casadi::Ipop |
| kkterror_red |              |              | number of    | tInternal    |
| _iters       |              |              | iterations   |              |
|              |              |              | requiring    |              |
|              |              |              | sufficient   |              |
|              |              |              | progress.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| adaptive_mu_ | OT_REAL      | 0.800        | Determines   | casadi::Ipop |
| monotone_ini |              |              | the initial  | tInternal    |
| t_factor     |              |              | value of the |              |
|              |              |              | barrier      |              |
|              |              |              | parameter    |              |
|              |              |              | when         |              |
|              |              |              | switching to |              |
|              |              |              | the monotone |              |
|              |              |              | mode. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| adaptive_mu_ | OT_STRING    | no           | Indicates if | casadi::Ipop |
| restore_prev |              |              | the previous | tInternal    |
| ious_iterate |              |              | iterate      |              |
|              |              |              | should be    |              |
|              |              |              | restored if  |              |
|              |              |              | the monotone |              |
|              |              |              | mode is      |              |
|              |              |              | entered.     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| adaptive_mu_ | OT_REAL      | 0            | (see IPOPT d | casadi::Ipop |
| safeguard_fa |              |              | ocumentation | tInternal    |
| ctor         |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| alpha_for_y  | OT_STRING    | primal       | Method to    | casadi::Ipop |
|              |              |              | determine    | tInternal    |
|              |              |              | the step     |              |
|              |              |              | size for     |              |
|              |              |              | constraint   |              |
|              |              |              | multipliers. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| alpha_for_y_ | OT_REAL      | 10           | Tolerance    | casadi::Ipop |
| tol          |              |              | for          | tInternal    |
|              |              |              | switching to |              |
|              |              |              | full         |              |
|              |              |              | equality     |              |
|              |              |              | multiplier   |              |
|              |              |              | steps. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| alpha_min_fr | OT_REAL      | 0.050        | Safety       | casadi::Ipop |
| ac           |              |              | factor for   | tInternal    |
|              |              |              | the minimal  |              |
|              |              |              | step size    |              |
|              |              |              | (before      |              |
|              |              |              | switching to |              |
|              |              |              | restoration  |              |
|              |              |              | phase). (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| alpha_red_fa | OT_REAL      | 0.500        | Fractional   | casadi::Ipop |
| ctor         |              |              | reduction of | tInternal    |
|              |              |              | the trial    |              |
|              |              |              | step size in |              |
|              |              |              | the          |              |
|              |              |              | backtracking |              |
|              |              |              | line search. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| barrier_tol_ | OT_REAL      | 10           | Factor for   | casadi::Ipop |
| factor       |              |              | mu in        | tInternal    |
|              |              |              | barrier stop |              |
|              |              |              | test. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| bound_frac   | OT_REAL      | 0.010        | Desired      | casadi::Ipop |
|              |              |              | minimum      | tInternal    |
|              |              |              | relative     |              |
|              |              |              | distance     |              |
|              |              |              | from the     |              |
|              |              |              | initial      |              |
|              |              |              | point to     |              |
|              |              |              | bound. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| bound_mult_i | OT_STRING    | constant     | Initializati | casadi::Ipop |
| nit_method   |              |              | on method    | tInternal    |
|              |              |              | for bound    |              |
|              |              |              | multipliers  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| bound_mult_i | OT_REAL      | 1            | Initial      | casadi::Ipop |
| nit_val      |              |              | value for    | tInternal    |
|              |              |              | the bound    |              |
|              |              |              | multipliers. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| bound_mult_r | OT_REAL      | 1000         | Threshold    | casadi::Ipop |
| eset_thresho |              |              | for          | tInternal    |
| ld           |              |              | resetting    |              |
|              |              |              | bound        |              |
|              |              |              | multipliers  |              |
|              |              |              | after the    |              |
|              |              |              | restoration  |              |
|              |              |              | phase. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| bound_push   | OT_REAL      | 0.010        | Desired      | casadi::Ipop |
|              |              |              | minimum      | tInternal    |
|              |              |              | absolute     |              |
|              |              |              | distance     |              |
|              |              |              | from the     |              |
|              |              |              | initial      |              |
|              |              |              | point to     |              |
|              |              |              | bound. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| bound_relax_ | OT_REAL      | 0.000        | Factor for   | casadi::Ipop |
| factor       |              |              | initial      | tInternal    |
|              |              |              | relaxation   |              |
|              |              |              | of the       |              |
|              |              |              | bounds. (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| check_deriva | OT_STRING    | no           | Indicates    | casadi::Ipop |
| tives_for_na |              |              | whether it   | tInternal    |
| ninf         |              |              | is desired   |              |
|              |              |              | to check for |              |
|              |              |              | Nan/Inf in   |              |
|              |              |              | derivative   |              |
|              |              |              | matrices     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| chi_cup      | OT_REAL      | 1.500        | LIFENG       | casadi::Ipop |
|              |              |              | WRITES THIS. | tInternal    |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| chi_hat      | OT_REAL      | 2            | LIFENG       | casadi::Ipop |
|              |              |              | WRITES THIS. | tInternal    |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| chi_tilde    | OT_REAL      | 5            | LIFENG       | casadi::Ipop |
|              |              |              | WRITES THIS. | tInternal    |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| compl_inf_to | OT_REAL      | 0.000        | Desired      | casadi::Ipop |
| l            |              |              | threshold    | tInternal    |
|              |              |              | for the comp |              |
|              |              |              | lementarity  |              |
|              |              |              | conditions.  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| con_integer_ | OT_DICTIONAR | None         | Integer      | casadi::Ipop |
| md           | Y            |              | metadata (a  | tInternal    |
|              |              |              | dictionary   |              |
|              |              |              | with lists   |              |
|              |              |              | of integers) |              |
|              |              |              | about        |              |
|              |              |              | constraints  |              |
|              |              |              | to be passed |              |
|              |              |              | to IPOPT     |              |
+--------------+--------------+--------------+--------------+--------------+
| con_numeric_ | OT_DICTIONAR | None         | Numeric      | casadi::Ipop |
| md           | Y            |              | metadata (a  | tInternal    |
|              |              |              | dictionary   |              |
|              |              |              | with lists   |              |
|              |              |              | of reals)    |              |
|              |              |              | about        |              |
|              |              |              | constraints  |              |
|              |              |              | to be passed |              |
|              |              |              | to IPOPT     |              |
+--------------+--------------+--------------+--------------+--------------+
| con_string_m | OT_DICTIONAR | None         | String       | casadi::Ipop |
| d            | Y            |              | metadata (a  | tInternal    |
|              |              |              | dictionary   |              |
|              |              |              | with lists   |              |
|              |              |              | of strings)  |              |
|              |              |              | about        |              |
|              |              |              | constraints  |              |
|              |              |              | to be passed |              |
|              |              |              | to IPOPT     |              |
+--------------+--------------+--------------+--------------+--------------+
| constr_mult_ | OT_REAL      | 1000         | Maximum      | casadi::Ipop |
| init_max     |              |              | allowed      | tInternal    |
|              |              |              | least-square |              |
|              |              |              | guess of     |              |
|              |              |              | constraint   |              |
|              |              |              | multipliers. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| constr_mult_ | OT_REAL      | 0            | Threshold    | casadi::Ipop |
| reset_thresh |              |              | for          | tInternal    |
| old          |              |              | resetting    |              |
|              |              |              | equality and |              |
|              |              |              | inequality   |              |
|              |              |              | multipliers  |              |
|              |              |              | after        |              |
|              |              |              | restoration  |              |
|              |              |              | phase. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| constr_viol_ | OT_REAL      | 0.000        | Desired      | casadi::Ipop |
| tol          |              |              | threshold    | tInternal    |
|              |              |              | for the      |              |
|              |              |              | constraint   |              |
|              |              |              | violation.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| constraint_v | OT_STRING    | 1-norm       | Norm to be   | casadi::Ipop |
| iolation_nor |              |              | used for the | tInternal    |
| m_type       |              |              | constraint   |              |
|              |              |              | violation in |              |
|              |              |              | the line     |              |
|              |              |              | search. (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| corrector_co | OT_REAL      | 1            | Complementar | casadi::Ipop |
| mpl_avrg_red |              |              | ity          | tInternal    |
| _fact        |              |              | tolerance    |              |
|              |              |              | factor for   |              |
|              |              |              | accepting    |              |
|              |              |              | corrector    |              |
|              |              |              | step (unsupp |              |
|              |              |              | orted!).     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| corrector_ty | OT_STRING    | none         | The type of  | casadi::Ipop |
| pe           |              |              | corrector    | tInternal    |
|              |              |              | steps that   |              |
|              |              |              | should be    |              |
|              |              |              | taken (unsup |              |
|              |              |              | ported!).    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| delta        | OT_REAL      | 1            | Multiplier   | casadi::Ipop |
|              |              |              | for          | tInternal    |
|              |              |              | constraint   |              |
|              |              |              | violation in |              |
|              |              |              | the          |              |
|              |              |              | switching    |              |
|              |              |              | rule. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| delta_y_max  | OT_REAL      | 1.000e+12    | a parameter  | casadi::Ipop |
|              |              |              | used to      | tInternal    |
|              |              |              | check if the |              |
|              |              |              | fast         |              |
|              |              |              | direction    |              |
|              |              |              | can be used  |              |
|              |              |              | asthe line   |              |
|              |              |              | search       |              |
|              |              |              | direction    |              |
|              |              |              | (for Chen-   |              |
|              |              |              | Goldfarb     |              |
|              |              |              | line         |              |
|              |              |              | search).     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| dependency_d | OT_STRING    | no           | Indicates if | casadi::Ipop |
| etection_wit |              |              | the right    | tInternal    |
| h_rhs        |              |              | hand sides   |              |
|              |              |              | of the       |              |
|              |              |              | constraints  |              |
|              |              |              | should be    |              |
|              |              |              | considered   |              |
|              |              |              | during       |              |
|              |              |              | dependency   |              |
|              |              |              | detection    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| dependency_d | OT_STRING    | none         | Indicates    | casadi::Ipop |
| etector      |              |              | which linear | tInternal    |
|              |              |              | solver       |              |
|              |              |              | should be    |              |
|              |              |              | used to      |              |
|              |              |              | detect       |              |
|              |              |              | linearly     |              |
|              |              |              | dependent    |              |
|              |              |              | equality     |              |
|              |              |              | constraints. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_t | OT_STRING    | none         | Enable       | casadi::Ipop |
| est          |              |              | derivative   | tInternal    |
|              |              |              | checker (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_t | OT_INTEGER   | -2           | Index of     | casadi::Ipop |
| est_first_in |              |              | first        | tInternal    |
| dex          |              |              | quantity to  |              |
|              |              |              | be checked   |              |
|              |              |              | by           |              |
|              |              |              | derivative   |              |
|              |              |              | checker (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_t | OT_REAL      | 0.000        | Size of the  | casadi::Ipop |
| est_perturba |              |              | finite       | tInternal    |
| tion         |              |              | difference   |              |
|              |              |              | perturbation |              |
|              |              |              | in           |              |
|              |              |              | derivative   |              |
|              |              |              | test. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_t | OT_STRING    | no           | Indicates    | casadi::Ipop |
| est_print_al |              |              | whether      | tInternal    |
| l            |              |              | information  |              |
|              |              |              | for all      |              |
|              |              |              | estimated    |              |
|              |              |              | derivatives  |              |
|              |              |              | should be    |              |
|              |              |              | printed.     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_t | OT_REAL      | 0.000        | Threshold    | casadi::Ipop |
| est_tol      |              |              | for          | tInternal    |
|              |              |              | indicating   |              |
|              |              |              | wrong        |              |
|              |              |              | derivative.  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| diverging_it | OT_REAL      | 1.000e+20    | Threshold    | casadi::Ipop |
| erates_tol   |              |              | for maximal  | tInternal    |
|              |              |              | value of     |              |
|              |              |              | primal       |              |
|              |              |              | iterates.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| dual_inf_tol | OT_REAL      | 1            | Desired      | casadi::Ipop |
|              |              |              | threshold    | tInternal    |
|              |              |              | for the dual |              |
|              |              |              | infeasibilit |              |
|              |              |              | y. (see      |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| epsilon_c    | OT_REAL      | 0.010        | LIFENG       | casadi::Ipop |
|              |              |              | WRITES THIS. | tInternal    |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| eta_min      | OT_REAL      | 10           | LIFENG       | casadi::Ipop |
|              |              |              | WRITES THIS. | tInternal    |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| eta_penalty  | OT_REAL      | 0.000        | Relaxation   | casadi::Ipop |
|              |              |              | factor in    | tInternal    |
|              |              |              | the Armijo   |              |
|              |              |              | condition    |              |
|              |              |              | for the      |              |
|              |              |              | penalty      |              |
|              |              |              | function.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| eta_phi      | OT_REAL      | 0.000        | Relaxation   | casadi::Ipop |
|              |              |              | factor in    | tInternal    |
|              |              |              | the Armijo   |              |
|              |              |              | condition.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| evaluate_ori | OT_STRING    | yes          | Determines   | casadi::Ipop |
| g_obj_at_res |              |              | if the       | tInternal    |
| to_trial     |              |              | original     |              |
|              |              |              | objective    |              |
|              |              |              | function     |              |
|              |              |              | should be    |              |
|              |              |              | evaluated at |              |
|              |              |              | restoration  |              |
|              |              |              | phase trial  |              |
|              |              |              | points. (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| expand       | OT_BOOLEAN   | false        | Expand the   | casadi::NLPS |
|              |              |              | NLP function | olverInterna |
|              |              |              | in terms of  | l            |
|              |              |              | scalar       |              |
|              |              |              | operations,  |              |
|              |              |              | i.e. MX->SX  |              |
+--------------+--------------+--------------+--------------+--------------+
| expect_infea | OT_STRING    | no           | Enable       | casadi::Ipop |
| sible_proble |              |              | heuristics   | tInternal    |
| m            |              |              | to quickly   |              |
|              |              |              | detect an    |              |
|              |              |              | infeasible   |              |
|              |              |              | problem.     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| expect_infea | OT_REAL      | 0.001        | Threshold    | casadi::Ipop |
| sible_proble |              |              | for          | tInternal    |
| m_ctol       |              |              | disabling \"e |              |
|              |              |              | xpect_infeas |              |
|              |              |              | ible_problem |              |
|              |              |              | \" option.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| expect_infea | OT_REAL      | 100000000    | Multiplier   | casadi::Ipop |
| sible_proble |              |              | threshold    | tInternal    |
| m_ytol       |              |              | for          |              |
|              |              |              | activating \" |              |
|              |              |              | expect_infea |              |
|              |              |              | sible_proble |              |
|              |              |              | m\" option.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| fast_des_fac | OT_REAL      | 0.100        | a parameter  | casadi::Ipop |
| t            |              |              | used to      | tInternal    |
|              |              |              | check if the |              |
|              |              |              | fast         |              |
|              |              |              | direction    |              |
|              |              |              | can be used  |              |
|              |              |              | asthe line   |              |
|              |              |              | search       |              |
|              |              |              | direction    |              |
|              |              |              | (for Chen-   |              |
|              |              |              | Goldfarb     |              |
|              |              |              | line         |              |
|              |              |              | search).     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| fast_step_co | OT_STRING    | no           | Indicates if | casadi::Ipop |
| mputation    |              |              | the linear   | tInternal    |
|              |              |              | system       |              |
|              |              |              | should be    |              |
|              |              |              | solved       |              |
|              |              |              | quickly.     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| file_print_l | OT_INTEGER   | 5            | Verbosity    | casadi::Ipop |
| evel         |              |              | level for    | tInternal    |
|              |              |              | output file. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| filter_margi | OT_REAL      | 0.000        | Factor       | casadi::Ipop |
| n_fact       |              |              | determining  | tInternal    |
|              |              |              | width of     |              |
|              |              |              | margin for   |              |
|              |              |              | obj-constr-  |              |
|              |              |              | filter       |              |
|              |              |              | adaptive glo |              |
|              |              |              | balization   |              |
|              |              |              | strategy.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| filter_max_m | OT_REAL      | 1            | Maximum      | casadi::Ipop |
| argin        |              |              | width of     | tInternal    |
|              |              |              | margin in    |              |
|              |              |              | obj-constr-  |              |
|              |              |              | filter       |              |
|              |              |              | adaptive glo |              |
|              |              |              | balization   |              |
|              |              |              | strategy.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| filter_reset | OT_INTEGER   | 5            | Number of    | casadi::Ipop |
| _trigger     |              |              | iterations   | tInternal    |
|              |              |              | that trigger |              |
|              |              |              | the filter   |              |
|              |              |              | reset. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| findiff_pert | OT_REAL      | 0.000        | Size of the  | casadi::Ipop |
| urbation     |              |              | finite       | tInternal    |
|              |              |              | difference   |              |
|              |              |              | perturbation |              |
|              |              |              | for          |              |
|              |              |              | derivative a |              |
|              |              |              | pproximation |              |
|              |              |              | . (see IPOPT |              |
|              |              |              | documentatio |              |
|              |              |              | n)           |              |
+--------------+--------------+--------------+--------------+--------------+
| first_hessia | OT_REAL      | 0.000        | Size of      | casadi::Ipop |
| n_perturbati |              |              | first x-s    | tInternal    |
| on           |              |              | perturbation |              |
|              |              |              | tried. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| fixed_mu_ora | OT_STRING    | average_comp | Oracle for   | casadi::Ipop |
| cle          |              | l            | the barrier  | tInternal    |
|              |              |              | parameter    |              |
|              |              |              | when         |              |
|              |              |              | switching to |              |
|              |              |              | fixed mode.  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| fixed_variab | OT_STRING    | make_paramet | Determines   | casadi::Ipop |
| le_treatment |              | er           | how fixed    | tInternal    |
|              |              |              | variables    |              |
|              |              |              | should be    |              |
|              |              |              | handled.     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| gamma_hat    | OT_REAL      | 0.040        | LIFENG       | casadi::Ipop |
|              |              |              | WRITES THIS. | tInternal    |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| gamma_phi    | OT_REAL      | 0.000        | Relaxation   | casadi::Ipop |
|              |              |              | factor in    | tInternal    |
|              |              |              | the filter   |              |
|              |              |              | margin for   |              |
|              |              |              | the barrier  |              |
|              |              |              | function.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| gamma_theta  | OT_REAL      | 0.000        | Relaxation   | casadi::Ipop |
|              |              |              | factor in    | tInternal    |
|              |              |              | the filter   |              |
|              |              |              | margin for   |              |
|              |              |              | the          |              |
|              |              |              | constraint   |              |
|              |              |              | violation.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| gamma_tilde  | OT_REAL      | 4            | LIFENG       | casadi::Ipop |
|              |              |              | WRITES THIS. | tInternal    |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| grad_f       | OT_FUNCTION  | GenericType( | Function for | casadi::NLPS |
|              |              | )            | calculating  | olverInterna |
|              |              |              | the gradient | l            |
|              |              |              | of the       |              |
|              |              |              | objective    |              |
|              |              |              | (column, aut |              |
|              |              |              | ogenerated   |              |
|              |              |              | by default)  |              |
+--------------+--------------+--------------+--------------+--------------+
| grad_lag     | OT_FUNCTION  | GenericType( | Function for | casadi::NLPS |
|              |              | )            | calculating  | olverInterna |
|              |              |              | the gradient | l            |
|              |              |              | of the       |              |
|              |              |              | Lagrangian ( |              |
|              |              |              | autogenerate |              |
|              |              |              | d by         |              |
|              |              |              | default)     |              |
+--------------+--------------+--------------+--------------+--------------+
| hess_lag     | OT_FUNCTION  | GenericType( | Function for | casadi::NLPS |
|              |              | )            | calculating  | olverInterna |
|              |              |              | the Hessian  | l            |
|              |              |              | of the       |              |
|              |              |              | Lagrangian ( |              |
|              |              |              | autogenerate |              |
|              |              |              | d by         |              |
|              |              |              | default)     |              |
+--------------+--------------+--------------+--------------+--------------+
| hessian_appr | OT_STRING    | exact        | Indicates    | casadi::Ipop |
| oximation    |              |              | what Hessian | tInternal    |
|              |              |              | information  |              |
|              |              |              | is to be     |              |
|              |              |              | used. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| hessian_appr | OT_STRING    | nonlinear-   | Indicates in | casadi::Ipop |
| oximation_sp |              | variables    | which        | tInternal    |
| ace          |              |              | subspace the |              |
|              |              |              | Hessian      |              |
|              |              |              | information  |              |
|              |              |              | is to be app |              |
|              |              |              | roximated.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| hessian_cons | OT_STRING    | no           | Indicates    | casadi::Ipop |
| tant         |              |              | whether the  | tInternal    |
|              |              |              | problem is a |              |
|              |              |              | quadratic    |              |
|              |              |              | problem (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| honor_origin | OT_STRING    | yes          | Indicates    | casadi::Ipop |
| al_bounds    |              |              | whether      | tInternal    |
|              |              |              | final points |              |
|              |              |              | should be    |              |
|              |              |              | projected    |              |
|              |              |              | into         |              |
|              |              |              | original     |              |
|              |              |              | bounds. (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| ignore_check | OT_BOOLEAN   | false        | If set to    | casadi::NLPS |
| _vec         |              |              | true, the    | olverInterna |
|              |              |              | input shape  | l            |
|              |              |              | of F will    |              |
|              |              |              | not be       |              |
|              |              |              | checked.     |              |
+--------------+--------------+--------------+--------------+--------------+
| inf_pr_outpu | OT_STRING    | original     | Determines   | casadi::Ipop |
| t            |              |              | what value   | tInternal    |
|              |              |              | is printed   |              |
|              |              |              | in the       |              |
|              |              |              | \"inf_pr\"     |              |
|              |              |              | output       |              |
|              |              |              | column. (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_CALLBACK  | GenericType( | A function   | casadi::NLPS |
| llback       |              | )            | that will be | olverInterna |
|              |              |              | called at    | l            |
|              |              |              | each         |              |
|              |              |              | iteration    |              |
|              |              |              | with the     |              |
|              |              |              | solver as    |              |
|              |              |              | input. Check |              |
|              |              |              | documentatio |              |
|              |              |              | n of         |              |
|              |              |              | Callback .   |              |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_BOOLEAN   | false        | If set to    | casadi::NLPS |
| llback_ignor |              |              | true, errors | olverInterna |
| e_errors     |              |              | thrown by it | l            |
|              |              |              | eration_call |              |
|              |              |              | back will be |              |
|              |              |              | ignored.     |              |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_INTEGER   | 1            | Only call    | casadi::NLPS |
| llback_step  |              |              | the callback | olverInterna |
|              |              |              | function     | l            |
|              |              |              | every few    |              |
|              |              |              | iterations.  |              |
+--------------+--------------+--------------+--------------+--------------+
| jac_c_consta | OT_STRING    | no           | Indicates    | casadi::Ipop |
| nt           |              |              | whether all  | tInternal    |
|              |              |              | equality     |              |
|              |              |              | constraints  |              |
|              |              |              | are linear   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| jac_d_consta | OT_STRING    | no           | Indicates    | casadi::Ipop |
| nt           |              |              | whether all  | tInternal    |
|              |              |              | inequality   |              |
|              |              |              | constraints  |              |
|              |              |              | are linear   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| jac_f        | OT_FUNCTION  | GenericType( | Function for | casadi::NLPS |
|              |              | )            | calculating  | olverInterna |
|              |              |              | the jacobian | l            |
|              |              |              | of the       |              |
|              |              |              | objective    |              |
|              |              |              | (sparse row, |              |
|              |              |              | autogenerate |              |
|              |              |              | d by         |              |
|              |              |              | default)     |              |
+--------------+--------------+--------------+--------------+--------------+
| jac_g        | OT_FUNCTION  | GenericType( | Function for | casadi::NLPS |
|              |              | )            | calculating  | olverInterna |
|              |              |              | the Jacobian | l            |
|              |              |              | of the       |              |
|              |              |              | constraints  |              |
|              |              |              | (autogenerat |              |
|              |              |              | ed by        |              |
|              |              |              | default)     |              |
+--------------+--------------+--------------+--------------+--------------+
| jacobian_app | OT_STRING    | exact        | Specifies    | casadi::Ipop |
| roximation   |              |              | technique to | tInternal    |
|              |              |              | compute      |              |
|              |              |              | constraint   |              |
|              |              |              | Jacobian     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| jacobian_reg | OT_REAL      | 0.250        | Exponent for | casadi::Ipop |
| ularization_ |              |              | mu in the re | tInternal    |
| exponent     |              |              | gularization |              |
|              |              |              | for rank-    |              |
|              |              |              | deficient    |              |
|              |              |              | constraint   |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| jacobian_reg | OT_REAL      | 0.000        | Size of the  | casadi::Ipop |
| ularization_ |              |              | regularizati | tInternal    |
| value        |              |              | on for rank- |              |
|              |              |              | deficient    |              |
|              |              |              | constraint   |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| kappa_d      | OT_REAL      | 0.000        | Weight for   | casadi::Ipop |
|              |              |              | linear       | tInternal    |
|              |              |              | damping term |              |
|              |              |              | (to handle   |              |
|              |              |              | one-sided    |              |
|              |              |              | bounds).     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| kappa_sigma  | OT_REAL      | 1.000e+10    | Factor       | casadi::Ipop |
|              |              |              | limiting the | tInternal    |
|              |              |              | deviation of |              |
|              |              |              | dual         |              |
|              |              |              | variables    |              |
|              |              |              | from primal  |              |
|              |              |              | estimates.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| kappa_soc    | OT_REAL      | 0.990        | Factor in    | casadi::Ipop |
|              |              |              | the          | tInternal    |
|              |              |              | sufficient   |              |
|              |              |              | reduction    |              |
|              |              |              | rule for     |              |
|              |              |              | second order |              |
|              |              |              | correction.  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| kappa_x_dis  | OT_REAL      | 100          | a parameter  | casadi::Ipop |
|              |              |              | used to      | tInternal    |
|              |              |              | check if the |              |
|              |              |              | fast         |              |
|              |              |              | direction    |              |
|              |              |              | can be used  |              |
|              |              |              | asthe line   |              |
|              |              |              | search       |              |
|              |              |              | direction    |              |
|              |              |              | (for Chen-   |              |
|              |              |              | Goldfarb     |              |
|              |              |              | line         |              |
|              |              |              | search).     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| kappa_y_dis  | OT_REAL      | 10000        | a parameter  | casadi::Ipop |
|              |              |              | used to      | tInternal    |
|              |              |              | check if the |              |
|              |              |              | fast         |              |
|              |              |              | direction    |              |
|              |              |              | can be used  |              |
|              |              |              | asthe line   |              |
|              |              |              | search       |              |
|              |              |              | direction    |              |
|              |              |              | (for Chen-   |              |
|              |              |              | Goldfarb     |              |
|              |              |              | line         |              |
|              |              |              | search).     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| least_square | OT_STRING    | no           | Least square | casadi::Ipop |
| _init_duals  |              |              | initializati | tInternal    |
|              |              |              | on of all    |              |
|              |              |              | dual         |              |
|              |              |              | variables    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| least_square | OT_STRING    | no           | Least square | casadi::Ipop |
| _init_primal |              |              | initializati | tInternal    |
|              |              |              | on of the    |              |
|              |              |              | primal       |              |
|              |              |              | variables    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| limited_memo | OT_STRING    | sherman-     | Strategy for | casadi::Ipop |
| ry_aug_solve |              | morrison     | solving the  | tInternal    |
| r            |              |              | augmented    |              |
|              |              |              | system for   |              |
|              |              |              | low-rank     |              |
|              |              |              | Hessian.     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| limited_memo | OT_REAL      | 1            | Value for B0 | casadi::Ipop |
| ry_init_val  |              |              | in low-rank  | tInternal    |
|              |              |              | update. (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| limited_memo | OT_REAL      | 100000000    | Upper bound  | casadi::Ipop |
| ry_init_val_ |              |              | on value for | tInternal    |
| max          |              |              | B0 in low-   |              |
|              |              |              | rank update. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| limited_memo | OT_REAL      | 0.000        | Lower bound  | casadi::Ipop |
| ry_init_val_ |              |              | on value for | tInternal    |
| min          |              |              | B0 in low-   |              |
|              |              |              | rank update. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| limited_memo | OT_STRING    | scalar1      | Initializati | casadi::Ipop |
| ry_initializ |              |              | on strategy  | tInternal    |
| ation        |              |              | for the      |              |
|              |              |              | limited      |              |
|              |              |              | memory       |              |
|              |              |              | quasi-Newton |              |
|              |              |              | approximatio |              |
|              |              |              | n. (see      |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| limited_memo | OT_INTEGER   | 6            | Maximum size | casadi::Ipop |
| ry_max_histo |              |              | of the       | tInternal    |
| ry           |              |              | history for  |              |
|              |              |              | the limited  |              |
|              |              |              | quasi-Newton |              |
|              |              |              | Hessian appr |              |
|              |              |              | oximation.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| limited_memo | OT_INTEGER   | 2            | Threshold    | casadi::Ipop |
| ry_max_skipp |              |              | for          | tInternal    |
| ing          |              |              | successive   |              |
|              |              |              | iterations   |              |
|              |              |              | where update |              |
|              |              |              | is skipped.  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| limited_memo | OT_STRING    | no           | Determines   | casadi::Ipop |
| ry_special_f |              |              | if the       | tInternal    |
| or_resto     |              |              | quasi-Newton |              |
|              |              |              | updates      |              |
|              |              |              | should be    |              |
|              |              |              | special      |              |
|              |              |              | during the   |              |
|              |              |              | restoration  |              |
|              |              |              | phase. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| limited_memo | OT_STRING    | bfgs         | Quasi-Newton | casadi::Ipop |
| ry_update_ty |              |              | update       | tInternal    |
| pe           |              |              | formula for  |              |
|              |              |              | the limited  |              |
|              |              |              | memory appro |              |
|              |              |              | ximation.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| line_search_ | OT_STRING    | filter       | Globalizatio | casadi::Ipop |
| method       |              |              | n method     | tInternal    |
|              |              |              | used in      |              |
|              |              |              | backtracking |              |
|              |              |              | line search  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_scali | OT_STRING    | yes          | Flag         | casadi::Ipop |
| ng_on_demand |              |              | indicating   | tInternal    |
|              |              |              | that linear  |              |
|              |              |              | scaling is   |              |
|              |              |              | only done if |              |
|              |              |              | it seems     |              |
|              |              |              | required.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_STRING    | mumps        | Linear       | casadi::Ipop |
| r            |              |              | solver used  | tInternal    |
|              |              |              | for step com |              |
|              |              |              | putations.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_syste | OT_STRING    | none         | Method for   | casadi::Ipop |
| m_scaling    |              |              | scaling the  | tInternal    |
|              |              |              | linear       |              |
|              |              |              | system. (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| ma27_ignore_ | OT_STRING    | no           | Enables      | casadi::Ipop |
| singularity  |              |              | MA27's       | tInternal    |
|              |              |              | ability to   |              |
|              |              |              | solve a      |              |
|              |              |              | linear       |              |
|              |              |              | system even  |              |
|              |              |              | if the       |              |
|              |              |              | matrix is    |              |
|              |              |              | singular.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma27_la_init | OT_REAL      | 5            | Real         | casadi::Ipop |
| _factor      |              |              | workspace    | tInternal    |
|              |              |              | memory for   |              |
|              |              |              | MA27. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| ma27_liw_ini | OT_REAL      | 5            | Integer      | casadi::Ipop |
| t_factor     |              |              | workspace    | tInternal    |
|              |              |              | memory for   |              |
|              |              |              | MA27. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| ma27_meminc_ | OT_REAL      | 2            | Increment    | casadi::Ipop |
| factor       |              |              | factor for   | tInternal    |
|              |              |              | workspace    |              |
|              |              |              | size for     |              |
|              |              |              | MA27. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| ma27_pivtol  | OT_REAL      | 0.000        | Pivot        | casadi::Ipop |
|              |              |              | tolerance    | tInternal    |
|              |              |              | for the      |              |
|              |              |              | linear       |              |
|              |              |              | solver MA27. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma27_pivtolm | OT_REAL      | 0.000        | Maximum      | casadi::Ipop |
| ax           |              |              | pivot        | tInternal    |
|              |              |              | tolerance    |              |
|              |              |              | for the      |              |
|              |              |              | linear       |              |
|              |              |              | solver MA27. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma27_skip_in | OT_STRING    | no           | Always       | casadi::Ipop |
| ertia_check  |              |              | pretend      | tInternal    |
|              |              |              | inertia is   |              |
|              |              |              | correct.     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma28_pivtol  | OT_REAL      | 0.010        | Pivot        | casadi::Ipop |
|              |              |              | tolerance    | tInternal    |
|              |              |              | for linear   |              |
|              |              |              | solver MA28. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma57_automat | OT_STRING    | no           | Controls     | casadi::Ipop |
| ic_scaling   |              |              | MA57         | tInternal    |
|              |              |              | automatic    |              |
|              |              |              | scaling (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| ma57_block_s | OT_INTEGER   | 16           | Controls     | casadi::Ipop |
| ize          |              |              | block size   | tInternal    |
|              |              |              | used by      |              |
|              |              |              | Level 3 BLAS |              |
|              |              |              | in MA57BD    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma57_node_am | OT_INTEGER   | 16           | Node         | casadi::Ipop |
| algamation   |              |              | amalgamation | tInternal    |
|              |              |              | parameter    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma57_pivot_o | OT_INTEGER   | 5            | Controls     | casadi::Ipop |
| rder         |              |              | pivot order  | tInternal    |
|              |              |              | in MA57 (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| ma57_pivtol  | OT_REAL      | 0.000        | Pivot        | casadi::Ipop |
|              |              |              | tolerance    | tInternal    |
|              |              |              | for the      |              |
|              |              |              | linear       |              |
|              |              |              | solver MA57. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma57_pivtolm | OT_REAL      | 0.000        | Maximum      | casadi::Ipop |
| ax           |              |              | pivot        | tInternal    |
|              |              |              | tolerance    |              |
|              |              |              | for the      |              |
|              |              |              | linear       |              |
|              |              |              | solver MA57. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma57_pre_all | OT_REAL      | 1.050        | Safety       | casadi::Ipop |
| oc           |              |              | factor for   | tInternal    |
|              |              |              | work space   |              |
|              |              |              | memory       |              |
|              |              |              | allocation   |              |
|              |              |              | for the      |              |
|              |              |              | linear       |              |
|              |              |              | solver MA57. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma57_small_p | OT_INTEGER   | 0            | If set to 1, | casadi::Ipop |
| ivot_flag    |              |              | then when    | tInternal    |
|              |              |              | small        |              |
|              |              |              | entries      |              |
|              |              |              | defined by   |              |
|              |              |              | CNTL(2) are  |              |
|              |              |              | detected     |              |
|              |              |              | they are     |              |
|              |              |              | removed and  |              |
|              |              |              | the correspo |              |
|              |              |              | nding pivots |              |
|              |              |              | placed at    |              |
|              |              |              | the end of   |              |
|              |              |              | the factoriz |              |
|              |              |              | ation. This  |              |
|              |              |              | can be       |              |
|              |              |              | particularly |              |
|              |              |              | efficient if |              |
|              |              |              | the matrix   |              |
|              |              |              | is highly    |              |
|              |              |              | rank         |              |
|              |              |              | deficient.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma77_buffer_ | OT_INTEGER   | 4096         | Number of    | casadi::Ipop |
| lpage        |              |              | scalars per  | tInternal    |
|              |              |              | MA77 buffer  |              |
|              |              |              | page (see    |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| ma77_buffer_ | OT_INTEGER   | 1600         | Number of    | casadi::Ipop |
| npage        |              |              | pages that   | tInternal    |
|              |              |              | make up MA77 |              |
|              |              |              | buffer (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| ma77_file_si | OT_INTEGER   | 2097152      | Target size  | casadi::Ipop |
| ze           |              |              | of each      | tInternal    |
|              |              |              | temporary    |              |
|              |              |              | file for     |              |
|              |              |              | MA77,        |              |
|              |              |              | scalars per  |              |
|              |              |              | type (see    |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| ma77_maxstor | OT_INTEGER   | 0            | Maximum      | casadi::Ipop |
| e            |              |              | storage size | tInternal    |
|              |              |              | for MA77 in- |              |
|              |              |              | core mode    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma77_nemin   | OT_INTEGER   | 8            | Node         | casadi::Ipop |
|              |              |              | Amalgamation | tInternal    |
|              |              |              | parameter    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma77_order   | OT_STRING    | amd          | Controls     | casadi::Ipop |
|              |              |              | type of      | tInternal    |
|              |              |              | ordering     |              |
|              |              |              | used by      |              |
|              |              |              | HSL_MA77     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma77_print_l | OT_INTEGER   | -1           | Debug        | casadi::Ipop |
| evel         |              |              | printing     | tInternal    |
|              |              |              | level for    |              |
|              |              |              | the linear   |              |
|              |              |              | solver MA77  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma77_small   | OT_REAL      | 0.000        | Zero Pivot   | casadi::Ipop |
|              |              |              | Threshold    | tInternal    |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma77_static  | OT_REAL      | 0            | Static       | casadi::Ipop |
|              |              |              | Pivoting     | tInternal    |
|              |              |              | Threshold    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma77_u       | OT_REAL      | 0.000        | Pivoting     | casadi::Ipop |
|              |              |              | Threshold    | tInternal    |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma77_umax    | OT_REAL      | 0.000        | Maximum      | casadi::Ipop |
|              |              |              | Pivoting     | tInternal    |
|              |              |              | Threshold    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma86_nemin   | OT_INTEGER   | 32           | Node         | casadi::Ipop |
|              |              |              | Amalgamation | tInternal    |
|              |              |              | parameter    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma86_order   | OT_STRING    | amd          | Controls     | casadi::Ipop |
|              |              |              | type of      | tInternal    |
|              |              |              | ordering     |              |
|              |              |              | used by      |              |
|              |              |              | HSL_MA86     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma86_print_l | OT_INTEGER   | -1           | Debug        | casadi::Ipop |
| evel         |              |              | printing     | tInternal    |
|              |              |              | level for    |              |
|              |              |              | the linear   |              |
|              |              |              | solver MA86  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma86_scaling | OT_STRING    | mc64         | Controls     | casadi::Ipop |
|              |              |              | scaling of   | tInternal    |
|              |              |              | matrix (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| ma86_small   | OT_REAL      | 0.000        | Zero Pivot   | casadi::Ipop |
|              |              |              | Threshold    | tInternal    |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma86_static  | OT_REAL      | 0            | Static       | casadi::Ipop |
|              |              |              | Pivoting     | tInternal    |
|              |              |              | Threshold    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma86_u       | OT_REAL      | 0.000        | Pivoting     | casadi::Ipop |
|              |              |              | Threshold    | tInternal    |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma86_umax    | OT_REAL      | 0.000        | Maximum      | casadi::Ipop |
|              |              |              | Pivoting     | tInternal    |
|              |              |              | Threshold    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma97_nemin   | OT_INTEGER   | 8            | Node         | casadi::Ipop |
|              |              |              | Amalgamation | tInternal    |
|              |              |              | parameter    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma97_order   | OT_STRING    | auto         | Controls     | casadi::Ipop |
|              |              |              | type of      | tInternal    |
|              |              |              | ordering     |              |
|              |              |              | used by      |              |
|              |              |              | HSL_MA97     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma97_print_l | OT_INTEGER   | 0            | Debug        | casadi::Ipop |
| evel         |              |              | printing     | tInternal    |
|              |              |              | level for    |              |
|              |              |              | the linear   |              |
|              |              |              | solver MA97  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma97_scaling | OT_STRING    | dynamic      | Specifies    | casadi::Ipop |
|              |              |              | strategy for | tInternal    |
|              |              |              | scaling in   |              |
|              |              |              | HSL_MA97     |              |
|              |              |              | linear       |              |
|              |              |              | solver (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| ma97_scaling | OT_STRING    | mc64         | First        | casadi::Ipop |
| 1            |              |              | scaling.     | tInternal    |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma97_scaling | OT_STRING    | mc64         | Second       | casadi::Ipop |
| 2            |              |              | scaling.     | tInternal    |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma97_scaling | OT_STRING    | mc64         | Third        | casadi::Ipop |
| 3            |              |              | scaling.     | tInternal    |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma97_small   | OT_REAL      | 0.000        | Zero Pivot   | casadi::Ipop |
|              |              |              | Threshold    | tInternal    |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma97_solve_b | OT_STRING    | no           | Controls if  | casadi::Ipop |
| las3         |              |              | blas2 or     | tInternal    |
|              |              |              | blas3        |              |
|              |              |              | routines are |              |
|              |              |              | used for     |              |
|              |              |              | solve (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| ma97_switch1 | OT_STRING    | od_hd_reuse  | First        | casadi::Ipop |
|              |              |              | switch,      | tInternal    |
|              |              |              | determine    |              |
|              |              |              | when ma97_sc |              |
|              |              |              | aling1 is    |              |
|              |              |              | enabled.     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma97_switch2 | OT_STRING    | never        | Second       | casadi::Ipop |
|              |              |              | switch,      | tInternal    |
|              |              |              | determine    |              |
|              |              |              | when ma97_sc |              |
|              |              |              | aling2 is    |              |
|              |              |              | enabled.     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma97_switch3 | OT_STRING    | never        | Third        | casadi::Ipop |
|              |              |              | switch,      | tInternal    |
|              |              |              | determine    |              |
|              |              |              | when ma97_sc |              |
|              |              |              | aling3 is    |              |
|              |              |              | enabled.     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma97_u       | OT_REAL      | 0.000        | Pivoting     | casadi::Ipop |
|              |              |              | Threshold    | tInternal    |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma97_umax    | OT_REAL      | 0.000        | Maximum      | casadi::Ipop |
|              |              |              | Pivoting     | tInternal    |
|              |              |              | Threshold    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| magic_steps  | OT_STRING    | no           | Enables      | casadi::Ipop |
|              |              |              | magic steps. | tInternal    |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| max_cpu_time | OT_REAL      | 1000000      | Maximum      | casadi::Ipop |
|              |              |              | number of    | tInternal    |
|              |              |              | CPU seconds. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| max_filter_r | OT_INTEGER   | 5            | Maximal      | casadi::Ipop |
| esets        |              |              | allowed      | tInternal    |
|              |              |              | number of    |              |
|              |              |              | filter       |              |
|              |              |              | resets (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| max_hessian_ | OT_REAL      | 1.000e+20    | Maximum      | casadi::Ipop |
| perturbation |              |              | value of reg | tInternal    |
|              |              |              | ularization  |              |
|              |              |              | parameter    |              |
|              |              |              | for handling |              |
|              |              |              | negative     |              |
|              |              |              | curvature.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| max_iter     | OT_INTEGER   | 3000         | Maximum      | casadi::Ipop |
|              |              |              | number of    | tInternal    |
|              |              |              | iterations.  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| max_refineme | OT_INTEGER   | 10           | Maximum      | casadi::Ipop |
| nt_steps     |              |              | number of    | tInternal    |
|              |              |              | iterative    |              |
|              |              |              | refinement   |              |
|              |              |              | steps per    |              |
|              |              |              | linear       |              |
|              |              |              | system       |              |
|              |              |              | solve. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| max_resto_it | OT_INTEGER   | 3000000      | Maximum      | casadi::Ipop |
| er           |              |              | number of    | tInternal    |
|              |              |              | successive   |              |
|              |              |              | iterations   |              |
|              |              |              | in           |              |
|              |              |              | restoration  |              |
|              |              |              | phase. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| max_soc      | OT_INTEGER   | 4            | Maximum      | casadi::Ipop |
|              |              |              | number of    | tInternal    |
|              |              |              | second order |              |
|              |              |              | correction   |              |
|              |              |              | trial steps  |              |
|              |              |              | at each      |              |
|              |              |              | iteration.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| max_soft_res | OT_INTEGER   | 10           | Maximum      | casadi::Ipop |
| to_iters     |              |              | number of    | tInternal    |
|              |              |              | iterations   |              |
|              |              |              | performed    |              |
|              |              |              | successively |              |
|              |              |              | in soft      |              |
|              |              |              | restoration  |              |
|              |              |              | phase. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| mehrotra_alg | OT_STRING    | no           | Indicates if | casadi::Ipop |
| orithm       |              |              | we want to   | tInternal    |
|              |              |              | do           |              |
|              |              |              | Mehrotra's   |              |
|              |              |              | algorithm.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| min_alpha_pr | OT_REAL      | 0.000        | LIFENG       | casadi::Ipop |
| imal         |              |              | WRITES THIS. | tInternal    |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| min_hessian_ | OT_REAL      | 0.000        | Smallest     | casadi::Ipop |
| perturbation |              |              | perturbation | tInternal    |
|              |              |              | of the       |              |
|              |              |              | Hessian      |              |
|              |              |              | block. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| min_refineme | OT_INTEGER   | 1            | Minimum      | casadi::Ipop |
| nt_steps     |              |              | number of    | tInternal    |
|              |              |              | iterative    |              |
|              |              |              | refinement   |              |
|              |              |              | steps per    |              |
|              |              |              | linear       |              |
|              |              |              | system       |              |
|              |              |              | solve. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp | casadi::Ipop |
|              |              |              | uts)  (eval_ | tInternal    |
|              |              |              | f|eval_g|eva |              |
|              |              |              | l_jac_g|eval |              |
|              |              |              | _grad_f|eval |              |
|              |              |              | _h)          |              |
+--------------+--------------+--------------+--------------+--------------+
| mu_allow_fas | OT_STRING    | yes          | Allow        | casadi::Ipop |
| t_monotone_d |              |              | skipping of  | tInternal    |
| ecrease      |              |              | barrier      |              |
|              |              |              | problem if   |              |
|              |              |              | barrier test |              |
|              |              |              | is already   |              |
|              |              |              | met. (see    |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| mu_init      | OT_REAL      | 0.100        | Initial      | casadi::Ipop |
|              |              |              | value for    | tInternal    |
|              |              |              | the barrier  |              |
|              |              |              | parameter.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| mu_linear_de | OT_REAL      | 0.200        | Determines   | casadi::Ipop |
| crease_facto |              |              | linear       | tInternal    |
| r            |              |              | decrease     |              |
|              |              |              | rate of      |              |
|              |              |              | barrier      |              |
|              |              |              | parameter.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| mu_max       | OT_REAL      | 100000       | Maximum      | casadi::Ipop |
|              |              |              | value for    | tInternal    |
|              |              |              | barrier      |              |
|              |              |              | parameter.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| mu_max_fact  | OT_REAL      | 1000         | Factor for i | casadi::Ipop |
|              |              |              | nitializatio | tInternal    |
|              |              |              | n of maximum |              |
|              |              |              | value for    |              |
|              |              |              | barrier      |              |
|              |              |              | parameter.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| mu_min       | OT_REAL      | 0.000        | Minimum      | casadi::Ipop |
|              |              |              | value for    | tInternal    |
|              |              |              | barrier      |              |
|              |              |              | parameter.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| mu_oracle    | OT_STRING    | quality-     | Oracle for a | casadi::Ipop |
|              |              | function     | new barrier  | tInternal    |
|              |              |              | parameter in |              |
|              |              |              | the adaptive |              |
|              |              |              | strategy.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| mu_strategy  | OT_STRING    | monotone     | Update       | casadi::Ipop |
|              |              |              | strategy for | tInternal    |
|              |              |              | barrier      |              |
|              |              |              | parameter.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| mu_superline | OT_REAL      | 1.500        | Determines   | casadi::Ipop |
| ar_decrease_ |              |              | superlinear  | tInternal    |
| power        |              |              | decrease     |              |
|              |              |              | rate of      |              |
|              |              |              | barrier      |              |
|              |              |              | parameter.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| mu_target    | OT_REAL      | 0            | Desired      | casadi::Ipop |
|              |              |              | value of com | tInternal    |
|              |              |              | plementarity |              |
|              |              |              | . (see IPOPT |              |
|              |              |              | documentatio |              |
|              |              |              | n)           |              |
+--------------+--------------+--------------+--------------+--------------+
| mult_diverg_ | OT_REAL      | 0.000        | tolerance    | casadi::Ipop |
| feasibility_ |              |              | for deciding | tInternal    |
| tol          |              |              | if the       |              |
|              |              |              | multipliers  |              |
|              |              |              | are          |              |
|              |              |              | diverging    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| mult_diverg_ | OT_REAL      | 100000000    | tolerance    | casadi::Ipop |
| y_tol        |              |              | for deciding | tInternal    |
|              |              |              | if the       |              |
|              |              |              | multipliers  |              |
|              |              |              | are          |              |
|              |              |              | diverging    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| mumps_dep_to | OT_REAL      | 0            | Pivot        | casadi::Ipop |
| l            |              |              | threshold    | tInternal    |
|              |              |              | for          |              |
|              |              |              | detection of |              |
|              |              |              | linearly     |              |
|              |              |              | dependent    |              |
|              |              |              | constraints  |              |
|              |              |              | in MUMPS.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| mumps_mem_pe | OT_INTEGER   | 1000         | Percentage   | casadi::Ipop |
| rcent        |              |              | increase in  | tInternal    |
|              |              |              | the          |              |
|              |              |              | estimated    |              |
|              |              |              | working      |              |
|              |              |              | space for    |              |
|              |              |              | MUMPS. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| mumps_permut | OT_INTEGER   | 7            | Controls     | casadi::Ipop |
| ing_scaling  |              |              | permuting    | tInternal    |
|              |              |              | and scaling  |              |
|              |              |              | in MUMPS     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| mumps_pivot_ | OT_INTEGER   | 7            | Controls     | casadi::Ipop |
| order        |              |              | pivot order  | tInternal    |
|              |              |              | in MUMPS     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| mumps_pivtol | OT_REAL      | 0.000        | Pivot        | casadi::Ipop |
|              |              |              | tolerance    | tInternal    |
|              |              |              | for the      |              |
|              |              |              | linear       |              |
|              |              |              | solver       |              |
|              |              |              | MUMPS. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| mumps_pivtol | OT_REAL      | 0.100        | Maximum      | casadi::Ipop |
| max          |              |              | pivot        | tInternal    |
|              |              |              | tolerance    |              |
|              |              |              | for the      |              |
|              |              |              | linear       |              |
|              |              |              | solver       |              |
|              |              |              | MUMPS. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| mumps_scalin | OT_INTEGER   | 77           | Controls     | casadi::Ipop |
| g            |              |              | scaling in   | tInternal    |
|              |              |              | MUMPS (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| neg_curv_tes | OT_REAL      | 0            | Tolerance    | casadi::Ipop |
| t_tol        |              |              | for          | tInternal    |
|              |              |              | heuristic to |              |
|              |              |              | ignore wrong |              |
|              |              |              | inertia.     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| never_use_fa | OT_STRING    | no           | Toggle to    | casadi::Ipop |
| ct_cgpen_dir |              |              | switch off   | tInternal    |
| ection       |              |              | the fast     |              |
|              |              |              | Chen-        |              |
|              |              |              | Goldfarb     |              |
|              |              |              | direction    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| never_use_pi | OT_STRING    | no           | Toggle to    | casadi::Ipop |
| ecewise_pena |              |              | switch off   | tInternal    |
| lty_ls       |              |              | the          |              |
|              |              |              | piecewise    |              |
|              |              |              | penalty      |              |
|              |              |              | method (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| nlp_lower_bo | OT_REAL      | -1.000e+19   | any bound    | casadi::Ipop |
| und_inf      |              |              | less or      | tInternal    |
|              |              |              | equal this   |              |
|              |              |              | value will   |              |
|              |              |              | be           |              |
|              |              |              | considered   |              |
|              |              |              | -inf (i.e.   |              |
|              |              |              | not lower    |              |
|              |              |              | bounded).    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| nlp_scaling_ | OT_REAL      | 0            | Target value | casadi::Ipop |
| constr_targe |              |              | for          | tInternal    |
| t_gradient   |              |              | constraint   |              |
|              |              |              | function     |              |
|              |              |              | gradient     |              |
|              |              |              | size. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| nlp_scaling_ | OT_REAL      | 100          | Maximum      | casadi::Ipop |
| max_gradient |              |              | gradient     | tInternal    |
|              |              |              | after NLP    |              |
|              |              |              | scaling.     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| nlp_scaling_ | OT_STRING    | gradient-    | Select the   | casadi::Ipop |
| method       |              | based        | technique    | tInternal    |
|              |              |              | used for     |              |
|              |              |              | scaling the  |              |
|              |              |              | NLP. (see    |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| nlp_scaling_ | OT_REAL      | 0.000        | Minimum      | casadi::Ipop |
| min_value    |              |              | value of     | tInternal    |
|              |              |              | gradient-    |              |
|              |              |              | based        |              |
|              |              |              | scaling      |              |
|              |              |              | values. (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| nlp_scaling_ | OT_REAL      | 0            | Target value | casadi::Ipop |
| obj_target_g |              |              | for          | tInternal    |
| radient      |              |              | objective    |              |
|              |              |              | function     |              |
|              |              |              | gradient     |              |
|              |              |              | size. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| nlp_upper_bo | OT_REAL      | 1.000e+19    | any bound    | casadi::Ipop |
| und_inf      |              |              | greater or   | tInternal    |
|              |              |              | this value   |              |
|              |              |              | will be      |              |
|              |              |              | considered   |              |
|              |              |              | +inf (i.e.   |              |
|              |              |              | not upper    |              |
|              |              |              | bounded).    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| nu_inc       | OT_REAL      | 0.000        | Increment of | casadi::Ipop |
|              |              |              | the penalty  | tInternal    |
|              |              |              | parameter.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| nu_init      | OT_REAL      | 0.000        | Initial      | casadi::Ipop |
|              |              |              | value of the | tInternal    |
|              |              |              | penalty      |              |
|              |              |              | parameter.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| num_linear_v | OT_INTEGER   | 0            | Number of    | casadi::Ipop |
| ariables     |              |              | linear       | tInternal    |
|              |              |              | variables    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| obj_max_inc  | OT_REAL      | 5            | Determines   | casadi::Ipop |
|              |              |              | the upper    | tInternal    |
|              |              |              | bound on the |              |
|              |              |              | acceptable   |              |
|              |              |              | increase of  |              |
|              |              |              | barrier      |              |
|              |              |              | objective    |              |
|              |              |              | function.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| obj_scaling_ | OT_REAL      | 1            | Scaling      | casadi::Ipop |
| factor       |              |              | factor for   | tInternal    |
|              |              |              | the          |              |
|              |              |              | objective    |              |
|              |              |              | function.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| option_file_ | OT_STRING    | ipopt.opt    | File name of | casadi::Ipop |
| name         |              |              | options      | tInternal    |
|              |              |              | file. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| output_file  | OT_STRING    |              | File name of | casadi::Ipop |
|              |              |              | desired      | tInternal    |
|              |              |              | output file  |              |
|              |              |              | (leave unset |              |
|              |              |              | for no file  |              |
|              |              |              | output).     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| pardiso_iter | OT_INTEGER   | 5000         | Maximum Size | casadi::Ipop |
| _coarse_size |              |              | of Coarse    | tInternal    |
|              |              |              | Grid Matrix  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| pardiso_iter | OT_REAL      | 0.500        | dropping     | casadi::Ipop |
| _dropping_fa |              |              | value for    | tInternal    |
| ctor         |              |              | incomplete   |              |
|              |              |              | factor (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| pardiso_iter | OT_REAL      | 0.100        | dropping     | casadi::Ipop |
| _dropping_sc |              |              | value for    | tInternal    |
| hur          |              |              | sparsify     |              |
|              |              |              | schur        |              |
|              |              |              | complement   |              |
|              |              |              | factor (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| pardiso_iter | OT_REAL      | 5000000      | (see IPOPT d | casadi::Ipop |
| _inverse_nor |              |              | ocumentation | tInternal    |
| m_factor     |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| pardiso_iter | OT_INTEGER   | 10           | Maximum Size | casadi::Ipop |
| _max_levels  |              |              | of Grid      | tInternal    |
|              |              |              | Levels (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| pardiso_iter | OT_INTEGER   | 10000000     | max fill for | casadi::Ipop |
| _max_row_fil |              |              | each row     | tInternal    |
| l            |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| pardiso_iter | OT_REAL      | 0.000        | Relative     | casadi::Ipop |
| _relative_to |              |              | Residual     | tInternal    |
| l            |              |              | Convergence  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| pardiso_iter | OT_STRING    | no           | Switch on    | casadi::Ipop |
| ative        |              |              | iterative    | tInternal    |
|              |              |              | solver in    |              |
|              |              |              | Pardiso      |              |
|              |              |              | library (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| pardiso_matc | OT_STRING    | complete+2x2 | Matching     | casadi::Ipop |
| hing_strateg |              |              | strategy to  | tInternal    |
| y            |              |              | be used by   |              |
|              |              |              | Pardiso (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| pardiso_max_ | OT_INTEGER   | 4            | Maximal      | casadi::Ipop |
| droptol_corr |              |              | number of    | tInternal    |
| ections      |              |              | decreases of |              |
|              |              |              | drop         |              |
|              |              |              | tolerance    |              |
|              |              |              | during one   |              |
|              |              |              | solve. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| pardiso_max_ | OT_INTEGER   | 500          | Maximum      | casadi::Ipop |
| iter         |              |              | number of    | tInternal    |
|              |              |              | Krylov-      |              |
|              |              |              | Subspace     |              |
|              |              |              | Iteration    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| pardiso_msgl | OT_INTEGER   | 0            | Pardiso      | casadi::Ipop |
| vl           |              |              | message      | tInternal    |
|              |              |              | level (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| pardiso_out_ | OT_INTEGER   | 0            | Enables out- | casadi::Ipop |
| of_core_powe |              |              | of-core      | tInternal    |
| r            |              |              | variant of   |              |
|              |              |              | Pardiso (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| pardiso_redo | OT_STRING    | no           | Toggle for   | casadi::Ipop |
| _symbolic_fa |              |              | handling     | tInternal    |
| ct_only_if_i |              |              | case when    |              |
| nertia_wrong |              |              | elements     |              |
|              |              |              | were         |              |
|              |              |              | perturbed by |              |
|              |              |              | Pardiso.     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| pardiso_repe | OT_STRING    | no           | Interpretati | casadi::Ipop |
| ated_perturb |              |              | on of        | tInternal    |
| ation_means_ |              |              | perturbed    |              |
| singular     |              |              | elements.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| pardiso_skip | OT_STRING    | no           | Always       | casadi::Ipop |
| _inertia_che |              |              | pretend      | tInternal    |
| ck           |              |              | inertia is   |              |
|              |              |              | correct.     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| pass_nonline | OT_BOOLEAN   | False        | n/a          | casadi::Ipop |
| ar_variables |              |              |              | tInternal    |
+--------------+--------------+--------------+--------------+--------------+
| pen_des_fact | OT_REAL      | 0.200        | a parameter  | casadi::Ipop |
|              |              |              | used in      | tInternal    |
|              |              |              | penalty      |              |
|              |              |              | parameter    |              |
|              |              |              | computation  |              |
|              |              |              | (for Chen-   |              |
|              |              |              | Goldfarb     |              |
|              |              |              | line         |              |
|              |              |              | search).     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| pen_init_fac | OT_REAL      | 50           | a parameter  | casadi::Ipop |
|              |              |              | used to      | tInternal    |
|              |              |              | choose       |              |
|              |              |              | initial      |              |
|              |              |              | penalty para |              |
|              |              |              | meterswhen   |              |
|              |              |              | the          |              |
|              |              |              | regularized  |              |
|              |              |              | Newton       |              |
|              |              |              | method is    |              |
|              |              |              | used. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| pen_theta_ma | OT_REAL      | 10000        | Determines   | casadi::Ipop |
| x_fact       |              |              | upper bound  | tInternal    |
|              |              |              | for          |              |
|              |              |              | constraint   |              |
|              |              |              | violation in |              |
|              |              |              | the filter.  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| penalty_init | OT_REAL      | 100000       | Maximal      | casadi::Ipop |
| _max         |              |              | value for    | tInternal    |
|              |              |              | the intial   |              |
|              |              |              | penalty      |              |
|              |              |              | parameter    |              |
|              |              |              | (for Chen-   |              |
|              |              |              | Goldfarb     |              |
|              |              |              | line         |              |
|              |              |              | search).     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| penalty_init | OT_REAL      | 1            | Minimal      | casadi::Ipop |
| _min         |              |              | value for    | tInternal    |
|              |              |              | the intial   |              |
|              |              |              | penalty      |              |
|              |              |              | parameter    |              |
|              |              |              | for line     |              |
|              |              |              | search(for   |              |
|              |              |              | Chen-        |              |
|              |              |              | Goldfarb     |              |
|              |              |              | line         |              |
|              |              |              | search).     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| penalty_max  | OT_REAL      | 1.000e+30    | Maximal      | casadi::Ipop |
|              |              |              | value for    | tInternal    |
|              |              |              | the penalty  |              |
|              |              |              | parameter    |              |
|              |              |              | (for Chen-   |              |
|              |              |              | Goldfarb     |              |
|              |              |              | line         |              |
|              |              |              | search).     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| penalty_upda | OT_REAL      | 10           | LIFENG       | casadi::Ipop |
| te_compl_tol |              |              | WRITES THIS. | tInternal    |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| penalty_upda | OT_REAL      | 0.000        | Threshold    | casadi::Ipop |
| te_infeasibi |              |              | for infeasib | tInternal    |
| lity_tol     |              |              | ility in     |              |
|              |              |              | penalty      |              |
|              |              |              | parameter    |              |
|              |              |              | update test. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| perturb_alwa | OT_STRING    | no           | Active       | casadi::Ipop |
| ys_cd        |              |              | permanent    | tInternal    |
|              |              |              | perturbation |              |
|              |              |              | of           |              |
|              |              |              | constraint l |              |
|              |              |              | inearization |              |
|              |              |              | . (see IPOPT |              |
|              |              |              | documentatio |              |
|              |              |              | n)           |              |
+--------------+--------------+--------------+--------------+--------------+
| perturb_dec_ | OT_REAL      | 0.333        | Decrease     | casadi::Ipop |
| fact         |              |              | factor for   | tInternal    |
|              |              |              | x-s perturba |              |
|              |              |              | tion. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| perturb_inc_ | OT_REAL      | 8            | Increase     | casadi::Ipop |
| fact         |              |              | factor for   | tInternal    |
|              |              |              | x-s perturba |              |
|              |              |              | tion. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| perturb_inc_ | OT_REAL      | 100          | Increase     | casadi::Ipop |
| fact_first   |              |              | factor for   | tInternal    |
|              |              |              | x-s          |              |
|              |              |              | perturbation |              |
|              |              |              | for very     |              |
|              |              |              | first pertur |              |
|              |              |              | bation. (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| piecewisepen | OT_REAL      | 0.000        | LIFENG       | casadi::Ipop |
| alty_gamma_i |              |              | WRITES THIS. | tInternal    |
| nfeasi       |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| piecewisepen | OT_REAL      | 0.000        | LIFENG       | casadi::Ipop |
| alty_gamma_o |              |              | WRITES THIS. | tInternal    |
| bj           |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| point_pertur | OT_REAL      | 10           | Maximal      | casadi::Ipop |
| bation_radiu |              |              | perturbation | tInternal    |
| s            |              |              | of an        |              |
|              |              |              | evaluation   |              |
|              |              |              | point. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| print_freque | OT_INTEGER   | 1            | Determines   | casadi::Ipop |
| ncy_iter     |              |              | at which     | tInternal    |
|              |              |              | iteration    |              |
|              |              |              | frequency    |              |
|              |              |              | the          |              |
|              |              |              | summarizing  |              |
|              |              |              | iteration    |              |
|              |              |              | output line  |              |
|              |              |              | should be    |              |
|              |              |              | printed.     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| print_freque | OT_REAL      | 0            | Determines   | casadi::Ipop |
| ncy_time     |              |              | at which     | tInternal    |
|              |              |              | time         |              |
|              |              |              | frequency    |              |
|              |              |              | the          |              |
|              |              |              | summarizing  |              |
|              |              |              | iteration    |              |
|              |              |              | output line  |              |
|              |              |              | should be    |              |
|              |              |              | printed.     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| print_info_s | OT_STRING    | no           | Enables      | casadi::Ipop |
| tring        |              |              | printing of  | tInternal    |
|              |              |              | additional   |              |
|              |              |              | info string  |              |
|              |              |              | at end of    |              |
|              |              |              | iteration    |              |
|              |              |              | output. (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| print_level  | OT_INTEGER   | 5            | Output       | casadi::Ipop |
|              |              |              | verbosity    | tInternal    |
|              |              |              | level. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| print_option | OT_STRING    | no           | Switch to    | casadi::Ipop |
| s_documentat |              |              | print all    | tInternal    |
| ion          |              |              | algorithmic  |              |
|              |              |              | options.     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| print_option | OT_STRING    | no           | Undocumented | casadi::Ipop |
| s_latex_mode |              |              | (see IPOPT d | tInternal    |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| print_time   | OT_BOOLEAN   | True         | print        | casadi::Ipop |
|              |              |              | information  | tInternal    |
|              |              |              | about        |              |
|              |              |              | execution    |              |
|              |              |              | time         |              |
+--------------+--------------+--------------+--------------+--------------+
| print_timing | OT_STRING    | no           | Switch to    | casadi::Ipop |
| _statistics  |              |              | print timing | tInternal    |
|              |              |              | statistics.  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| print_user_o | OT_STRING    | no           | Print all    | casadi::Ipop |
| ptions       |              |              | options set  | tInternal    |
|              |              |              | by the user. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| quality_func | OT_STRING    | none         | The          | casadi::Ipop |
| tion_balanci |              |              | balancing    | tInternal    |
| ng_term      |              |              | term         |              |
|              |              |              | included in  |              |
|              |              |              | the quality  |              |
|              |              |              | function for |              |
|              |              |              | centrality.  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| quality_func | OT_STRING    | none         | The penalty  | casadi::Ipop |
| tion_central |              |              | term for     | tInternal    |
| ity          |              |              | centrality   |              |
|              |              |              | that is      |              |
|              |              |              | included in  |              |
|              |              |              | quality      |              |
|              |              |              | function.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| quality_func | OT_INTEGER   | 8            | Maximum      | casadi::Ipop |
| tion_max_sec |              |              | number of    | tInternal    |
| tion_steps   |              |              | search steps |              |
|              |              |              | during       |              |
|              |              |              | direct       |              |
|              |              |              | search       |              |
|              |              |              | procedure    |              |
|              |              |              | determining  |              |
|              |              |              | the optimal  |              |
|              |              |              | centering    |              |
|              |              |              | parameter.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| quality_func | OT_STRING    | 2-norm-      | Norm used    | casadi::Ipop |
| tion_norm_ty |              | squared      | for          | tInternal    |
| pe           |              |              | components   |              |
|              |              |              | of the       |              |
|              |              |              | quality      |              |
|              |              |              | function.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| quality_func | OT_REAL      | 0            | Tolerance    | casadi::Ipop |
| tion_section |              |              | for the      | tInternal    |
| _qf_tol      |              |              | golden       |              |
|              |              |              | section      |              |
|              |              |              | search       |              |
|              |              |              | procedure    |              |
|              |              |              | determining  |              |
|              |              |              | the optimal  |              |
|              |              |              | centering    |              |
|              |              |              | parameter    |              |
|              |              |              | (in the      |              |
|              |              |              | function     |              |
|              |              |              | value        |              |
|              |              |              | space). (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| quality_func | OT_REAL      | 0.010        | Tolerance    | casadi::Ipop |
| tion_section |              |              | for the      | tInternal    |
| _sigma_tol   |              |              | section      |              |
|              |              |              | search       |              |
|              |              |              | procedure    |              |
|              |              |              | determining  |              |
|              |              |              | the optimal  |              |
|              |              |              | centering    |              |
|              |              |              | parameter    |              |
|              |              |              | (in sigma    |              |
|              |              |              | space). (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| recalc_y     | OT_STRING    | no           | Tells the    | casadi::Ipop |
|              |              |              | algorithm to | tInternal    |
|              |              |              | recalculate  |              |
|              |              |              | the equality |              |
|              |              |              | and          |              |
|              |              |              | inequality   |              |
|              |              |              | multipliers  |              |
|              |              |              | as least     |              |
|              |              |              | square       |              |
|              |              |              | estimates.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| recalc_y_fea | OT_REAL      | 0.000        | Feasibility  | casadi::Ipop |
| s_tol        |              |              | threshold    | tInternal    |
|              |              |              | for recomput |              |
|              |              |              | ation of     |              |
|              |              |              | multipliers. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| replace_boun | OT_STRING    | no           | Indicates if | casadi::Ipop |
| ds           |              |              | all variable | tInternal    |
|              |              |              | bounds       |              |
|              |              |              | should be    |              |
|              |              |              | replaced by  |              |
|              |              |              | inequality   |              |
|              |              |              | constraints  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| required_inf | OT_REAL      | 0.900        | Required     | casadi::Ipop |
| easibility_r |              |              | reduction of | tInternal    |
| eduction     |              |              | infeasibilit |              |
|              |              |              | y before     |              |
|              |              |              | leaving      |              |
|              |              |              | restoration  |              |
|              |              |              | phase. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| residual_imp | OT_REAL      | 1.000        | Minimal      | casadi::Ipop |
| rovement_fac |              |              | required     | tInternal    |
| tor          |              |              | reduction of |              |
|              |              |              | residual     |              |
|              |              |              | test ratio   |              |
|              |              |              | in iterative |              |
|              |              |              | refinement.  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| residual_rat | OT_REAL      | 0.000        | Iterative    | casadi::Ipop |
| io_max       |              |              | refinement   | tInternal    |
|              |              |              | tolerance    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| residual_rat | OT_REAL      | 0.000        | Threshold    | casadi::Ipop |
| io_singular  |              |              | for          | tInternal    |
|              |              |              | declaring    |              |
|              |              |              | linear       |              |
|              |              |              | system       |              |
|              |              |              | singular     |              |
|              |              |              | after failed |              |
|              |              |              | iterative    |              |
|              |              |              | refinement.  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| resto_failur | OT_REAL      | 0            | Threshold    | casadi::Ipop |
| e_feasibilit |              |              | for primal i | tInternal    |
| y_threshold  |              |              | nfeasibility |              |
|              |              |              | to declare   |              |
|              |              |              | failure of   |              |
|              |              |              | restoration  |              |
|              |              |              | phase. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| resto_penalt | OT_REAL      | 1000         | Penalty      | casadi::Ipop |
| y_parameter  |              |              | parameter in | tInternal    |
|              |              |              | the          |              |
|              |              |              | restoration  |              |
|              |              |              | phase        |              |
|              |              |              | objective    |              |
|              |              |              | function.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| resto_proxim | OT_REAL      | 1            | Weighting    | casadi::Ipop |
| ity_weight   |              |              | factor for   | tInternal    |
|              |              |              | the          |              |
|              |              |              | proximity    |              |
|              |              |              | term in      |              |
|              |              |              | restoration  |              |
|              |              |              | phase        |              |
|              |              |              | objective.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| rho          | OT_REAL      | 0.100        | Value in     | casadi::Ipop |
|              |              |              | penalty      | tInternal    |
|              |              |              | parameter    |              |
|              |              |              | update       |              |
|              |              |              | formula.     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| s_max        | OT_REAL      | 100          | Scaling      | casadi::Ipop |
|              |              |              | threshold    | tInternal    |
|              |              |              | for the NLP  |              |
|              |              |              | error. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| s_phi        | OT_REAL      | 2.300        | Exponent for | casadi::Ipop |
|              |              |              | linear       | tInternal    |
|              |              |              | barrier      |              |
|              |              |              | function     |              |
|              |              |              | model in the |              |
|              |              |              | switching    |              |
|              |              |              | rule. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| s_theta      | OT_REAL      | 1.100        | Exponent for | casadi::Ipop |
|              |              |              | current      | tInternal    |
|              |              |              | constraint   |              |
|              |              |              | violation in |              |
|              |              |              | the          |              |
|              |              |              | switching    |              |
|              |              |              | rule. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| sb           | OT_STRING    | no           | (see IPOPT d | casadi::Ipop |
|              |              |              | ocumentation | tInternal    |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| sigma_max    | OT_REAL      | 100          | Maximum      | casadi::Ipop |
|              |              |              | value of the | tInternal    |
|              |              |              | centering    |              |
|              |              |              | parameter.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| sigma_min    | OT_REAL      | 0.000        | Minimum      | casadi::Ipop |
|              |              |              | value of the | tInternal    |
|              |              |              | centering    |              |
|              |              |              | parameter.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| skip_corr_if | OT_STRING    | yes          | Skip the     | casadi::Ipop |
| _neg_curv    |              |              | corrector    | tInternal    |
|              |              |              | step in      |              |
|              |              |              | negative     |              |
|              |              |              | curvature    |              |
|              |              |              | iteration (u |              |
|              |              |              | nsupported!) |              |
|              |              |              | . (see IPOPT |              |
|              |              |              | documentatio |              |
|              |              |              | n)           |              |
+--------------+--------------+--------------+--------------+--------------+
| skip_corr_in | OT_STRING    | yes          | Skip the     | casadi::Ipop |
| _monotone_mo |              |              | corrector    | tInternal    |
| de           |              |              | step during  |              |
|              |              |              | monotone     |              |
|              |              |              | barrier      |              |
|              |              |              | parameter    |              |
|              |              |              | mode (unsupp |              |
|              |              |              | orted!).     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| skip_finaliz | OT_STRING    | no           | Indicates if | casadi::Ipop |
| e_solution_c |              |              | call to NLP: | tInternal    |
| all          |              |              | :FinalizeSol |              |
|              |              |              | ution after  |              |
|              |              |              | optimization |              |
|              |              |              | should be    |              |
|              |              |              | suppressed   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| slack_bound_ | OT_REAL      | 0.010        | Desired      | casadi::Ipop |
| frac         |              |              | minimum      | tInternal    |
|              |              |              | relative     |              |
|              |              |              | distance     |              |
|              |              |              | from the     |              |
|              |              |              | initial      |              |
|              |              |              | slack to     |              |
|              |              |              | bound. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| slack_bound_ | OT_REAL      | 0.010        | Desired      | casadi::Ipop |
| push         |              |              | minimum      | tInternal    |
|              |              |              | absolute     |              |
|              |              |              | distance     |              |
|              |              |              | from the     |              |
|              |              |              | initial      |              |
|              |              |              | slack to     |              |
|              |              |              | bound. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| slack_move   | OT_REAL      | 0.000        | Correction   | casadi::Ipop |
|              |              |              | size for     | tInternal    |
|              |              |              | very small   |              |
|              |              |              | slacks. (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| soft_resto_p | OT_REAL      | 1.000        | Required     | casadi::Ipop |
| derror_reduc |              |              | reduction in | tInternal    |
| tion_factor  |              |              | primal-dual  |              |
|              |              |              | error in the |              |
|              |              |              | soft         |              |
|              |              |              | restoration  |              |
|              |              |              | phase. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| start_with_r | OT_STRING    | no           | Tells        | casadi::Ipop |
| esto         |              |              | algorithm to | tInternal    |
|              |              |              | switch to    |              |
|              |              |              | restoration  |              |
|              |              |              | phase in     |              |
|              |              |              | first        |              |
|              |              |              | iteration.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| suppress_all | OT_STRING    | no           | Undocumented | casadi::Ipop |
| _output      |              |              | (see IPOPT d | tInternal    |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| tau_min      | OT_REAL      | 0.990        | Lower bound  | casadi::Ipop |
|              |              |              | on fraction- | tInternal    |
|              |              |              | to-the-      |              |
|              |              |              | boundary     |              |
|              |              |              | parameter    |              |
|              |              |              | tau. (see    |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| theta_max_fa | OT_REAL      | 10000        | Determines   | casadi::Ipop |
| ct           |              |              | upper bound  | tInternal    |
|              |              |              | for          |              |
|              |              |              | constraint   |              |
|              |              |              | violation in |              |
|              |              |              | the filter.  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| theta_min    | OT_REAL      | 0.000        | LIFENG       | casadi::Ipop |
|              |              |              | WRITES THIS. | tInternal    |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| theta_min_fa | OT_REAL      | 0.000        | Determines   | casadi::Ipop |
| ct           |              |              | constraint   | tInternal    |
|              |              |              | violation    |              |
|              |              |              | threshold in |              |
|              |              |              | the          |              |
|              |              |              | switching    |              |
|              |              |              | rule. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| tiny_step_to | OT_REAL      | 0.000        | Tolerance    | casadi::Ipop |
| l            |              |              | for          | tInternal    |
|              |              |              | detecting    |              |
|              |              |              | numerically  |              |
|              |              |              | insignifican |              |
|              |              |              | t steps.     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| tiny_step_y_ | OT_REAL      | 0.010        | Tolerance    | casadi::Ipop |
| tol          |              |              | for quitting | tInternal    |
|              |              |              | because of   |              |
|              |              |              | numerically  |              |
|              |              |              | insignifican |              |
|              |              |              | t steps.     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| tol          | OT_REAL      | 0.000        | Desired      | casadi::Ipop |
|              |              |              | convergence  | tInternal    |
|              |              |              | tolerance    |              |
|              |              |              | (relative).  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| var_integer_ | OT_DICTIONAR | None         | Integer      | casadi::Ipop |
| md           | Y            |              | metadata (a  | tInternal    |
|              |              |              | dictionary   |              |
|              |              |              | with lists   |              |
|              |              |              | of integers) |              |
|              |              |              | about        |              |
|              |              |              | variables to |              |
|              |              |              | be passed to |              |
|              |              |              | IPOPT        |              |
+--------------+--------------+--------------+--------------+--------------+
| var_numeric_ | OT_DICTIONAR | None         | Numeric      | casadi::Ipop |
| md           | Y            |              | metadata (a  | tInternal    |
|              |              |              | dictionary   |              |
|              |              |              | with lists   |              |
|              |              |              | of reals)    |              |
|              |              |              | about        |              |
|              |              |              | variables to |              |
|              |              |              | be passed to |              |
|              |              |              | IPOPT        |              |
+--------------+--------------+--------------+--------------+--------------+
| var_string_m | OT_DICTIONAR | None         | String       | casadi::Ipop |
| d            | Y            |              | metadata (a  | tInternal    |
|              |              |              | dictionary   |              |
|              |              |              | with lists   |              |
|              |              |              | of strings)  |              |
|              |              |              | about        |              |
|              |              |              | variables to |              |
|              |              |              | be passed to |              |
|              |              |              | IPOPT        |              |
+--------------+--------------+--------------+--------------+--------------+
| vartheta     | OT_REAL      | 0.500        | a parameter  | casadi::Ipop |
|              |              |              | used to      | tInternal    |
|              |              |              | check if the |              |
|              |              |              | fast         |              |
|              |              |              | direction    |              |
|              |              |              | can be used  |              |
|              |              |              | asthe line   |              |
|              |              |              | search       |              |
|              |              |              | direction    |              |
|              |              |              | (for Chen-   |              |
|              |              |              | Goldfarb     |              |
|              |              |              | line         |              |
|              |              |              | search).     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+
| warm_start_b | OT_REAL      | 0.001        | same as      | casadi::Ipop |
| ound_frac    |              |              | bound_frac   | tInternal    |
|              |              |              | for the      |              |
|              |              |              | regular      |              |
|              |              |              | initializer. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| warm_start_b | OT_REAL      | 0.001        | same as      | casadi::Ipop |
| ound_push    |              |              | bound_push   | tInternal    |
|              |              |              | for the      |              |
|              |              |              | regular      |              |
|              |              |              | initializer. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| warm_start_e | OT_STRING    | no           | Tells        | casadi::Ipop |
| ntire_iterat |              |              | algorithm    | tInternal    |
| e            |              |              | whether to   |              |
|              |              |              | use the GetW |              |
|              |              |              | armStartIter |              |
|              |              |              | ate method   |              |
|              |              |              | in the NLP.  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| warm_start_i | OT_STRING    | no           | Warm-start   | casadi::Ipop |
| nit_point    |              |              | for initial  | tInternal    |
|              |              |              | point (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| warm_start_m | OT_REAL      | 0.001        | same as mult | casadi::Ipop |
| ult_bound_pu |              |              | _bound_push  | tInternal    |
| sh           |              |              | for the      |              |
|              |              |              | regular      |              |
|              |              |              | initializer. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| warm_start_m | OT_REAL      | 1000000      | Maximum      | casadi::Ipop |
| ult_init_max |              |              | initial      | tInternal    |
|              |              |              | value for    |              |
|              |              |              | the equality |              |
|              |              |              | multipliers. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| warm_start_s | OT_STRING    | no           | Indicates    | casadi::Ipop |
| ame_structur |              |              | whether a    | tInternal    |
| e            |              |              | problem with |              |
|              |              |              | a structure  |              |
|              |              |              | identical to |              |
|              |              |              | the previous |              |
|              |              |              | one is to be |              |
|              |              |              | solved. (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| warm_start_s | OT_REAL      | 0.001        | same as slac | casadi::Ipop |
| lack_bound_f |              |              | k_bound_frac | tInternal    |
| rac          |              |              | for the      |              |
|              |              |              | regular      |              |
|              |              |              | initializer. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| warm_start_s | OT_REAL      | 0.001        | same as slac | casadi::Ipop |
| lack_bound_p |              |              | k_bound_push | tInternal    |
| ush          |              |              | for the      |              |
|              |              |              | regular      |              |
|              |              |              | initializer. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| warm_start_t | OT_REAL      | 0            | Unsupported! | casadi::Ipop |
| arget_mu     |              |              | (see IPOPT d | tInternal    |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| warn_initial | OT_BOOLEAN   | false        | Warn if the  | casadi::NLPS |
| _bounds      |              |              | initial      | olverInterna |
|              |              |              | guess does   | l            |
|              |              |              | not satisfy  |              |
|              |              |              | LBX and UBX  |              |
+--------------+--------------+--------------+--------------+--------------+
| watchdog_sho | OT_INTEGER   | 10           | Number of    | casadi::Ipop |
| rtened_iter_ |              |              | shortened    | tInternal    |
| trigger      |              |              | iterations   |              |
|              |              |              | that trigger |              |
|              |              |              | the          |              |
|              |              |              | watchdog.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| watchdog_tri | OT_INTEGER   | 3            | Maximum      | casadi::Ipop |
| al_iter_max  |              |              | number of    | tInternal    |
|              |              |              | watchdog     |              |
|              |              |              | iterations.  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| wsmp_iterati | OT_STRING    | no           | Switches to  | casadi::Ipop |
| ve           |              |              | iterative    | tInternal    |
|              |              |              | solver in    |              |
|              |              |              | WSMP. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available monitors
+-------------+--------------------------+
|     Id      |         Used in          |
+=============+==========================+
| eval_f      | casadi::IpoptInternal    |
+-------------+--------------------------+
| eval_g      | casadi::IpoptInternal    |
+-------------+--------------------------+
| eval_grad_f | casadi::IpoptInternal    |
+-------------+--------------------------+
| eval_h      | casadi::IpoptInternal    |
+-------------+--------------------------+
| eval_jac_g  | casadi::IpoptInternal    |
+-------------+--------------------------+
| inputs      | casadi::FunctionInternal |
+-------------+--------------------------+
| outputs     | casadi::FunctionInternal |
+-------------+--------------------------+

>List of available stats
+--------------------+-----------------------+
|         Id         |        Used in        |
+====================+=======================+
| con_integer_md     | casadi::IpoptInternal |
+--------------------+-----------------------+
| con_numeric_md     | casadi::IpoptInternal |
+--------------------+-----------------------+
| con_string_md      | casadi::IpoptInternal |
+--------------------+-----------------------+
| iter_count         | casadi::IpoptInternal |
+--------------------+-----------------------+
| iteration          | casadi::IpoptInternal |
+--------------------+-----------------------+
| iterations         | casadi::IpoptInternal |
+--------------------+-----------------------+
| n_eval_f           | casadi::IpoptInternal |
+--------------------+-----------------------+
| n_eval_g           | casadi::IpoptInternal |
+--------------------+-----------------------+
| n_eval_grad_f      | casadi::IpoptInternal |
+--------------------+-----------------------+
| n_eval_h           | casadi::IpoptInternal |
+--------------------+-----------------------+
| n_eval_jac_g       | casadi::IpoptInternal |
+--------------------+-----------------------+
| return_status      | casadi::IpoptInternal |
+--------------------+-----------------------+
| t_callback_fun     | casadi::IpoptInternal |
+--------------------+-----------------------+
| t_callback_prepare | casadi::IpoptInternal |
+--------------------+-----------------------+
| t_eval_f           | casadi::IpoptInternal |
+--------------------+-----------------------+
| t_eval_g           | casadi::IpoptInternal |
+--------------------+-----------------------+
| t_eval_grad_f      | casadi::IpoptInternal |
+--------------------+-----------------------+
| t_eval_h           | casadi::IpoptInternal |
+--------------------+-----------------------+
| t_eval_jac_g       | casadi::IpoptInternal |
+--------------------+-----------------------+
| t_mainloop         | casadi::IpoptInternal |
+--------------------+-----------------------+
| var_integer_md     | casadi::IpoptInternal |
+--------------------+-----------------------+
| var_numeric_md     | casadi::IpoptInternal |
+--------------------+-----------------------+
| var_string_md      | casadi::IpoptInternal |
+--------------------+-----------------------+

Diagrams

C++ includes: ipopt_solver.hpp ";

%feature("docstring") casadi::IpoptSolver::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::IpoptSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::IpoptSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::IpoptSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::IpoptSolver::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::IpoptSolver::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::IpoptSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::IpoptSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::IpoptSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::IpoptSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::IpoptSolver::spCanEvaluate "[INTERNAL]  Is
the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::IpoptSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::IpoptSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::IpoptSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::IpoptSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::IpoptSolver::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::IpoptSolver::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::IpoptSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::IpoptSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::IpoptSolver::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::IpoptSolver::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::IpoptSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::IpoptSolver::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::IpoptSolver::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::IpoptSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::IpoptSolver::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::IpoptSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::IpoptSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::IpoptSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::IpoptSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::IpoptSolver::gradF "

Access the objective gradient function>Input scheme: casadi::GradFInput
(GRADF_NUM_IN = 3) [gradFIn] +-----------+-------+---------------------+ |
Full name | Short |     Description     |
+===========+=======+=====================+ | GRADF_X   | x     | Decision
variable . | +-----------+-------+---------------------+ | GRADF_P   | p
| Fixed parameter .   | +-----------+-------+---------------------+

";

%feature("docstring") casadi::IpoptSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::IpoptSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::IpoptSolver::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::IpoptSolver::setQPOptions "

Set options that make the NLP solver more suitable for solving QPs.

";

%feature("docstring") casadi::IpoptSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::IpoptSolver::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::IpoptSolver::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::IpoptSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::IpoptSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::IpoptSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::IpoptSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::IpoptSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::IpoptSolver::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::IpoptSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::IpoptSolver::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::IpoptSolver::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") casadi::IpoptSolver::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") casadi::IpoptSolver::IpoptSolver "

>  casadi::IpoptSolver::IpoptSolver()
------------------------------------------------------------------------

Default constructor.

>  casadi::IpoptSolver::IpoptSolver(const Function &nlp)
------------------------------------------------------------------------

Create an NLP solver instance.

";

%feature("docstring") casadi::IpoptSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::IpoptSolver::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::IpoptSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::IpoptSolver::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::IpoptSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::IpoptSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::IpoptSolver::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::IpoptSolver::schemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::IpoptSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::IpoptSolver::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::IpoptSolver::evaluate "

Evaluate.

";

%feature("docstring") casadi::IpoptSolver::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::IpoptSolver::getReportConstraints "";

%feature("docstring") casadi::IpoptSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::IpoptSolver::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") casadi::IpoptSolver::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::IpoptSolver::getOption "

get an option value

";

%feature("docstring") casadi::IpoptSolver::isInit "

Is initialized?

";

%feature("docstring") casadi::IpoptSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::IpoptSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::IpoptSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::IpoptSolver::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::IpoptSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::IpoptSolver::getReducedHessian "

Get the reduced Hessian. Requires a patched sIPOPT installation, see CasADi
documentation.

";

%feature("docstring") casadi::IpoptSolver::hasOption "

check if there is an option str

";

%feature("docstring") casadi::IpoptSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::IpoptSolver::isNull "

Is a null pointer?

";

%feature("docstring") casadi::IpoptSolver::jacG "

Access the Jacobian of the constraint function.

>Input scheme: casadi::HessLagInput (HESSLAG_NUM_IN = 5) [hessLagIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| HESSLAG_X              | x                      | Decision variable .    |
+------------------------+------------------------+------------------------+
| HESSLAG_P              | p                      | Fixed parameter .      |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_F          | lam_f                  | Multiplier for f. Just |
|                        |                        | a scalar factor for    |
|                        |                        | the objective that the |
|                        |                        | NLP solver might use   |
|                        |                        | to scale the           |
|                        |                        | objective.             |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_G          | lam_g                  | Multiplier for g .     |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::HessLagOutput (HESSLAG_NUM_OUT = 6) [hessLagOut]
+----------------+--------+------------------------------------------------+
|   Full name    | Short  |                  Description                   |
+================+========+================================================+
| HESSLAG_HESS   | hess   | Hessian of the Lagrangian .                    |
+----------------+--------+------------------------------------------------+
| HESSLAG_F      | f      | Objective function .                           |
+----------------+--------+------------------------------------------------+
| HESSLAG_G      | g      | Constraint function .                          |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_X | grad_x | Gradient of the Lagrangian with respect to x . |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_P | grad_p | Gradient of the Lagrangian with respect to p . |
+----------------+--------+------------------------------------------------+

";

%feature("docstring") casadi::IpoptSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::IpoptSolver::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::IpoptSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::IpoptSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::IpoptSolver::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::IpoptSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";


// File: classcasadi_1_1IpoptUserClass.xml
%feature("docstring") casadi::IpoptUserClass::get_starting_point "[INTERNAL]  Method to return the starting point for the algorithm

";

%feature("docstring") casadi::IpoptUserClass::finalize_solution "[INTERNAL]
This method is called when the algorithm is complete so the TNLP can
store/write the solution

";

%feature("docstring") casadi::IpoptUserClass "[INTERNAL] C++ includes:
ipopt_nlp.hpp ";

%feature("docstring")
casadi::IpoptUserClass::get_list_of_nonlinear_variables "[INTERNAL]
Specify which variables that appear in the Hessian

";

%feature("docstring") casadi::IpoptUserClass::eval_grad_f "[INTERNAL]
Method to return the gradient of the objective

";

%feature("docstring") casadi::IpoptUserClass::get_var_con_metadata "[INTERNAL]  Allows setting information about variables and constraints

";

%feature("docstring") casadi::IpoptUserClass::~IpoptUserClass "[INTERNAL]
";

%feature("docstring") casadi::IpoptUserClass::eval_g "[INTERNAL]  Method to
return the constraint residuals

";

%feature("docstring") casadi::IpoptUserClass::get_nlp_info "[INTERNAL]
Method to return some info about the nlp

";

%feature("docstring") casadi::IpoptUserClass::eval_f "[INTERNAL]  Method to
return the objective value

";

%feature("docstring")
casadi::IpoptUserClass::get_number_of_nonlinear_variables "[INTERNAL]
Specify the number of variables that appear in the Hessian

";

%feature("docstring") casadi::IpoptUserClass::eval_jac_g "[INTERNAL]
Method to return: 1) The structure of the Jacobian (if \"values\" is NULL)
2) The values of the Jacobian (if \"values\" is not NULL)

";

%feature("docstring") casadi::IpoptUserClass::finalize_metadata "[INTERNAL]
Retrieve information about variables and constraints

";

%feature("docstring") casadi::IpoptUserClass::get_bounds_info "[INTERNAL]
Method to return the bounds for my problem

";

%feature("docstring") casadi::IpoptUserClass::eval_h "[INTERNAL]  Method to
return: 1) The structure of the hessian of the Lagrangian (if \"values\" is
NULL) 2) The values of the hessian of the Lagrangian (if \"values\" is not
NULL)

";

%feature("docstring") casadi::IpoptUserClass::intermediate_callback "[INTERNAL]  This method is called at every iteration

Code copied from TNLPAdapter::FinalizeSolution See also:http://list.coin-
or.org/pipermail/ipopt/2010-July/002078.html ";

%feature("docstring") casadi::IpoptUserClass::IpoptUserClass "[INTERNAL] ";


// File: classcasadi_1_1JacGInputIOSchemeVector.xml
%feature("docstring") casadi::JacGInputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::JacGInputIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::JacGInputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring")
casadi::JacGInputIOSchemeVector::JacGInputIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::JacGInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::JacGInputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::JacGInputIOSchemeVector "[INTERNAL]  Helper
function for 'JacGInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::JacGInputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::JacGInputIOSchemeVector::vector "[INTERNAL]
";


// File: classcasadi_1_1JacGOutputIOSchemeVector.xml
%feature("docstring") casadi::JacGOutputIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::JacGOutputIOSchemeVector "[INTERNAL]  Helper
function for 'JacGOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::JacGOutputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::JacGOutputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::JacGOutputIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") casadi::JacGOutputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::JacGOutputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring")
casadi::JacGOutputIOSchemeVector::JacGOutputIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::JacGOutputIOSchemeVector::__getitem__ "[INTERNAL] ";


// File: classcasadi_1_1KinsolSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::KinsolSolver::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::KinsolSolver::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::KinsolSolver::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::KinsolSolver::isInit "

Is initialized?

";

%feature("docstring") casadi::KinsolSolver::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") casadi::KinsolSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::KinsolSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::KinsolSolver::isNull "

Is a null pointer?

";

%feature("docstring") casadi::KinsolSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::KinsolSolver::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::KinsolSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::KinsolSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::KinsolSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::KinsolSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::KinsolSolver::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::KinsolSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::KinsolSolver::evaluate "

Evaluate.

";

%feature("docstring") casadi::KinsolSolver::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::KinsolSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::KinsolSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::KinsolSolver::checkInputs "[INTERNAL]  Check
if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::KinsolSolver::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::KinsolSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::KinsolSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::KinsolSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::KinsolSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::KinsolSolver::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::KinsolSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::KinsolSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::KinsolSolver::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::KinsolSolver::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::KinsolSolver::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::KinsolSolver::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::KinsolSolver::getF "

Access F.

";

%feature("docstring") casadi::KinsolSolver::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") casadi::KinsolSolver::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::KinsolSolver::KinsolSolver "

>  casadi::KinsolSolver::KinsolSolver()
------------------------------------------------------------------------

Default constructor.

>  casadi::KinsolSolver::KinsolSolver(const Function &f, const Function &jac=Function(), const LinearSolver &linsol=LinearSolver())
------------------------------------------------------------------------

Create an KINSOL instance.

Parameters:
-----------

f:   Function mapping from (n+1) inputs to 1 output

";

%feature("docstring") casadi::KinsolSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::KinsolSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::KinsolSolver::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::KinsolSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::KinsolSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::KinsolSolver::getOption "

get an option value

";

%feature("docstring") casadi::KinsolSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::KinsolSolver::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::KinsolSolver::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::KinsolSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::KinsolSolver::spCanEvaluate "[INTERNAL]  Is
the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::KinsolSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::KinsolSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::KinsolSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::KinsolSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::KinsolSolver::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::KinsolSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::KinsolSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::KinsolSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::KinsolSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::KinsolSolver::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::KinsolSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::KinsolSolver::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::KinsolSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::KinsolSolver "

Kinsol solver class.

The equation:

F(z, x1, x2, ..., xn) == 0

where d_F/dz is invertible, implicitly defines the equation:

z := G(x1, x2, ..., xn)

F should be an Function mapping from (n+1) inputs to m outputs. The first
output is the residual that should be zero.

ImplicitFunction (G) is an Function mapping from n inputs to m outputs. n
may be zero. The first output is the solved for z.

You can provide an initial guess for z by setting output(0) of
ImplicitFunction. You can provide an initial guess by setting output(0).  A
good initial guess may be needed to avoid errors like \"The linear solver's
setup function failed in an unrecoverable manner.\"

The constraints option expects an integer entry for each variable u:  0 then
no constraint is imposed on ui. 1 then ui will be constrained to be ui >=
0.0. 1 then ui will be constrained to be ui <= 0.0. 2 then ui will be
constrained to be ui > 0.0. 2 then ui will be constrained to be ui < 0.0.

See:   ImplicitFunction for more information

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| abstol       | OT_REAL      | 0.000        | Stopping     | casadi::Kins |
|              |              |              | criterion    | olInternal   |
|              |              |              | tolerance    |              |
+--------------+--------------+--------------+--------------+--------------+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| constraints  | OT_INTEGERVE | GenericType( | Constrain    | casadi::Impl |
|              | CTOR         | )            | the          | icitFunction |
|              |              |              | unknowns. 0  | Internal     |
|              |              |              | (default):   |              |
|              |              |              | no           |              |
|              |              |              | constraint   |              |
|              |              |              | on ui, 1: ui |              |
|              |              |              | >= 0.0, -1:  |              |
|              |              |              | ui <= 0.0,   |              |
|              |              |              | 2: ui > 0.0, |              |
|              |              |              | -2: ui <     |              |
|              |              |              | 0.0.         |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| disable_inte | OT_BOOLEAN   | false        | Disable      | casadi::Kins |
| rnal_warning |              |              | KINSOL       | olInternal   |
| s            |              |              | internal     |              |
|              |              |              | warning      |              |
|              |              |              | messages     |              |
+--------------+--------------+--------------+--------------+--------------+
| exact_jacobi | OT_BOOLEAN   | true         |              | casadi::Kins |
| an           |              |              |              | olInternal   |
+--------------+--------------+--------------+--------------+--------------+
| f_scale      | OT_REALVECTO |              |              | casadi::Kins |
|              | R            |              |              | olInternal   |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| implicit_inp | OT_INTEGER   | 0            | Index of the | casadi::Impl |
| ut           |              |              | input that   | icitFunction |
|              |              |              | corresponds  | Internal     |
|              |              |              | to the       |              |
|              |              |              | actual root- |              |
|              |              |              | finding      |              |
+--------------+--------------+--------------+--------------+--------------+
| implicit_out | OT_INTEGER   | 0            | Index of the | casadi::Impl |
| put          |              |              | output that  | icitFunction |
|              |              |              | corresponds  | Internal     |
|              |              |              | to the       |              |
|              |              |              | actual root- |              |
|              |              |              | finding      |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| iterative_so | OT_STRING    | \"gmres\"      | gmres|bcgsta | casadi::Kins |
| lver         |              |              | b|tfqmr      | olInternal   |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_LINEARSOL | GenericType( | User-defined | casadi::Impl |
| r            | VER          | )            | linear       | icitFunction |
|              |              |              | solver       | Internal     |
|              |              |              | class.       |              |
|              |              |              | Needed for s |              |
|              |              |              | ensitivities |              |
|              |              |              | .            |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_DICTIONAR | GenericType( | Options to   | casadi::Impl |
| r_options    | Y            | )            | be passed to | icitFunction |
|              |              |              | the linear   | Internal     |
|              |              |              | solver.      |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_STRING    | \"dense\"      | dense|banded | casadi::Kins |
| r_type       |              |              | |iterative|u | olInternal   |
|              |              |              | ser_defined  |              |
+--------------+--------------+--------------+--------------+--------------+
| lower_bandwi | OT_INTEGER   |              |              | casadi::Kins |
| dth          |              |              |              | olInternal   |
+--------------+--------------+--------------+--------------+--------------+
| max_iter     | OT_INTEGER   | 0            | Maximum      | casadi::Kins |
|              |              |              | number of    | olInternal   |
|              |              |              | Newton       |              |
|              |              |              | iterations.  |              |
|              |              |              | Putting 0    |              |
|              |              |              | sets the     |              |
|              |              |              | default      |              |
|              |              |              | value of     |              |
|              |              |              | KinSol.      |              |
+--------------+--------------+--------------+--------------+--------------+
| max_krylov   | OT_INTEGER   | 0            |              | casadi::Kins |
|              |              |              |              | olInternal   |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp | casadi::Kins |
|              |              |              | uts)  (eval_ | olInternal   |
|              |              |              | f|eval_djac) |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| pretype      | OT_STRING    | \"none\"       | (none|left|r | casadi::Kins |
|              |              |              | ight|both)   | olInternal   |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| strategy     | OT_STRING    | \"none\"       | Globalizatio | casadi::Kins |
|              |              |              | n strategy ( | olInternal   |
|              |              |              | none|linesea |              |
|              |              |              | rch)         |              |
+--------------+--------------+--------------+--------------+--------------+
| u_scale      | OT_REALVECTO |              |              | casadi::Kins |
|              | R            |              |              | olInternal   |
+--------------+--------------+--------------+--------------+--------------+
| upper_bandwi | OT_INTEGER   |              |              | casadi::Kins |
| dth          |              |              |              | olInternal   |
+--------------+--------------+--------------+--------------+--------------+
| use_precondi | OT_BOOLEAN   | false        | precondition | casadi::Kins |
| tioner       |              |              | an iterative | olInternal   |
|              |              |              | solver       |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available monitors
+-----------+--------------------------+
|    Id     |         Used in          |
+===========+==========================+
| eval_djac | casadi::KinsolInternal   |
+-----------+--------------------------+
| eval_f    | casadi::KinsolInternal   |
+-----------+--------------------------+
| inputs    | casadi::FunctionInternal |
+-----------+--------------------------+
| outputs   | casadi::FunctionInternal |
+-----------+--------------------------+

Diagrams

C++ includes: kinsol_solver.hpp ";

%feature("docstring") casadi::KinsolSolver::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::KinsolSolver::hasOption "

check if there is an option str

";

%feature("docstring") casadi::KinsolSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::KinsolSolver::schemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::KinsolSolver::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::KinsolSolver::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::KinsolSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::KinsolSolver::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::KinsolSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::KinsolSolver::getLinsol "

Access linear solver.

";

%feature("docstring") casadi::KinsolSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::KinsolSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::KinsolSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::KinsolSolver::getJac "

Access Jacobian.

";

%feature("docstring") casadi::KinsolSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::KinsolSolver::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") casadi::KinsolSolver::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::KinsolSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::KinsolSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::KinsolSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::KinsolSolver::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::KinsolSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::KinsolSolver::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::KinsolSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::KinsolSolver::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::KinsolSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::KinsolSolver::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::KinsolSolver::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::KinsolSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::KinsolSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::KinsolSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::KinsolSolver::getDescription "

Return a string with a description (for SWIG)

";


// File: classcasadi_1_1KnitroSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::KnitroSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::KnitroSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::KnitroSolver::KnitroSolver "

>  casadi::KnitroSolver::KnitroSolver()
------------------------------------------------------------------------

Default constructor.

>  casadi::KnitroSolver::KnitroSolver(const Function &nlp)
------------------------------------------------------------------------

Create an NLP solver instance.

";

%feature("docstring") casadi::KnitroSolver::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::KnitroSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::KnitroSolver::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::KnitroSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::KnitroSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::KnitroSolver::evaluate "

Evaluate.

";

%feature("docstring") casadi::KnitroSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::KnitroSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::KnitroSolver::jacG "

Access the Jacobian of the constraint function.

>Input scheme: casadi::HessLagInput (HESSLAG_NUM_IN = 5) [hessLagIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| HESSLAG_X              | x                      | Decision variable .    |
+------------------------+------------------------+------------------------+
| HESSLAG_P              | p                      | Fixed parameter .      |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_F          | lam_f                  | Multiplier for f. Just |
|                        |                        | a scalar factor for    |
|                        |                        | the objective that the |
|                        |                        | NLP solver might use   |
|                        |                        | to scale the           |
|                        |                        | objective.             |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_G          | lam_g                  | Multiplier for g .     |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::HessLagOutput (HESSLAG_NUM_OUT = 6) [hessLagOut]
+----------------+--------+------------------------------------------------+
|   Full name    | Short  |                  Description                   |
+================+========+================================================+
| HESSLAG_HESS   | hess   | Hessian of the Lagrangian .                    |
+----------------+--------+------------------------------------------------+
| HESSLAG_F      | f      | Objective function .                           |
+----------------+--------+------------------------------------------------+
| HESSLAG_G      | g      | Constraint function .                          |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_X | grad_x | Gradient of the Lagrangian with respect to x . |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_P | grad_p | Gradient of the Lagrangian with respect to p . |
+----------------+--------+------------------------------------------------+

";

%feature("docstring") casadi::KnitroSolver::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::KnitroSolver::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::KnitroSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::KnitroSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::KnitroSolver::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::KnitroSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::KnitroSolver::setStringParam "

Set KNITRO string parameters.

";

%feature("docstring") casadi::KnitroSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::KnitroSolver "

Interface to the Knitro NLP solver.

Solves the following parametric nonlinear program (NLP):min          F(x, p)
x  subject to             LBX <=   x    <= UBX LBG <= G(x, p) <= UBG
p  == P      nx: number of decision variables     ng: number of constraints
np: number of parameters

>Input scheme: casadi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| BarRule      | OT_INTEGER   | 0            | Barrier Rule | casadi::Knit |
|              |              |              |              | roInternal   |
+--------------+--------------+--------------+--------------+--------------+
| Debug        | OT_INTEGER   | 0            | Debug level  | casadi::Knit |
|              |              |              |              | roInternal   |
+--------------+--------------+--------------+--------------+--------------+
| Delta        | OT_REAL      | 1            | Initial      | casadi::Knit |
|              |              |              | region       | roInternal   |
|              |              |              | scaling      |              |
|              |              |              | factor       |              |
+--------------+--------------+--------------+--------------+--------------+
| FeasModeTol  | OT_REAL      | 0.000        | Feasible     | casadi::Knit |
|              |              |              | mode         | roInternal   |
|              |              |              | tolerance    |              |
+--------------+--------------+--------------+--------------+--------------+
| FeasTol      | OT_REAL      | 0.000        | Feasible     | casadi::Knit |
|              |              |              | tolerance    | roInternal   |
+--------------+--------------+--------------+--------------+--------------+
| FeasTolAbs   | OT_REAL      | 1            | Absolute     | casadi::Knit |
|              |              |              | feasible     | roInternal   |
|              |              |              | tolerance    |              |
+--------------+--------------+--------------+--------------+--------------+
| Feasible     | OT_BOOLEAN   | 0            | Allow        | casadi::Knit |
|              |              |              | infeasible   | roInternal   |
|              |              |              | iterations   |              |
+--------------+--------------+--------------+--------------+--------------+
| GradOpt      | OT_INTEGER   | 1            | Gradient     | casadi::Knit |
|              |              |              | calculation  | roInternal   |
|              |              |              | method       |              |
+--------------+--------------+--------------+--------------+--------------+
| HessOpt      | OT_INTEGER   | 1            | Hessian      | casadi::Knit |
|              |              |              | calculation  | roInternal   |
|              |              |              | method       |              |
+--------------+--------------+--------------+--------------+--------------+
| HonorBnds    | OT_BOOLEAN   | 0            | Enforce      | casadi::Knit |
|              |              |              | bounds       | roInternal   |
+--------------+--------------+--------------+--------------+--------------+
| InitPt       | OT_BOOLEAN   | 0            | Use initial  | casadi::Knit |
|              |              |              | point        | roInternal   |
|              |              |              | strategy     |              |
+--------------+--------------+--------------+--------------+--------------+
| LPSolver     | OT_BOOLEAN   | 0            | Use LPSolver | casadi::Knit |
|              |              |              |              | roInternal   |
+--------------+--------------+--------------+--------------+--------------+
| LmSize       | OT_INTEGER   | 10           | Memory       | casadi::Knit |
|              |              |              | pairsize     | roInternal   |
|              |              |              | limit        |              |
+--------------+--------------+--------------+--------------+--------------+
| MaxCgIt      | OT_INTEGER   | 0            | Maximum      | casadi::Knit |
|              |              |              | conjugate    | roInternal   |
|              |              |              | gradient     |              |
|              |              |              | iterations   |              |
+--------------+--------------+--------------+--------------+--------------+
| MaxIt        | OT_INTEGER   | 10000        | Iteration    | casadi::Knit |
|              |              |              | limit        | roInternal   |
+--------------+--------------+--------------+--------------+--------------+
| Mu           | OT_REAL      | 0.100        | Initial      | casadi::Knit |
|              |              |              | barrier      | roInternal   |
|              |              |              | parameter    |              |
+--------------+--------------+--------------+--------------+--------------+
| Multistart   | OT_BOOLEAN   | 0            | Use          | casadi::Knit |
|              |              |              | multistart   | roInternal   |
+--------------+--------------+--------------+--------------+--------------+
| NewPoint     | OT_BOOLEAN   | 0            | Select new-  | casadi::Knit |
|              |              |              | point        | roInternal   |
|              |              |              | feature      |              |
+--------------+--------------+--------------+--------------+--------------+
| ObjRange     | OT_REAL      | 0.000        | Maximum      | casadi::Knit |
|              |              |              | objective    | roInternal   |
|              |              |              | value        |              |
+--------------+--------------+--------------+--------------+--------------+
| OptTol       | OT_REAL      | 0.000        | Relative     | casadi::Knit |
|              |              |              | optimality   | roInternal   |
|              |              |              | tolerance    |              |
+--------------+--------------+--------------+--------------+--------------+
| OptTolAbs    | OT_REAL      | 0            | Absolute     | casadi::Knit |
|              |              |              | optimality   | roInternal   |
|              |              |              | tolerance    |              |
+--------------+--------------+--------------+--------------+--------------+
| OutLev       | OT_INTEGER   | 2            | Log output   | casadi::Knit |
|              |              |              | level        | roInternal   |
+--------------+--------------+--------------+--------------+--------------+
| Pivot        | OT_REAL      | 0.000        | Initial      | casadi::Knit |
|              |              |              | pivot        | roInternal   |
|              |              |              | threshold    |              |
+--------------+--------------+--------------+--------------+--------------+
| Scale        | OT_BOOLEAN   | 1            | Perform      | casadi::Knit |
|              |              |              | scaling      | roInternal   |
+--------------+--------------+--------------+--------------+--------------+
| ShiftInit    | OT_BOOLEAN   | 1            | Interior-    | casadi::Knit |
|              |              |              | point        | roInternal   |
|              |              |              | shifting     |              |
|              |              |              | initial      |              |
|              |              |              | point        |              |
+--------------+--------------+--------------+--------------+--------------+
| Soc          | OT_INTEGER   | 1            | Second order | casadi::Knit |
|              |              |              | correction   | roInternal   |
+--------------+--------------+--------------+--------------+--------------+
| XTol         | OT_REAL      | 0.000        | Relative     | casadi::Knit |
|              |              |              | solution     | roInternal   |
|              |              |              | change       |              |
|              |              |              | tolerance    |              |
+--------------+--------------+--------------+--------------+--------------+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| contype      | OT_INTEGERVE |              |              | casadi::Knit |
|              | CTOR         |              |              | roInternal   |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| expand       | OT_BOOLEAN   | false        | Expand the   | casadi::NLPS |
|              |              |              | NLP function | olverInterna |
|              |              |              | in terms of  | l            |
|              |              |              | scalar       |              |
|              |              |              | operations,  |              |
|              |              |              | i.e. MX->SX  |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| grad_f       | OT_FUNCTION  | GenericType( | Function for | casadi::NLPS |
|              |              | )            | calculating  | olverInterna |
|              |              |              | the gradient | l            |
|              |              |              | of the       |              |
|              |              |              | objective    |              |
|              |              |              | (column, aut |              |
|              |              |              | ogenerated   |              |
|              |              |              | by default)  |              |
+--------------+--------------+--------------+--------------+--------------+
| grad_lag     | OT_FUNCTION  | GenericType( | Function for | casadi::NLPS |
|              |              | )            | calculating  | olverInterna |
|              |              |              | the gradient | l            |
|              |              |              | of the       |              |
|              |              |              | Lagrangian ( |              |
|              |              |              | autogenerate |              |
|              |              |              | d by         |              |
|              |              |              | default)     |              |
+--------------+--------------+--------------+--------------+--------------+
| hess_lag     | OT_FUNCTION  | GenericType( | Function for | casadi::NLPS |
|              |              | )            | calculating  | olverInterna |
|              |              |              | the Hessian  | l            |
|              |              |              | of the       |              |
|              |              |              | Lagrangian ( |              |
|              |              |              | autogenerate |              |
|              |              |              | d by         |              |
|              |              |              | default)     |              |
+--------------+--------------+--------------+--------------+--------------+
| ignore_check | OT_BOOLEAN   | false        | If set to    | casadi::NLPS |
| _vec         |              |              | true, the    | olverInterna |
|              |              |              | input shape  | l            |
|              |              |              | of F will    |              |
|              |              |              | not be       |              |
|              |              |              | checked.     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_CALLBACK  | GenericType( | A function   | casadi::NLPS |
| llback       |              | )            | that will be | olverInterna |
|              |              |              | called at    | l            |
|              |              |              | each         |              |
|              |              |              | iteration    |              |
|              |              |              | with the     |              |
|              |              |              | solver as    |              |
|              |              |              | input. Check |              |
|              |              |              | documentatio |              |
|              |              |              | n of         |              |
|              |              |              | Callback .   |              |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_BOOLEAN   | false        | If set to    | casadi::NLPS |
| llback_ignor |              |              | true, errors | olverInterna |
| e_errors     |              |              | thrown by it | l            |
|              |              |              | eration_call |              |
|              |              |              | back will be |              |
|              |              |              | ignored.     |              |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_INTEGER   | 1            | Only call    | casadi::NLPS |
| llback_step  |              |              | the callback | olverInterna |
|              |              |              | function     | l            |
|              |              |              | every few    |              |
|              |              |              | iterations.  |              |
+--------------+--------------+--------------+--------------+--------------+
| jac_f        | OT_FUNCTION  | GenericType( | Function for | casadi::NLPS |
|              |              | )            | calculating  | olverInterna |
|              |              |              | the jacobian | l            |
|              |              |              | of the       |              |
|              |              |              | objective    |              |
|              |              |              | (sparse row, |              |
|              |              |              | autogenerate |              |
|              |              |              | d by         |              |
|              |              |              | default)     |              |
+--------------+--------------+--------------+--------------+--------------+
| jac_g        | OT_FUNCTION  | GenericType( | Function for | casadi::NLPS |
|              |              | )            | calculating  | olverInterna |
|              |              |              | the Jacobian | l            |
|              |              |              | of the       |              |
|              |              |              | constraints  |              |
|              |              |              | (autogenerat |              |
|              |              |              | ed by        |              |
|              |              |              | default)     |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp | casadi::Knit |
|              |              |              | uts)  (eval_ | roInternal   |
|              |              |              | f|eval_g|eva |              |
|              |              |              | l_jac_g|eval |              |
|              |              |              | _grad_f|eval |              |
|              |              |              | _h)          |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+
| warn_initial | OT_BOOLEAN   | false        | Warn if the  | casadi::NLPS |
| _bounds      |              |              | initial      | olverInterna |
|              |              |              | guess does   | l            |
|              |              |              | not satisfy  |              |
|              |              |              | LBX and UBX  |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available monitors
+-------------+--------------------------+
|     Id      |         Used in          |
+=============+==========================+
| eval_f      | casadi::KnitroInternal   |
+-------------+--------------------------+
| eval_g      | casadi::KnitroInternal   |
+-------------+--------------------------+
| eval_grad_f | casadi::KnitroInternal   |
+-------------+--------------------------+
| eval_h      | casadi::KnitroInternal   |
+-------------+--------------------------+
| eval_jac_g  | casadi::KnitroInternal   |
+-------------+--------------------------+
| inputs      | casadi::FunctionInternal |
+-------------+--------------------------+
| outputs     | casadi::FunctionInternal |
+-------------+--------------------------+

Diagrams

C++ includes: knitro_solver.hpp ";

%feature("docstring") casadi::KnitroSolver::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::KnitroSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::KnitroSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::KnitroSolver::nlp "

Access the NLP.

>Input scheme: casadi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::KnitroSolver::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") casadi::KnitroSolver::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::KnitroSolver::isNull "

Is a null pointer?

";

%feature("docstring") casadi::KnitroSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::KnitroSolver::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") casadi::KnitroSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::KnitroSolver::gradF "

Access the objective gradient function>Input scheme: casadi::GradFInput
(GRADF_NUM_IN = 3) [gradFIn] +-----------+-------+---------------------+ |
Full name | Short |     Description     |
+===========+=======+=====================+ | GRADF_X   | x     | Decision
variable . | +-----------+-------+---------------------+ | GRADF_P   | p
| Fixed parameter .   | +-----------+-------+---------------------+

";

%feature("docstring") casadi::KnitroSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::KnitroSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::KnitroSolver::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::KnitroSolver::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::KnitroSolver::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::KnitroSolver::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::KnitroSolver::reportConstraints "

Prints out a human readable report about possible constraint violations,
after solving.

";

%feature("docstring") casadi::KnitroSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::KnitroSolver::hessLag "

Access the Hessian of the Lagrangian function.

>Input scheme: casadi::JacGInput (JACG_NUM_IN = 3) [jacGIn]
+-----------+-------+---------------------+
| Full name | Short |     Description     |
+===========+=======+=====================+
| JACG_X    | x     | Decision variable . |
+-----------+-------+---------------------+
| JACG_P    | p     | Fixed parameter .   |
+-----------+-------+---------------------+

>Output scheme: casadi::JacGOutput (JACG_NUM_OUT = 4) [jacGOut]
+-----------+-------+-------------------------------+
| Full name | Short |          Description          |
+===========+=======+===============================+
| JACG_JAC  | jac   | Jacobian of the constraints . |
+-----------+-------+-------------------------------+
| JACG_F    | f     | Objective function .          |
+-----------+-------+-------------------------------+
| JACG_G    | g     | Constraint function .         |
+-----------+-------+-------------------------------+

";

%feature("docstring") casadi::KnitroSolver::spCanEvaluate "[INTERNAL]  Is
the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::KnitroSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::KnitroSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::KnitroSolver::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::KnitroSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::KnitroSolver::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") casadi::KnitroSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::KnitroSolver::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::KnitroSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::KnitroSolver::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::KnitroSolver::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::KnitroSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::KnitroSolver::setIntParam "

Set KNITRO integer parameters.

";

%feature("docstring") casadi::KnitroSolver::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::KnitroSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::KnitroSolver::hasOption "

check if there is an option str

";

%feature("docstring") casadi::KnitroSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::KnitroSolver::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::KnitroSolver::checkInputs "[INTERNAL]  Check
if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::KnitroSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::KnitroSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::KnitroSolver::schemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::KnitroSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::KnitroSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::KnitroSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::KnitroSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::KnitroSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::KnitroSolver::getOption "

get an option value

";

%feature("docstring") casadi::KnitroSolver::setDoubleParam "

Set KNITRO double parameters.

";

%feature("docstring") casadi::KnitroSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::KnitroSolver::setQPOptions "

Set options that make the NLP solver more suitable for solving QPs.

";

%feature("docstring") casadi::KnitroSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::KnitroSolver::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::KnitroSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::KnitroSolver::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::KnitroSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::KnitroSolver::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::KnitroSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::KnitroSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::KnitroSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::KnitroSolver::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::KnitroSolver::getReportConstraints "";

%feature("docstring") casadi::KnitroSolver::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::KnitroSolver::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::KnitroSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::KnitroSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::KnitroSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::KnitroSolver::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::KnitroSolver::isInit "

Is initialized?

";

%feature("docstring") casadi::KnitroSolver::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::KnitroSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::KnitroSolver::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::KnitroSolver::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::KnitroSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::KnitroSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::KnitroSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::KnitroSolver::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::KnitroSolver::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::KnitroSolver::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::KnitroSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";


// File: classcasadi_1_1LapackLUDense.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::LapackLUDense::setOptionByEnumValue " [INTERNAL]  Set a certain
option by giving an enum value.

";

%feature("docstring") casadi::LapackLUDense::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::LapackLUDense::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::LapackLUDense::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::LapackLUDense::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::LapackLUDense::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::LapackLUDense::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::LapackLUDense::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::LapackLUDense::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::LapackLUDense::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::LapackLUDense::hasOption "

check if there is an option str

";

%feature("docstring") casadi::LapackLUDense::isInit "

Is initialized?

";

%feature("docstring") casadi::LapackLUDense::printPtr "[INTERNAL]  Print
the pointer to the internal class

";

%feature("docstring") casadi::LapackLUDense::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::LapackLUDense::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::LapackLUDense::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::LapackLUDense::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") casadi::LapackLUDense::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::LapackLUDense::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::LapackLUDense::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::LapackLUDense::LapackLUDense "

>  casadi::LapackLUDense::LapackLUDense()
------------------------------------------------------------------------

Default (empty) constructor.

>  casadi::LapackLUDense::LapackLUDense(const Sparsity &sparsity, int nrhs=1)
------------------------------------------------------------------------

Create a linear solver given a sparsity pattern.

";

%feature("docstring") casadi::LapackLUDense::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::LapackLUDense::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::LapackLUDense::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::LapackLUDense::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::LapackLUDense::evaluate "

Evaluate.

";

%feature("docstring") casadi::LapackLUDense::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::LapackLUDense::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::LapackLUDense::spCanEvaluate "[INTERNAL]  Is
the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::LapackLUDense::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::LapackLUDense::inputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::LapackLUDense::prepared "

Check if prepared.

";

%feature("docstring") casadi::LapackLUDense::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::LapackLUDense::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::LapackLUDense::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::LapackLUDense::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::LapackLUDense::solve "

>  void casadi::LinearSolver::solve(bool transpose=false)
------------------------------------------------------------------------

Solve the system of equations, internal vector.

>  void casadi::LinearSolver::solve(double *x, int nrhs=1, bool transpose=false)
------------------------------------------------------------------------
[INTERNAL] 
 Solve the factorized system of equations.

>  MX casadi::LinearSolver::solve(const MX &A, const MX &B, bool transpose=false)
------------------------------------------------------------------------

Create a solve node.

";

%feature("docstring") casadi::LapackLUDense::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::LapackLUDense::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::LapackLUDense::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::LapackLUDense::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::LapackLUDense::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::LapackLUDense::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::LapackLUDense::schemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::LapackLUDense::isNull "

Is a null pointer?

";

%feature("docstring") casadi::LapackLUDense::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::LapackLUDense::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::LapackLUDense::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::LapackLUDense::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::LapackLUDense::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::LapackLUDense::spSolve "[INTERNAL]  Propagate
sparsity through a linear solve

";

%feature("docstring") casadi::LapackLUDense::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") casadi::LapackLUDense::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::LapackLUDense::checkInputs "[INTERNAL]  Check
if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::LapackLUDense::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::LapackLUDense "

LU LinearSolver with Lapack Interface.

Solves the linear system A*X = B or A^T*X = B for X with A square and non-
singular

If A is structurally singular, an error will be thrown during init. If A is
numerically singular, the prepare step will fail.

This class solves the linear system A.x=b by making an LU factorization of
A: A = L.U, with L lower and U upper triangular

LapackLUDense is an casadi::Function mapping from 2 inputs [ A (matrix), b
(vector)] to one output [x (vector)].

The usual procedure to use LapackLUDense is:  init()

set the first input (A)

prepare()

set the second input (b)

solve()

Repeat steps 4 and 5 to work with other b vectors.

The method evaluate() combines the prepare() and solve() step and is
therefore more expensive if A is invariant.

>Input scheme: casadi::LinsolInput (LINSOL_NUM_IN = 3) [linsolIn]
+-----------+-------+------------------------------------------------+
| Full name | Short |                  Description                   |
+===========+=======+================================================+
| LINSOL_A  | A     | The square matrix A: sparse, (n x n). .        |
+-----------+-------+------------------------------------------------+
| LINSOL_B  | B     | The right-hand-side matrix b: dense, (n x m) . |
+-----------+-------+------------------------------------------------+

>Output scheme: casadi::LinsolOutput (LINSOL_NUM_OUT = 2) [linsolOut]
+-----------+-------+----------------------------------------------+
| Full name | Short |                 Description                  |
+===========+=======+==============================================+
| LINSOL_X  | X     | Solution to the linear system of equations . |
+-----------+-------+----------------------------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| allow_equili | OT_BOOLEAN   | false        |              | casadi::Lapa |
| bration_fail |              |              |              | ckLUDenseInt |
| ure          |              |              |              | ernal        |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| equilibratio | OT_BOOLEAN   | true         |              | casadi::Lapa |
| n            |              |              |              | ckLUDenseInt |
|              |              |              |              | ernal        |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: lapack_lu_dense.hpp ";

%feature("docstring") casadi::LapackLUDense::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::LapackLUDense::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::LapackLUDense::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::LapackLUDense::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::LapackLUDense::prepare "

Factorize the matrix.

";

%feature("docstring") casadi::LapackLUDense::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::LapackLUDense::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::LapackLUDense::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::LapackLUDense::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::LapackLUDense::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::LapackLUDense::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::LapackLUDense::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::LapackLUDense::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::LapackLUDense::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::LapackLUDense::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::LapackLUDense::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::LapackLUDense::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::LapackLUDense::getOption "

get an option value

";

%feature("docstring") casadi::LapackLUDense::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::LapackLUDense::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::LapackLUDense::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::LapackLUDense::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::LapackLUDense::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::LapackLUDense::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::LapackLUDense::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::LapackLUDense::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::LapackLUDense::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::LapackLUDense::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::LapackLUDense::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::LapackLUDense::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::LapackLUDense::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::LapackLUDense::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::LapackLUDense::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::LapackLUDense::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::LapackLUDense::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::LapackLUDense::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::LapackLUDense::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::LapackLUDense::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::LapackLUDense::setInputScheme "

Set input scheme.

";


// File: classcasadi_1_1LapackQRDense.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::LapackQRDense::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::LapackQRDense::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::LapackQRDense::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::LapackQRDense::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::LapackQRDense::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::LapackQRDense::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::LapackQRDense::spCanEvaluate "[INTERNAL]  Is
the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::LapackQRDense::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::LapackQRDense::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::LapackQRDense::solve "

>  void casadi::LinearSolver::solve(bool transpose=false)
------------------------------------------------------------------------

Solve the system of equations, internal vector.

>  void casadi::LinearSolver::solve(double *x, int nrhs=1, bool transpose=false)
------------------------------------------------------------------------
[INTERNAL] 
 Solve the factorized system of equations.

>  MX casadi::LinearSolver::solve(const MX &A, const MX &B, bool transpose=false)
------------------------------------------------------------------------

Create a solve node.

";

%feature("docstring") casadi::LapackQRDense::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::LapackQRDense::isNull "

Is a null pointer?

";

%feature("docstring") casadi::LapackQRDense::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::LapackQRDense::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::LapackQRDense::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::LapackQRDense::prepared "

Check if prepared.

";

%feature("docstring") casadi::LapackQRDense::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::LapackQRDense::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::LapackQRDense::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::LapackQRDense::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::LapackQRDense::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::LapackQRDense::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") casadi::LapackQRDense::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::LapackQRDense::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::LapackQRDense::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::LapackQRDense "

QR LinearSolver with Lapack Interface.

Solves the linear system A*X = B or A^T*X = B for X with A square and non-
singular

If A is structurally singular, an error will be thrown during init. If A is
numerically singular, the prepare step will fail.

This class solves the linear system A.x=b by making an QR factorization of
A: A = Q.R, with Q orthogonal and R upper triangular

LapackQRDense is an casadi::Function mapping from 2 inputs [ A (matrix), b
(vector)] to one output [x (vector)].

The usual procedure to use LapackQRDense is:  init()

set the first input (A)

prepare()

set the second input (b)

solve()

Repeat steps 4 and 5 to work with other b vectors.

The method evaluate() combines the prepare() and solve() step and is
therefore more expensive if A is invariant.

>Input scheme: casadi::LinsolInput (LINSOL_NUM_IN = 3) [linsolIn]
+-----------+-------+------------------------------------------------+
| Full name | Short |                  Description                   |
+===========+=======+================================================+
| LINSOL_A  | A     | The square matrix A: sparse, (n x n). .        |
+-----------+-------+------------------------------------------------+
| LINSOL_B  | B     | The right-hand-side matrix b: dense, (n x m) . |
+-----------+-------+------------------------------------------------+

>Output scheme: casadi::LinsolOutput (LINSOL_NUM_OUT = 2) [linsolOut]
+-----------+-------+----------------------------------------------+
| Full name | Short |                 Description                  |
+===========+=======+==============================================+
| LINSOL_X  | X     | Solution to the linear system of equations . |
+-----------+-------+----------------------------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: lapack_qr_dense.hpp ";

%feature("docstring") casadi::LapackQRDense::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::LapackQRDense::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::LapackQRDense::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::LapackQRDense::hasOption "

check if there is an option str

";

%feature("docstring") casadi::LapackQRDense::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") casadi::LapackQRDense::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::LapackQRDense::LapackQRDense "

>  casadi::LapackQRDense::LapackQRDense()
------------------------------------------------------------------------

Default (empty) constructor.

>  casadi::LapackQRDense::LapackQRDense(const Sparsity &sparsity, int nrhs=1)
------------------------------------------------------------------------

Create a linear solver given a sparsity pattern.

";

%feature("docstring") casadi::LapackQRDense::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::LapackQRDense::spSolve "[INTERNAL]  Propagate
sparsity through a linear solve

";

%feature("docstring") casadi::LapackQRDense::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") casadi::LapackQRDense::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::LapackQRDense::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::LapackQRDense::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::LapackQRDense::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::LapackQRDense::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::LapackQRDense::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::LapackQRDense::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::LapackQRDense::printPtr "[INTERNAL]  Print
the pointer to the internal class

";

%feature("docstring") casadi::LapackQRDense::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::LapackQRDense::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::LapackQRDense::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::LapackQRDense::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::LapackQRDense::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::LapackQRDense::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::LapackQRDense::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::LapackQRDense::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::LapackQRDense::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::LapackQRDense::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::LapackQRDense::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::LapackQRDense::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::LapackQRDense::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::LapackQRDense::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::LapackQRDense::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::LapackQRDense::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::LapackQRDense::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::LapackQRDense::evaluate "

Evaluate.

";

%feature("docstring") casadi::LapackQRDense::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::LapackQRDense::isInit "

Is initialized?

";

%feature("docstring") casadi::LapackQRDense::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::LapackQRDense::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::LapackQRDense::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::LapackQRDense::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::LapackQRDense::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::LapackQRDense::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::LapackQRDense::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::LapackQRDense::inputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::LapackQRDense::checkInputs "[INTERNAL]  Check
if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::LapackQRDense::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::LapackQRDense::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::LapackQRDense::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::LapackQRDense::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::LapackQRDense::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::LapackQRDense::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::LapackQRDense::prepare "

Factorize the matrix.

";

%feature("docstring") casadi::LapackQRDense::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::LapackQRDense::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::LapackQRDense::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::LapackQRDense::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::LapackQRDense::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::LapackQRDense::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::LapackQRDense::schemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::LapackQRDense::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::LapackQRDense::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::LapackQRDense::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::LapackQRDense::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::LapackQRDense::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::LapackQRDense::getOption "

get an option value

";

%feature("docstring") casadi::LapackQRDense::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::LapackQRDense::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";


// File: classcasadi_1_1LinearSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::LinearSolver::outputSchemeEntry " [INTERNAL]  Find the index for a
string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::LinearSolver::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") casadi::LinearSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::LinearSolver::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::LinearSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::LinearSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::LinearSolver::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::LinearSolver::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::LinearSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::LinearSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::LinearSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::LinearSolver::LinearSolver "

>  casadi::LinearSolver::LinearSolver()
------------------------------------------------------------------------
[INTERNAL] 
Default (empty) constructor

>  casadi::LinearSolver::LinearSolver(const Sparsity &sp, int nrhs=1)
------------------------------------------------------------------------

Create a linear solver given a sparsity pattern (creates a dummy solver
only)

";

%feature("docstring") casadi::LinearSolver::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::LinearSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::LinearSolver::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::LinearSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::LinearSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::LinearSolver::evaluate "

Evaluate.

";

%feature("docstring") casadi::LinearSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::LinearSolver::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::LinearSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::LinearSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::LinearSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::LinearSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::LinearSolver::prepare "

Factorize the matrix.

";

%feature("docstring") casadi::LinearSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::LinearSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::LinearSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::LinearSolver::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::LinearSolver::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::LinearSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::LinearSolver::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::LinearSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::LinearSolver::hasOption "

check if there is an option str

";

%feature("docstring") casadi::LinearSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::LinearSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::LinearSolver::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::LinearSolver::prepared "

Check if prepared.

";

%feature("docstring") casadi::LinearSolver::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") casadi::LinearSolver::getOption "

get an option value

";

%feature("docstring") casadi::LinearSolver::isInit "

Is initialized?

";

%feature("docstring") casadi::LinearSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::LinearSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::LinearSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::LinearSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::LinearSolver::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::LinearSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::LinearSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::LinearSolver::isNull "

Is a null pointer?

";

%feature("docstring") casadi::LinearSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::LinearSolver "

Base class for the linear solver classes.

Solves the linear system A*X = B or A^T*X = B for X with A square and non-
singular

If A is structurally singular, an error will be thrown during init. If A is
numerically singular, the prepare step will fail. Joel Andersson

>Input scheme: casadi::LinsolInput (LINSOL_NUM_IN = 3) [linsolIn]
+-----------+-------+------------------------------------------------+
| Full name | Short |                  Description                   |
+===========+=======+================================================+
| LINSOL_A  | A     | The square matrix A: sparse, (n x n). .        |
+-----------+-------+------------------------------------------------+
| LINSOL_B  | B     | The right-hand-side matrix b: dense, (n x m) . |
+-----------+-------+------------------------------------------------+

>Output scheme: casadi::LinsolOutput (LINSOL_NUM_OUT = 2) [linsolOut]
+-----------+-------+----------------------------------------------+
| Full name | Short |                 Description                  |
+===========+=======+==============================================+
| LINSOL_X  | X     | Solution to the linear system of equations . |
+-----------+-------+----------------------------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: linear_solver.hpp ";

%feature("docstring") casadi::LinearSolver::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::LinearSolver::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::LinearSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::LinearSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::LinearSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::LinearSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::LinearSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::LinearSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::LinearSolver::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::LinearSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::LinearSolver::schemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::LinearSolver::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::LinearSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::LinearSolver::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::LinearSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::LinearSolver::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::LinearSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::LinearSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::LinearSolver::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::LinearSolver::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::LinearSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::LinearSolver::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::LinearSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::LinearSolver::spSolve "[INTERNAL]  Propagate
sparsity through a linear solve

";

%feature("docstring") casadi::LinearSolver::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") casadi::LinearSolver::spCanEvaluate "[INTERNAL]  Is
the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::LinearSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::LinearSolver::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::LinearSolver::solve "

>  void casadi::LinearSolver::solve(bool transpose=false)
------------------------------------------------------------------------

Solve the system of equations, internal vector.

>  void casadi::LinearSolver::solve(double *x, int nrhs=1, bool transpose=false)
------------------------------------------------------------------------
[INTERNAL] 
 Solve the factorized system of equations.

>  MX casadi::LinearSolver::solve(const MX &A, const MX &B, bool transpose=false)
------------------------------------------------------------------------

Create a solve node.

";

%feature("docstring") casadi::LinearSolver::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::LinearSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::LinearSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::LinearSolver::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::LinearSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::LinearSolver::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::LinearSolver::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::LinearSolver::checkInputs "[INTERNAL]  Check
if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::LinearSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::LinearSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::LinearSolver::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::LinearSolver::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::LinearSolver::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::LinearSolver::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::LinearSolver::setNumInputs "

Set the number of function inputs.

";


// File: classcasadi_1_1LinsolInputIOSchemeVector.xml
%feature("docstring") casadi::LinsolInputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::LinsolInputIOSchemeVector "[INTERNAL]  Helper
function for 'LinsolInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::LinsolInputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") casadi::LinsolInputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::LinsolInputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring") casadi::LinsolInputIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring")
casadi::LinsolInputIOSchemeVector::LinsolInputIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::LinsolInputIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") casadi::LinsolInputIOSchemeVector::__getitem__ "[INTERNAL] ";


// File: classcasadi_1_1LinsolOutputIOSchemeVector.xml
%feature("docstring") casadi::LinsolOutputIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::LinsolOutputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring")
casadi::LinsolOutputIOSchemeVector::LinsolOutputIOSchemeVector "[INTERNAL]
";

%feature("docstring") casadi::LinsolOutputIOSchemeVector::getRepresentation
"[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::LinsolOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::LinsolOutputIOSchemeVector "[INTERNAL]
Helper function for 'LinsolOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::LinsolOutputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") casadi::LinsolOutputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::LinsolOutputIOSchemeVector::vector "[INTERNAL] ";


// File: classcasadi_1_1LPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::LPSolver::hasOption "

check if there is an option str

";

%feature("docstring") casadi::LPSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::LPSolver::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::LPSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::LPSolver::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::LPSolver::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::LPSolver::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") casadi::LPSolver::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::LPSolver::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::LPSolver::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::LPSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::LPSolver::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::LPSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::LPSolver::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::LPSolver::isNull "

Is a null pointer?

";

%feature("docstring") casadi::LPSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::LPSolver::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::LPSolver::evaluate "

Evaluate.

";

%feature("docstring") casadi::LPSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::LPSolver::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::LPSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::LPSolver::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::LPSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::LPSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::LPSolver::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::LPSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::LPSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::LPSolver::spCanEvaluate "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::LPSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::LPSolver::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::LPSolver::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::LPSolver::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::LPSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::LPSolver::swap "[INTERNAL]  Swap content with
another instance.

";

%feature("docstring") casadi::LPSolver::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::LPSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::LPSolver::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::LPSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::LPSolver::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::LPSolver::isInit "

Is initialized?

";

%feature("docstring") casadi::LPSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::LPSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::LPSolver::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::LPSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::LPSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::LPSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::LPSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::LPSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::LPSolver::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::LPSolver::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::LPSolver::setOptionByAllowedIndex "[INTERNAL]
Set a certain option by giving its index into the allowed values.

";

%feature("docstring") casadi::LPSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::LPSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::LPSolver::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::LPSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::LPSolver::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::LPSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::LPSolver::getOptionEnumValue "[INTERNAL]  Get
the enum value corresponding to th certain option.

";

%feature("docstring") casadi::LPSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::LPSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::LPSolver::inputSchemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::LPSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::LPSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::LPSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::LPSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::LPSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::LPSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::LPSolver::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::LPSolver::assignNode "[INTERNAL]  Assign the
node to a node class pointer (or null)

";

%feature("docstring") casadi::LPSolver::assertInit "[INTERNAL]  Assert that
it is initialized

";

%feature("docstring") casadi::LPSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::LPSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::LPSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::LPSolver::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::LPSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::LPSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::LPSolver::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::LPSolver::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::LPSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::LPSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::LPSolver::getOption "

get an option value

";

%feature("docstring") casadi::LPSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::LPSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::LPSolver::outputSchemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::LPSolver "

LPSolver.

Solves the following linear problem:

min          c' x  x  subject to             LBA <= A x <= UBA LBX <= x   <=
UBX      with x ( n x 1)          c ( n x 1 )          A sparse matrix ( nc
x n)          LBA, UBA dense vector (nc x 1) LBX, UBX dense vector (n x 1)
n: number of decision variables (x) nc: number of constraints (A)

Joris Gillis

>Input scheme: casadi::LPSolverInput (LP_SOLVER_NUM_IN = 7) [lpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| LP_SOLVER_C            | c                      | The vector c: dense (n |
|                        |                        | x 1) .                 |
+------------------------+------------------------+------------------------+
| LP_SOLVER_A            | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| LP_SOLVER_LBA          | lba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| LP_SOLVER_UBA          | uba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| LP_SOLVER_LBX          | lbx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| LP_SOLVER_UBX          | ubx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::LPSolverOutput (LP_SOLVER_NUM_OUT = 5) [lpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| LP_SOLVER_X            | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| LP_SOLVER_COST         | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| LP_SOLVER_LAM_A        | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| LP_SOLVER_LAM_X        | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: lp_solver.hpp ";

%feature("docstring") casadi::LPSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::LPSolver::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::LPSolver::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::LPSolver::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::LPSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::LPSolver::LPSolver "

Default constructor.

";


// File: classcasadi_1_1LPSolverInputIOSchemeVector.xml
%feature("docstring") casadi::LPSolverInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring")
casadi::LPSolverInputIOSchemeVector::LPSolverInputIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::LPSolverInputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring") casadi::LPSolverInputIOSchemeVector::print "[INTERNAL]  Print a description of the object.

";

%feature("docstring") casadi::LPSolverInputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::LPSolverInputIOSchemeVector::getRepresentation
"[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::LPSolverInputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") casadi::LPSolverInputIOSchemeVector::vector "[INTERNAL] ";

%feature("docstring") casadi::LPSolverInputIOSchemeVector "[INTERNAL]
Helper function for 'LPSolverInput'

C++ includes: schemes_helpers.hpp ";


// File: classcasadi_1_1LPSolverOutputIOSchemeVector.xml
%feature("docstring") casadi::LPSolverOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::LPSolverOutputIOSchemeVector "[INTERNAL]
Helper function for 'LPSolverOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::LPSolverOutputIOSchemeVector::repr "[INTERNAL]  Print a representation of the object.

";

%feature("docstring")
casadi::LPSolverOutputIOSchemeVector::getRepresentation "[INTERNAL]  Return
a string with a representation (for SWIG)

";

%feature("docstring") casadi::LPSolverOutputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::LPSolverOutputIOSchemeVector::print "[INTERNAL]  Print a description of the object.

";

%feature("docstring") casadi::LPSolverOutputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring")
casadi::LPSolverOutputIOSchemeVector::LPSolverOutputIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::LPSolverOutputIOSchemeVector::vector "[INTERNAL] ";


// File: classcasadi_1_1LPStructIOSchemeVector.xml
%feature("docstring") casadi::LPStructIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::LPStructIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::LPStructIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") casadi::LPStructIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::LPStructIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::LPStructIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::LPStructIOSchemeVector "[INTERNAL]  Helper
function for 'LPStruct'

C++ includes: casadi_types.hpp ";

%feature("docstring") casadi::LPStructIOSchemeVector::vector "[INTERNAL] ";

%feature("docstring") casadi::LPStructIOSchemeVector::LPStructIOSchemeVector
"[INTERNAL] ";


// File: classcasadi_1_1Matrix.xml


/*  Operations from the left  */

/* For Python

*/

/*  Construct symbolic primitives  */

/* The \"sym\" function is intended to work in a similar way as \"sym\" used
in the Symbolic Toolbox for Matlab but instead creating a CasADi symbolic
primitive.

*/ %feature("docstring") casadi::Matrix::sanityCheck " [INTERNAL]  Check if
the dimensions and colind, row vectors are compatible.

Parameters:
-----------

complete:  set to true to also check elementwise throws an error as possible
result

";

%feature("docstring") casadi::Matrix::__truediv__ "[INTERNAL]  Elementwise
operations Octave/Python naming

";

%feature("docstring") casadi::Matrix::sign "[INTERNAL]  Operations defined
in the standard namespace for unambiguous access and Numpy compatibility

";

%feature("docstring") casadi::Matrix::repr "[INTERNAL]  Printing

";

%feature("docstring") casadi::Matrix::getNZ "

>  const Matrix<DataType> casadi::Matrix< T >::getNZ(int k) const

>  const Matrix<DataType> casadi::Matrix< T >::getNZ(const Slice &k) const 
------------------------------------------------------------------------

Get a set of nonzeros

>  const Matrix< DataType > casadi::Matrix< DataType >::getNZ(const std::vector< int > &k) const

>  const Matrix< DataType > casadi::Matrix< DataType >::getNZ(const Matrix< int > &k) const 
------------------------------------------------------------------------
[INTERNAL] 
Get a set of nonzeros

";

%feature("docstring") casadi::Matrix::__rsub__ "";

%feature("docstring") casadi::Matrix::hasNZ "

Returns true if the matrix has a non-zero at location rr, cc.

";

%feature("docstring") casadi::Matrix::__le__ "[INTERNAL]  Elementwise
operations Octave/Python naming

";

%feature("docstring") casadi::Matrix::hasNonStructuralZeros "[INTERNAL]
Check if the matrix has any zero entries which are not structural zeros.

";

%feature("docstring") casadi::Matrix::isDense "

Check if the matrix expression is dense.

";

%feature("docstring") casadi::Matrix::exp "[INTERNAL]  Operations defined
in the standard namespace for unambiguous access and Numpy compatibility

";

%feature("docstring") casadi::Matrix::__ge__ "

No need to have both <= and >=.

";

%feature("docstring") casadi::Matrix::nz_indexed_one_based "[INTERNAL]
Indexing for interfaced languages get a non-zero

";

%feature("docstring") casadi::Matrix::data "

>  std::vector< DataType > & casadi::Matrix< DataType >::data()
------------------------------------------------------------------------
[INTERNAL] 
Access the non-zero elements.

>  const std::vector< DataType > & casadi::Matrix< DataType >::data() const 
------------------------------------------------------------------------
[INTERNAL] 
Const access the non-zero elements.

";

%feature("docstring") casadi::Matrix::sinh "[INTERNAL]  Operations defined
in the standard namespace for unambiguous access and Numpy compatibility

";

%feature("docstring") casadi::Matrix::__copysign__ "[INTERNAL]  Operations
defined in the standard namespace for unambiguous access and Numpy
compatibility

";

%feature("docstring") casadi::Matrix::sparse "

create a sparse matrix with all zeros

";

%feature("docstring") casadi::Matrix::triplet "[INTERNAL] ";

%feature("docstring") casadi::Matrix::indexed_zero_based_assignment "

>  void casadi::Matrix< T >::indexed_zero_based_assignment(const Matrix< int > &k, const Matrix< DataType > &m)

>  void casadi::Matrix< T >::indexed_zero_based_assignment(int rr, int cc, const DataType &m)
------------------------------------------------------------------------
[INTERNAL] 
Indexing for interfaced languages get a non-zero

>  void casadi::Matrix< T >::indexed_zero_based_assignment(int rr, const DataType &m)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::Matrix::isZero "[INTERNAL]  check if the
matrix is 0 (note that false negative answers are possible)

";

%feature("docstring") casadi::Matrix::printDense "[INTERNAL]  Printing

";

%feature("docstring") casadi::Matrix::__req__ "";

%feature("docstring") casadi::Matrix::isIdentity "[INTERNAL]  check if the
matrix is an identity matrix (note that false negative answers are possible)

";

%feature("docstring") casadi::Matrix::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::Matrix::setNZ "

>  void casadi::Matrix< DataType >::setNZ(int k, const Matrix< DataType > &m)

>  void casadi::Matrix< DataType >::setNZ(const std::vector< int > &k, const Matrix< DataType > &m)

>  void casadi::Matrix< DataType >::setNZ(const Matrix< int > &k, const Matrix< DataType > &m)
------------------------------------------------------------------------
[INTERNAL] 
Set a set of nonzeros

>  void casadi::Matrix< T >::setNZ(const Slice &k, const Matrix< DataType > &m)
------------------------------------------------------------------------

Set a set of nonzeros

";

%feature("docstring") casadi::Matrix::__add__ "[INTERNAL]  Elementwise
operations Octave/Python naming

";

%feature("docstring") casadi::Matrix::unary "[INTERNAL]  Create nodes by
their ID.

";

%feature("docstring") casadi::Matrix::ceil "[INTERNAL]  Operations defined
in the standard namespace for unambiguous access and Numpy compatibility

";

%feature("docstring") casadi::Matrix::sparsityRef "[INTERNAL]  Access the
sparsity, make a copy if there are multiple references to it.

";

%feature("docstring") casadi::Matrix::__rdiv__ "";

%feature("docstring") casadi::Matrix::fmod "[INTERNAL]  Operations defined
in the standard namespace for unambiguous access and Numpy compatibility

";

%feature("docstring") casadi::Matrix::indexed "[INTERNAL]  Indexing for
interfaced languages get a non-zero

";

%feature("docstring") casadi::Matrix::__rlt__ "";

%feature("docstring") casadi::Matrix::nz_indexed_zero_based "[INTERNAL]
Indexing for interfaced languages get a non-zero

";

%feature("docstring") casadi::Matrix::back "[INTERNAL] ";

%feature("docstring") casadi::Matrix::borArrayBV "[INTERNAL]  Bitwise or
the non-zero elements, array.

";

%feature("docstring") casadi::Matrix::numel "

Get the number of elements.

";

%feature("docstring") casadi::Matrix::className "[INTERNAL]  Printing

";

%feature("docstring") casadi::Matrix::end "[INTERNAL] ";

%feature("docstring") casadi::Matrix::cosh "[INTERNAL]  Operations defined
in the standard namespace for unambiguous access and Numpy compatibility

";

%feature("docstring") casadi::Matrix::getArray "

>  void casadi::Matrix< DataType >::getArray(DataType *val, int len, SparsityType sp=SPARSE) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the non-zero elements, array.

>  void casadi::Matrix< DataType >::getArray(DataType *val) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the non-zero elements, array, sparse and correct length.

";

%feature("docstring") casadi::Matrix::densify "[INTERNAL]  Make the matrix
dense.

";

%feature("docstring") casadi::Matrix::sparsity "

Const access the sparsity - reference to data member.

";

%feature("docstring") casadi::Matrix::setArrayBV "[INTERNAL]  Bitwise set
the non-zero elements, array.

";

%feature("docstring") casadi::Matrix::tan "[INTERNAL]  Operations defined
in the standard namespace for unambiguous access and Numpy compatibility

";

%feature("docstring") casadi::Matrix::isTril "

Check if the matrix is lower triangular.

";

%feature("docstring") casadi::Matrix::appendColumns "[INTERNAL]  Append a
matrix horizontally.

";

%feature("docstring") casadi::Matrix::rend "[INTERNAL] ";

%feature("docstring") casadi::Matrix::isTriu "

Check if the matrix is upper triangular.

";

%feature("docstring") casadi::Matrix::erf "[INTERNAL]  Operations defined
in the standard namespace for unambiguous access and Numpy compatibility

";

%feature("docstring") casadi::Matrix::set "

>  void casadi::Matrix< DataType >::set(DataType val, SparsityType sp=SPARSE)
------------------------------------------------------------------------
[INTERNAL] 
Set the non-zero elements, scalar.

>  void casadi::Matrix< DataType >::set(const std::vector< DataType > &val, SparsityType sp=SPARSE)
------------------------------------------------------------------------
[INTERNAL] 
Set the non-zero elements, vector.

>  void casadi::Matrix< DataType >::set(const Matrix< DataType > &val, SparsityType sp=SPARSE)
------------------------------------------------------------------------
[INTERNAL] 
Set the non-zero elements, Matrix.

>  void casadi::Matrix< DataType >::set(const DataType *val, SparsityType sp=SPARSE)
------------------------------------------------------------------------
[INTERNAL] 
Legacy - use setArray instead.

";

%feature("docstring") casadi::Matrix::isSquare "

Check if the matrix expression is square.

";

%feature("docstring") casadi::Matrix::nz_indexed_one_based_assignment "

>  void casadi::Matrix< T >::nz_indexed_one_based_assignment(int k, const DataType &m)
------------------------------------------------------------------------
[INTERNAL] 
set a non-zero

>  void casadi::Matrix< T >::nz_indexed_one_based_assignment(const Matrix< int > &k, const Matrix< DataType > &m)
------------------------------------------------------------------------
[INTERNAL] 
Indexing for interfaced languages get a non-zero

";

%feature("docstring") casadi::Matrix::nz_indexed_assignment "[INTERNAL]
Indexing for interfaced languages get a non-zero

";

%feature("docstring") casadi::Matrix::printSparse "[INTERNAL]  Printing

";

%feature("docstring") casadi::Matrix::setAll "[INTERNAL]  Set all elements
to a value.

";

%feature("docstring") casadi::Matrix::__eq__ "[INTERNAL]  Elementwise
operations Octave/Python naming

";

%feature("docstring") casadi::Matrix::__ne__ "[INTERNAL]  Elementwise
operations Octave/Python naming

";

%feature("docstring") casadi::Matrix::indexed_one_based_assignment "

>  void casadi::Matrix< T >::indexed_one_based_assignment(const Matrix< int > &k, const Matrix< DataType > &m)
------------------------------------------------------------------------
[INTERNAL] 
Indexing for interfaced languages get a non-zero

>  void casadi::Matrix< T >::indexed_one_based_assignment(int rr, int cc, const DataType &m)
------------------------------------------------------------------------
[INTERNAL] 
set a matrix element

>  void casadi::Matrix< T >::indexed_one_based_assignment(int rr, const DataType &m)
------------------------------------------------------------------------
[INTERNAL] 
set a vector element

";

%feature("docstring") casadi::Matrix::T "[INTERNAL]   Transpose the matrix
(shorthand)

";

%feature("docstring") casadi::Matrix::getElement "

get an element, do not allocate

";

%feature("docstring") casadi::Matrix::clear "[INTERNAL] ";

%feature("docstring") casadi::Matrix::__lt__ "[INTERNAL]  Elementwise
operations Octave/Python naming

";

%feature("docstring") casadi::Matrix::remove "[INTERNAL]  Remove cols or
rows Rremove/delete rows and/or columns of a matrix.

";

%feature("docstring") casadi::Matrix::nz_indexed_zero_based_assignment "[INTERNAL]  Indexing for interfaced languages get a non-zero

";

%feature("docstring") casadi::Matrix::mul_smart "

Matrix-matrix multiplication. Attempts to identify quick returns on matrix-
level and delegates to MatType::mul_full if no such quick returns are found.

";

%feature("docstring") casadi::Matrix::setScientific "

Set the 'precision, width & scientific' used in printing and serializing to
streams.

";

%feature("docstring") casadi::Matrix::getValue "[INTERNAL]  Get double
value (only if constant)

";

%feature("docstring") casadi::Matrix::isOne "[INTERNAL]  check if the
matrix is 1 (note that false negative answers are possible)

";

%feature("docstring") casadi::Matrix::__rne__ "";

%feature("docstring") casadi::Matrix::__mul__ "[INTERNAL]  Elementwise
operations Octave/Python naming

";

%feature("docstring") casadi::Matrix::reserve "[INTERNAL] ";

%feature("docstring") casadi::Matrix::__mrdivide__ "[INTERNAL]  Elementwise
operations Octave/Python naming

";

%feature("docstring") casadi::Matrix::sub "[INTERNAL]  Get a submatrix

";

%feature("docstring") casadi::Matrix::printScalar "[INTERNAL]  Printing

";

%feature("docstring") casadi::Matrix::isSmooth "[INTERNAL]  Check if
smooth.

";

%feature("docstring") casadi::Matrix::logic_and "[INTERNAL]  Operations
defined in the standard namespace for unambiguous access and Numpy
compatibility

";

%feature("docstring") casadi::Matrix::erase "[INTERNAL]  Erase a submatrix
Erase rows and/or columns of a matrix.

";

%feature("docstring") casadi::Matrix::dimString "

Get string representation of dimensions. The representation is (nrow x ncol
= numel | size)

";

%feature("docstring") casadi::Matrix::inf "[INTERNAL]  create a matrix with
all inf

";

%feature("docstring") casadi::Matrix::tanh "[INTERNAL]  Operations defined
in the standard namespace for unambiguous access and Numpy compatibility

";

%feature("docstring") casadi::Matrix::scalar_matrix "[INTERNAL]  Create
nodes by their ID.

";

%feature("docstring") casadi::Matrix::ptr "

>  DataType* casadi::Matrix< T >::ptr()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the data

>  const DataType* casadi::Matrix< T >::ptr() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the data.

";

%feature("docstring") casadi::Matrix::getBand "[INTERNAL]  Save the result
to the LAPACK banded format see LAPACK documentation kl: The number of
subdiagonals in res ku: The number of superdiagonals in res ldres: The
leading dimension in res res: The number of superdiagonals.

";

%feature("docstring") casadi::Matrix::ones "

Create a dense matrix or a matrix with specified sparsity with all entries
one.

";

%feature("docstring") casadi::Matrix::arctanh "[INTERNAL]  Operations
defined in the standard namespace for unambiguous access and Numpy
compatibility

";

%feature("docstring") casadi::Matrix::isSymbolicSparse "[INTERNAL]  Check
if symbolic Sparse matrices can return true if all non-zero elements are
symbolic.

";

%feature("docstring") casadi::Matrix::toScalar "[INTERNAL]  Convert to
scalar type.

";

%feature("docstring") casadi::Matrix::addSub "[INTERNAL]  Add a submatrix
to an existing matrix (TODO: remove memory allocation)

";

%feature("docstring") casadi::Matrix::isVector "

Check if the matrix is a vector (i.e. size2()==1)

";

%feature("docstring") casadi::Matrix::get "

>  void casadi::Matrix< DataType >::get(DataType &val, SparsityType sp=SPARSE) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the non-zero elements, scalar.

>  void casadi::Matrix< DataType >::get(std::vector< DataType > &val, SparsityType sp=SPARSE) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the non-zero elements, vector.

>  void casadi::Matrix< DataType >::get(Matrix< DataType > &val, SparsityType sp=SPARSE) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the non-zero elements, Matrix.

>  void casadi::Matrix< DataType >::get(DataType *val, SparsityType sp=SPARSE) const 
------------------------------------------------------------------------
[INTERNAL] 
Legacy - use getArray instead.

";

%feature("docstring") casadi::Matrix::resize "[INTERNAL] ";

%feature("docstring") casadi::Matrix::log "[INTERNAL]  Operations defined
in the standard namespace for unambiguous access and Numpy compatibility

";

%feature("docstring") casadi::Matrix::row "[INTERNAL] ";

%feature("docstring") casadi::Matrix::isEmpty "

Check if the sparsity is empty, i.e. if one of the dimensions is zero (or
optionally both dimensions)

";

%feature("docstring") casadi::Matrix::sin "[INTERNAL]  Operations defined
in the standard namespace for unambiguous access and Numpy compatibility

";

%feature("docstring") casadi::Matrix::getStridedArray "[INTERNAL]  Get the
non-zero elements, strided array.

Set stride to zero for unstrided acces

";

%feature("docstring") casadi::Matrix::zeros "

Create a dense matrix or a matrix with specified sparsity with all entries
zero.

";

%feature("docstring") casadi::Matrix::isConstant "[INTERNAL]  Check if the
matrix is constant (note that false negative answers are possible)

";

%feature("docstring") casadi::Matrix::setZeroBV "[INTERNAL]  Bitwise set,
reinterpreting the data as a bvec_t array

";

%feature("docstring") casadi::Matrix::isScalar "

Check if the matrix expression is scalar.

";

%feature("docstring") casadi::Matrix "

Sparse matrix class. SX and DMatrix are specializations.

General sparse matrix class that is designed with the idea that \"everything
is a matrix\", that is, also scalars and vectors. This philosophy makes it
easy to use and to interface in particularly with Python and Matlab/Octave.
Index starts with 0. Index vec happens as follows: (rr, cc) -> k =
rr+cc*size1() Vectors are column vectors.  The storage format is Compressed
Column Storage (CCS), similar to that used for sparse matrices in Matlab,
but unlike this format, we do allow for elements to be structurally non-zero
but numerically zero. Matrix<DataType> is polymorphic with a
std::vector<DataType> that contain all non- identical-zero elements. The
sparsity can be accessed with Sparsity& sparsity() Joel Andersson

C++ includes: casadi_types.hpp ";

%feature("docstring") casadi::Matrix::isMinusOne "[INTERNAL]  check if the
matrix is -1 (note that false negative answers are possible)

";

%feature("docstring") casadi::Matrix::printVector "[INTERNAL]  Printing

";

%feature("docstring") casadi::Matrix::isRegular "[INTERNAL]  Checks if
expression does not contain NaN or Inf.

";

%feature("docstring") casadi::Matrix::arcsin "[INTERNAL]  Operations
defined in the standard namespace for unambiguous access and Numpy
compatibility

";

%feature("docstring") casadi::Matrix::__constpow__ "[INTERNAL]  Elementwise
operations Octave/Python naming

";

%feature("docstring") casadi::Matrix::borBV "[INTERNAL]  Bitwise or,
reinterpreting the data as a bvec_t array

";

%feature("docstring") casadi::Matrix::__pow__ "[INTERNAL]  Elementwise
operations Octave/Python naming

";

%feature("docstring") casadi::Matrix::setArray "

>  void casadi::Matrix< DataType >::setArray(const DataType *val, int len, SparsityType sp=SPARSE)
------------------------------------------------------------------------
[INTERNAL] 
Set the non-zero elements, array.

>  void casadi::Matrix< DataType >::setArray(const DataType *val)
------------------------------------------------------------------------
[INTERNAL] 
Set the non-zero elements, array, sparse and correct length.

";

%feature("docstring") casadi::Matrix::sqrt "[INTERNAL]  Operations defined
in the standard namespace for unambiguous access and Numpy compatibility

";

%feature("docstring") casadi::Matrix::colind "[INTERNAL] ";

%feature("docstring") casadi::Matrix::__sub__ "[INTERNAL]  Elementwise
operations Octave/Python naming

";

%feature("docstring") casadi::Matrix::isEqual "[INTERNAL]  Check if two
expressions are equal May give false negatives.

Note: does not work when CasadiOptions.setSimplificationOnTheFly(False) was
called

";

%feature("docstring") casadi::Matrix::nz_indexed "[INTERNAL]  Indexing for
interfaced languages get a non-zero

";

%feature("docstring") casadi::Matrix::matrix_scalar "[INTERNAL]  Create
nodes by their ID.

";

%feature("docstring") casadi::Matrix::getSub "[INTERNAL]  Retrieve a
submatrix (TODO: remove memory allocation)

";

%feature("docstring") casadi::Matrix::setSparse "[INTERNAL]  Set sparse.

";

%feature("docstring") casadi::Matrix::__rgt__ "";

%feature("docstring") casadi::Matrix::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::Matrix::at "

>  const DataType& casadi::Matrix< T >::at(int k) const 
------------------------------------------------------------------------
[INTERNAL] 
Get a non-zero element.

>  DataType& casadi::Matrix< T >::at(int k)
------------------------------------------------------------------------
[INTERNAL] 
Access a non-zero element.

";

%feature("docstring") casadi::Matrix::shape "[INTERNAL]  Get the shape.

";

%feature("docstring") casadi::Matrix::__rle__ "";

%feature("docstring") casadi::Matrix::setPrecision "

Set the 'precision, width & scientific' used in printing and serializing to
streams.

";

%feature("docstring") casadi::Matrix::front "

>  reference casadi::Matrix< T >::front()
------------------------------------------------------------------------
[INTERNAL] 
Get references to beginning and end.

>  const_reference casadi::Matrix< T >::front() const 
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::Matrix::size2 "

Get the second dimension (i.e. number of columns)

";

%feature("docstring") casadi::Matrix::getBV "[INTERNAL]  Bitwise set,
reinterpreting the data as a bvec_t array

";

%feature("docstring") casadi::Matrix::sizeD "

Get get the number of non-zeros on the diagonal.

";

%feature("docstring") casadi::Matrix::size "

>  int casadi::GenericMatrix< Matrix< DataType >  >::size() const
------------------------------------------------------------------------

Get the number of (structural) non-zero elements.

>  int casadi::GenericMatrix< Matrix< DataType >  >::size(SparsityType sp) const
------------------------------------------------------------------------

Get the number if non-zeros for a given sparsity pattern.

";

%feature("docstring") casadi::Matrix::arccosh "[INTERNAL]  Operations
defined in the standard namespace for unambiguous access and Numpy
compatibility

";

%feature("docstring") casadi::Matrix::repmat "[INTERNAL]  create a matrix
by repeating an existing matrix

";

%feature("docstring") casadi::Matrix::erfinv "[INTERNAL]  Operations
defined in the standard namespace for unambiguous access and Numpy
compatibility

";

%feature("docstring") casadi::Matrix::__gt__ "

No need to have both < and >

";

%feature("docstring") casadi::Matrix::indexed_zero_based "[INTERNAL]
Indexing for interfaced languages get a non-zero

";

%feature("docstring") casadi::Matrix::floor "[INTERNAL]  Operations defined
in the standard namespace for unambiguous access and Numpy compatibility

";

%feature("docstring") casadi::Matrix::__nonzero__ "

>  bool casadi::Matrix< DataType >::__nonzero__() const 
------------------------------------------------------------------------
[INTERNAL] 
Returns the truth value of a Matrix.

>  bool casadi::Matrix< SXElement >::__nonzero__() const
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::Matrix::arctan "[INTERNAL]  Operations
defined in the standard namespace for unambiguous access and Numpy
compatibility

";

%feature("docstring") casadi::Matrix::setSub "[INTERNAL]  Set a submatrix

";

%feature("docstring") casadi::Matrix::__radd__ "";

%feature("docstring") casadi::Matrix::isSymbolic "[INTERNAL]  Check if
symbolic (Dense) Sparse matrices invariable return false.

";

%feature("docstring") casadi::Matrix::log10 "[INTERNAL]  Operations defined
in the standard namespace for unambiguous access and Numpy compatibility

";

%feature("docstring") casadi::Matrix::size1 "

Get the first dimension (i.e. number of rows)

";

%feature("docstring") casadi::Matrix::mul_full "[INTERNAL]  Matrix-matrix
product.

";

%feature("docstring") casadi::Matrix::__div__ "[INTERNAL]  Elementwise
operations Octave/Python naming

";

%feature("docstring") casadi::Matrix::getArrayBV "[INTERNAL]  Bitwise get
the non-zero elements, array.

";

%feature("docstring") casadi::Matrix::setZero "[INTERNAL]  Set all elements
to zero.

";

%feature("docstring") casadi::Matrix::nan "[INTERNAL]  create a matrix with
all nan

";

%feature("docstring") casadi::Matrix::indexed_one_based "

>  const Matrix<DataType> casadi::Matrix< T >::indexed_one_based(const Matrix< int > &k) const 
------------------------------------------------------------------------
[INTERNAL] 
Indexing for interfaced languages get a non-zero

>  const Matrix<DataType> casadi::Matrix< T >::indexed_one_based(int rr, int cc) const 
------------------------------------------------------------------------
[INTERNAL] 
get a matrix element

>  const Matrix<DataType> casadi::Matrix< T >::indexed_one_based(int rr) const 
------------------------------------------------------------------------
[INTERNAL] 
Get a vector element.

";

%feature("docstring") casadi::Matrix::__rmul__ "";

%feature("docstring") casadi::Matrix::sparsify "[INTERNAL]  Make a matrix
sparse by removing numerical zeros smaller in absolute value than a
specified tolerance.

";

%feature("docstring") casadi::Matrix::if_else_zero "[INTERNAL]  Operations
defined in the standard namespace for unambiguous access and Numpy
compatibility

";

%feature("docstring") casadi::Matrix::logic_or "[INTERNAL]  Operations
defined in the standard namespace for unambiguous access and Numpy
compatibility

";

%feature("docstring") casadi::Matrix::getName "[INTERNAL]  Get name (only
if symbolic scalar)

";

%feature("docstring") casadi::Matrix::printme "[INTERNAL]  Operations
defined in the standard namespace for unambiguous access and Numpy
compatibility

";

%feature("docstring") casadi::Matrix::elem "

>  const DataType & casadi::Matrix< DataType >::elem(int rr, int cc=0) const 
------------------------------------------------------------------------
[INTERNAL] 
get an element

>  DataType & casadi::Matrix< DataType >::elem(int rr, int cc=0)
------------------------------------------------------------------------
[INTERNAL] 
get a reference to an element

";

%feature("docstring") casadi::Matrix::logic_not "[INTERNAL]  Operations
defined in the standard namespace for unambiguous access and Numpy
compatibility

";

%feature("docstring") casadi::Matrix::fmin "[INTERNAL]  Operations defined
in the standard namespace for unambiguous access and Numpy compatibility

";

%feature("docstring") casadi::Matrix::arctan2 "[INTERNAL]  Operations
defined in the standard namespace for unambiguous access and Numpy
compatibility

";

%feature("docstring") casadi::Matrix::__mpower__ "[INTERNAL]  Elementwise
operations Octave/Python naming

";

%feature("docstring") casadi::Matrix::setBV "[INTERNAL]  Bitwise set,
reinterpreting the data as a bvec_t array

";

%feature("docstring") casadi::Matrix::enlarge "[INTERNAL]  Enlarge matrix
Make the matrix larger by inserting empty rows and columns, keeping the
existing non-zeros.

";

%feature("docstring") casadi::Matrix::fmax "[INTERNAL]  Operations defined
in the standard namespace for unambiguous access and Numpy compatibility

";

%feature("docstring") casadi::Matrix::cos "[INTERNAL]  Operations defined
in the standard namespace for unambiguous access and Numpy compatibility

";

%feature("docstring") casadi::Matrix::arccos "[INTERNAL]  Operations
defined in the standard namespace for unambiguous access and Numpy
compatibility

";

%feature("docstring") casadi::Matrix::mul "[INTERNAL]  Matrix-matrix
product.

";

%feature("docstring") casadi::Matrix::fabs "[INTERNAL]  Operations defined
in the standard namespace for unambiguous access and Numpy compatibility

";

%feature("docstring") casadi::Matrix::indexed_assignment "

>  void casadi::Matrix< T >::indexed_assignment(const Slice &rr, const Slice &cc, const Matrix< DataType > &m)

>  void casadi::Matrix< T >::indexed_assignment(const IndexList &rr, const IndexList &cc, const Matrix< DataType > &m)

>  void casadi::Matrix< T >::indexed_assignment(const Slice &rr, const Matrix< int > &cc, const Matrix< DataType > &m)

>  void casadi::Matrix< T >::indexed_assignment(const Matrix< int > &rr, const Slice &cc, const Matrix< DataType > &m)

>  void casadi::Matrix< T >::indexed_assignment(const Matrix< int > &rr, const IndexList &cc, const Matrix< DataType > &m)

>  void casadi::Matrix< T >::indexed_assignment(const IndexList &rr, const Matrix< int > &cc, const Matrix< DataType > &m)

>  void casadi::Matrix< T >::indexed_assignment(const Matrix< int > &rr, const Matrix< int > &cc, const Matrix< DataType > &m)

>  void casadi::Matrix< T >::indexed_assignment(const Sparsity &sp, const Matrix< DataType > &m)
------------------------------------------------------------------------
[INTERNAL] 
Indexing for interfaced languages get a non-zero

>  void casadi::Matrix< T >::indexed_assignment(const Slice &rr, const Matrix< DataType > &m)

>  void casadi::Matrix< T >::indexed_assignment(const IndexList &rr, const Matrix< DataType > &m)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::Matrix::setWidth "

Set the 'precision, width & scientific' used in printing and serializing to
streams.

";

%feature("docstring") casadi::Matrix::Matrix "

>  casadi::Matrix< DataType >::Matrix(const Sparsity &sparsity, const DataType &val=DataType(0))
------------------------------------------------------------------------
[INTERNAL] 
Sparse matrix with a given sparsity

>  casadi::Matrix< DataType >::Matrix()
------------------------------------------------------------------------
[INTERNAL] 
constructors

empty 0-by-0 matrix constructor

>  casadi::Matrix< DataType >::Matrix(const Matrix< DataType > &m)
------------------------------------------------------------------------
[INTERNAL] 
Copy constructor.

>  casadi::Matrix< DataType >::Matrix(const std::vector< std::vector< DataType > > &m)
------------------------------------------------------------------------
[INTERNAL] 
Dense matrix constructor with data given as vector of vectors.

>  casadi::Matrix< DataType >::Matrix(const Sparsity &sparsity, const std::vector< DataType > &d)
------------------------------------------------------------------------
[INTERNAL] 
Sparse matrix with a given sparsity and non-zero elements.

>  casadi::Matrix< DataType >::Matrix(double val)
------------------------------------------------------------------------
[INTERNAL] 
This constructor enables implicit type conversion from a numeric type.

>  casadi::Matrix< DataType >::Matrix(const std::vector< DataType > &x)
------------------------------------------------------------------------
[INTERNAL] 
Construct from a vector.

Thanks to implicit conversion, you can pretend that Matrix(const SXElement&
x); exists. Note: above remark applies only to C++, not python or octave
interfaces

>  casadi::Matrix< DataType >::Matrix(const std::vector< DataType > &x, int nrow, int ncol)
------------------------------------------------------------------------
[INTERNAL] 
Construct dense matrix from a vector with the elements in column major
ordering.

>  casadi::Matrix< T >::Matrix(const Matrix< A > &x)
------------------------------------------------------------------------

Create a matrix from a matrix with a different type of matrix entries
(assuming that the scalar conversion is valid)

>  casadi::Matrix< T >::Matrix(const std::vector< A > &x)
------------------------------------------------------------------------

Create an expression from an stl vector.

>  casadi::Matrix< T >::Matrix(const std::vector< A > &x, int nrow, int ncol)
------------------------------------------------------------------------

Create a non-vector expression from an stl vector.

";

%feature("docstring") casadi::Matrix::sym "

>  static Matrix< DataType >  casadi::GenericMatrix< Matrix< DataType >  >::sym(const std::string &name, int nrow=1, int ncol=1)
------------------------------------------------------------------------

Create an nrow-by-ncol symbolic primitive.

>  static Matrix< DataType >  casadi::GenericMatrix< Matrix< DataType >  >::sym(const std::string &name, const std::pair< int, int > &rc)
------------------------------------------------------------------------

Construct a symbolic primitive with given dimensions.

>  static Matrix< DataType >  casadi::GenericMatrix< Matrix< DataType >  >::sym(const std::string &name, const Sparsity &sp)
------------------------------------------------------------------------

Create symbolic primitive with a given sparsity pattern.

>  static std::vector<Matrix< DataType >  > casadi::GenericMatrix< Matrix< DataType >  >::sym(const std::string &name, const Sparsity &sp, int p)
------------------------------------------------------------------------

Create a vector of length p with with matrices with symbolic primitives of
given sparsity.

>  static std::vector<Matrix< DataType >  > casadi::GenericMatrix< Matrix< DataType >  >::sym(const std::string &name, int nrow, int ncol, int p)
------------------------------------------------------------------------

Create a vector of length p with nrow-by-ncol symbolic primitives.

>  static std::vector<std::vector<Matrix< DataType > > > casadi::GenericMatrix< Matrix< DataType >  >::sym(const std::string &name, const Sparsity &sp, int p, int r)
------------------------------------------------------------------------

Create a vector of length r of vectors of length p with symbolic primitives
with given sparsity.

>  static std::vector<std::vector<Matrix< DataType > > > casadi::GenericMatrix< Matrix< DataType >  >::sym(const std::string &name, int nrow, int ncol, int p, int r)
------------------------------------------------------------------------

Create a vector of length r of vectors of length p with nrow-by-ncol
symbolic primitives.

";

%feature("docstring") casadi::Matrix::matrix_matrix "[INTERNAL]  Create
nodes by their ID.

";

%feature("docstring") casadi::Matrix::binary "[INTERNAL]  Create nodes by
their ID.

";

%feature("docstring") casadi::Matrix::isInteger "[INTERNAL]  Check if the
matrix is integer-valued (note that false negative answers are possible)

";

%feature("docstring") casadi::Matrix::__mldivide__ "

Matrix division from left.

";

%feature("docstring") casadi::Matrix::trans "[INTERNAL]   Transpose the
matrix.

";

%feature("docstring") casadi::Matrix::sizeL "

Get the number of non-zeros in the lower triangular half.

";

%feature("docstring") casadi::Matrix::arcsinh "[INTERNAL]  Operations
defined in the standard namespace for unambiguous access and Numpy
compatibility

";

%feature("docstring") casadi::Matrix::append "[INTERNAL]  Append a matrix
vertically (NOTE: only efficient if vector)

";

%feature("docstring") casadi::Matrix::__rge__ "";

%feature("docstring") casadi::Matrix::sizeU "

Get the number of non-zeros in the upper triangular half.

";

%feature("docstring") casadi::Matrix::__rtruediv__ "";

%feature("docstring") casadi::Matrix::begin "

>  iterator casadi::Matrix< T >::begin()
------------------------------------------------------------------------
[INTERNAL] 
Get iterators to beginning and end.

>  const_iterator casadi::Matrix< T >::begin() const 
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::Matrix::rbegin "[INTERNAL] ";

%feature("docstring") casadi::Matrix::print "[INTERNAL]  Printing

";


// File: classcasadi_1_1MayerInputIOSchemeVector.xml
%feature("docstring") casadi::MayerInputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring")
casadi::MayerInputIOSchemeVector::MayerInputIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::MayerInputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::MayerInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::MayerInputIOSchemeVector "[INTERNAL]  Helper
function for 'MayerInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::MayerInputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::MayerInputIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") casadi::MayerInputIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::MayerInputIOSchemeVector::__len__ "[INTERNAL]
";


// File: classcasadi_1_1MinusInfSX.xml
%feature("docstring") casadi::MinusInfSX::getValue "[INTERNAL]  Get the
value.

";

%feature("docstring") casadi::MinusInfSX::hasDep "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::MinusInfSX::isSymbolic "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::MinusInfSX::getIntValue "[INTERNAL]  Get
value of a constant node.

";

%feature("docstring") casadi::MinusInfSX::isInf "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::MinusInfSX::isNan "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::MinusInfSX::marked "[INTERNAL] ";

%feature("docstring") casadi::MinusInfSX::isConstant "[INTERNAL]
Properties.

";

%feature("docstring") casadi::MinusInfSX::getName "[INTERNAL] ";

%feature("docstring") casadi::MinusInfSX::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") casadi::MinusInfSX::isMinusInf "[INTERNAL]
Properties.

";

%feature("docstring") casadi::MinusInfSX::print "[INTERNAL]  print

";

%feature("docstring") casadi::MinusInfSX::isZero "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::MinusInfSX::isOne "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::MinusInfSX::~MinusInfSX "[INTERNAL] ";

%feature("docstring") casadi::MinusInfSX::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") casadi::MinusInfSX "[INTERNAL]  Represents a minus
infinity SX.

Joel Andersson

C++ includes: constant_sx.hpp ";

%feature("docstring") casadi::MinusInfSX::dep "[INTERNAL]  get the
reference of a child

";

%feature("docstring") casadi::MinusInfSX::isAlmostZero "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::MinusInfSX::isInteger "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::MinusInfSX::init "[INTERNAL]  Initialize the
node (currently used only to give a similar interface to MXNode)

";

%feature("docstring") casadi::MinusInfSX::mark "[INTERNAL] ";

%feature("docstring") casadi::MinusInfSX::isSmooth "[INTERNAL]  Check if
smooth.

";

%feature("docstring") casadi::MinusInfSX::MinusInfSX "[INTERNAL] ";

%feature("docstring") casadi::MinusInfSX::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") casadi::MinusInfSX::isMinusOne "[INTERNAL]  check
properties of a node

";


// File: classcasadi_1_1MinusOneSX.xml
%feature("docstring") casadi::MinusOneSX::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") casadi::MinusOneSX::MinusOneSX "[INTERNAL] ";

%feature("docstring") casadi::MinusOneSX::marked "[INTERNAL] ";

%feature("docstring") casadi::MinusOneSX::isConstant "[INTERNAL]
Properties.

";

%feature("docstring") casadi::MinusOneSX::isNan "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::MinusOneSX::~MinusOneSX "[INTERNAL] ";

%feature("docstring") casadi::MinusOneSX::isSymbolic "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::MinusOneSX::isZero "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::MinusOneSX::isInf "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::MinusOneSX::init "[INTERNAL]  Initialize the
node (currently used only to give a similar interface to MXNode)

";

%feature("docstring") casadi::MinusOneSX::mark "[INTERNAL] ";

%feature("docstring") casadi::MinusOneSX::getName "[INTERNAL] ";

%feature("docstring") casadi::MinusOneSX::isOne "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::MinusOneSX "[INTERNAL]  Represents a minus
one SX.

Joel Andersson

C++ includes: constant_sx.hpp ";

%feature("docstring") casadi::MinusOneSX::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") casadi::MinusOneSX::isMinusInf "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::MinusOneSX::hasDep "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::MinusOneSX::isMinusOne "[INTERNAL]
Properties.

";

%feature("docstring") casadi::MinusOneSX::print "[INTERNAL]  print

";

%feature("docstring") casadi::MinusOneSX::isAlmostZero "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::MinusOneSX::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") casadi::MinusOneSX::isInteger "[INTERNAL]
Properties.

";

%feature("docstring") casadi::MinusOneSX::isSmooth "[INTERNAL]  Check if
smooth.

";

%feature("docstring") casadi::MinusOneSX::getIntValue "[INTERNAL]  Get the
value.

";

%feature("docstring") casadi::MinusOneSX::getValue "[INTERNAL]  Get the
value.

";

%feature("docstring") casadi::MinusOneSX::dep "[INTERNAL]  get the
reference of a child

";


// File: classcasadi_1_1MultipleOutput.xml
%feature("docstring") casadi::MultipleOutput::shape "[INTERNAL] ";

%feature("docstring") casadi::MultipleOutput::getVertcat "[INTERNAL]
Create a vertical concatenation node (vectors only)

";

%feature("docstring") casadi::MultipleOutput::__nonzero__ "[INTERNAL]
Check the truth value of this node.

";

%feature("docstring") casadi::MultipleOutput::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") casadi::MultipleOutput::isInit "[INTERNAL]  Check if
the object has been initialized.

";

%feature("docstring") casadi::MultipleOutput::getMultiplication "[INTERNAL]
Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") casadi::MultipleOutput::isIdentity "[INTERNAL]  Check
if identity matrix.

";

%feature("docstring") casadi::MultipleOutput::getHorzcat "[INTERNAL]
Create a horizontal concatenation node.

";

%feature("docstring") casadi::MultipleOutput::getAddNonzeros "[INTERNAL]
Add the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::MultipleOutput::isValue "[INTERNAL]  Check if
a certain value.

";

%feature("docstring") casadi::MultipleOutput::getReshape "[INTERNAL]
Reshape.

";

%feature("docstring") casadi::MultipleOutput::getFunctionInput "[INTERNAL]
Get function input.

";

%feature("docstring") casadi::MultipleOutput::assign "

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") casadi::MultipleOutput::getVertsplit "[INTERNAL]
Create a vertical split node (vectors only)

";

%feature("docstring") casadi::MultipleOutput::getSetNonzeros "[INTERNAL]
Assign the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::MultipleOutput::MultipleOutput "[INTERNAL]
Constructor.

";

%feature("docstring") casadi::MultipleOutput "[INTERNAL]

Joel Andersson

C++ includes: multiple_output.hpp ";

%feature("docstring") casadi::MultipleOutput::numInplace "[INTERNAL]  Can
the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") casadi::MultipleOutput::getFunction "[INTERNAL]  Get
function reference.

";

%feature("docstring") casadi::MultipleOutput::getSubRef "[INTERNAL]  Get
submatrix reference.

";

%feature("docstring") casadi::MultipleOutput::sameOpAndDeps "[INTERNAL]
Checks if two nodes have the same operation and have equivalent dependencies
up to a given depth.

";

%feature("docstring") casadi::MultipleOutput::getOutput "[INTERNAL]  Get an
output.

";

%feature("docstring") casadi::MultipleOutput::dep "

>  const MX & casadi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & casadi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::MultipleOutput::evaluateMX "

>  void casadi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX)

>  void casadi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") casadi::MultipleOutput::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") casadi::MultipleOutput::mapping "[INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") casadi::MultipleOutput::size "[INTERNAL] ";

%feature("docstring") casadi::MultipleOutput::setSparsity "[INTERNAL]  Set
the sparsity.

";

%feature("docstring") casadi::MultipleOutput::getInnerProd "[INTERNAL]
Inner product.

";

%feature("docstring") casadi::MultipleOutput::getHorzsplit "[INTERNAL]
Create a horizontal split node.

";

%feature("docstring") casadi::MultipleOutput::getBinary "[INTERNAL]  Get a
binary operation operation (matrix-matrix)

";

%feature("docstring") casadi::MultipleOutput::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::MultipleOutput::deepCopyMembers "[INTERNAL]
Deep copy data members.

";

%feature("docstring") casadi::MultipleOutput::getName "[INTERNAL]  Get the
name.

";

%feature("docstring") casadi::MultipleOutput::isOutputNode "[INTERNAL]
Check if evaluation output.

";

%feature("docstring") casadi::MultipleOutput::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") casadi::MultipleOutput::isUnaryOp "[INTERNAL]  Check
if unary operation.

";

%feature("docstring") casadi::MultipleOutput::init "[INTERNAL]  Initialize
the object.

";

%feature("docstring") casadi::MultipleOutput::getNormInf "[INTERNAL]
Infinity norm.

";

%feature("docstring") casadi::MultipleOutput::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") casadi::MultipleOutput::getInverse "[INTERNAL]
Inverse.

";

%feature("docstring") casadi::MultipleOutput::getNumOutputs "[INTERNAL]
Number of outputs.

";

%feature("docstring") casadi::MultipleOutput::print "

>  void casadi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void casadi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") casadi::MultipleOutput::propagateSparsity "

>  virtual void casadi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity.

>  void casadi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity, no work.

";

%feature("docstring") casadi::MultipleOutput::evaluateSX "[INTERNAL]
Evaluate symbolically (SX)

";

%feature("docstring") casadi::MultipleOutput::hasDep "[INTERNAL]  Does the
node depend on other nodes.

";

%feature("docstring") casadi::MultipleOutput::isNonLinear "[INTERNAL]  Is
the node nonlinear.

";

%feature("docstring") casadi::MultipleOutput::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") casadi::MultipleOutput::getBinarySwitch "[INTERNAL]
Get a binary operation operation.

";

%feature("docstring") casadi::MultipleOutput::getValue "[INTERNAL]  Get the
value (only for scalar constant nodes)

";

%feature("docstring") casadi::MultipleOutput::getNormF "[INTERNAL]
Frobenius norm.

";

%feature("docstring") casadi::MultipleOutput::isMultipleOutput "[INTERNAL]
Check if a multiple output node.

";

%feature("docstring") casadi::MultipleOutput::nTmp "[INTERNAL]  Get number
of temporary variables needed.

";

%feature("docstring") casadi::MultipleOutput::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") casadi::MultipleOutput::numel "[INTERNAL]  Get shape.

";

%feature("docstring") casadi::MultipleOutput::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") casadi::MultipleOutput::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") casadi::MultipleOutput::isEqual "[INTERNAL]  Check if
two nodes are equivalent up to a given depth.

";

%feature("docstring") casadi::MultipleOutput::sparsity "

>  virtual const Sparsity& casadi::MultipleOutput::sparsity(int oind) const =0
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

>  const Sparsity& casadi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

";

%feature("docstring") casadi::MultipleOutput::evaluateD "[INTERNAL]
Evaluate numerically.

";

%feature("docstring") casadi::MultipleOutput::getSetSparse "[INTERNAL]
Create set sparse.

";

%feature("docstring") casadi::MultipleOutput::simplifyMe "[INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring") casadi::MultipleOutput::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") casadi::MultipleOutput::getFunctionOutput "[INTERNAL]
Get function output.

";

%feature("docstring") casadi::MultipleOutput::assertInit "[INTERNAL]
Assert that the object has been initialized.

";

%feature("docstring") casadi::MultipleOutput::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") casadi::MultipleOutput::getMatrixValue "[INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring") casadi::MultipleOutput::~MultipleOutput "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::MultipleOutput::getNorm2 "[INTERNAL]
Spectral norm.

";

%feature("docstring") casadi::MultipleOutput::isBinaryOp "[INTERNAL]  Check
if binary operation.

";

%feature("docstring") casadi::MultipleOutput::addDependency "[INTERNAL]
Add a dependency.

";

%feature("docstring") casadi::MultipleOutput::clone "[INTERNAL]  Clone
function.

";

%feature("docstring") casadi::MultipleOutput::getSolve "[INTERNAL]   Solve
a system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") casadi::MultipleOutput::printPart "[INTERNAL]  Print
a part of the expression.

";

%feature("docstring") casadi::MultipleOutput::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::MultipleOutput::getUnary "[INTERNAL]  Get a
unary operation.

";

%feature("docstring") casadi::MultipleOutput::setDependencies "

>  void casadi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void casadi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") casadi::MultipleOutput::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") casadi::MultipleOutput::size2 "[INTERNAL] ";

%feature("docstring") casadi::MultipleOutput::getGetNonzeros "[INTERNAL]
Get the nonzeros of matrix.

";

%feature("docstring") casadi::MultipleOutput::size1 "[INTERNAL] ";


// File: classcasadi_1_1Multiplication.xml
%feature("docstring") casadi::Multiplication::propagateSparsity "[INTERNAL]
Propagate sparsity.

";

%feature("docstring") casadi::Multiplication::getMultiplication "[INTERNAL]
Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") casadi::Multiplication::getOutput "[INTERNAL]  Get an
output.

";

%feature("docstring") casadi::Multiplication::isValue "[INTERNAL]  Check if
a certain value.

";

%feature("docstring") casadi::Multiplication::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") casadi::Multiplication::getSetSparse "[INTERNAL]
Create set sparse.

";

%feature("docstring") casadi::Multiplication::isOutputNode "[INTERNAL]
Check if evaluation output.

";

%feature("docstring") casadi::Multiplication::getBinarySwitch "[INTERNAL]
Get a binary operation operation.

";

%feature("docstring") casadi::Multiplication::simplifyMe "[INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring") casadi::Multiplication::clone "[INTERNAL]  Clone
function.

";

%feature("docstring") casadi::Multiplication::getSetNonzeros "[INTERNAL]
Assign the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::Multiplication::getFunctionOutput "[INTERNAL]
Get function output.

";

%feature("docstring") casadi::Multiplication::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") casadi::Multiplication::getHorzsplit "[INTERNAL]
Create a horizontal split node.

";

%feature("docstring") casadi::Multiplication::getNormF "[INTERNAL]
Frobenius norm.

";

%feature("docstring") casadi::Multiplication::getName "[INTERNAL]  Get the
name.

";

%feature("docstring") casadi::Multiplication::getMatrixValue "[INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring") casadi::Multiplication::isMultipleOutput "[INTERNAL]
Check if a multiple output node.

";

%feature("docstring") casadi::Multiplication "[INTERNAL]  An MX atomic for
matrix-matrix product, note that the first factor must be provided
transposed.

Joel Andersson

C++ includes: multiplication.hpp ";

%feature("docstring") casadi::Multiplication::nTmp "[INTERNAL]  Get number
of temporary variables needed.

";

%feature("docstring") casadi::Multiplication::isBinaryOp "[INTERNAL]  Check
if binary operation.

";

%feature("docstring") casadi::Multiplication::assertInit "[INTERNAL]
Assert that the object has been initialized.

";

%feature("docstring") casadi::Multiplication::getFunction "[INTERNAL]  Get
function reference.

";

%feature("docstring") casadi::Multiplication::getFunctionInput "[INTERNAL]
Get function input.

";

%feature("docstring") casadi::Multiplication::isEqual "[INTERNAL]  Check if
two nodes are equivalent up to a given depth.

";

%feature("docstring") casadi::Multiplication::isIdentity "[INTERNAL]  Check
if identity matrix.

";

%feature("docstring") casadi::Multiplication::getHorzcat "[INTERNAL]
Create a horizontal concatenation node.

";

%feature("docstring") casadi::Multiplication::getAddNonzeros "[INTERNAL]
Add the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::Multiplication::evaluateMX "

>  void casadi::Multiplication< TrX, TrY >::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void casadi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") casadi::Multiplication::size "[INTERNAL] ";

%feature("docstring") casadi::Multiplication::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") casadi::Multiplication::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") casadi::Multiplication::shape "[INTERNAL] ";

%feature("docstring") casadi::Multiplication::Multiplication "[INTERNAL]
Constructor.

";

%feature("docstring") casadi::Multiplication::getVertcat "[INTERNAL]
Create a vertical concatenation node (vectors only)

";

%feature("docstring") casadi::Multiplication::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") casadi::Multiplication::isNonLinear "[INTERNAL]  Is
the node nonlinear.

";

%feature("docstring") casadi::Multiplication::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") casadi::Multiplication::getSolve "[INTERNAL]   Solve
a system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") casadi::Multiplication::getNorm2 "[INTERNAL]
Spectral norm.

";

%feature("docstring") casadi::Multiplication::size1 "[INTERNAL] ";

%feature("docstring") casadi::Multiplication::getUnary "[INTERNAL]  Get a
unary operation.

";

%feature("docstring") casadi::Multiplication::dep "

>  const MX & casadi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & casadi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::Multiplication::deepCopyMembers "[INTERNAL]
Deep copy data members.

";

%feature("docstring") casadi::Multiplication::getBinary "[INTERNAL]  Get a
binary operation operation (matrix-matrix)

";

%feature("docstring") casadi::Multiplication::getNormInf "[INTERNAL]
Infinity norm.

";

%feature("docstring") casadi::Multiplication::setSparsity "[INTERNAL]  Set
the sparsity.

";

%feature("docstring") casadi::Multiplication::sameOpAndDeps "[INTERNAL]
Checks if two nodes have the same operation and have equivalent dependencies
up to a given depth.

";

%feature("docstring") casadi::Multiplication::sparsity "

>  const Sparsity& casadi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & casadi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") casadi::Multiplication::evaluateGen "[INTERNAL]
Evaluate the function (template)

";

%feature("docstring") casadi::Multiplication::getValue "[INTERNAL]  Get the
value (only for scalar constant nodes)

";

%feature("docstring") casadi::Multiplication::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") casadi::Multiplication::getGetNonzeros "[INTERNAL]
Get the nonzeros of matrix.

";

%feature("docstring") casadi::Multiplication::mapping "[INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") casadi::Multiplication::__nonzero__ "[INTERNAL]
Check the truth value of this node.

";

%feature("docstring") casadi::Multiplication::addDependency "[INTERNAL]
Add a dependency.

";

%feature("docstring") casadi::Multiplication::print "

>  void casadi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void casadi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") casadi::Multiplication::getSubRef "[INTERNAL]  Get
submatrix reference.

";

%feature("docstring") casadi::Multiplication::hasDep "[INTERNAL]  Does the
node depend on other nodes.

";

%feature("docstring") casadi::Multiplication::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") casadi::Multiplication::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") casadi::Multiplication::isUnaryOp "[INTERNAL]  Check
if unary operation.

";

%feature("docstring") casadi::Multiplication::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") casadi::Multiplication::getVertsplit "[INTERNAL]
Create a vertical split node (vectors only)

";

%feature("docstring") casadi::Multiplication::numInplace "[INTERNAL]  Can
the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") casadi::Multiplication::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::Multiplication::init "[INTERNAL]  Initialize
the object.

";

%feature("docstring") casadi::Multiplication::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::Multiplication::getInverse "[INTERNAL]
Inverse.

";

%feature("docstring") casadi::Multiplication::getNumOutputs "[INTERNAL]
Number of outputs.

";

%feature("docstring") casadi::Multiplication::isInit "[INTERNAL]  Check if
the object has been initialized.

";

%feature("docstring") casadi::Multiplication::getInnerProd "[INTERNAL]
Inner product.

";

%feature("docstring") casadi::Multiplication::setDependencies "

>  void casadi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void casadi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") casadi::Multiplication::printPart "[INTERNAL]  Print
a part of the expression.

";

%feature("docstring") casadi::Multiplication::evaluateD "[INTERNAL]
Evaluate the function numerically.

";

%feature("docstring") casadi::Multiplication::numel "[INTERNAL]  Get shape.

";

%feature("docstring") casadi::Multiplication::evaluateSX "[INTERNAL]
Evaluate the function symbolically (SX)

";

%feature("docstring") casadi::Multiplication::assign "

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") casadi::Multiplication::getReshape "[INTERNAL]
Reshape.

";

%feature("docstring") casadi::Multiplication::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") casadi::Multiplication::size2 "[INTERNAL] ";

%feature("docstring") casadi::Multiplication::~Multiplication "[INTERNAL]
Destructor.

";


// File: classcasadi_1_1MX.xml


/*  Operations from the left  */

/* For Python

*/

/*  Construct symbolic primitives  */

/* The \"sym\" function is intended to work in a similar way as \"sym\" used
in the Symbolic Toolbox for Matlab but instead creating a CasADi symbolic
primitive.

*/ %feature("docstring") casadi::MX::indexed "

get a non-zero

Indexing for interfaced languages

";

%feature("docstring") casadi::MX::inner_prod "";

%feature("docstring") casadi::MX::arctan2 "";

%feature("docstring") casadi::MX::__constpow__ "";

%feature("docstring") casadi::MX::sizeL "

Get the number of non-zeros in the lower triangular half.

";

%feature("docstring") casadi::MX "

MX - Matrix expression.

The MX class is used to build up trees made up from MXNodes. It is a more
general graph representation than the scalar expression, SX, and much less
efficient for small objects. On the other hand, the class allows much more
general operations than does SX, in particular matrix valued operations and
calls to arbitrary differentiable functions.

The MX class is designed to have identical syntax with the Matrix<> template
class, and uses Matrix<double> as its internal representation of the values
at a node. By keeping the syntaxes identical, it is possible to switch from
one class to the other, as well as inlining MX functions to SXElement
functions.

Note that an operation is always \"lazy\", making a matrix multiplication
will create a matrix multiplication node, not perform the actual
multiplication.

Joel Andersson

C++ includes: mx.hpp ";

%feature("docstring") casadi::MX::__gt__ "

No need to have both < and >

";

%feature("docstring") casadi::MX::sizeD "

Get get the number of non-zeros on the diagonal.

";

%feature("docstring") casadi::MX::dimString "

Get string representation of dimensions. The representation is (nrow x ncol
= numel | size)

";

%feature("docstring") casadi::MX::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::MX::__copysign__ "";

%feature("docstring") casadi::MX::erase "

Erase a submatrix.

";

%feature("docstring") casadi::MX::__rsub__ "";

%feature("docstring") casadi::MX::densify "

Make the matrix dense.

";

%feature("docstring") casadi::MX::getNumOutputs "

Number of outputs.

";

%feature("docstring") casadi::MX::__mul__ "";

%feature("docstring") casadi::MX::__lt__ "";

%feature("docstring") casadi::MX::arcsin "";

%feature("docstring") casadi::MX::trans "

Transpose the matrix.

";

%feature("docstring") casadi::MX::attachAssert "

returns itself, but with an assertion attached

If y does not evaluate to 1, a runtime error is raised

";

%feature("docstring") casadi::MX::fmod "";

%feature("docstring") casadi::MX::__rgt__ "";

%feature("docstring") casadi::MX::nz_indexed_zero_based_assignment "

get a non-zero

Indexing for interfaced languages

";

%feature("docstring") casadi::MX::append "

Append a matrix vertically (NOTE: only efficient if vector)

";

%feature("docstring") casadi::MX::assignNode "[INTERNAL]  Assign the node
to a node class pointer (or null)

";

%feature("docstring") casadi::MX::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::MX::indexed_one_based "

>  const MX casadi::MX::indexed_one_based(int rr, int cc) const 
------------------------------------------------------------------------

get a matrix element

>  const MX casadi::MX::indexed_one_based(int rr) const 
------------------------------------------------------------------------

get a non-zero

Indexing for interfaced languages

";

%feature("docstring") casadi::MX::getTemp "[INTERNAL]  Get the temporary
variable

";

%feature("docstring") casadi::MX::__rne__ "";

%feature("docstring") casadi::MX::binary "

Create nodes by their ID.

";

%feature("docstring") casadi::MX::indexed_assignment "

>  void casadi::MX::indexed_assignment(const IndexList &rr, const IndexList &cc, const MX &m)

>  void casadi::MX::indexed_assignment(const Slice &rr, const Slice &cc, const MX &m)

>  void casadi::MX::indexed_assignment(const Sparsity &sp, const MX &m)

>  void casadi::MX::indexed_assignment(const Matrix< int > &rr, const Slice &cc, const MX &m)

>  void casadi::MX::indexed_assignment(const Slice &rr, const Matrix< int > &cc, const MX &m)

>  void casadi::MX::indexed_assignment(const Matrix< int > &rr, const IndexList &cc, const MX &m)

>  void casadi::MX::indexed_assignment(const IndexList &rr, const Matrix< int > &cc, const MX &m)

>  void casadi::MX::indexed_assignment(const Matrix< int > &rr, const Matrix< int > &cc, const MX &m)
------------------------------------------------------------------------

get a non-zero

Indexing for interfaced languages

";

%feature("docstring") casadi::MX::sparsity "

Get the sparsity pattern.

";

%feature("docstring") casadi::MX::sub "[INTERNAL] ";

%feature("docstring") casadi::MX::size2 "

Get the second dimension (i.e. number of columns)

";

%feature("docstring") casadi::MX::log10 "";

%feature("docstring") casadi::MX::size1 "

Get the first dimension (i.e. number of rows)

";

%feature("docstring") casadi::MX::sqrt "";

%feature("docstring") casadi::MX::isEqual "

>  bool casadi::MX::isEqual(const MX &y, int depth=0) const 
------------------------------------------------------------------------

Check if two nodes are equivalent up to a given depth. Depth=0 checks if the
expressions are identical, i.e. points to the same node.

a = x*x b = x*x

a.isEqual(b, 0) will return false, but a.isEqual(b, 1) will return true

>  bool casadi::MX::isEqual(const MXNode *y, int depth=0) const 
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::MX::mul "";

%feature("docstring") casadi::MX::isMultiplication "

Check if multiplication.

";

%feature("docstring") casadi::MX::__add__ "

all binary operations

";

%feature("docstring") casadi::MX::size "

>  int casadi::GenericMatrix< MX  >::size() const
------------------------------------------------------------------------

Get the number of (structural) non-zero elements.

>  int casadi::GenericMatrix< MX  >::size(SparsityType sp) const
------------------------------------------------------------------------

Get the number if non-zeros for a given sparsity pattern.

";

%feature("docstring") casadi::MX::~MX "[INTERNAL]  Destructor.

";

%feature("docstring") casadi::MX::mul_smart "

Matrix-matrix multiplication. Attempts to identify quick returns on matrix-
level and delegates to MatType::mul_full if no such quick returns are found.

";

%feature("docstring") casadi::MX::lift "

Lift an expression.

";

%feature("docstring") casadi::MX::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::MX::nz_indexed_assignment "

get a non-zero

Indexing for interfaced languages

";

%feature("docstring") casadi::MX::arccos "";

%feature("docstring") casadi::MX::sizeU "

Get the number of non-zeros in the upper triangular half.

";

%feature("docstring") casadi::MX::isEvaluationOutput "

Check if evaluation output.

";

%feature("docstring") casadi::MX::__rmul__ "";

%feature("docstring") casadi::MX::exp "";

%feature("docstring") casadi::MX::__rle__ "";

%feature("docstring") casadi::MX::sparse "

create a sparse matrix with all zeros

";

%feature("docstring") casadi::MX::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::MX::ones "

Create a dense matrix or a matrix with specified sparsity with all entries
one.

";

%feature("docstring") casadi::MX::addToSum "

Add an expression to the expression if the expression is non-empty,
otherwise assign.

";

%feature("docstring") casadi::MX::__radd__ "";

%feature("docstring") casadi::MX::isDense "

Check if the matrix expression is dense.

";

%feature("docstring") casadi::MX::outer_prod "";

%feature("docstring") casadi::MX::indexed_zero_based "

get a non-zero

Indexing for interfaced languages

";

%feature("docstring") casadi::MX::isIdentity "

check if identity

";

%feature("docstring") casadi::MX::log "";

%feature("docstring") casadi::MX::isMinusOne "

check if zero (note that false negative answers are possible)

";

%feature("docstring") casadi::MX::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::MX::__sub__ "";

%feature("docstring") casadi::MX::inf "

create a matrix with all inf

";

%feature("docstring") casadi::MX::isSymbolicSparse "

check if all nonzeros are symbolic (this function is currently identical to
isSymbolic)

";

%feature("docstring") casadi::MX::constpow "";

%feature("docstring") casadi::MX::print "[INTERNAL]  Print a description of
the object.

";

%feature("docstring") casadi::MX::isRegular "

Checks if expression does not contain NaN or Inf.

";

%feature("docstring") casadi::MX::getName "

Get the name.

";

%feature("docstring") casadi::MX::tan "";

%feature("docstring") casadi::MX::getDep "

Get the nth dependency as MX.

";

%feature("docstring") casadi::MX::__mpower__ "";

%feature("docstring") casadi::MX::__le__ "";

%feature("docstring") casadi::MX::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::MX::printPtr "[INTERNAL]  Print the pointer
to the internal class

";

%feature("docstring") casadi::MX::indexed_zero_based_assignment "

>  void casadi::MX::indexed_zero_based_assignment(int rr, int cc, const MX &m)

>  void casadi::MX::indexed_zero_based_assignment(const Matrix< int > &k, const MX &m)
------------------------------------------------------------------------

get a non-zero

Indexing for interfaced languages

";

%feature("docstring") casadi::MX::isScalar "

Check if the matrix expression is scalar.

";

%feature("docstring") casadi::MX::setSparse "

Set sparse.

";

%feature("docstring") casadi::MX::sinh "";

%feature("docstring") casadi::MX::isTril "

Check if the matrix is lower triangular.

";

%feature("docstring") casadi::MX::__ge__ "

No need to have both <= and >=.

";

%feature("docstring") casadi::MX::setSub "[INTERNAL] ";

%feature("docstring") casadi::MX::isZero "

check if zero (note that false negative answers are possible)

";

%feature("docstring") casadi::MX::logic_and "";

%feature("docstring") casadi::MX::getValue "

Get the value (only for scalar constant nodes)

";

%feature("docstring") casadi::MX::arctanh "";

%feature("docstring") casadi::MX::getEvaluationOutput "

Get the index of evaluation output - only valid when isEvaluationoutput() is
true.

";

%feature("docstring") casadi::MX::isTriu "

Check if the matrix is upper triangular.

";

%feature("docstring") casadi::MX::arctan "";

%feature("docstring") casadi::MX::__mrdivide__ "";

%feature("docstring") casadi::MX::appendColumns "

Append a matrix horizontally.

";

%feature("docstring") casadi::MX::__hash__ "

Returns a number that is unique for a given MXNode. If the MX does not point
to any node, 0 is returned.

";

%feature("docstring") casadi::MX::getOutput "

Get an output.

";

%feature("docstring") casadi::MX::zeros "

Create a dense matrix or a matrix with specified sparsity with all entries
zero.

";

%feature("docstring") casadi::MX::erfinv "";

%feature("docstring") casadi::MX::__rdiv__ "";

%feature("docstring") casadi::MX::T "[INTERNAL]   Transpose the matrix
(shorthand)

";

%feature("docstring") casadi::MX::sign "";

%feature("docstring") casadi::MX::cosh "";

%feature("docstring") casadi::MX::printme "";

%feature("docstring") casadi::MX::getCount "[INTERNAL]  Get the reference
count.

";

%feature("docstring") casadi::MX::nan "

create a matrix with all nan

";

%feature("docstring") casadi::MX::isTranspose "

Is the expression a transpose?

";

%feature("docstring") casadi::MX::__rtruediv__ "";

%feature("docstring") casadi::MX::assignNodeNoCount "[INTERNAL]  Assign the
node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::MX::logic_not "";

%feature("docstring") casadi::MX::erf "";

%feature("docstring") casadi::MX::arcsinh "";

%feature("docstring") casadi::MX::__eq__ "";

%feature("docstring") casadi::MX::at "

>  const MX casadi::MX::at(int k) const 
------------------------------------------------------------------------
[INTERNAL] 
Get a non-zero element, with bounds checking.

>  NonZeros< MX, int > casadi::MX::at(int k)
------------------------------------------------------------------------
[INTERNAL] 
Access a non-zero element, with bounds checking.

Access a non-zero element.

";

%feature("docstring") casadi::MX::sin "";

%feature("docstring") casadi::MX::nz_indexed_one_based_assignment "

set a non-zero

";

%feature("docstring") casadi::MX::isCommutative "

Check if commutative operation.

";

%feature("docstring") casadi::MX::repmat "

create a matrix by repeating an existing matrix

";

%feature("docstring") casadi::MX::__rlt__ "";

%feature("docstring") casadi::MX::__div__ "";

%feature("docstring") casadi::MX::enlarge "

Enlarge matrix Make the matrix larger by inserting empty rows and columns,
keeping the existing non-zeros.

";

%feature("docstring") casadi::MX::sym "

>  static MX  casadi::GenericMatrix< MX  >::sym(const std::string &name, int nrow=1, int ncol=1)
------------------------------------------------------------------------

Create an nrow-by-ncol symbolic primitive.

>  static MX  casadi::GenericMatrix< MX  >::sym(const std::string &name, const std::pair< int, int > &rc)
------------------------------------------------------------------------

Construct a symbolic primitive with given dimensions.

>  static MX  casadi::GenericMatrix< MX  >::sym(const std::string &name, const Sparsity &sp)
------------------------------------------------------------------------

Create symbolic primitive with a given sparsity pattern.

>  static std::vector<MX  > casadi::GenericMatrix< MX  >::sym(const std::string &name, const Sparsity &sp, int p)
------------------------------------------------------------------------

Create a vector of length p with with matrices with symbolic primitives of
given sparsity.

>  static std::vector<MX  > casadi::GenericMatrix< MX  >::sym(const std::string &name, int nrow, int ncol, int p)
------------------------------------------------------------------------

Create a vector of length p with nrow-by-ncol symbolic primitives.

>  static std::vector<std::vector<MX > > casadi::GenericMatrix< MX  >::sym(const std::string &name, const Sparsity &sp, int p, int r)
------------------------------------------------------------------------

Create a vector of length r of vectors of length p with symbolic primitives
with given sparsity.

>  static std::vector<std::vector<MX > > casadi::GenericMatrix< MX  >::sym(const std::string &name, int nrow, int ncol, int p, int r)
------------------------------------------------------------------------

Create a vector of length r of vectors of length p with nrow-by-ncol
symbolic primitives.

";

%feature("docstring") casadi::MX::isVector "

Check if the matrix is a vector (i.e. size2()==1)

";

%feature("docstring") casadi::MX::isSquare "

Check if the matrix expression is square.

";

%feature("docstring") casadi::MX::setNZ "[INTERNAL] ";

%feature("docstring") casadi::MX::isOne "

check if zero (note that false negative answers are possible)

";

%feature("docstring") casadi::MX::floor "";

%feature("docstring") casadi::MX::if_else_zero "";

%feature("docstring") casadi::MX::__ne__ "";

%feature("docstring") casadi::MX::repr "[INTERNAL]  Print a representation
of the object.

";

%feature("docstring") casadi::MX::getFunction "

Get function.

";

%feature("docstring") casadi::MX::isEmpty "

Check if the sparsity is empty, i.e. if one of the dimensions is zero (or
optionally both dimensions)

";

%feature("docstring") casadi::MX::__rge__ "";

%feature("docstring") casadi::MX::mul_full "";

%feature("docstring") casadi::MX::tanh "";

%feature("docstring") casadi::MX::nz_indexed "

get a non-zero

Indexing for interfaced languages

";

%feature("docstring") casadi::MX::__nonzero__ "

Returns the truth value of an MX expression.

";

%feature("docstring") casadi::MX::swap "[INTERNAL]  Swap content with
another instance.

";

%feature("docstring") casadi::MX::cos "";

%feature("docstring") casadi::MX::nz_indexed_one_based "

get a non-zero

Indexing for interfaced languages

";

%feature("docstring") casadi::MX::arccosh "";

%feature("docstring") casadi::MX::numel "

Get the number of elements.

";

%feature("docstring") casadi::MX::ceil "";

%feature("docstring") casadi::MX::isNull "

Is a null pointer?

";

%feature("docstring") casadi::MX::__req__ "";

%feature("docstring") casadi::MX::fabs "";

%feature("docstring") casadi::MX::sparsityRef "

Access the sparsity, make a copy if there are multiple references to it.

";

%feature("docstring") casadi::MX::isInit "

Is initialized?

";

%feature("docstring") casadi::MX::MX "

>  casadi::MX::MX(const Sparsity &sp, int val=0)

>  casadi::MX::MX(const Sparsity &sp, double val)

>  casadi::MX::MX(const Sparsity &sp, const MX &val)
------------------------------------------------------------------------

Construct constant matrix with a given sparsity.

>  casadi::MX::MX()
------------------------------------------------------------------------

Default constructor.

>  casadi::MX::MX(double x)
------------------------------------------------------------------------

Create scalar constant (also implicit type conversion)

>  casadi::MX::MX(const MX &x)
------------------------------------------------------------------------

Copy constructor.

>  casadi::MX::MX(const std::vector< double > &x)
------------------------------------------------------------------------

Create vector constant (also implicit type conversion)

>  casadi::MX::MX(const Matrix< double > &x)
------------------------------------------------------------------------

Create sparse matrix constant (also implicit type conversion)

";

%feature("docstring") casadi::MX::isBinary "

Is binary operation.

";

%feature("docstring") casadi::MX::checkNode "[INTERNAL]  Assert that the
node is pointing to the right type of object

";

%feature("docstring") casadi::MX::isUnary "

Is unary operation.

";

%feature("docstring") casadi::MX::getOp "

Get operation type.

";

%feature("docstring") casadi::MX::fmax "";

%feature("docstring") casadi::MX::isNorm "

Check if norm.

";

%feature("docstring") casadi::MX::__mldivide__ "

Matrix division from left.

";

%feature("docstring") casadi::MX::setTemp "[INTERNAL]  Set the temporary
variable.

";

%feature("docstring") casadi::MX::fmin "";

%feature("docstring") casadi::MX::getMatrixValue "

Get the value (only for constant nodes)

";

%feature("docstring") casadi::MX::isConstant "

Check if constant.

";

%feature("docstring") casadi::MX::mapping "

Get an IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") casadi::MX::getNZ "[INTERNAL] ";

%feature("docstring") casadi::MX::isEvaluation "

Check if evaluation.

";

%feature("docstring") casadi::MX::isOperation "

Is it a certain operation.

";

%feature("docstring") casadi::MX::__truediv__ "";

%feature("docstring") casadi::MX::shape "[INTERNAL]  Get the shape.

";

%feature("docstring") casadi::MX::getNdeps "

Get the number of dependencies of a binary SXElement.

";

%feature("docstring") casadi::MX::logic_or "";

%feature("docstring") casadi::MX::weak "[INTERNAL]  Get a weak reference to
the object.

";

%feature("docstring") casadi::MX::nz_indexed_zero_based "

get a non-zero

Indexing for interfaced languages

";

%feature("docstring") casadi::MX::isSymbolic "

Check if symbolic.

";

%feature("docstring") casadi::MX::indexed_one_based_assignment "

>  void casadi::MX::indexed_one_based_assignment(int rr, int cc, const MX &m)
------------------------------------------------------------------------

set a matrix element

";

%feature("docstring") casadi::MX::__pow__ "";

%feature("docstring") casadi::MX::assertInit "[INTERNAL]  Assert that it is
initialized

";

%feature("docstring") casadi::MX::unary "

Create nodes by their ID.

";


// File: structcasadi_1_1MXAlgEl.xml
%feature("docstring") casadi::MXAlgEl "[INTERNAL]  An element of the
algorithm, namely an MX node.

C++ includes: mx_function.hpp ";


// File: classcasadi_1_1MXFunction.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::MXFunction::outputSchemeEntry " [INTERNAL]  Find the index for a
string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::MXFunction::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::MXFunction::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::MXFunction::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::MXFunction::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::MXFunction::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::MXFunction::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::MXFunction::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::MXFunction::MXFunction "

>  casadi::MXFunction::MXFunction()
------------------------------------------------------------------------

Default constructor.

>  casadi::MXFunction::MXFunction(const Function &function)
------------------------------------------------------------------------

Attempt to form an MXFunction out of an Function.

>  casadi::MXFunction::MXFunction(const MX &input, const MX &output)
------------------------------------------------------------------------
[INTERNAL] 
Single input, single output.

>  casadi::MXFunction::MXFunction(const MX &input, const std::vector< MX > &output)
------------------------------------------------------------------------
[INTERNAL] 
Single input, multiple output.

>  casadi::MXFunction::MXFunction(const std::vector< MX > &input, const MX &output)
------------------------------------------------------------------------
[INTERNAL] 
Multiple input, single output.

>  casadi::MXFunction::MXFunction(const std::vector< MX > &input, const std::vector< MX > &output)

>  casadi::MXFunction::MXFunction(const std::vector< MX > &input, const IOSchemeVector< MX > &output)

>  casadi::MXFunction::MXFunction(const IOSchemeVector< MX > &input, const std::vector< MX > &output)

>  casadi::MXFunction::MXFunction(const IOSchemeVector< MX > &input, const IOSchemeVector< MX > &output)
------------------------------------------------------------------------

Multiple input, multiple output.

";

%feature("docstring") casadi::MXFunction::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::MXFunction::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::MXFunction::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::MXFunction::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::MXFunction::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::MXFunction::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::MXFunction::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::MXFunction::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::MXFunction::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::MXFunction::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::MXFunction::expand "

Expand the matrix valued graph into a scalar valued graph.

";

%feature("docstring") casadi::MXFunction::jac "

Jacobian via source code transformation.

";

%feature("docstring") casadi::MXFunction::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::MXFunction::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::MXFunction::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::MXFunction::outputExpr "

>  const MX & casadi::MXFunction::outputExpr(int ind) const 
------------------------------------------------------------------------

Get function output.

>  const std::vector< MX > & casadi::MXFunction::outputExpr() const 
------------------------------------------------------------------------

Get all function outputs.

";

%feature("docstring") casadi::MXFunction::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::MXFunction::hasOption "

check if there is an option str

";

%feature("docstring") casadi::MXFunction::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::MXFunction::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") casadi::MXFunction::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::MXFunction::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::MXFunction::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::MXFunction::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::MXFunction::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::MXFunction::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::MXFunction::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::MXFunction::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::MXFunction::grad "

Gradient via source code transformation.

";

%feature("docstring") casadi::MXFunction::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::MXFunction::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::MXFunction::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::MXFunction::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::MXFunction::inputExpr "

>  const MX & casadi::MXFunction::inputExpr(int ind) const 
------------------------------------------------------------------------

Get function input.

>  const std::vector< MX > & casadi::MXFunction::inputExpr() const 
------------------------------------------------------------------------

Get all function inputs.

";

%feature("docstring") casadi::MXFunction::evaluate "

Evaluate.

";

%feature("docstring") casadi::MXFunction::getAlgorithmSize "

Get the number of atomic operations.

";

%feature("docstring") casadi::MXFunction::tang "

Tangent via source code transformation.

";

%feature("docstring") casadi::MXFunction::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::MXFunction::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::MXFunction::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::MXFunction::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::MXFunction::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::MXFunction::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::MXFunction::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::MXFunction::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") casadi::MXFunction::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::MXFunction::spCanEvaluate "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::MXFunction::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::MXFunction::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::MXFunction::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::MXFunction::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::MXFunction::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::MXFunction "

General function mapping from/to MX.

Joel Andersson

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: mx_function.hpp ";

%feature("docstring") casadi::MXFunction::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::MXFunction::isNull "

Is a null pointer?

";

%feature("docstring") casadi::MXFunction::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::MXFunction::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::MXFunction::countNodes "

Number of nodes in the algorithm.

";

%feature("docstring") casadi::MXFunction::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::MXFunction::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::MXFunction::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::MXFunction::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") casadi::MXFunction::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::MXFunction::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::MXFunction::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::MXFunction::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::MXFunction::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::MXFunction::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::MXFunction::getOption "

get an option value

";

%feature("docstring") casadi::MXFunction::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::MXFunction::algorithm "[INTERNAL]  Access the
algorithm directly.

";

%feature("docstring") casadi::MXFunction::isInit "

Is initialized?

";

%feature("docstring") casadi::MXFunction::getFree "

Get all the free variables of the function.

";

%feature("docstring") casadi::MXFunction::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::MXFunction::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::MXFunction::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::MXFunction::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::MXFunction::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::MXFunction::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::MXFunction::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::MXFunction::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::MXFunction::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::MXFunction::getWorkSize "

Get the length of the work vector.

";

%feature("docstring") casadi::MXFunction::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::MXFunction::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::MXFunction::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::MXFunction::generateLiftingFunctions "[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::MXFunction::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::MXFunction::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::MXFunction::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::MXFunction::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::MXFunction::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::MXFunction::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::MXFunction::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";


// File: classcasadi_1_1MXNode.xml
%feature("docstring") casadi::MXNode::getName "[INTERNAL]  Get the name.

";

%feature("docstring") casadi::MXNode::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") casadi::MXNode::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") casadi::MXNode::getUnary "[INTERNAL]  Get a unary
operation.

";

%feature("docstring") casadi::MXNode::getInverse "[INTERNAL]   Inverse.

";

%feature("docstring") casadi::MXNode::numel "[INTERNAL]  Get shape.

";

%feature("docstring") casadi::MXNode::MXNode "[INTERNAL]  Constructor.

";

%feature("docstring") casadi::MXNode::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") casadi::MXNode::isOutputNode "[INTERNAL]  Check if
evaluation output.

";

%feature("docstring") casadi::MXNode::isUnaryOp "[INTERNAL]  Check if unary
operation.

";

%feature("docstring") casadi::MXNode::getMatrixValue "[INTERNAL]  Get the
value (only for constant nodes)

";

%feature("docstring") casadi::MXNode::sparsity "

>  const Sparsity& casadi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & casadi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") casadi::MXNode::getVertsplit "[INTERNAL]  Create a
vertical split node (vectors only)

";

%feature("docstring") casadi::MXNode::print "

>  void casadi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void casadi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") casadi::MXNode::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::MXNode::getSubRef "[INTERNAL]  Get submatrix
reference.

";

%feature("docstring") casadi::MXNode::getOp "[INTERNAL]  Get the operation.

";

%feature("docstring") casadi::MXNode::deepCopyMembers "[INTERNAL]  Deep
copy data members.

";

%feature("docstring") casadi::MXNode::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") casadi::MXNode::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") casadi::MXNode::~MXNode "[INTERNAL]  Destructor.

";

%feature("docstring") casadi::MXNode::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") casadi::MXNode::getReshape "[INTERNAL]   Reshape.

";

%feature("docstring") casadi::MXNode::isMultipleOutput "[INTERNAL]  Check
if a multiple output node.

";

%feature("docstring") casadi::MXNode::getBinarySwitch "[INTERNAL]  Get a
binary operation operation.

";

%feature("docstring") casadi::MXNode::getNormInf "[INTERNAL]  Infinity
norm.

";

%feature("docstring") casadi::MXNode::getNorm2 "[INTERNAL]  Spectral norm.

";

%feature("docstring") casadi::MXNode::evaluateMX "

>  void casadi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX)

>  void casadi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") casadi::MXNode::getAddNonzeros "[INTERNAL]  Add the
nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::MXNode::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") casadi::MXNode::setDependencies "

>  void casadi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void casadi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") casadi::MXNode::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") casadi::MXNode::evaluateD "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") casadi::MXNode::getGetNonzeros "[INTERNAL]  Get the
nonzeros of matrix.

";

%feature("docstring") casadi::MXNode::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") casadi::MXNode::getFunctionOutput "[INTERNAL]  Get
function output.

";

%feature("docstring") casadi::MXNode::getFunctionInput "[INTERNAL]  Get
function input.

";

%feature("docstring") casadi::MXNode::getSolve "[INTERNAL]   Solve a system
of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") casadi::MXNode "[INTERNAL]  Node class for MX
objects.

Joel Andersson

C++ includes: mx_node.hpp ";

%feature("docstring") casadi::MXNode::size "[INTERNAL] ";

%feature("docstring") casadi::MXNode::getHorzsplit "[INTERNAL]  Create a
horizontal split node.

";

%feature("docstring") casadi::MXNode::getAssertion "[INTERNAL]   Assertion.

";

%feature("docstring") casadi::MXNode::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") casadi::MXNode::size2 "[INTERNAL] ";

%feature("docstring") casadi::MXNode::getNormF "[INTERNAL]  Frobenius norm.

";

%feature("docstring") casadi::MXNode::size1 "[INTERNAL] ";

%feature("docstring") casadi::MXNode::assertInit "[INTERNAL]  Assert that
the object has been initialized.

";

%feature("docstring") casadi::MXNode::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::MXNode::getTranspose "[INTERNAL]   Transpose.

";

%feature("docstring") casadi::MXNode::getOutput "[INTERNAL]  Get an output.

";

%feature("docstring") casadi::MXNode::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") casadi::MXNode::clone "[INTERNAL]  Clone function.

";

%feature("docstring") casadi::MXNode::shape "[INTERNAL] ";

%feature("docstring") casadi::MXNode::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") casadi::MXNode::mapping "[INTERNAL]  Get an IMatrix
representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") casadi::MXNode::assign "

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") casadi::MXNode::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") casadi::MXNode::propagateSparsity "

>  virtual void casadi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity.

>  void casadi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity, no work.

";

%feature("docstring") casadi::MXNode::dep "

>  const MX & casadi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & casadi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::MXNode::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") casadi::MXNode::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") casadi::MXNode::hasDep "[INTERNAL]  Does the node
depend on other nodes.

";

%feature("docstring") casadi::MXNode::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") casadi::MXNode::getValue "[INTERNAL]  Get the value
(only for scalar constant nodes)

";

%feature("docstring") casadi::MXNode::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") casadi::MXNode::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") casadi::MXNode::getBinary "[INTERNAL]  Get a binary
operation operation (matrix-matrix)

";

%feature("docstring") casadi::MXNode::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring") casadi::MXNode::evaluateSX "[INTERNAL]  Evaluate
symbolically (SX)

";

%feature("docstring") casadi::MXNode::simplifyMe "[INTERNAL]  Simplify the
expression (ex is a reference to the node)

";

%feature("docstring") casadi::MXNode::isNonLinear "[INTERNAL]  Is the node
nonlinear.

";

%feature("docstring") casadi::MXNode::getSetSparse "[INTERNAL]  Create set
sparse.

";

%feature("docstring") casadi::MXNode::sameOpAndDeps "[INTERNAL]  Checks if
two nodes have the same operation and have equivalent dependencies up to a
given depth.

";

%feature("docstring") casadi::MXNode::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") casadi::MXNode::getFunction "[INTERNAL]  Get function
reference.

";

%feature("docstring") casadi::MXNode::getNumOutputs "[INTERNAL]  Number of
outputs.

";

%feature("docstring") casadi::MXNode::getSetNonzeros "[INTERNAL]  Assign
the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::MXNode::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") casadi::MXNode::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::MXNode::printPart "[INTERNAL]  Print a part
of the expression.

";

%feature("docstring") casadi::MXNode::getMultiplication "[INTERNAL]
Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";


// File: structcasadi_1_1mysortclass.xml
%feature("docstring") casadi::mysortclass "[INTERNAL]  A helper class to
use stl::sort in OptionsFunctionalityNode::getBestMatches

";


// File: classcasadi_1_1NanSX.xml
%feature("docstring") casadi::NanSX::isSmooth "[INTERNAL]  Check if smooth.

";

%feature("docstring") casadi::NanSX::isMinusInf "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::NanSX::print "[INTERNAL]  print

";

%feature("docstring") casadi::NanSX::isSymbolic "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::NanSX::init "[INTERNAL]  Initialize the node
(currently used only to give a similar interface to MXNode)

";

%feature("docstring") casadi::NanSX::isInf "[INTERNAL]  check properties of
a node

";

%feature("docstring") casadi::NanSX::getValue "[INTERNAL]  Get the value.

";

%feature("docstring") casadi::NanSX::dep "[INTERNAL]  get the reference of
a child

";

%feature("docstring") casadi::NanSX::hasDep "[INTERNAL]  check properties
of a node

";

%feature("docstring") casadi::NanSX "[INTERNAL]  Represents a not-a-number
SX.

Joel Andersson

C++ includes: constant_sx.hpp ";

%feature("docstring") casadi::NanSX::isNan "[INTERNAL]  Properties.

";

%feature("docstring") casadi::NanSX::isConstant "[INTERNAL]  Properties.

";

%feature("docstring") casadi::NanSX::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") casadi::NanSX::getName "[INTERNAL] ";

%feature("docstring") casadi::NanSX::mark "[INTERNAL] ";

%feature("docstring") casadi::NanSX::~NanSX "[INTERNAL] ";

%feature("docstring") casadi::NanSX::isAlmostZero "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::NanSX::isOne "[INTERNAL]  check properties of
a node

";

%feature("docstring") casadi::NanSX::isMinusOne "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::NanSX::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") casadi::NanSX::NanSX "[INTERNAL] ";

%feature("docstring") casadi::NanSX::getOp "[INTERNAL]  Get the operation.

";

%feature("docstring") casadi::NanSX::isZero "[INTERNAL]  check properties
of a node

";

%feature("docstring") casadi::NanSX::getIntValue "[INTERNAL]  Get value of
a constant node.

";

%feature("docstring") casadi::NanSX::marked "[INTERNAL] ";

%feature("docstring") casadi::NanSX::isInteger "[INTERNAL]  check
properties of a node

";


// File: classcasadi_1_1NewtonImplicitSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::NewtonImplicitSolver::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::NewtonImplicitSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::NewtonImplicitSolver::output_struct "[INTERNAL]  Input/output structures of the function

";

%feature("docstring") casadi::NewtonImplicitSolver::getOption "

get an option value

";

%feature("docstring") casadi::NewtonImplicitSolver::inputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::NewtonImplicitSolver::spInit "[INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::NewtonImplicitSolver::checkInputs "[INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::NewtonImplicitSolver::NewtonImplicitSolver "

>  casadi::NewtonImplicitSolver::NewtonImplicitSolver()
------------------------------------------------------------------------

Default constructor.

>  casadi::NewtonImplicitSolver::NewtonImplicitSolver(const Function &f, const Function &jac=Function(), const LinearSolver &linsol=LinearSolver())
------------------------------------------------------------------------

Create a solver instance.

";

%feature("docstring") casadi::NewtonImplicitSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::NewtonImplicitSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::NewtonImplicitSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::NewtonImplicitSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::NewtonImplicitSolver::input_struct "[INTERNAL]  Input/output structures of the function

";

%feature("docstring") casadi::NewtonImplicitSolver::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::NewtonImplicitSolver::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::NewtonImplicitSolver::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") casadi::NewtonImplicitSolver::spCanEvaluate "[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::NewtonImplicitSolver::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") casadi::NewtonImplicitSolver::repr "[INTERNAL]  Print
a representation of the object.

";

%feature("docstring") casadi::NewtonImplicitSolver::clone "[INTERNAL]  Deep
copy.

";

%feature("docstring") casadi::NewtonImplicitSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::NewtonImplicitSolver::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::NewtonImplicitSolver::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::NewtonImplicitSolver::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::NewtonImplicitSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::NewtonImplicitSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::NewtonImplicitSolver::callDerivative "[INTERNAL]  Evaluate the function symbolically or numerically with
directional derivatives The first two arguments are the nondifferentiated
inputs and results of the evaluation, the next two arguments are a set of
forward directional seeds and the resulting forward directional derivatives,
the length of the vector being the number of forward directions. The next
two arguments are a set of adjoint directional seeds and the resulting
adjoint directional derivatives, the length of the vector being the number
of adjoint directions.

";

%feature("docstring") casadi::NewtonImplicitSolver "

Implements simple newton iterations to solve an implicit function.

The equation:

F(z, x1, x2, ..., xn) == 0

where d_F/dz is invertible, implicitly defines the equation:

z := G(x1, x2, ..., xn)

F should be an Function mapping from (n+1) inputs to m outputs. The first
output is the residual that should be zero.

ImplicitFunction (G) is an Function mapping from n inputs to m outputs. n
may be zero. The first output is the solved for z.

You can provide an initial guess for z by setting output(0) of
ImplicitFunction.

Joris Gillis

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| abstol       | OT_REAL      | 0.000        | Stopping     | casadi::Newt |
|              |              |              | criterion    | onImplicitIn |
|              |              |              | tolerance on | ternal       |
|              |              |              | max(|F|)     |              |
+--------------+--------------+--------------+--------------+--------------+
| abstolStep   | OT_REAL      | 0.000        | Stopping     | casadi::Newt |
|              |              |              | criterion    | onImplicitIn |
|              |              |              | tolerance on | ternal       |
|              |              |              | step size    |              |
+--------------+--------------+--------------+--------------+--------------+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| constraints  | OT_INTEGERVE | GenericType( | Constrain    | casadi::Impl |
|              | CTOR         | )            | the          | icitFunction |
|              |              |              | unknowns. 0  | Internal     |
|              |              |              | (default):   |              |
|              |              |              | no           |              |
|              |              |              | constraint   |              |
|              |              |              | on ui, 1: ui |              |
|              |              |              | >= 0.0, -1:  |              |
|              |              |              | ui <= 0.0,   |              |
|              |              |              | 2: ui > 0.0, |              |
|              |              |              | -2: ui <     |              |
|              |              |              | 0.0.         |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| implicit_inp | OT_INTEGER   | 0            | Index of the | casadi::Impl |
| ut           |              |              | input that   | icitFunction |
|              |              |              | corresponds  | Internal     |
|              |              |              | to the       |              |
|              |              |              | actual root- |              |
|              |              |              | finding      |              |
+--------------+--------------+--------------+--------------+--------------+
| implicit_out | OT_INTEGER   | 0            | Index of the | casadi::Impl |
| put          |              |              | output that  | icitFunction |
|              |              |              | corresponds  | Internal     |
|              |              |              | to the       |              |
|              |              |              | actual root- |              |
|              |              |              | finding      |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_LINEARSOL | GenericType( | User-defined | casadi::Impl |
| r            | VER          | )            | linear       | icitFunction |
|              |              |              | solver       | Internal     |
|              |              |              | class.       |              |
|              |              |              | Needed for s |              |
|              |              |              | ensitivities |              |
|              |              |              | .            |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_DICTIONAR | GenericType( | Options to   | casadi::Impl |
| r_options    | Y            | )            | be passed to | icitFunction |
|              |              |              | the linear   | Internal     |
|              |              |              | solver.      |              |
+--------------+--------------+--------------+--------------+--------------+
| max_iter     | OT_INTEGER   | 1000         | Maximum      | casadi::Newt |
|              |              |              | number of    | onImplicitIn |
|              |              |              | Newton       | ternal       |
|              |              |              | iterations   |              |
|              |              |              | to perform   |              |
|              |              |              | before       |              |
|              |              |              | returning.   |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp | casadi::Newt |
|              |              |              | uts)  (step| | onImplicitIn |
|              |              |              | stepsize|J|F | ternal       |
|              |              |              | |normF)      |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available monitors
+----------+--------------------------------+
|    Id    |            Used in             |
+==========+================================+
| F        | casadi::NewtonImplicitInternal |
+----------+--------------------------------+
| J        | casadi::NewtonImplicitInternal |
+----------+--------------------------------+
| inputs   | casadi::FunctionInternal       |
+----------+--------------------------------+
| normF    | casadi::NewtonImplicitInternal |
+----------+--------------------------------+
| outputs  | casadi::FunctionInternal       |
+----------+--------------------------------+
| step     | casadi::NewtonImplicitInternal |
+----------+--------------------------------+
| stepsize | casadi::NewtonImplicitInternal |
+----------+--------------------------------+

>List of available stats
+---------------+--------------------------------+
|      Id       |            Used in             |
+===============+================================+
| iter          | casadi::NewtonImplicitInternal |
+---------------+--------------------------------+
| return_status | casadi::NewtonImplicitInternal |
+---------------+--------------------------------+

Diagrams

C++ includes: newton_implicit_solver.hpp ";

%feature("docstring") casadi::NewtonImplicitSolver::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::NewtonImplicitSolver::inputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::NewtonImplicitSolver::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::NewtonImplicitSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::NewtonImplicitSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::NewtonImplicitSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::NewtonImplicitSolver::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::NewtonImplicitSolver::isNull "

Is a null pointer?

";

%feature("docstring") casadi::NewtonImplicitSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::NewtonImplicitSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::NewtonImplicitSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::NewtonImplicitSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::NewtonImplicitSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::NewtonImplicitSolver::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::NewtonImplicitSolver::evaluate "

Evaluate.

";

%feature("docstring") casadi::NewtonImplicitSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::NewtonImplicitSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::NewtonImplicitSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::NewtonImplicitSolver::getF "

Access F.

";

%feature("docstring") casadi::NewtonImplicitSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::NewtonImplicitSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::NewtonImplicitSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::NewtonImplicitSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::NewtonImplicitSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::NewtonImplicitSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::NewtonImplicitSolver::printPtr "[INTERNAL]
Print the pointer to the internal class

";

%feature("docstring") casadi::NewtonImplicitSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::NewtonImplicitSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::NewtonImplicitSolver::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::NewtonImplicitSolver::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::NewtonImplicitSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::NewtonImplicitSolver::isInit "

Is initialized?

";

%feature("docstring") casadi::NewtonImplicitSolver::getCount "[INTERNAL]
Get the reference count.

";

%feature("docstring") casadi::NewtonImplicitSolver::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::NewtonImplicitSolver::outputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::NewtonImplicitSolver::hasOption "

check if there is an option str

";

%feature("docstring") casadi::NewtonImplicitSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::NewtonImplicitSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::NewtonImplicitSolver::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") casadi::NewtonImplicitSolver::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") casadi::NewtonImplicitSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::NewtonImplicitSolver::setOptionByAllowedIndex
"[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::NewtonImplicitSolver::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::NewtonImplicitSolver::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::NewtonImplicitSolver::schemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::NewtonImplicitSolver::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::NewtonImplicitSolver::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::NewtonImplicitSolver::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::NewtonImplicitSolver::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::NewtonImplicitSolver::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::NewtonImplicitSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::NewtonImplicitSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::NewtonImplicitSolver::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::NewtonImplicitSolver::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::NewtonImplicitSolver::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::NewtonImplicitSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::NewtonImplicitSolver::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::NewtonImplicitSolver::getJac "

Access Jacobian.

";

%feature("docstring") casadi::NewtonImplicitSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::NewtonImplicitSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::NewtonImplicitSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::NewtonImplicitSolver::getLinsol "

Access linear solver.

";

%feature("docstring") casadi::NewtonImplicitSolver::outputScheme "[INTERNAL]  Access input/output scheme.

";

%feature("docstring") casadi::NewtonImplicitSolver::assignNodeNoCount "[INTERNAL]  Assign the node to a node class pointer without reference
counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::NewtonImplicitSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::NewtonImplicitSolver::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";


// File: classcasadi_1_1NLPImplicitSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::NLPImplicitSolver::assertInit " [INTERNAL]  Assert that it is
initialized

";

%feature("docstring") casadi::NLPImplicitSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::NLPImplicitSolver::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::NLPImplicitSolver::NLPImplicitSolver "

>  casadi::NLPImplicitSolver::NLPImplicitSolver()
------------------------------------------------------------------------

Default constructor.

>  casadi::NLPImplicitSolver::NLPImplicitSolver(const Function &f, const Function &jac=Function(), const LinearSolver &linsol=LinearSolver())
------------------------------------------------------------------------

Create a new solver instance.

";

%feature("docstring") casadi::NLPImplicitSolver::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::NLPImplicitSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::NLPImplicitSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::NLPImplicitSolver::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::NLPImplicitSolver::outputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::NLPImplicitSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::NLPImplicitSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::NLPImplicitSolver::inputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::NLPImplicitSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::NLPImplicitSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::NLPImplicitSolver::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") casadi::NLPImplicitSolver::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::NLPImplicitSolver::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::NLPImplicitSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::NLPImplicitSolver::getJac "

Access Jacobian.

";

%feature("docstring") casadi::NLPImplicitSolver::getLinsol "

Access linear solver.

";

%feature("docstring") casadi::NLPImplicitSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::NLPImplicitSolver::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::NLPImplicitSolver::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::NLPImplicitSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::NLPImplicitSolver::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::NLPImplicitSolver::schemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::NLPImplicitSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::NLPImplicitSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::NLPImplicitSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::NLPImplicitSolver::getF "

Access F.

";

%feature("docstring") casadi::NLPImplicitSolver::isNull "

Is a null pointer?

";

%feature("docstring") casadi::NLPImplicitSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::NLPImplicitSolver::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::NLPImplicitSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::NLPImplicitSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::NLPImplicitSolver::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::NLPImplicitSolver::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::NLPImplicitSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::NLPImplicitSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::NLPImplicitSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::NLPImplicitSolver::spCanEvaluate "[INTERNAL]
Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::NLPImplicitSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::NLPImplicitSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::NLPImplicitSolver::checkInputs "[INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::NLPImplicitSolver::printPtr "[INTERNAL]
Print the pointer to the internal class

";

%feature("docstring") casadi::NLPImplicitSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::NLPImplicitSolver::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::NLPImplicitSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::NLPImplicitSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::NLPImplicitSolver::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::NLPImplicitSolver::evaluate "

Evaluate.

";

%feature("docstring") casadi::NLPImplicitSolver::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::NLPImplicitSolver::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::NLPImplicitSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::NLPImplicitSolver::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::NLPImplicitSolver::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::NLPImplicitSolver::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") casadi::NLPImplicitSolver::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::NLPImplicitSolver::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") casadi::NLPImplicitSolver::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::NLPImplicitSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::NLPImplicitSolver::spInit "[INTERNAL]  Reset
the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::NLPImplicitSolver::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::NLPImplicitSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::NLPImplicitSolver::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::NLPImplicitSolver::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::NLPImplicitSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::NLPImplicitSolver::getCount "[INTERNAL]  Get
the reference count.

";

%feature("docstring") casadi::NLPImplicitSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::NLPImplicitSolver::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::NLPImplicitSolver::hasOption "

check if there is an option str

";

%feature("docstring") casadi::NLPImplicitSolver::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::NLPImplicitSolver::clone "[INTERNAL]  Deep
copy.

";

%feature("docstring") casadi::NLPImplicitSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::NLPImplicitSolver::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::NLPImplicitSolver::inputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::NLPImplicitSolver::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") casadi::NLPImplicitSolver "

Use an NLPSolver as ImplicitFunction solver.

The equation:

F(z, x1, x2, ..., xn) == 0

where d_F/dz is invertible, implicitly defines the equation:

z := G(x1, x2, ..., xn)

F should be an Function mapping from (n+1) inputs to m outputs. The first
output is the residual that should be zero.

ImplicitFunction (G) is an Function mapping from n inputs to m outputs. n
may be zero. The first output is the solved for z.

You can provide an initial guess for z by setting output(0) of
ImplicitFunction.

Joris Gillis

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| constraints  | OT_INTEGERVE | GenericType( | Constrain    | casadi::Impl |
|              | CTOR         | )            | the          | icitFunction |
|              |              |              | unknowns. 0  | Internal     |
|              |              |              | (default):   |              |
|              |              |              | no           |              |
|              |              |              | constraint   |              |
|              |              |              | on ui, 1: ui |              |
|              |              |              | >= 0.0, -1:  |              |
|              |              |              | ui <= 0.0,   |              |
|              |              |              | 2: ui > 0.0, |              |
|              |              |              | -2: ui <     |              |
|              |              |              | 0.0.         |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| implicit_inp | OT_INTEGER   | 0            | Index of the | casadi::Impl |
| ut           |              |              | input that   | icitFunction |
|              |              |              | corresponds  | Internal     |
|              |              |              | to the       |              |
|              |              |              | actual root- |              |
|              |              |              | finding      |              |
+--------------+--------------+--------------+--------------+--------------+
| implicit_out | OT_INTEGER   | 0            | Index of the | casadi::Impl |
| put          |              |              | output that  | icitFunction |
|              |              |              | corresponds  | Internal     |
|              |              |              | to the       |              |
|              |              |              | actual root- |              |
|              |              |              | finding      |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_LINEARSOL | GenericType( | User-defined | casadi::Impl |
| r            | VER          | )            | linear       | icitFunction |
|              |              |              | solver       | Internal     |
|              |              |              | class.       |              |
|              |              |              | Needed for s |              |
|              |              |              | ensitivities |              |
|              |              |              | .            |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_DICTIONAR | GenericType( | Options to   | casadi::Impl |
| r_options    | Y            | )            | be passed to | icitFunction |
|              |              |              | the linear   | Internal     |
|              |              |              | solver.      |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| nlp_solver   | OT_NLPSOLVER | GenericType( | The          | casadi::NLPI |
|              |              | )            | NLPSolver    | mplicitInter |
|              |              |              | used to      | nal          |
|              |              |              | solve the    |              |
|              |              |              | implicit     |              |
|              |              |              | system.      |              |
+--------------+--------------+--------------+--------------+--------------+
| nlp_solver_o | OT_DICTIONAR | GenericType( | Options to   | casadi::NLPI |
| ptions       | Y            | )            | be passed to | mplicitInter |
|              |              |              | the          | nal          |
|              |              |              | NLPSolver    |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available stats
+------------------+-----------------------------+
|        Id        |           Used in           |
+==================+=============================+
| nlp_solver_stats | casadi::NLPImplicitInternal |
+------------------+-----------------------------+

Diagrams

C++ includes: nlp_implicit_solver.hpp ";

%feature("docstring") casadi::NLPImplicitSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::NLPImplicitSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::NLPImplicitSolver::assignNodeNoCount "[INTERNAL]  Assign the node to a node class pointer without reference
counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::NLPImplicitSolver::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::NLPImplicitSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::NLPImplicitSolver::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::NLPImplicitSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::NLPImplicitSolver::getNLPSolver "

Access NLP solver.

";

%feature("docstring") casadi::NLPImplicitSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::NLPImplicitSolver::getOption "

get an option value

";

%feature("docstring") casadi::NLPImplicitSolver::isInit "

Is initialized?

";

%feature("docstring") casadi::NLPImplicitSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::NLPImplicitSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::NLPImplicitSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::NLPImplicitSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::NLPImplicitSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::NLPImplicitSolver::getOptionTypeName "

Get the type name of a certain option.

";


// File: classcasadi_1_1NLPInputIOSchemeVector.xml
%feature("docstring") casadi::NLPInputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::NLPInputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") casadi::NLPInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::NLPInputIOSchemeVector "[INTERNAL]  Helper
function for 'NLPInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::NLPInputIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::NLPInputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::NLPInputIOSchemeVector::vector "[INTERNAL] ";

%feature("docstring") casadi::NLPInputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::NLPInputIOSchemeVector::NLPInputIOSchemeVector
"[INTERNAL] ";


// File: classcasadi_1_1NLPOutputIOSchemeVector.xml
%feature("docstring") casadi::NLPOutputIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::NLPOutputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::NLPOutputIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") casadi::NLPOutputIOSchemeVector "[INTERNAL]  Helper
function for 'NLPOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::NLPOutputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring")
casadi::NLPOutputIOSchemeVector::NLPOutputIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::NLPOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::NLPOutputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::NLPOutputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";


// File: classcasadi_1_1NLPQPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::NLPQPSolver::inputScheme " [INTERNAL]  Access input/output scheme.

";

%feature("docstring") casadi::NLPQPSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::NLPQPSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::NLPQPSolver::isInit "

Is initialized?

";

%feature("docstring") casadi::NLPQPSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::NLPQPSolver::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::NLPQPSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::NLPQPSolver::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") casadi::NLPQPSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::NLPQPSolver::getOption "

get an option value

";

%feature("docstring") casadi::NLPQPSolver::hasOption "

check if there is an option str

";

%feature("docstring") casadi::NLPQPSolver::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::NLPQPSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::NLPQPSolver::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") casadi::NLPQPSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::NLPQPSolver::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::NLPQPSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::NLPQPSolver::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::NLPQPSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::NLPQPSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::NLPQPSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::NLPQPSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::NLPQPSolver::schemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::NLPQPSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::NLPQPSolver::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::NLPQPSolver::isNull "

Is a null pointer?

";

%feature("docstring") casadi::NLPQPSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::NLPQPSolver::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::NLPQPSolver::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::NLPQPSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::NLPQPSolver::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::NLPQPSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::NLPQPSolver::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::NLPQPSolver::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::NLPQPSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::NLPQPSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::NLPQPSolver::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::NLPQPSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::NLPQPSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::NLPQPSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::NLPQPSolver::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") casadi::NLPQPSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::NLPQPSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::NLPQPSolver::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::NLPQPSolver::NLPQPSolver "

>  casadi::NLPQPSolver::NLPQPSolver()

>  casadi::NLPQPSolver::NLPQPSolver()
------------------------------------------------------------------------

Default constructor.

>  casadi::NLPQPSolver::NLPQPSolver(const QPStructure &st)

>  casadi::NLPQPSolver::NLPQPSolver(const QPStructure &st)
------------------------------------------------------------------------

Constructor.

Parameters:
-----------

st:  Problem structure

";

%feature("docstring") casadi::NLPQPSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::NLPQPSolver::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::NLPQPSolver::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::NLPQPSolver::setLPOptions "

Set options that make the QP solver more suitable for solving LPs.

";

%feature("docstring") casadi::NLPQPSolver::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::NLPQPSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::NLPQPSolver::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::NLPQPSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::NLPQPSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::NLPQPSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::NLPQPSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::NLPQPSolver::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::NLPQPSolver::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::NLPQPSolver::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::NLPQPSolver::spCanEvaluate "[INTERNAL]  Is
the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::NLPQPSolver::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::NLPQPSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::NLPQPSolver::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::NLPQPSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::NLPQPSolver::generateNativeCode "

Generate native code in the interfaced language for debugging

";

%feature("docstring") casadi::NLPQPSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::NLPQPSolver::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::NLPQPSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::NLPQPSolver::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::NLPQPSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::NLPQPSolver::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::NLPQPSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::NLPQPSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::NLPQPSolver::checkNode "

>  bool casadi::NLPQPSolver::checkNode() const 
------------------------------------------------------------------------

Check if the node is pointing to the right type of object.

>  virtual bool casadi::NLPQPSolver::checkNode() const 
------------------------------------------------------------------------
[INTERNAL] 
Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::NLPQPSolver::checkInputs "[INTERNAL]  Check
if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::NLPQPSolver::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::NLPQPSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::NLPQPSolver "

IPOPT QP Solver for quadratic programming.

Solves the following strictly convex problem:

min          1/2 x' H x + g' x  x  subject to             LBA <= A x <= UBA
LBX <= x   <= UBX      with :       H sparse (n x n) positive definite
g dense  (n x 1)      n: number of decision variables (x)     nc: number of
constraints (A)

If H is not positive-definite, the solver should throw an error.

Joris Gillis

>Input scheme: casadi::QPSolverInput (QP_SOLVER_NUM_IN = 10) [qpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_H            | h                      | The square matrix H:   |
|                        |                        | sparse, (n x n). Only  |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical.     |
+------------------------+------------------------+------------------------+
| QP_SOLVER_G            | g                      | The vector g: dense,   |
|                        |                        | (n x 1) .              |
+------------------------+------------------------+------------------------+
| QP_SOLVER_A            | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LBA          | lba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_UBA          | uba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LBX          | lbx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_UBX          | ubx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_X0           | x0                     | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X0       | lam_x0                 | dense                  |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::QPSolverOutput (QP_SOLVER_NUM_OUT = 5) [qpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_X            | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| QP_SOLVER_COST         | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_A        | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X        | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| nlp_solver   | OT_NLPSOLVER | GenericType( | The          | casadi::NLPQ |
|              |              | )            | NLPSOlver    | PInternal    |
|              |              |              | used to      |              |
|              |              |              | solve the    |              |
|              |              |              | QPs.         |              |
+--------------+--------------+--------------+--------------+--------------+
| nlp_solver_o | OT_DICTIONAR | GenericType( | Options to   | casadi::NLPQ |
| ptions       | Y            | )            | be passed to | PInternal    |
|              |              |              | the          |              |
|              |              |              | NLPSOlver    |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available stats
+------------------+-----------------------+
|        Id        |        Used in        |
+==================+=======================+
| nlp_solver_stats | casadi::NLPQPInternal |
+------------------+-----------------------+

Diagrams

C++ includes: nlp_qp_solver.hpp ";

%feature("docstring") casadi::NLPQPSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::NLPQPSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::NLPQPSolver::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::NLPQPSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::NLPQPSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::NLPQPSolver::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::NLPQPSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::NLPQPSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::NLPQPSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::NLPQPSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::NLPQPSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::NLPQPSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::NLPQPSolver::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::NLPQPSolver::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::NLPQPSolver::evaluate "

Evaluate.

";


// File: classcasadi_1_1NLPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::NLPSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::NLPSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::NLPSolver::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::NLPSolver::setQPOptions "

Set options that make the NLP solver more suitable for solving QPs.

";

%feature("docstring") casadi::NLPSolver::getReportConstraints "";

%feature("docstring") casadi::NLPSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::NLPSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::NLPSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::NLPSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::NLPSolver::isInit "

Is initialized?

";

%feature("docstring") casadi::NLPSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::NLPSolver::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::NLPSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::NLPSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::NLPSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::NLPSolver::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::NLPSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::NLPSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::NLPSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::NLPSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::NLPSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::NLPSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::NLPSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::NLPSolver::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::NLPSolver::hessLag "

Access the Hessian of the Lagrangian function.

>Input scheme: casadi::JacGInput (JACG_NUM_IN = 3) [jacGIn]
+-----------+-------+---------------------+
| Full name | Short |     Description     |
+===========+=======+=====================+
| JACG_X    | x     | Decision variable . |
+-----------+-------+---------------------+
| JACG_P    | p     | Fixed parameter .   |
+-----------+-------+---------------------+

>Output scheme: casadi::JacGOutput (JACG_NUM_OUT = 4) [jacGOut]
+-----------+-------+-------------------------------+
| Full name | Short |          Description          |
+===========+=======+===============================+
| JACG_JAC  | jac   | Jacobian of the constraints . |
+-----------+-------+-------------------------------+
| JACG_F    | f     | Objective function .          |
+-----------+-------+-------------------------------+
| JACG_G    | g     | Constraint function .         |
+-----------+-------+-------------------------------+

";

%feature("docstring") casadi::NLPSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::NLPSolver::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::NLPSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::NLPSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::NLPSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::NLPSolver "

NLPSolver.

Solves the following parametric nonlinear program (NLP):min          F(x, p)
x  subject to             LBX <=   x    <= UBX LBG <= G(x, p) <= UBG
p  == P      nx: number of decision variables     ng: number of constraints
np: number of parameters

Joel Andersson

>Input scheme: casadi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| expand       | OT_BOOLEAN   | false        | Expand the   | casadi::NLPS |
|              |              |              | NLP function | olverInterna |
|              |              |              | in terms of  | l            |
|              |              |              | scalar       |              |
|              |              |              | operations,  |              |
|              |              |              | i.e. MX->SX  |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| grad_f       | OT_FUNCTION  | GenericType( | Function for | casadi::NLPS |
|              |              | )            | calculating  | olverInterna |
|              |              |              | the gradient | l            |
|              |              |              | of the       |              |
|              |              |              | objective    |              |
|              |              |              | (column, aut |              |
|              |              |              | ogenerated   |              |
|              |              |              | by default)  |              |
+--------------+--------------+--------------+--------------+--------------+
| grad_lag     | OT_FUNCTION  | GenericType( | Function for | casadi::NLPS |
|              |              | )            | calculating  | olverInterna |
|              |              |              | the gradient | l            |
|              |              |              | of the       |              |
|              |              |              | Lagrangian ( |              |
|              |              |              | autogenerate |              |
|              |              |              | d by         |              |
|              |              |              | default)     |              |
+--------------+--------------+--------------+--------------+--------------+
| hess_lag     | OT_FUNCTION  | GenericType( | Function for | casadi::NLPS |
|              |              | )            | calculating  | olverInterna |
|              |              |              | the Hessian  | l            |
|              |              |              | of the       |              |
|              |              |              | Lagrangian ( |              |
|              |              |              | autogenerate |              |
|              |              |              | d by         |              |
|              |              |              | default)     |              |
+--------------+--------------+--------------+--------------+--------------+
| ignore_check | OT_BOOLEAN   | false        | If set to    | casadi::NLPS |
| _vec         |              |              | true, the    | olverInterna |
|              |              |              | input shape  | l            |
|              |              |              | of F will    |              |
|              |              |              | not be       |              |
|              |              |              | checked.     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_CALLBACK  | GenericType( | A function   | casadi::NLPS |
| llback       |              | )            | that will be | olverInterna |
|              |              |              | called at    | l            |
|              |              |              | each         |              |
|              |              |              | iteration    |              |
|              |              |              | with the     |              |
|              |              |              | solver as    |              |
|              |              |              | input. Check |              |
|              |              |              | documentatio |              |
|              |              |              | n of         |              |
|              |              |              | Callback .   |              |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_BOOLEAN   | false        | If set to    | casadi::NLPS |
| llback_ignor |              |              | true, errors | olverInterna |
| e_errors     |              |              | thrown by it | l            |
|              |              |              | eration_call |              |
|              |              |              | back will be |              |
|              |              |              | ignored.     |              |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_INTEGER   | 1            | Only call    | casadi::NLPS |
| llback_step  |              |              | the callback | olverInterna |
|              |              |              | function     | l            |
|              |              |              | every few    |              |
|              |              |              | iterations.  |              |
+--------------+--------------+--------------+--------------+--------------+
| jac_f        | OT_FUNCTION  | GenericType( | Function for | casadi::NLPS |
|              |              | )            | calculating  | olverInterna |
|              |              |              | the jacobian | l            |
|              |              |              | of the       |              |
|              |              |              | objective    |              |
|              |              |              | (sparse row, |              |
|              |              |              | autogenerate |              |
|              |              |              | d by         |              |
|              |              |              | default)     |              |
+--------------+--------------+--------------+--------------+--------------+
| jac_g        | OT_FUNCTION  | GenericType( | Function for | casadi::NLPS |
|              |              | )            | calculating  | olverInterna |
|              |              |              | the Jacobian | l            |
|              |              |              | of the       |              |
|              |              |              | constraints  |              |
|              |              |              | (autogenerat |              |
|              |              |              | ed by        |              |
|              |              |              | default)     |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+
| warn_initial | OT_BOOLEAN   | false        | Warn if the  | casadi::NLPS |
| _bounds      |              |              | initial      | olverInterna |
|              |              |              | guess does   | l            |
|              |              |              | not satisfy  |              |
|              |              |              | LBX and UBX  |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: nlp_solver.hpp ";

%feature("docstring") casadi::NLPSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::NLPSolver::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::NLPSolver::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::NLPSolver::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::NLPSolver::isNull "

Is a null pointer?

";

%feature("docstring") casadi::NLPSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::NLPSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::NLPSolver::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::NLPSolver::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::NLPSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::NLPSolver::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::NLPSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::NLPSolver::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::NLPSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::NLPSolver::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::NLPSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::NLPSolver::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::NLPSolver::nlp "

Access the NLP.

>Input scheme: casadi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::NLPSolver::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::NLPSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::NLPSolver::evaluate "

Evaluate.

";

%feature("docstring") casadi::NLPSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::NLPSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::NLPSolver::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::NLPSolver::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::NLPSolver::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::NLPSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::NLPSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::NLPSolver::spCanEvaluate "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::NLPSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::NLPSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::NLPSolver::NLPSolver "

Default constructor.

";

%feature("docstring") casadi::NLPSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::NLPSolver::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::NLPSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::NLPSolver::reportConstraints "

Prints out a human readable report about possible constraint violations,
after solving.

";

%feature("docstring") casadi::NLPSolver::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") casadi::NLPSolver::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::NLPSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::NLPSolver::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::NLPSolver::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::NLPSolver::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::NLPSolver::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") casadi::NLPSolver::assignNode "[INTERNAL]  Assign the
node to a node class pointer (or null)

";

%feature("docstring") casadi::NLPSolver::hasOption "

check if there is an option str

";

%feature("docstring") casadi::NLPSolver::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::NLPSolver::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::NLPSolver::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::NLPSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::NLPSolver::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::NLPSolver::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::NLPSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::NLPSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::NLPSolver::inputSchemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::NLPSolver::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::NLPSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::NLPSolver::jacG "

Access the Jacobian of the constraint function.

>Input scheme: casadi::HessLagInput (HESSLAG_NUM_IN = 5) [hessLagIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| HESSLAG_X              | x                      | Decision variable .    |
+------------------------+------------------------+------------------------+
| HESSLAG_P              | p                      | Fixed parameter .      |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_F          | lam_f                  | Multiplier for f. Just |
|                        |                        | a scalar factor for    |
|                        |                        | the objective that the |
|                        |                        | NLP solver might use   |
|                        |                        | to scale the           |
|                        |                        | objective.             |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_G          | lam_g                  | Multiplier for g .     |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::HessLagOutput (HESSLAG_NUM_OUT = 6) [hessLagOut]
+----------------+--------+------------------------------------------------+
|   Full name    | Short  |                  Description                   |
+================+========+================================================+
| HESSLAG_HESS   | hess   | Hessian of the Lagrangian .                    |
+----------------+--------+------------------------------------------------+
| HESSLAG_F      | f      | Objective function .                           |
+----------------+--------+------------------------------------------------+
| HESSLAG_G      | g      | Constraint function .                          |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_X | grad_x | Gradient of the Lagrangian with respect to x . |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_P | grad_p | Gradient of the Lagrangian with respect to p . |
+----------------+--------+------------------------------------------------+

";

%feature("docstring") casadi::NLPSolver::getOption "

get an option value

";

%feature("docstring") casadi::NLPSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::NLPSolver::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::NLPSolver::gradF "

Access the objective gradient function>Input scheme: casadi::GradFInput
(GRADF_NUM_IN = 3) [gradFIn] +-----------+-------+---------------------+ |
Full name | Short |     Description     |
+===========+=======+=====================+ | GRADF_X   | x     | Decision
variable . | +-----------+-------+---------------------+ | GRADF_P   | p
| Fixed parameter .   | +-----------+-------+---------------------+

";

%feature("docstring") casadi::NLPSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::NLPSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::NLPSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::NLPSolver::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::NLPSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::NLPSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";


// File: classcasadi_1_1NLPSolverInputIOSchemeVector.xml
%feature("docstring") casadi::NLPSolverInputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring") casadi::NLPSolverInputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::NLPSolverInputIOSchemeVector::print "[INTERNAL]  Print a description of the object.

";

%feature("docstring") casadi::NLPSolverInputIOSchemeVector::vector "[INTERNAL] ";

%feature("docstring")
casadi::NLPSolverInputIOSchemeVector::NLPSolverInputIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::NLPSolverInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::NLPSolverInputIOSchemeVector::repr "[INTERNAL]  Print a representation of the object.

";

%feature("docstring") casadi::NLPSolverInputIOSchemeVector "[INTERNAL]
Helper function for 'NLPSolverInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring")
casadi::NLPSolverInputIOSchemeVector::getRepresentation "[INTERNAL]  Return
a string with a representation (for SWIG)

";


// File: classcasadi_1_1NLPSolverOutputIOSchemeVector.xml
%feature("docstring") casadi::NLPSolverOutputIOSchemeVector::repr "[INTERNAL]  Print a representation of the object.

";

%feature("docstring") casadi::NLPSolverOutputIOSchemeVector "[INTERNAL]
Helper function for 'NLPSolverOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::NLPSolverOutputIOSchemeVector::vector "[INTERNAL] ";

%feature("docstring") casadi::NLPSolverOutputIOSchemeVector::getDescription
"[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring")
casadi::NLPSolverOutputIOSchemeVector::getRepresentation "[INTERNAL]
Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::NLPSolverOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::NLPSolverOutputIOSchemeVector::print "[INTERNAL]  Print a description of the object.

";

%feature("docstring")
casadi::NLPSolverOutputIOSchemeVector::NLPSolverOutputIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::NLPSolverOutputIOSchemeVector::__len__ "[INTERNAL] ";


// File: structcasadi_1_1NonnegativeChecker.xml
%feature("docstring") casadi::NonnegativeChecker "[INTERNAL]  Always non-
negative (false by default)

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1NonnegativeChecker_3_01OP__AND_01_4.xml
%feature("docstring") casadi::NonnegativeChecker< OP_AND > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1NonnegativeChecker_3_01OP__EQ_01_4.xml
%feature("docstring") casadi::NonnegativeChecker< OP_EQ > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1NonnegativeChecker_3_01OP__EXP_01_4.xml
%feature("docstring") casadi::NonnegativeChecker< OP_EXP > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1NonnegativeChecker_3_01OP__LE_01_4.xml
%feature("docstring") casadi::NonnegativeChecker< OP_LE > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1NonnegativeChecker_3_01OP__LT_01_4.xml
%feature("docstring") casadi::NonnegativeChecker< OP_LT > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1NonnegativeChecker_3_01OP__NE_01_4.xml
%feature("docstring") casadi::NonnegativeChecker< OP_NE > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1NonnegativeChecker_3_01OP__NOT_01_4.xml
%feature("docstring") casadi::NonnegativeChecker< OP_NOT > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1NonnegativeChecker_3_01OP__OR_01_4.xml
%feature("docstring") casadi::NonnegativeChecker< OP_OR > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1NonnegativeChecker_3_01OP__SQ_01_4.xml
%feature("docstring") casadi::NonnegativeChecker< OP_SQ > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1NonnegativeChecker_3_01OP__SQRT_01_4.xml
%feature("docstring") casadi::NonnegativeChecker< OP_SQRT > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1NonZero.xml
%feature("docstring") casadi::NonZero "[INTERNAL] C++ includes: matrix.hpp
";


// File: classcasadi_1_1NonZeroIterator.xml
%feature("docstring") casadi::NonZeroIterator::end "[INTERNAL] ";

%feature("docstring") casadi::NonZeroIterator::begin "[INTERNAL] ";

%feature("docstring") casadi::NonZeroIterator::NonZeroIterator "[INTERNAL]
";

%feature("docstring") casadi::NonZeroIterator "[INTERNAL] C++ includes:
matrix.hpp ";


// File: classcasadi_1_1NonZeros.xml
%feature("docstring") casadi::NonZeros::NonZeros "

Constructor.

";

%feature("docstring") casadi::NonZeros "

Access to a set of nonzeros.

NonZeros class for Matrix NonZeros is the return type for operator[] of the
Matrix class, it allows access to the value as well as changing the parent
object Joel Andersson

C++ includes: nonzeros.hpp ";


// File: classcasadi_1_1Norm.xml
%feature("docstring") casadi::Norm::getOutput "[INTERNAL]  Get an output.

";

%feature("docstring") casadi::Norm::getInverse "[INTERNAL]   Inverse.

";

%feature("docstring") casadi::Norm::getHorzsplit "[INTERNAL]  Create a
horizontal split node.

";

%feature("docstring") casadi::Norm::numel "[INTERNAL]  Get shape.

";

%feature("docstring") casadi::Norm::getSetNonzeros "[INTERNAL]  Assign the
nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::Norm::isBinaryOp "[INTERNAL]  Check if binary
operation.

";

%feature("docstring") casadi::Norm::mapping "[INTERNAL]  Get an IMatrix
representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") casadi::Norm::getSubRef "[INTERNAL]  Get submatrix
reference.

";

%feature("docstring") casadi::Norm::clone "[INTERNAL]  Clone function.

";

%feature("docstring") casadi::Norm::printPart "[INTERNAL]  Print a part of
the expression.

";

%feature("docstring") casadi::Norm::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") casadi::Norm::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") casadi::Norm::deepCopyMembers "[INTERNAL]  Deep copy
data members.

";

%feature("docstring") casadi::Norm::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") casadi::Norm::sparsity "

>  const Sparsity& casadi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & casadi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") casadi::Norm::getSubAssign "[INTERNAL]  Get submatrix
assignment.

";

%feature("docstring") casadi::Norm::generateOperation "[INTERNAL]  Generate
code for the operation.

";

%feature("docstring") casadi::Norm::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::Norm::getVertsplit "[INTERNAL]  Create a
vertical split node (vectors only)

";

%feature("docstring") casadi::Norm::getName "[INTERNAL]  Get the name.

";

%feature("docstring") casadi::Norm::getMultiplication "[INTERNAL]   Matrix
multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") casadi::Norm::weak "[INTERNAL]  Get a weak reference
to the object.

";

%feature("docstring") casadi::Norm::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") casadi::Norm::size "[INTERNAL] ";

%feature("docstring") casadi::Norm::getValue "[INTERNAL]  Get the value
(only for scalar constant nodes)

";

%feature("docstring") casadi::Norm::dep "

>  const MX & casadi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & casadi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::Norm::getAddNonzeros "[INTERNAL]  Add the
nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::Norm::isInit "[INTERNAL]  Check if the object
has been initialized.

";

%feature("docstring") casadi::Norm::isOne "[INTERNAL]  Check if identically
one.

";

%feature("docstring") casadi::Norm::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") casadi::Norm::getUnary "[INTERNAL]  Get a unary
operation.

";

%feature("docstring") casadi::Norm::propagateSparsity "

>  virtual void casadi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity.

>  void casadi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity, no work.

";

%feature("docstring") casadi::Norm::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") casadi::Norm::print "

>  void casadi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void casadi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") casadi::Norm::isEqual "[INTERNAL]  Check if two nodes
are equivalent up to a given depth.

";

%feature("docstring") casadi::Norm::getNorm2 "[INTERNAL]  Spectral norm.

";

%feature("docstring") casadi::Norm::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") casadi::Norm::evaluateMX "

>  void casadi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX)

>  void casadi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") casadi::Norm::getSolve "[INTERNAL]   Solve a system
of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") casadi::Norm::getBinary "[INTERNAL]  Get a binary
operation operation (matrix-matrix)

";

%feature("docstring") casadi::Norm::isOutputNode "[INTERNAL]  Check if
evaluation output.

";

%feature("docstring") casadi::Norm "[INTERNAL]   Matrix and vector norms.

Joel Andersson

C++ includes: norm.hpp ";

%feature("docstring") casadi::Norm::getCount "[INTERNAL]  Get the reference
count.

";

%feature("docstring") casadi::Norm::getMatrixValue "[INTERNAL]  Get the
value (only for constant nodes)

";

%feature("docstring") casadi::Norm::evaluateD "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") casadi::Norm::getNormInf "[INTERNAL]  Infinity norm.

";

%feature("docstring") casadi::Norm::getReshape "[INTERNAL]   Reshape.

";

%feature("docstring") casadi::Norm::assertInit "[INTERNAL]  Assert that the
object has been initialized.

";

%feature("docstring") casadi::Norm::getTranspose "[INTERNAL]   Transpose.

";

%feature("docstring") casadi::Norm::getNormF "[INTERNAL]  Frobenius norm.

";

%feature("docstring") casadi::Norm::simplifyMe "[INTERNAL]  Simplify the
expression (ex is a reference to the node)

";

%feature("docstring") casadi::Norm::assign "

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") casadi::Norm::isUnaryOp "[INTERNAL]  Check if unary
operation.

";

%feature("docstring") casadi::Norm::isValue "[INTERNAL]  Check if a certain
value.

";

%feature("docstring") casadi::Norm::size2 "[INTERNAL] ";

%feature("docstring") casadi::Norm::size1 "[INTERNAL] ";

%feature("docstring") casadi::Norm::getFunctionOutput "[INTERNAL]  Get
function output.

";

%feature("docstring") casadi::Norm::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") casadi::Norm::Norm "[INTERNAL]  Constructor.

";

%feature("docstring") casadi::Norm::getGetNonzeros "[INTERNAL]  Get the
nonzeros of matrix.

";

%feature("docstring") casadi::Norm::getOp "[INTERNAL]  Get the operation.

";

%feature("docstring") casadi::Norm::getFunctionInput "[INTERNAL]  Get
function input.

";

%feature("docstring") casadi::Norm::evaluateSX "[INTERNAL]  Evaluate
symbolically (SX)

";

%feature("docstring") casadi::Norm::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") casadi::Norm::~Norm "[INTERNAL]  Destructor.

";

%feature("docstring") casadi::Norm::getBinarySwitch "[INTERNAL]  Get a
binary operation operation.

";

%feature("docstring") casadi::Norm::hasDep "[INTERNAL]  Does the node
depend on other nodes.

";

%feature("docstring") casadi::Norm::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") casadi::Norm::isMultipleOutput "[INTERNAL]  Check if
a multiple output node.

";

%feature("docstring") casadi::Norm::getSetSparse "[INTERNAL]  Create set
sparse.

";

%feature("docstring") casadi::Norm::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") casadi::Norm::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring") casadi::Norm::getNumOutputs "[INTERNAL]  Number of
outputs.

";

%feature("docstring") casadi::Norm::sameOpAndDeps "[INTERNAL]  Checks if
two nodes have the same operation and have equivalent dependencies up to a
given depth.

";

%feature("docstring") casadi::Norm::shape "[INTERNAL] ";

%feature("docstring") casadi::Norm::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") casadi::Norm::getAssertion "[INTERNAL]   Assertion.

";

%feature("docstring") casadi::Norm::setDependencies "

>  void casadi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void casadi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") casadi::Norm::getFunction "[INTERNAL]  Get function
reference.

";

%feature("docstring") casadi::Norm::isNonLinear "[INTERNAL]  Is the node
nonlinear.

";

%feature("docstring") casadi::Norm::setSparsity "[INTERNAL]  Set the
sparsity.

";


// File: classcasadi_1_1Norm1.xml
%feature("docstring") casadi::Norm1::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") casadi::Norm1::isUnaryOp "[INTERNAL]  Check if unary
operation.

";

%feature("docstring") casadi::Norm1::getNormInf "[INTERNAL]  Infinity norm.

";

%feature("docstring") casadi::Norm1::getFunctionOutput "[INTERNAL]  Get
function output.

";

%feature("docstring") casadi::Norm1::isMultipleOutput "[INTERNAL]  Check if
a multiple output node.

";

%feature("docstring") casadi::Norm1::getHorzsplit "[INTERNAL]  Create a
horizontal split node.

";

%feature("docstring") casadi::Norm1::size2 "[INTERNAL] ";

%feature("docstring") casadi::Norm1::getBinary "[INTERNAL]  Get a binary
operation operation (matrix-matrix)

";

%feature("docstring") casadi::Norm1::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") casadi::Norm1::clone "[INTERNAL]  Clone function.

";

%feature("docstring") casadi::Norm1::mapping "[INTERNAL]  Get an IMatrix
representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") casadi::Norm1::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::Norm1::~Norm1 "[INTERNAL]  Destructor.

";

%feature("docstring") casadi::Norm1 "[INTERNAL]  1-norm

Joel Andersson

C++ includes: norm.hpp ";

%feature("docstring") casadi::Norm1::getMatrixValue "[INTERNAL]  Get the
value (only for constant nodes)

";

%feature("docstring") casadi::Norm1::getGetNonzeros "[INTERNAL]  Get the
nonzeros of matrix.

";

%feature("docstring") casadi::Norm1::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") casadi::Norm1::hasDep "[INTERNAL]  Does the node
depend on other nodes.

";

%feature("docstring") casadi::Norm1::size1 "[INTERNAL] ";

%feature("docstring") casadi::Norm1::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") casadi::Norm1::getOp "[INTERNAL]  Get the operation.

";

%feature("docstring") casadi::Norm1::simplifyMe "[INTERNAL]  Simplify the
expression (ex is a reference to the node)

";

%feature("docstring") casadi::Norm1::getValue "[INTERNAL]  Get the value
(only for scalar constant nodes)

";

%feature("docstring") casadi::Norm1::evaluateSX "[INTERNAL]  Evaluate
symbolically (SX)

";

%feature("docstring") casadi::Norm1::getAddNonzeros "[INTERNAL]  Add the
nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::Norm1::Norm1 "[INTERNAL]  Constructor.

";

%feature("docstring") casadi::Norm1::isOutputNode "[INTERNAL]  Check if
evaluation output.

";

%feature("docstring") casadi::Norm1::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring") casadi::Norm1::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") casadi::Norm1::getBinarySwitch "[INTERNAL]  Get a
binary operation operation.

";

%feature("docstring") casadi::Norm1::getSolve "[INTERNAL]   Solve a system
of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") casadi::Norm1::getUnary "[INTERNAL]  Get a unary
operation.

";

%feature("docstring") casadi::Norm1::evaluateD "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") casadi::Norm1::sameOpAndDeps "[INTERNAL]  Checks if
two nodes have the same operation and have equivalent dependencies up to a
given depth.

";

%feature("docstring") casadi::Norm1::isNonLinear "[INTERNAL]  Is the node
nonlinear.

";

%feature("docstring") casadi::Norm1::shape "[INTERNAL] ";

%feature("docstring") casadi::Norm1::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") casadi::Norm1::getNumOutputs "[INTERNAL]  Number of
outputs.

";

%feature("docstring") casadi::Norm1::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") casadi::Norm1::getNorm2 "[INTERNAL]  Spectral norm.

";

%feature("docstring") casadi::Norm1::print "

>  void casadi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void casadi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") casadi::Norm1::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") casadi::Norm1::getTranspose "[INTERNAL]   Transpose.

";

%feature("docstring") casadi::Norm1::sparsity "

>  const Sparsity& casadi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & casadi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") casadi::Norm1::getReshape "[INTERNAL]   Reshape.

";

%feature("docstring") casadi::Norm1::getName "[INTERNAL]  Get the name.

";

%feature("docstring") casadi::Norm1::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") casadi::Norm1::getFunction "[INTERNAL]  Get function
reference.

";

%feature("docstring") casadi::Norm1::getFunctionInput "[INTERNAL]  Get
function input.

";

%feature("docstring") casadi::Norm1::propagateSparsity "

>  virtual void casadi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity.

>  void casadi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity, no work.

";

%feature("docstring") casadi::Norm1::dep "

>  const MX & casadi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & casadi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::Norm1::getVertsplit "[INTERNAL]  Create a
vertical split node (vectors only)

";

%feature("docstring") casadi::Norm1::getSetNonzeros "[INTERNAL]  Assign the
nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::Norm1::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") casadi::Norm1::assertInit "[INTERNAL]  Assert that
the object has been initialized.

";

%feature("docstring") casadi::Norm1::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") casadi::Norm1::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") casadi::Norm1::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") casadi::Norm1::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::Norm1::numel "[INTERNAL]  Get shape.

";

%feature("docstring") casadi::Norm1::size "[INTERNAL] ";

%feature("docstring") casadi::Norm1::getAssertion "[INTERNAL]   Assertion.

";

%feature("docstring") casadi::Norm1::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") casadi::Norm1::deepCopyMembers "[INTERNAL]  Deep copy
data members.

";

%feature("docstring") casadi::Norm1::getInverse "[INTERNAL]   Inverse.

";

%feature("docstring") casadi::Norm1::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") casadi::Norm1::getSubRef "[INTERNAL]  Get submatrix
reference.

";

%feature("docstring") casadi::Norm1::weak "[INTERNAL]  Get a weak reference
to the object.

";

%feature("docstring") casadi::Norm1::setDependencies "

>  void casadi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void casadi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") casadi::Norm1::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") casadi::Norm1::getMultiplication "[INTERNAL]   Matrix
multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") casadi::Norm1::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") casadi::Norm1::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") casadi::Norm1::getNormF "[INTERNAL]  Frobenius norm.

";

%feature("docstring") casadi::Norm1::getOutput "[INTERNAL]  Get an output.

";

%feature("docstring") casadi::Norm1::assign "

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") casadi::Norm1::printPart "[INTERNAL]  Print a part of
the expression.

";

%feature("docstring") casadi::Norm1::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") casadi::Norm1::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") casadi::Norm1::evaluateMX "

>  void casadi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX)

>  void casadi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") casadi::Norm1::getSetSparse "[INTERNAL]  Create set
sparse.

";


// File: classcasadi_1_1Norm2.xml
%feature("docstring") casadi::Norm2::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") casadi::Norm2::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") casadi::Norm2::getNumOutputs "[INTERNAL]  Number of
outputs.

";

%feature("docstring") casadi::Norm2::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") casadi::Norm2::assertInit "[INTERNAL]  Assert that
the object has been initialized.

";

%feature("docstring") casadi::Norm2::sameOpAndDeps "[INTERNAL]  Checks if
two nodes have the same operation and have equivalent dependencies up to a
given depth.

";

%feature("docstring") casadi::Norm2::getNorm2 "[INTERNAL]  Spectral norm.

";

%feature("docstring") casadi::Norm2::sparsity "

>  const Sparsity& casadi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & casadi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") casadi::Norm2::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") casadi::Norm2::getSetSparse "[INTERNAL]  Create set
sparse.

";

%feature("docstring") casadi::Norm2::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::Norm2::getFunctionInput "[INTERNAL]  Get
function input.

";

%feature("docstring") casadi::Norm2 "[INTERNAL]  Represents a 2-norm
(spectral norm)

Joel Andersson

C++ includes: norm.hpp ";

%feature("docstring") casadi::Norm2::print "

>  void casadi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void casadi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") casadi::Norm2::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") casadi::Norm2::weak "[INTERNAL]  Get a weak reference
to the object.

";

%feature("docstring") casadi::Norm2::mapping "[INTERNAL]  Get an IMatrix
representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") casadi::Norm2::getInverse "[INTERNAL]   Inverse.

";

%feature("docstring") casadi::Norm2::getVertsplit "[INTERNAL]  Create a
vertical split node (vectors only)

";

%feature("docstring") casadi::Norm2::~Norm2 "[INTERNAL]  Destructor.

";

%feature("docstring") casadi::Norm2::deepCopyMembers "[INTERNAL]  Deep copy
data members.

";

%feature("docstring") casadi::Norm2::getOutput "[INTERNAL]  Get an output.

";

%feature("docstring") casadi::Norm2::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") casadi::Norm2::simplifyMe "[INTERNAL]  Simplify the
expression (ex is a reference to the node)

";

%feature("docstring") casadi::Norm2::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") casadi::Norm2::getOp "[INTERNAL]  Get the operation.

";

%feature("docstring") casadi::Norm2::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") casadi::Norm2::getAddNonzeros "[INTERNAL]  Add the
nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::Norm2::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::Norm2::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") casadi::Norm2::getMultiplication "[INTERNAL]   Matrix
multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") casadi::Norm2::numel "[INTERNAL]  Get shape.

";

%feature("docstring") casadi::Norm2::printPart "[INTERNAL]  Print a part of
the expression.

";

%feature("docstring") casadi::Norm2::getBinarySwitch "[INTERNAL]  Get a
binary operation operation.

";

%feature("docstring") casadi::Norm2::getGetNonzeros "[INTERNAL]  Get the
nonzeros of matrix.

";

%feature("docstring") casadi::Norm2::getHorzsplit "[INTERNAL]  Create a
horizontal split node.

";

%feature("docstring") casadi::Norm2::getReshape "[INTERNAL]   Reshape.

";

%feature("docstring") casadi::Norm2::getNormInf "[INTERNAL]  Infinity norm.

";

%feature("docstring") casadi::Norm2::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") casadi::Norm2::propagateSparsity "

>  virtual void casadi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity.

>  void casadi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity, no work.

";

%feature("docstring") casadi::Norm2::Norm2 "[INTERNAL]  Constructor.

";

%feature("docstring") casadi::Norm2::size2 "[INTERNAL] ";

%feature("docstring") casadi::Norm2::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") casadi::Norm2::getUnary "[INTERNAL]  Get a unary
operation.

";

%feature("docstring") casadi::Norm2::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") casadi::Norm2::setDependencies "

>  void casadi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void casadi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") casadi::Norm2::isUnaryOp "[INTERNAL]  Check if unary
operation.

";

%feature("docstring") casadi::Norm2::shape "[INTERNAL] ";

%feature("docstring") casadi::Norm2::isNonLinear "[INTERNAL]  Is the node
nonlinear.

";

%feature("docstring") casadi::Norm2::getAssertion "[INTERNAL]   Assertion.

";

%feature("docstring") casadi::Norm2::getSolve "[INTERNAL]   Solve a system
of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") casadi::Norm2::getName "[INTERNAL]  Get the name.

";

%feature("docstring") casadi::Norm2::dep "

>  const MX & casadi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & casadi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::Norm2::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") casadi::Norm2::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") casadi::Norm2::hasDep "[INTERNAL]  Does the node
depend on other nodes.

";

%feature("docstring") casadi::Norm2::evaluateD "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") casadi::Norm2::size "[INTERNAL] ";

%feature("docstring") casadi::Norm2::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring") casadi::Norm2::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") casadi::Norm2::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") casadi::Norm2::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") casadi::Norm2::getSubRef "[INTERNAL]  Get submatrix
reference.

";

%feature("docstring") casadi::Norm2::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") casadi::Norm2::evaluateMX "

>  void casadi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX)

>  void casadi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") casadi::Norm2::size1 "[INTERNAL] ";

%feature("docstring") casadi::Norm2::getFunction "[INTERNAL]  Get function
reference.

";

%feature("docstring") casadi::Norm2::getSetNonzeros "[INTERNAL]  Assign the
nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::Norm2::evaluateSX "[INTERNAL]  Evaluate
symbolically (SX)

";

%feature("docstring") casadi::Norm2::isOutputNode "[INTERNAL]  Check if
evaluation output.

";

%feature("docstring") casadi::Norm2::getMatrixValue "[INTERNAL]  Get the
value (only for constant nodes)

";

%feature("docstring") casadi::Norm2::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") casadi::Norm2::getFunctionOutput "[INTERNAL]  Get
function output.

";

%feature("docstring") casadi::Norm2::assign "

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") casadi::Norm2::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") casadi::Norm2::clone "[INTERNAL]  Clone function.

";

%feature("docstring") casadi::Norm2::getValue "[INTERNAL]  Get the value
(only for scalar constant nodes)

";

%feature("docstring") casadi::Norm2::getNormF "[INTERNAL]  Frobenius norm.

";

%feature("docstring") casadi::Norm2::getTranspose "[INTERNAL]   Transpose.

";

%feature("docstring") casadi::Norm2::getBinary "[INTERNAL]  Get a binary
operation operation (matrix-matrix)

";

%feature("docstring") casadi::Norm2::isMultipleOutput "[INTERNAL]  Check if
a multiple output node.

";


// File: classcasadi_1_1NormF.xml
%feature("docstring") casadi::NormF::getMatrixValue "[INTERNAL]  Get the
value (only for constant nodes)

";

%feature("docstring") casadi::NormF::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") casadi::NormF::size "[INTERNAL] ";

%feature("docstring") casadi::NormF::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") casadi::NormF::size2 "[INTERNAL] ";

%feature("docstring") casadi::NormF::getValue "[INTERNAL]  Get the value
(only for scalar constant nodes)

";

%feature("docstring") casadi::NormF::getBinarySwitch "[INTERNAL]  Get a
binary operation operation.

";

%feature("docstring") casadi::NormF::isMultipleOutput "[INTERNAL]  Check if
a multiple output node.

";

%feature("docstring") casadi::NormF::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") casadi::NormF::print "

>  void casadi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void casadi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") casadi::NormF::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") casadi::NormF::sameOpAndDeps "[INTERNAL]  Checks if
two nodes have the same operation and have equivalent dependencies up to a
given depth.

";

%feature("docstring") casadi::NormF::evaluateGen "[INTERNAL]  Evaluate the
function (template)

";

%feature("docstring") casadi::NormF::isOutputNode "[INTERNAL]  Check if
evaluation output.

";

%feature("docstring") casadi::NormF::getSetSparse "[INTERNAL]  Create set
sparse.

";

%feature("docstring") casadi::NormF::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") casadi::NormF::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") casadi::NormF::getHorzsplit "[INTERNAL]  Create a
horizontal split node.

";

%feature("docstring") casadi::NormF::getUnary "[INTERNAL]  Get a unary
operation.

";

%feature("docstring") casadi::NormF::NormF "[INTERNAL]  Constructor.

";

%feature("docstring") casadi::NormF::numel "[INTERNAL]  Get shape.

";

%feature("docstring") casadi::NormF::getSetNonzeros "[INTERNAL]  Assign the
nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::NormF::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") casadi::NormF::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") casadi::NormF::shape "[INTERNAL] ";

%feature("docstring") casadi::NormF::evaluateSX "[INTERNAL]  Evaluate the
function symbolically (SX)

";

%feature("docstring") casadi::NormF::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") casadi::NormF::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::NormF::getOutput "[INTERNAL]  Get an output.

";

%feature("docstring") casadi::NormF::sparsity "

>  const Sparsity& casadi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & casadi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") casadi::NormF::getNumOutputs "[INTERNAL]  Number of
outputs.

";

%feature("docstring") casadi::NormF::isUnaryOp "[INTERNAL]  Check if unary
operation.

";

%feature("docstring") casadi::NormF::getFunctionOutput "[INTERNAL]  Get
function output.

";

%feature("docstring") casadi::NormF::getFunction "[INTERNAL]  Get function
reference.

";

%feature("docstring") casadi::NormF::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") casadi::NormF::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") casadi::NormF::getName "[INTERNAL]  Get the name.

";

%feature("docstring") casadi::NormF::getSubRef "[INTERNAL]  Get submatrix
reference.

";

%feature("docstring") casadi::NormF::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::NormF::weak "[INTERNAL]  Get a weak reference
to the object.

";

%feature("docstring") casadi::NormF::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") casadi::NormF::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") casadi::NormF::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") casadi::NormF::getGetNonzeros "[INTERNAL]  Get the
nonzeros of matrix.

";

%feature("docstring") casadi::NormF::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring") casadi::NormF::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") casadi::NormF::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") casadi::NormF::getOp "[INTERNAL]  Get the operation.

";

%feature("docstring") casadi::NormF::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") casadi::NormF::getBinary "[INTERNAL]  Get a binary
operation operation (matrix-matrix)

";

%feature("docstring") casadi::NormF::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") casadi::NormF::simplifyMe "[INTERNAL]  Simplify the
expression (ex is a reference to the node)

";

%feature("docstring") casadi::NormF::assertInit "[INTERNAL]  Assert that
the object has been initialized.

";

%feature("docstring") casadi::NormF::getNorm2 "[INTERNAL]  Spectral norm.

";

%feature("docstring") casadi::NormF::getNormF "[INTERNAL]  Frobenius norm.

";

%feature("docstring") casadi::NormF::deepCopyMembers "[INTERNAL]  Deep copy
data members.

";

%feature("docstring") casadi::NormF::dep "

>  const MX & casadi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & casadi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::NormF::assign "

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") casadi::NormF::getSolve "[INTERNAL]   Solve a system
of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") casadi::NormF::isNonLinear "[INTERNAL]  Is the node
nonlinear.

";

%feature("docstring") casadi::NormF::~NormF "[INTERNAL]  Destructor.

";

%feature("docstring") casadi::NormF "[INTERNAL]  Represents a Frobenius
norm.

Joel Andersson

C++ includes: norm.hpp ";

%feature("docstring") casadi::NormF::clone "[INTERNAL]  Clone function.

";

%feature("docstring") casadi::NormF::getTranspose "[INTERNAL]   Transpose.

";

%feature("docstring") casadi::NormF::setDependencies "

>  void casadi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void casadi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") casadi::NormF::propagateSparsity "

>  virtual void casadi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity.

>  void casadi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity, no work.

";

%feature("docstring") casadi::NormF::evaluateD "[INTERNAL]  Evaluate the
function numerically.

";

%feature("docstring") casadi::NormF::printPart "[INTERNAL]  Print a part of
the expression.

";

%feature("docstring") casadi::NormF::getReshape "[INTERNAL]   Reshape.

";

%feature("docstring") casadi::NormF::getInverse "[INTERNAL]   Inverse.

";

%feature("docstring") casadi::NormF::mapping "[INTERNAL]  Get an IMatrix
representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") casadi::NormF::evaluateMX "

>  void casadi::NormF::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void casadi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") casadi::NormF::hasDep "[INTERNAL]  Does the node
depend on other nodes.

";

%feature("docstring") casadi::NormF::getAddNonzeros "[INTERNAL]  Add the
nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::NormF::getFunctionInput "[INTERNAL]  Get
function input.

";

%feature("docstring") casadi::NormF::getNormInf "[INTERNAL]  Infinity norm.

";

%feature("docstring") casadi::NormF::getMultiplication "[INTERNAL]   Matrix
multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") casadi::NormF::getVertsplit "[INTERNAL]  Create a
vertical split node (vectors only)

";

%feature("docstring") casadi::NormF::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") casadi::NormF::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") casadi::NormF::getAssertion "[INTERNAL]   Assertion.

";

%feature("docstring") casadi::NormF::size1 "[INTERNAL] ";


// File: classcasadi_1_1NormInf.xml
%feature("docstring") casadi::NormInf::isNonLinear "[INTERNAL]  Is the node
nonlinear.

";

%feature("docstring") casadi::NormInf::dep "

>  const MX & casadi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & casadi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::NormInf::isOutputNode "[INTERNAL]  Check if
evaluation output.

";

%feature("docstring") casadi::NormInf::numel "[INTERNAL]  Get shape.

";

%feature("docstring") casadi::NormInf::printPart "[INTERNAL]  Print a part
of the expression.

";

%feature("docstring") casadi::NormInf::getNormF "[INTERNAL]  Frobenius
norm.

";

%feature("docstring") casadi::NormInf::getFunction "[INTERNAL]  Get
function reference.

";

%feature("docstring") casadi::NormInf::getFunctionInput "[INTERNAL]  Get
function input.

";

%feature("docstring") casadi::NormInf::propagateSparsity "

>  virtual void casadi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity.

>  void casadi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity, no work.

";

%feature("docstring") casadi::NormInf::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") casadi::NormInf::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") casadi::NormInf::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") casadi::NormInf::getOutput "[INTERNAL]  Get an
output.

";

%feature("docstring") casadi::NormInf::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") casadi::NormInf::isUnaryOp "[INTERNAL]  Check if
unary operation.

";

%feature("docstring") casadi::NormInf::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") casadi::NormInf::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") casadi::NormInf::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") casadi::NormInf::clone "[INTERNAL]  Clone function.

";

%feature("docstring") casadi::NormInf::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") casadi::NormInf::getBinary "[INTERNAL]  Get a binary
operation operation (matrix-matrix)

";

%feature("docstring") casadi::NormInf::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") casadi::NormInf::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") casadi::NormInf::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") casadi::NormInf::evaluateMX "

>  void casadi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX)

>  void casadi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") casadi::NormInf::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") casadi::NormInf::~NormInf "[INTERNAL]  Destructor.

";

%feature("docstring") casadi::NormInf::sameOpAndDeps "[INTERNAL]  Checks if
two nodes have the same operation and have equivalent dependencies up to a
given depth.

";

%feature("docstring") casadi::NormInf::getInverse "[INTERNAL]   Inverse.

";

%feature("docstring") casadi::NormInf::getReshape "[INTERNAL]   Reshape.

";

%feature("docstring") casadi::NormInf "[INTERNAL]  Represents an infinity-
norm operation on a MX.

Joel Andersson

C++ includes: norm.hpp ";

%feature("docstring") casadi::NormInf::evaluateD "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") casadi::NormInf::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::NormInf::getUnary "[INTERNAL]  Get a unary
operation.

";

%feature("docstring") casadi::NormInf::getMatrixValue "[INTERNAL]  Get the
value (only for constant nodes)

";

%feature("docstring") casadi::NormInf::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") casadi::NormInf::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") casadi::NormInf::getMultiplication "[INTERNAL]
Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") casadi::NormInf::getVertsplit "[INTERNAL]  Create a
vertical split node (vectors only)

";

%feature("docstring") casadi::NormInf::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") casadi::NormInf::NormInf "[INTERNAL]  Constructor.

";

%feature("docstring") casadi::NormInf::getAddNonzeros "[INTERNAL]  Add the
nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::NormInf::getHorzsplit "[INTERNAL]  Create a
horizontal split node.

";

%feature("docstring") casadi::NormInf::getValue "[INTERNAL]  Get the value
(only for scalar constant nodes)

";

%feature("docstring") casadi::NormInf::getSubRef "[INTERNAL]  Get submatrix
reference.

";

%feature("docstring") casadi::NormInf::mapping "[INTERNAL]  Get an IMatrix
representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") casadi::NormInf::print "

>  void casadi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void casadi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") casadi::NormInf::getSolve "[INTERNAL]   Solve a
system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") casadi::NormInf::size2 "[INTERNAL] ";

%feature("docstring") casadi::NormInf::size1 "[INTERNAL] ";

%feature("docstring") casadi::NormInf::getBinarySwitch "[INTERNAL]  Get a
binary operation operation.

";

%feature("docstring") casadi::NormInf::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") casadi::NormInf::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") casadi::NormInf::isMultipleOutput "[INTERNAL]  Check
if a multiple output node.

";

%feature("docstring") casadi::NormInf::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") casadi::NormInf::getNormInf "[INTERNAL]  Infinity
norm.

";

%feature("docstring") casadi::NormInf::setDependencies "

>  void casadi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void casadi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") casadi::NormInf::getNumOutputs "[INTERNAL]  Number of
outputs.

";

%feature("docstring") casadi::NormInf::simplifyMe "[INTERNAL]  Simplify the
expression (ex is a reference to the node)

";

%feature("docstring") casadi::NormInf::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring") casadi::NormInf::hasDep "[INTERNAL]  Does the node
depend on other nodes.

";

%feature("docstring") casadi::NormInf::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::NormInf::getGetNonzeros "[INTERNAL]  Get the
nonzeros of matrix.

";

%feature("docstring") casadi::NormInf::getSetNonzeros "[INTERNAL]  Assign
the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::NormInf::sparsity "

>  const Sparsity& casadi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & casadi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") casadi::NormInf::assertInit "[INTERNAL]  Assert that
the object has been initialized.

";

%feature("docstring") casadi::NormInf::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") casadi::NormInf::getFunctionOutput "[INTERNAL]  Get
function output.

";

%feature("docstring") casadi::NormInf::deepCopyMembers "[INTERNAL]  Deep
copy data members.

";

%feature("docstring") casadi::NormInf::getNorm2 "[INTERNAL]  Spectral norm.

";

%feature("docstring") casadi::NormInf::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::NormInf::getName "[INTERNAL]  Get the name.

";

%feature("docstring") casadi::NormInf::size "[INTERNAL] ";

%feature("docstring") casadi::NormInf::assign "

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") casadi::NormInf::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") casadi::NormInf::evaluateSX "[INTERNAL]  Evaluate
symbolically (SX)

";

%feature("docstring") casadi::NormInf::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") casadi::NormInf::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") casadi::NormInf::shape "[INTERNAL] ";

%feature("docstring") casadi::NormInf::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") casadi::NormInf::getSetSparse "[INTERNAL]  Create set
sparse.

";


// File: classcasadi_1_1Nullspace.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::Nullspace::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::Nullspace::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::Nullspace::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::Nullspace::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::Nullspace::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::Nullspace::spCanEvaluate "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::Nullspace::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::Nullspace::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::Nullspace::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::Nullspace::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::Nullspace::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::Nullspace::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::Nullspace::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::Nullspace::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::Nullspace::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::Nullspace::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::Nullspace::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::Nullspace::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::Nullspace::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::Nullspace::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::Nullspace::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::Nullspace::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::Nullspace::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::Nullspace::evaluate "

Evaluate.

";

%feature("docstring") casadi::Nullspace::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::Nullspace::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::Nullspace::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::Nullspace::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::Nullspace::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::Nullspace::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::Nullspace::inputSchemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::Nullspace::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::Nullspace::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::Nullspace::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::Nullspace::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::Nullspace::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::Nullspace::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::Nullspace::isInit "

Is initialized?

";

%feature("docstring") casadi::Nullspace::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::Nullspace::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::Nullspace::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::Nullspace::assignNode "[INTERNAL]  Assign the
node to a node class pointer (or null)

";

%feature("docstring") casadi::Nullspace::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::Nullspace::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::Nullspace::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::Nullspace::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::Nullspace::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::Nullspace::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::Nullspace::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::Nullspace::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::Nullspace::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") casadi::Nullspace::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::Nullspace::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::Nullspace::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::Nullspace::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::Nullspace::getOption "

get an option value

";

%feature("docstring") casadi::Nullspace::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::Nullspace::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::Nullspace::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::Nullspace::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::Nullspace::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::Nullspace::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::Nullspace::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::Nullspace::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::Nullspace::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::Nullspace::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::Nullspace::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::Nullspace "

Base class for nullspace construction.

Constructs a basis for the null-space of a fat matrix A. i.e. finds Z such
that AZ = 0 holds.

The nullspace is also known as the orthogonal complement of the rowspace of
a matrix.

It is assumed that the matrix A is of full rank.

Implementations are not required to construct an orthogonal or orthonormal
basis Joris Gillis

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| dense        | OT_BOOLEAN   | true         | Indicates    | casadi::Null |
|              |              |              | that dense   | spaceInterna |
|              |              |              | matrices can | l            |
|              |              |              | be assumed   |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: nullspace.hpp ";

%feature("docstring") casadi::Nullspace::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::Nullspace::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::Nullspace::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::Nullspace::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::Nullspace::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::Nullspace::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::Nullspace::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::Nullspace::isNull "

Is a null pointer?

";

%feature("docstring") casadi::Nullspace::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::Nullspace::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::Nullspace::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::Nullspace::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::Nullspace::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::Nullspace::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::Nullspace::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::Nullspace::Nullspace "

Default constructor.

";

%feature("docstring") casadi::Nullspace::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::Nullspace::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::Nullspace::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::Nullspace::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") casadi::Nullspace::hasOption "

check if there is an option str

";

%feature("docstring") casadi::Nullspace::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::Nullspace::getOptionTypeName "

Get the type name of a certain option.

";


// File: classstd_1_1numeric__limits_3_01casadi_1_1SXElement_01_4.xml
%feature("docstring") std::numeric_limits< casadi::SXElement > " [INTERNAL]
C++ includes: sx_element.hpp ";


// File: classcasadi_1_1OCPInputIOSchemeVector.xml
%feature("docstring") casadi::OCPInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::OCPInputIOSchemeVector "[INTERNAL]  Helper
function for 'OCPInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::OCPInputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") casadi::OCPInputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::OCPInputIOSchemeVector::vector "[INTERNAL] ";

%feature("docstring") casadi::OCPInputIOSchemeVector::OCPInputIOSchemeVector
"[INTERNAL] ";

%feature("docstring") casadi::OCPInputIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::OCPInputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::OCPInputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";


// File: classcasadi_1_1OCPOutputIOSchemeVector.xml
%feature("docstring") casadi::OCPOutputIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") casadi::OCPOutputIOSchemeVector "[INTERNAL]  Helper
function for 'OCPOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::OCPOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::OCPOutputIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::OCPOutputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::OCPOutputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::OCPOutputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::OCPOutputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring")
casadi::OCPOutputIOSchemeVector::OCPOutputIOSchemeVector "[INTERNAL] ";


// File: classcasadi_1_1OCPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::OCPSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::OCPSolver::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::OCPSolver::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::OCPSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::OCPSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::OCPSolver "

Base class for OCP solvers.

Joel Andersson

>Input scheme: casadi::OCPInput (OCP_NUM_IN = 14) [ocpIn]
+------------+--------+----------------------------------------------+
| Full name  | Short  |                 Description                  |
+============+========+==============================================+
| OCP_LBX    | lbx    | States lower bounds (nx x (ns+1)) .          |
+------------+--------+----------------------------------------------+
| OCP_UBX    | ubx    | States upper bounds (nx x (ns+1)) .          |
+------------+--------+----------------------------------------------+
| OCP_X_INIT | x_init | States initial guess (nx x (ns+1)) .         |
+------------+--------+----------------------------------------------+
| OCP_LBU    | lbu    | Controls lower bounds (nu x ns) .            |
+------------+--------+----------------------------------------------+
| OCP_UBU    | ubu    | Controls upper bounds (nu x ns) .            |
+------------+--------+----------------------------------------------+
| OCP_U_INIT | u_init | Controls initial guess (nu x ns) .           |
+------------+--------+----------------------------------------------+
| OCP_LBP    | lbp    | Parameters lower bounds (np x 1) .           |
+------------+--------+----------------------------------------------+
| OCP_UBP    | ubp    | Parameters upper bounds (np x 1) .           |
+------------+--------+----------------------------------------------+
| OCP_P_INIT | p_init | Parameters initial guess (np x 1) .          |
+------------+--------+----------------------------------------------+
| OCP_LBH    | lbh    | Point constraint lower bound (nh x (ns+1)) . |
+------------+--------+----------------------------------------------+
| OCP_UBH    | ubh    | Point constraint upper bound (nh x (ns+1)) . |
+------------+--------+----------------------------------------------+
| OCP_LBG    | lbg    | Lower bound for the coupling constraints .   |
+------------+--------+----------------------------------------------+
| OCP_UBG    | ubg    | Upper bound for the coupling constraints .   |
+------------+--------+----------------------------------------------+

>Output scheme: casadi::OCPOutput (OCP_NUM_OUT = 5) [ocpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| OCP_X_OPT              | x_opt                  | Optimal state          |
|                        |                        | trajectory .           |
+------------------------+------------------------+------------------------+
| OCP_U_OPT              | u_opt                  | Optimal control        |
|                        |                        | trajectory .           |
+------------------------+------------------------+------------------------+
| OCP_P_OPT              | p_opt                  | Optimal parameters .   |
+------------------------+------------------------+------------------------+
| OCP_COST               | cost                   | Objective/cost         |
|                        |                        | function for optimal   |
|                        |                        | solution (1 x 1) .     |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| final_time   | OT_REAL      | 1            |              | casadi::OCPS |
|              |              |              |              | olverInterna |
|              |              |              |              | l            |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| number_of_gr | OT_INTEGER   | 20           |              | casadi::OCPS |
| id_points    |              |              |              | olverInterna |
|              |              |              |              | l            |
+--------------+--------------+--------------+--------------+--------------+
| number_of_pa | OT_INTEGER   | 0            |              | casadi::OCPS |
| rameters     |              |              |              | olverInterna |
|              |              |              |              | l            |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: ocp_solver.hpp ";

%feature("docstring") casadi::OCPSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::OCPSolver::isInit "

Is initialized?

";

%feature("docstring") casadi::OCPSolver::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::OCPSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::OCPSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::OCPSolver::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::OCPSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::OCPSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::OCPSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::OCPSolver::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::OCPSolver::getFfcn "";

%feature("docstring") casadi::OCPSolver::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::OCPSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::OCPSolver::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::OCPSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::OCPSolver::inputSchemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::OCPSolver::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::OCPSolver::evaluate "

Evaluate.

";

%feature("docstring") casadi::OCPSolver::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::OCPSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::OCPSolver::assignNode "[INTERNAL]  Assign the
node to a node class pointer (or null)

";

%feature("docstring") casadi::OCPSolver::getCfcn "";

%feature("docstring") casadi::OCPSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::OCPSolver::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::OCPSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::OCPSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::OCPSolver::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::OCPSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::OCPSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::OCPSolver::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::OCPSolver::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::OCPSolver::checkNode "[INTERNAL]  Check if
the node is pointing to the right type of object.

";

%feature("docstring") casadi::OCPSolver::getRfcn "";

%feature("docstring") casadi::OCPSolver::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::OCPSolver::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::OCPSolver::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") casadi::OCPSolver::getOption "

get an option value

";

%feature("docstring") casadi::OCPSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::OCPSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::OCPSolver::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::OCPSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::OCPSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::OCPSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::OCPSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::OCPSolver::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::OCPSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::OCPSolver::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::OCPSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::OCPSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::OCPSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::OCPSolver::hasOption "

check if there is an option str

";

%feature("docstring") casadi::OCPSolver::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::OCPSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::OCPSolver::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::OCPSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::OCPSolver::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::OCPSolver::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::OCPSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::OCPSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::OCPSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::OCPSolver::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::OCPSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::OCPSolver::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::OCPSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::OCPSolver::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::OCPSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::OCPSolver::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::OCPSolver::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::OCPSolver::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") casadi::OCPSolver::getMfcn "";

%feature("docstring") casadi::OCPSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::OCPSolver::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::OCPSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::OCPSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::OCPSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::OCPSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::OCPSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::OCPSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::OCPSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::OCPSolver::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::OCPSolver::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::OCPSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::OCPSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::OCPSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::OCPSolver::isNull "

Is a null pointer?

";

%feature("docstring") casadi::OCPSolver::OCPSolver "

Default constructor.

";

%feature("docstring") casadi::OCPSolver::spCanEvaluate "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::OCPSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::OCPSolver::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";


// File: classcasadi_1_1OldCollocationIntegrator.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::OldCollocationIntegrator::hasOption "

check if there is an option str

";

%feature("docstring") casadi::OldCollocationIntegrator::inputScheme "[INTERNAL]  Access input/output scheme.

";

%feature("docstring") casadi::OldCollocationIntegrator::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::OldCollocationIntegrator::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::OldCollocationIntegrator::inputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::OldCollocationIntegrator::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::OldCollocationIntegrator::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::OldCollocationIntegrator::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::OldCollocationIntegrator::input_struct "[INTERNAL]  Input/output structures of the function

";

%feature("docstring") casadi::OldCollocationIntegrator::swap "[INTERNAL]
Swap content with another instance.

";

%feature("docstring") casadi::OldCollocationIntegrator::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::OldCollocationIntegrator::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::OldCollocationIntegrator::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::OldCollocationIntegrator::getNumOutputNonzeros
"

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::OldCollocationIntegrator::outputScheme "[INTERNAL]  Access input/output scheme.

";

%feature("docstring") casadi::OldCollocationIntegrator::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::OldCollocationIntegrator::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::OldCollocationIntegrator::reset "

Reset the forward problem Time will be set to t0 and state to
input(INTEGRATOR_X0)

";

%feature("docstring") casadi::OldCollocationIntegrator::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::OldCollocationIntegrator::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::OldCollocationIntegrator::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::OldCollocationIntegrator::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::OldCollocationIntegrator::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::OldCollocationIntegrator::printStats "

Print solver statistics.

";

%feature("docstring") casadi::OldCollocationIntegrator::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::OldCollocationIntegrator::getNumInputNonzeros
"

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::OldCollocationIntegrator::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::OldCollocationIntegrator::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::OldCollocationIntegrator::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::OldCollocationIntegrator::schemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::OldCollocationIntegrator::printPtr "[INTERNAL]  Print the pointer to the internal class

";

%feature("docstring") casadi::OldCollocationIntegrator::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::OldCollocationIntegrator::isNull "

Is a null pointer?

";

%feature("docstring") casadi::OldCollocationIntegrator::outputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::OldCollocationIntegrator "

Collocation integrator ODE/DAE integrator based on collocation.

The method is still under development

Base class for integrators. Solves an initial value problem (IVP) coupled to
a terminal value problem with differential equation given as an implicit ODE
coupled to an algebraic equation and a set of quadratures: Initial
conditions at t=t0  x(t0)  = x0  q(t0)  = 0   Forward integration from t=t0
to t=tf  der(x) = function(x, z, p, t) Forward ODE  0 = fz(x, z, p, t)
Forward algebraic equations  der(q) = fq(x, z, p, t)
Forward quadratures   Terminal conditions at t=tf  rx(tf)  = rx0  rq(tf)  =
0 Backward integration from t=tf to t=t0  der(rx) = gx(rx, rz, rp, x, z, p,
t)        Backward ODE  0 = gz(rx, rz, rp, x, z, p, t) Backward algebraic
equations  der(rq) = gq(rx, rz, rp, x, z, p, t) Backward quadratures   where
we assume that both the forward and backwards integrations are index-1
(i.e. dfz/dz, dgz/drz are invertible) and furthermore that  gx, gz and gq
have a linear dependency on rx, rz and rp.

Joel Andersson

>Input scheme: casadi::IntegratorInput (INTEGRATOR_NUM_IN = 7) [integratorIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_X0          | x0                     | Differential state at  |
|                        |                        | the initial time .     |
+------------------------+------------------------+------------------------+
| INTEGRATOR_P           | p                      | Parameters .           |
+------------------------+------------------------+------------------------+
| INTEGRATOR_Z0          | z0                     | Initial guess for the  |
|                        |                        | algebraic variable .   |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RX0         | rx0                    | Backward differential  |
|                        |                        | state at the final     |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RP          | rp                     | Backward parameter     |
|                        |                        | vector .               |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZ0         | rz0                    | Initial guess for the  |
|                        |                        | backwards algebraic    |
|                        |                        | variable .             |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::IntegratorOutput (INTEGRATOR_NUM_OUT = 7) [integratorOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_XF          | xf                     | Differential state at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_QF          | qf                     | Quadrature state at    |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_ZF          | zf                     | Algebraic variable at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RXF         | rxf                    | Backward differential  |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RQF         | rqf                    | Backward quadrature    |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZF         | rzf                    | Backward algebraic     |
|                        |                        | variable at the        |
|                        |                        | initial time .         |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| augmented_op | OT_DICTIONAR | GenericType( | Options to   | casadi::Inte |
| tions        | Y            | )            | be passed    | gratorIntern |
|              |              |              | down to the  | al           |
|              |              |              | augmented    |              |
|              |              |              | integrator,  |              |
|              |              |              | if one is    |              |
|              |              |              | constructed. |              |
+--------------+--------------+--------------+--------------+--------------+
| collocation_ | OT_STRING    | \"radau\"      | Collocation  | casadi::OldC |
| scheme       |              |              | scheme (rada | ollocationIn |
|              |              |              | u|legendre)  | tegratorInte |
|              |              |              |              | rnal         |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_augme | OT_BOOLEAN   | true         | If DAE       | casadi::Inte |
| nted         |              |              | callback     | gratorIntern |
|              |              |              | functions    | al           |
|              |              |              | are          |              |
|              |              |              | SXFunction , |              |
|              |              |              | have         |              |
|              |              |              | augmented    |              |
|              |              |              | DAE callback |              |
|              |              |              | function     |              |
|              |              |              | also be      |              |
|              |              |              | SXFunction . |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_f     | OT_BOOLEAN   | false        | Expand the   | casadi::OldC |
|              |              |              | ODE/DAE      | ollocationIn |
|              |              |              | residual     | tegratorInte |
|              |              |              | function in  | rnal         |
|              |              |              | an SX graph  |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_q     | OT_BOOLEAN   | false        | Expand the   | casadi::OldC |
|              |              |              | quadrature   | ollocationIn |
|              |              |              | function in  | tegratorInte |
|              |              |              | an SX graph  | rnal         |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| hotstart     | OT_BOOLEAN   | true         | Initialize   | casadi::OldC |
|              |              |              | the          | ollocationIn |
|              |              |              | trajectory   | tegratorInte |
|              |              |              | at the       | rnal         |
|              |              |              | previous     |              |
|              |              |              | solution     |              |
+--------------+--------------+--------------+--------------+--------------+
| implicit_sol | OT_IMPLICITF | GenericType( | An implicit  | casadi::OldC |
| ver          | UNCTION      | )            | function     | ollocationIn |
|              |              |              | solver       | tegratorInte |
|              |              |              |              | rnal         |
+--------------+--------------+--------------+--------------+--------------+
| implicit_sol | OT_DICTIONAR | GenericType( | Options to   | casadi::OldC |
| ver_options  | Y            | )            | be passed to | ollocationIn |
|              |              |              | the implicit | tegratorInte |
|              |              |              | solver       | rnal         |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| interpolatio | OT_INTEGER   | 3            | Order of the | casadi::OldC |
| n_order      |              |              | interpolatin | ollocationIn |
|              |              |              | g            | tegratorInte |
|              |              |              | polynomials  | rnal         |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| number_of_fi | OT_INTEGER   | 20           | Number of    | casadi::OldC |
| nite_element |              |              | finite       | ollocationIn |
| s            |              |              | elements     | tegratorInte |
|              |              |              |              | rnal         |
+--------------+--------------+--------------+--------------+--------------+
| print_stats  | OT_BOOLEAN   | false        | Print out    | casadi::Inte |
|              |              |              | statistics   | gratorIntern |
|              |              |              | after        | al           |
|              |              |              | integration  |              |
+--------------+--------------+--------------+--------------+--------------+
| quadrature_s | OT_LINEARSOL | GenericType( | An linear    | casadi::OldC |
| olver        | VER          | )            | solver to    | ollocationIn |
|              |              |              | solver the   | tegratorInte |
|              |              |              | quadrature   | rnal         |
|              |              |              | equations    |              |
+--------------+--------------+--------------+--------------+--------------+
| quadrature_s | OT_DICTIONAR | GenericType( | Options to   | casadi::OldC |
| olver_option | Y            | )            | be passed to | ollocationIn |
| s            |              |              | the          | tegratorInte |
|              |              |              | quadrature   | rnal         |
|              |              |              | solver       |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| startup_inte | OT_INTEGRATO | GenericType( | An ODE/DAE   | casadi::OldC |
| grator       | R            | )            | integrator   | ollocationIn |
|              |              |              | that can be  | tegratorInte |
|              |              |              | used to      | rnal         |
|              |              |              | generate a   |              |
|              |              |              | startup      |              |
|              |              |              | trajectory   |              |
+--------------+--------------+--------------+--------------+--------------+
| startup_inte | OT_DICTIONAR | GenericType( | Options to   | casadi::OldC |
| grator_optio | Y            | )            | be passed to | ollocationIn |
| ns           |              |              | the startup  | tegratorInte |
|              |              |              | integrator   | rnal         |
+--------------+--------------+--------------+--------------+--------------+
| t0           | OT_REAL      | 0            | Beginning of | casadi::Inte |
|              |              |              | the time     | gratorIntern |
|              |              |              | horizon      | al           |
+--------------+--------------+--------------+--------------+--------------+
| tf           | OT_REAL      | 1            | End of the   | casadi::Inte |
|              |              |              | time horizon | gratorIntern |
|              |              |              |              | al           |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: old_collocation_integrator.hpp ";

%feature("docstring") casadi::OldCollocationIntegrator::assignNodeNoCount "[INTERNAL]  Assign the node to a node class pointer without reference
counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::OldCollocationIntegrator::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::OldCollocationIntegrator::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::OldCollocationIntegrator::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::OldCollocationIntegrator::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::OldCollocationIntegrator::getOption "

get an option value

";

%feature("docstring") casadi::OldCollocationIntegrator::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::OldCollocationIntegrator::clone "

Clone.

";

%feature("docstring") casadi::OldCollocationIntegrator::assertInit "[INTERNAL]  Assert that it is initialized

";

%feature("docstring") casadi::OldCollocationIntegrator::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::OldCollocationIntegrator::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::OldCollocationIntegrator::integrateB "

Integrate backward until a specified time point.

";

%feature("docstring") casadi::OldCollocationIntegrator::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")
casadi::OldCollocationIntegrator::setOptionByAllowedIndex "[INTERNAL]  Set
a certain option by giving its index into the allowed values.

";

%feature("docstring") casadi::OldCollocationIntegrator::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::OldCollocationIntegrator::getNumOutputElements
"

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::OldCollocationIntegrator::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::OldCollocationIntegrator::spCanEvaluate "[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::OldCollocationIntegrator::spInit "[INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::OldCollocationIntegrator::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::OldCollocationIntegrator::getNumInputElements
"

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")
casadi::OldCollocationIntegrator::OldCollocationIntegrator "

>  casadi::OldCollocationIntegrator::OldCollocationIntegrator()
------------------------------------------------------------------------

Default constructor.

>  casadi::OldCollocationIntegrator::OldCollocationIntegrator(const Function &f, const Function &g=Function())
------------------------------------------------------------------------

Create an integrator for explicit ODEs.

Parameters:
-----------

f:  dynamical system

>Input scheme: casadi::DAEInput (DAE_NUM_IN = 5) [daeIn]
+-----------+-------+----------------------------+
| Full name | Short |        Description         |
+===========+=======+============================+
| DAE_X     | x     | Differential state .       |
+-----------+-------+----------------------------+
| DAE_Z     | z     | Algebraic state .          |
+-----------+-------+----------------------------+
| DAE_P     | p     | Parameter .                |
+-----------+-------+----------------------------+
| DAE_T     | t     | Explicit time dependence . |
+-----------+-------+----------------------------+

>Output scheme: casadi::DAEOutput (DAE_NUM_OUT = 4) [daeOut]
+-----------+-------+--------------------------------------------+
| Full name | Short |                Description                 |
+===========+=======+============================================+
| DAE_ODE   | ode   | Right hand side of the implicit ODE .      |
+-----------+-------+--------------------------------------------+
| DAE_ALG   | alg   | Right hand side of algebraic equations .   |
+-----------+-------+--------------------------------------------+
| DAE_QUAD  | quad  | Right hand side of quadratures equations . |
+-----------+-------+--------------------------------------------+

Parameters:
-----------

g:  backwards system

>Input scheme: casadi::RDAEInput (RDAE_NUM_IN = 8) [rdaeIn]
+-----------+-------+-------------------------------+
| Full name | Short |          Description          |
+===========+=======+===============================+
| RDAE_RX   | rx    | Backward differential state . |
+-----------+-------+-------------------------------+
| RDAE_RZ   | rz    | Backward algebraic state .    |
+-----------+-------+-------------------------------+
| RDAE_RP   | rp    | Backward parameter vector .   |
+-----------+-------+-------------------------------+
| RDAE_X    | x     | Forward differential state .  |
+-----------+-------+-------------------------------+
| RDAE_Z    | z     | Forward algebraic state .     |
+-----------+-------+-------------------------------+
| RDAE_P    | p     | Parameter vector .            |
+-----------+-------+-------------------------------+
| RDAE_T    | t     | Explicit time dependence .    |
+-----------+-------+-------------------------------+

>Output scheme: casadi::RDAEOutput (RDAE_NUM_OUT = 4) [rdaeOut]
+-----------+-------+-------------------------------------------+
| Full name | Short |                Description                |
+===========+=======+===========================================+
| RDAE_ODE  | ode   | Right hand side of ODE. .                 |
+-----------+-------+-------------------------------------------+
| RDAE_ALG  | alg   | Right hand side of algebraic equations. . |
+-----------+-------+-------------------------------------------+
| RDAE_QUAD | quad  | Right hand side of quadratures. .         |
+-----------+-------+-------------------------------------------+

";

%feature("docstring") casadi::OldCollocationIntegrator::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::OldCollocationIntegrator::weak "[INTERNAL]
Get a weak reference to the object.

";

%feature("docstring") casadi::OldCollocationIntegrator::checkInputs "[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::OldCollocationIntegrator::getAugmented "

Generate a augmented DAE system with nfwd forward sensitivities and nadj
adjoint sensitivities.

";

%feature("docstring")
casadi::OldCollocationIntegrator::getOptionAllowedIndex "[INTERNAL]  Get
the index into allowed options of a certain option.

";

%feature("docstring") casadi::OldCollocationIntegrator::resetB "

Reset the backward problem.

Time will be set to tf and backward state to input(INTEGRATOR_RX0)

";

%feature("docstring") casadi::OldCollocationIntegrator::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::OldCollocationIntegrator::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::OldCollocationIntegrator::output_struct "[INTERNAL]  Input/output structures of the function

";

%feature("docstring") casadi::OldCollocationIntegrator::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::OldCollocationIntegrator::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::OldCollocationIntegrator::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::OldCollocationIntegrator::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::OldCollocationIntegrator::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::OldCollocationIntegrator::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") casadi::OldCollocationIntegrator::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::OldCollocationIntegrator::callDerivative "[INTERNAL]  Evaluate the function symbolically or numerically with
directional derivatives The first two arguments are the nondifferentiated
inputs and results of the evaluation, the next two arguments are a set of
forward directional seeds and the resulting forward directional derivatives,
the length of the vector being the number of forward directions. The next
two arguments are a set of adjoint directional seeds and the resulting
adjoint directional derivatives, the length of the vector being the number
of adjoint directions.

";

%feature("docstring") casadi::OldCollocationIntegrator::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::OldCollocationIntegrator::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::OldCollocationIntegrator::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::OldCollocationIntegrator::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::OldCollocationIntegrator::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::OldCollocationIntegrator::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::OldCollocationIntegrator::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::OldCollocationIntegrator::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::OldCollocationIntegrator::integrate "

Integrate forward until a specified time point.

";

%feature("docstring") casadi::OldCollocationIntegrator::getCount "[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::OldCollocationIntegrator::assignNode "[INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring") casadi::OldCollocationIntegrator::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::OldCollocationIntegrator::setOptionByEnumValue
"[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") casadi::OldCollocationIntegrator::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::OldCollocationIntegrator::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::OldCollocationIntegrator::isInit "

Is initialized?

";

%feature("docstring") casadi::OldCollocationIntegrator::getDAE "

Get the DAE.

";

%feature("docstring") casadi::OldCollocationIntegrator::spEvaluate "[INTERNAL]  Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::OldCollocationIntegrator::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::OldCollocationIntegrator::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::OldCollocationIntegrator::evaluate "

Evaluate.

";

%feature("docstring") casadi::OldCollocationIntegrator::getOptionDescription
"

Get the description of a certain option.

";

%feature("docstring") casadi::OldCollocationIntegrator::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::OldCollocationIntegrator::getOutputScheme "

Get output scheme.

";


// File: classcasadi_1_1OneSX.xml
%feature("docstring") casadi::OneSX::isInteger "[INTERNAL]  Properties.

";

%feature("docstring") casadi::OneSX::isSymbolic "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::OneSX::print "[INTERNAL]  print

";

%feature("docstring") casadi::OneSX::getIntValue "[INTERNAL]  Get value of
a constant node.

";

%feature("docstring") casadi::OneSX::isSmooth "[INTERNAL]  Check if smooth.

";

%feature("docstring") casadi::OneSX::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") casadi::OneSX::isOne "[INTERNAL]  check properties of
a node

";

%feature("docstring") casadi::OneSX::isConstant "[INTERNAL]  Properties.

";

%feature("docstring") casadi::OneSX::marked "[INTERNAL] ";

%feature("docstring") casadi::OneSX::getName "[INTERNAL] ";

%feature("docstring") casadi::OneSX::isMinusInf "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::OneSX::OneSX "[INTERNAL] ";

%feature("docstring") casadi::OneSX::mark "[INTERNAL] ";

%feature("docstring") casadi::OneSX::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") casadi::OneSX::~OneSX "[INTERNAL] ";

%feature("docstring") casadi::OneSX::getValue "[INTERNAL]  Get the value.

";

%feature("docstring") casadi::OneSX::isMinusOne "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::OneSX::dep "[INTERNAL]  get the reference of
a child

";

%feature("docstring") casadi::OneSX "[INTERNAL]  Represents a one SX.

Joel Andersson

C++ includes: constant_sx.hpp ";

%feature("docstring") casadi::OneSX::hasDep "[INTERNAL]  check properties
of a node

";

%feature("docstring") casadi::OneSX::isInf "[INTERNAL]  check properties of
a node

";

%feature("docstring") casadi::OneSX::isAlmostZero "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::OneSX::getOp "[INTERNAL]  Get the operation.

";

%feature("docstring") casadi::OneSX::isZero "[INTERNAL]  check properties
of a node

";

%feature("docstring") casadi::OneSX::init "[INTERNAL]  Initialize the node
(currently used only to give a similar interface to MXNode)

";

%feature("docstring") casadi::OneSX::isNan "[INTERNAL]  check properties of
a node

";


// File: classcasadi_1_1OOQPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::OOQPSolver::inputScheme " [INTERNAL]  Access input/output scheme.

";

%feature("docstring") casadi::OOQPSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::OOQPSolver::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::OOQPSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::OOQPSolver::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::OOQPSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::OOQPSolver::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::OOQPSolver::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::OOQPSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::OOQPSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::OOQPSolver::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::OOQPSolver::generateNativeCode "

Generate native code in the interfaced language for debugging

";

%feature("docstring") casadi::OOQPSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::OOQPSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::OOQPSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::OOQPSolver::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::OOQPSolver::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::OOQPSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::OOQPSolver::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") casadi::OOQPSolver::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::OOQPSolver::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::OOQPSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::OOQPSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::OOQPSolver::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::OOQPSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::OOQPSolver::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::OOQPSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::OOQPSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::OOQPSolver::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::OOQPSolver::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::OOQPSolver::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::OOQPSolver::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::OOQPSolver::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::OOQPSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::OOQPSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::OOQPSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::OOQPSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::OOQPSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::OOQPSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::OOQPSolver::spCanEvaluate "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::OOQPSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::OOQPSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::OOQPSolver::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::OOQPSolver::getOption "

get an option value

";

%feature("docstring") casadi::OOQPSolver::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::OOQPSolver::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::OOQPSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::OOQPSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::OOQPSolver::evaluate "

Evaluate.

";

%feature("docstring") casadi::OOQPSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::OOQPSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::OOQPSolver::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::OOQPSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::OOQPSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::OOQPSolver::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::OOQPSolver::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") casadi::OOQPSolver::isNull "

Is a null pointer?

";

%feature("docstring") casadi::OOQPSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::OOQPSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::OOQPSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::OOQPSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::OOQPSolver::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::OOQPSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::OOQPSolver::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::OOQPSolver::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::OOQPSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::OOQPSolver::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::OOQPSolver::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::OOQPSolver::setLPOptions "

Set options that make the QP solver more suitable for solving LPs.

";

%feature("docstring") casadi::OOQPSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::OOQPSolver::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::OOQPSolver::hasOption "

check if there is an option str

";

%feature("docstring") casadi::OOQPSolver::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::OOQPSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::OOQPSolver::OOQPSolver "

>  casadi::OOQPSolver::OOQPSolver()
------------------------------------------------------------------------

Default constructor.

>  casadi::OOQPSolver::OOQPSolver(const QPStructure &st)
------------------------------------------------------------------------

Constructor.

Parameters:
-----------

st:  Problem structure

";

%feature("docstring") casadi::OOQPSolver::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") casadi::OOQPSolver::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::OOQPSolver "

Interface to the OOQP Solver for quadratic programming:

Solves the following strictly convex problem:

min          1/2 x' H x + g' x  x  subject to             LBA <= A x <= UBA
LBX <= x   <= UBX      with :       H sparse (n x n) positive definite
g dense  (n x 1)      n: number of decision variables (x)     nc: number of
constraints (A)

If H is not positive-definite, the solver should throw an error.

The current implementation assumes that OOQP is configured with the MA27
sparse linear solver.

NOTE: when doing multiple calls to evaluate(), check if you need to
reInit();

>Input scheme: casadi::QPSolverInput (QP_SOLVER_NUM_IN = 10) [qpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_H            | h                      | The square matrix H:   |
|                        |                        | sparse, (n x n). Only  |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical.     |
+------------------------+------------------------+------------------------+
| QP_SOLVER_G            | g                      | The vector g: dense,   |
|                        |                        | (n x 1) .              |
+------------------------+------------------------+------------------------+
| QP_SOLVER_A            | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LBA          | lba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_UBA          | uba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LBX          | lbx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_UBX          | ubx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_X0           | x0                     | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X0       | lam_x0                 | dense                  |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::QPSolverOutput (QP_SOLVER_NUM_OUT = 5) [qpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_X            | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| QP_SOLVER_COST         | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_A        | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X        | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| artol        | OT_REAL      | 0.000        | tolerance as | casadi::OOQP |
|              |              |              | provided     | Internal     |
|              |              |              | with         |              |
|              |              |              | setArTol to  |              |
|              |              |              | OOQP         |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| mutol        | OT_REAL      | 0.000        | tolerance as | casadi::OOQP |
|              |              |              | provided     | Internal     |
|              |              |              | with         |              |
|              |              |              | setMuTol to  |              |
|              |              |              | OOQP         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| print_level  | OT_INTEGER   | 0            | Print level. | casadi::OOQP |
|              |              |              | OOQP listens | Internal     |
|              |              |              | to           |              |
|              |              |              | print_level  |              |
|              |              |              | 0, 10 and    |              |
|              |              |              | 100          |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: ooqp_solver.hpp ";

%feature("docstring") casadi::OOQPSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::OOQPSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::OOQPSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::OOQPSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::OOQPSolver::isInit "

Is initialized?

";

%feature("docstring") casadi::OOQPSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::OOQPSolver::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::OOQPSolver::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::OOQPSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::OOQPSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::OOQPSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::OOQPSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::OOQPSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::OOQPSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::OOQPSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";


// File: classcasadi_1_1OptionsFunctionality.xml


/*  Option Functionality  */ %feature("docstring")
casadi::OptionsFunctionality::isInit "

Is initialized?

";

%feature("docstring") casadi::OptionsFunctionality::hasOption "

check if there is an option str

";

%feature("docstring") casadi::OptionsFunctionality::setOptionByAllowedIndex
"[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::OptionsFunctionality::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::OptionsFunctionality::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::OptionsFunctionality::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") casadi::OptionsFunctionality::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") casadi::OptionsFunctionality::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::OptionsFunctionality::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::OptionsFunctionality::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::OptionsFunctionality::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::OptionsFunctionality::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::OptionsFunctionality::getOption "

get an option value

";

%feature("docstring") casadi::OptionsFunctionality::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::OptionsFunctionality::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::OptionsFunctionality::printPtr "[INTERNAL]
Print the pointer to the internal class

";

%feature("docstring") casadi::OptionsFunctionality::OptionsFunctionality "

Default constructor.

";

%feature("docstring") casadi::OptionsFunctionality::isNull "

Is a null pointer?

";

%feature("docstring") casadi::OptionsFunctionality::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::OptionsFunctionality::clone "[INTERNAL]  Deep
copy.

";

%feature("docstring") casadi::OptionsFunctionality::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::OptionsFunctionality::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::OptionsFunctionality "

Provides options setting/getting functionality.

Gives a derived class the ability to set and retrieve options in a
convenient way. It also contains error checking, making sure that the option
exists and that the value type is correct.

A derived class should add option names, types and default values to the
corresponding vectors.

Joel Andersson

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: options_functionality.hpp ";

%feature("docstring") casadi::OptionsFunctionality::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::OptionsFunctionality::checkNode "[INTERNAL]
Assert that the node is pointing to the right type of object

";

%feature("docstring") casadi::OptionsFunctionality::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::OptionsFunctionality::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::OptionsFunctionality::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") casadi::OptionsFunctionality::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") casadi::OptionsFunctionality::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") casadi::OptionsFunctionality::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::OptionsFunctionality::getCount "[INTERNAL]
Get the reference count.

";

%feature("docstring") casadi::OptionsFunctionality::assignNodeNoCount "[INTERNAL]  Assign the node to a node class pointer without reference
counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::OptionsFunctionality::repr "[INTERNAL]  Print
a representation of the object.

";

%feature("docstring") casadi::OptionsFunctionality::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::OptionsFunctionality::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::OptionsFunctionality::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::OptionsFunctionality::~OptionsFunctionality "

Destructor.

";


// File: classcasadi_1_1OptionsFunctionalityNode.xml
%feature("docstring") casadi::OptionsFunctionalityNode::hasOption "[INTERNAL]  check if there is an option str

";

%feature("docstring") casadi::OptionsFunctionalityNode::getOption "[INTERNAL]  get an option value

";

%feature("docstring") casadi::OptionsFunctionalityNode::getOptionNames "[INTERNAL]  Get a list of all option names.

";

%feature("docstring") casadi::OptionsFunctionalityNode::printOption "[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")
casadi::OptionsFunctionalityNode::getOptionAllowedIndex "[INTERNAL]  Get
the index into allowed options of a certain option.

";

%feature("docstring")
casadi::OptionsFunctionalityNode::setOptionByAllowedIndex "[INTERNAL]  Set
a certain option by giving its index into the allowed values.

";

%feature("docstring") casadi::OptionsFunctionalityNode::getOptionType "[INTERNAL]  Get the type of a certain option.

";

%feature("docstring") casadi::OptionsFunctionalityNode::getOptionDefault "[INTERNAL]  Get the default of a certain option.

";

%feature("docstring") casadi::OptionsFunctionalityNode::assertInit "[INTERNAL]  Assert that the object has been initialized.

";

%feature("docstring") casadi::OptionsFunctionalityNode::isInit "[INTERNAL]
Check if the object has been initialized.

";

%feature("docstring") casadi::OptionsFunctionalityNode::setOptionByEnumValue
"[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") casadi::OptionsFunctionalityNode::getOptionTypeName "[INTERNAL]  Get the type name of a certain option.

";

%feature("docstring") casadi::OptionsFunctionalityNode::hasSetOption "[INTERNAL]  check if the user has there is an option str

";

%feature("docstring")
casadi::OptionsFunctionalityNode::~OptionsFunctionalityNode "[INTERNAL] ";

%feature("docstring") casadi::OptionsFunctionalityNode::dictionary "[INTERNAL]  Get the dictionary.

";

%feature("docstring") casadi::OptionsFunctionalityNode::setOption "

>  void casadi::OptionsFunctionalityNode::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------
[INTERNAL] 
set an option. The setOptions are in general only considered before
the init function, if any. If properties changes, the init function
should be called again. (Ticket #54)

>  void casadi::OptionsFunctionalityNode::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------
[INTERNAL] 
set a set of options. The setOptions are in general only considered
before the init function, if any. If properties changes, the init
function should be called again. (Ticket #54)

";

%feature("docstring")
casadi::OptionsFunctionalityNode::OptionsFunctionalityNode "[INTERNAL]
Constructor, destructor.

";

%feature("docstring") casadi::OptionsFunctionalityNode::printOptions "[INTERNAL]  Print options to a stream.

";

%feature("docstring") casadi::OptionsFunctionalityNode::getBestMatches "[INTERNAL]  Get th ebest suggestions of option names.

";

%feature("docstring") casadi::OptionsFunctionalityNode::deepCopyMembers "[INTERNAL]  Deep copy data members.

";

%feature("docstring") casadi::OptionsFunctionalityNode::getOptionAllowed "[INTERNAL]  Get the allowed values of a certain option.

";

%feature("docstring") casadi::OptionsFunctionalityNode::init "[INTERNAL]
Initialize the object.

";

%feature("docstring") casadi::OptionsFunctionalityNode::weak "[INTERNAL]
Get a weak reference to the object.

";

%feature("docstring") casadi::OptionsFunctionalityNode::repr "[INTERNAL]
Print representation.

";

%feature("docstring") casadi::OptionsFunctionalityNode "[INTERNAL]
Internal class.

Joel Andersson

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: options_functionality.hpp ";

%feature("docstring") casadi::OptionsFunctionalityNode::clone "[INTERNAL]
Make a deep copy of the instance.

";

%feature("docstring") casadi::OptionsFunctionalityNode::copyOptions "[INTERNAL]  Copy all options from another object.

";

%feature("docstring") casadi::OptionsFunctionalityNode::getCount "[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::OptionsFunctionalityNode::print "[INTERNAL]
Print description.

";

%feature("docstring") casadi::OptionsFunctionalityNode::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::OptionsFunctionalityNode::getOptionDescription
"[INTERNAL]  Get the description of a certain option.

";


// File: classcasadi_1_1OutputNode.xml
%feature("docstring") casadi::OutputNode::evaluateSX "[INTERNAL]  Evaluate
symbolically (SX)

";

%feature("docstring") casadi::OutputNode::getSetNonzeros "[INTERNAL]
Assign the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::OutputNode::getGetNonzeros "[INTERNAL]  Get
the nonzeros of matrix.

";

%feature("docstring") casadi::OutputNode::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") casadi::OutputNode::getFunctionOutput "[INTERNAL]
Get function output.

";

%feature("docstring") casadi::OutputNode::getSetSparse "[INTERNAL]  Create
set sparse.

";

%feature("docstring") casadi::OutputNode::getFunctionInput "[INTERNAL]  Get
function input.

";

%feature("docstring") casadi::OutputNode::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") casadi::OutputNode::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") casadi::OutputNode::sameOpAndDeps "[INTERNAL]  Checks
if two nodes have the same operation and have equivalent dependencies up to
a given depth.

";

%feature("docstring") casadi::OutputNode::getVertsplit "[INTERNAL]  Create
a vertical split node (vectors only)

";

%feature("docstring") casadi::OutputNode::getBinary "[INTERNAL]  Get a
binary operation operation (matrix-matrix)

";

%feature("docstring") casadi::OutputNode::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::OutputNode::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::OutputNode::setDependencies "

>  void casadi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void casadi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") casadi::OutputNode::numel "[INTERNAL]  Get shape.

";

%feature("docstring") casadi::OutputNode::getMatrixValue "[INTERNAL]  Get
the value (only for constant nodes)

";

%feature("docstring") casadi::OutputNode::deepCopyMembers "[INTERNAL]  Deep
copy data members.

";

%feature("docstring") casadi::OutputNode::getBinarySwitch "[INTERNAL]  Get
a binary operation operation.

";

%feature("docstring") casadi::OutputNode::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") casadi::OutputNode::getOutput "[INTERNAL]  Get an
output.

";

%feature("docstring") casadi::OutputNode::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") casadi::OutputNode::getInverse "[INTERNAL]   Inverse.

";

%feature("docstring") casadi::OutputNode::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") casadi::OutputNode::__nonzero__ "[INTERNAL]  Check
the truth value of this node.

";

%feature("docstring") casadi::OutputNode::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") casadi::OutputNode::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") casadi::OutputNode::assertInit "[INTERNAL]  Assert
that the object has been initialized.

";

%feature("docstring") casadi::OutputNode::sparsity "

>  const Sparsity& casadi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & casadi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") casadi::OutputNode::evaluateD "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") casadi::OutputNode::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::OutputNode::assign "

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") casadi::OutputNode::~OutputNode "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::OutputNode::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") casadi::OutputNode::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") casadi::OutputNode::getAddNonzeros "[INTERNAL]  Add
the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::OutputNode::getName "[INTERNAL]  Get the
name.

";

%feature("docstring") casadi::OutputNode::mapping "[INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") casadi::OutputNode::getNumOutputs "[INTERNAL]  Number
of outputs.

";

%feature("docstring") casadi::OutputNode::print "

>  void casadi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void casadi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") casadi::OutputNode::isUnaryOp "[INTERNAL]  Check if
unary operation.

";

%feature("docstring") casadi::OutputNode::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") casadi::OutputNode::getSolve "[INTERNAL]   Solve a
system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") casadi::OutputNode "[INTERNAL] C++ includes:
multiple_output.hpp ";

%feature("docstring") casadi::OutputNode::getValue "[INTERNAL]  Get the
value (only for scalar constant nodes)

";

%feature("docstring") casadi::OutputNode::getNormF "[INTERNAL]  Frobenius
norm.

";

%feature("docstring") casadi::OutputNode::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") casadi::OutputNode::shape "[INTERNAL] ";

%feature("docstring") casadi::OutputNode::getUnary "[INTERNAL]  Get a unary
operation.

";

%feature("docstring") casadi::OutputNode::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") casadi::OutputNode::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") casadi::OutputNode::size2 "[INTERNAL] ";

%feature("docstring") casadi::OutputNode::evaluateMX "

>  void casadi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX)

>  void casadi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") casadi::OutputNode::size1 "[INTERNAL] ";

%feature("docstring") casadi::OutputNode::clone "[INTERNAL]  Clone
function.

";

%feature("docstring") casadi::OutputNode::isMultipleOutput "[INTERNAL]
Check if a multiple output node.

";

%feature("docstring") casadi::OutputNode::getFunction "[INTERNAL]  Get
function reference.

";

%feature("docstring") casadi::OutputNode::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") casadi::OutputNode::getReshape "[INTERNAL]   Reshape.

";

%feature("docstring") casadi::OutputNode::getHorzsplit "[INTERNAL]  Create
a horizontal split node.

";

%feature("docstring") casadi::OutputNode::printPart "[INTERNAL]  Print a
part of the expression.

";

%feature("docstring") casadi::OutputNode::isNonLinear "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring") casadi::OutputNode::getSubRef "[INTERNAL]  Get
submatrix reference.

";

%feature("docstring") casadi::OutputNode::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") casadi::OutputNode::propagateSparsity "

>  virtual void casadi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity.

>  void casadi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity, no work.

";

%feature("docstring") casadi::OutputNode::getMultiplication "[INTERNAL]
Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") casadi::OutputNode::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") casadi::OutputNode::simplifyMe "[INTERNAL]  Simplify
the expression (ex is a reference to the node)

";

%feature("docstring") casadi::OutputNode::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") casadi::OutputNode::dep "

>  const MX & casadi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & casadi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::OutputNode::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") casadi::OutputNode::OutputNode "[INTERNAL]
Constructor.

";

%feature("docstring") casadi::OutputNode::size "[INTERNAL] ";

%feature("docstring") casadi::OutputNode::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") casadi::OutputNode::hasDep "[INTERNAL]  Does the node
depend on other nodes.

";

%feature("docstring") casadi::OutputNode::getNorm2 "[INTERNAL]  Spectral
norm.

";

%feature("docstring") casadi::OutputNode::isOutputNode "[INTERNAL]  Check
if evaluation output.

";

%feature("docstring") casadi::OutputNode::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") casadi::OutputNode::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") casadi::OutputNode::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") casadi::OutputNode::getNormInf "[INTERNAL]  Infinity
norm.

";


// File: classcasadi_1_1Parallelizer.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::Parallelizer::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::Parallelizer::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::Parallelizer::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::Parallelizer::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::Parallelizer::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") casadi::Parallelizer::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::Parallelizer::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::Parallelizer::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::Parallelizer::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::Parallelizer::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::Parallelizer::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::Parallelizer::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::Parallelizer::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::Parallelizer::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::Parallelizer::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::Parallelizer::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::Parallelizer::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::Parallelizer::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::Parallelizer::hasOption "

check if there is an option str

";

%feature("docstring") casadi::Parallelizer::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::Parallelizer::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::Parallelizer::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::Parallelizer::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::Parallelizer::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::Parallelizer::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::Parallelizer::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::Parallelizer::checkInputs "[INTERNAL]  Check
if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::Parallelizer::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::Parallelizer::spCanEvaluate "[INTERNAL]  Is
the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::Parallelizer::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::Parallelizer::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::Parallelizer::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::Parallelizer::isInit "

Is initialized?

";

%feature("docstring") casadi::Parallelizer::getOption "

get an option value

";

%feature("docstring") casadi::Parallelizer::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::Parallelizer::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::Parallelizer::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") casadi::Parallelizer::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::Parallelizer::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::Parallelizer::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::Parallelizer::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::Parallelizer::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::Parallelizer::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::Parallelizer::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::Parallelizer::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::Parallelizer::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::Parallelizer::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::Parallelizer::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::Parallelizer::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::Parallelizer::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::Parallelizer::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::Parallelizer::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::Parallelizer::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::Parallelizer::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::Parallelizer::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::Parallelizer "

Parallelizer execution of functions.

Joel Andersson

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| parallelizat | OT_STRING    | \"serial\"     | (serial|open | casadi::Para |
| ion          |              |              | mp|mpi)      | llelizerInte |
|              |              |              |              | rnal         |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available stats
+-----------------+------------------------------+
|       Id        |           Used in            |
+=================+==============================+
| max_threads     | casadi::ParallelizerInternal |
+-----------------+------------------------------+
| num_threads     | casadi::ParallelizerInternal |
+-----------------+------------------------------+
| task_allocation | casadi::ParallelizerInternal |
+-----------------+------------------------------+
| task_cputime    | casadi::ParallelizerInternal |
+-----------------+------------------------------+
| task_endtime    | casadi::ParallelizerInternal |
+-----------------+------------------------------+
| task_order      | casadi::ParallelizerInternal |
+-----------------+------------------------------+
| task_starttime  | casadi::ParallelizerInternal |
+-----------------+------------------------------+

Diagrams

C++ includes: parallelizer.hpp ";

%feature("docstring") casadi::Parallelizer::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::Parallelizer::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::Parallelizer::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::Parallelizer::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::Parallelizer::isNull "

Is a null pointer?

";

%feature("docstring") casadi::Parallelizer::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::Parallelizer::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::Parallelizer::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::Parallelizer::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::Parallelizer::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::Parallelizer::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::Parallelizer::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::Parallelizer::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::Parallelizer::schemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::Parallelizer::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::Parallelizer::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::Parallelizer::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::Parallelizer::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::Parallelizer::evaluate "

Evaluate.

";

%feature("docstring") casadi::Parallelizer::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::Parallelizer::checkNode "[INTERNAL]  Check if
the node is pointing to the right type of object.

";

%feature("docstring") casadi::Parallelizer::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::Parallelizer::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::Parallelizer::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::Parallelizer::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::Parallelizer::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::Parallelizer::Parallelizer "

>  casadi::Parallelizer::Parallelizer()
------------------------------------------------------------------------

Default constructor.

>  casadi::Parallelizer::Parallelizer(const std::vector< Function > &funcs)
------------------------------------------------------------------------

Create a Parallelizer.

";

%feature("docstring") casadi::Parallelizer::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::Parallelizer::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") casadi::Parallelizer::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::Parallelizer::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::Parallelizer::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::Parallelizer::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::Parallelizer::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::Parallelizer::setJacSparsity "

Generate the sparsity of a Jacobian block

";


// File: classcasadi_1_1Polynomial.xml
%feature("docstring") casadi::Polynomial "

Helper class for differentiating and integrating polynomials.

Joel Andersson

C++ includes: polynomial.hpp ";

%feature("docstring") casadi::Polynomial::derivative "

Create a new polynomial for the derivative.

";

%feature("docstring") casadi::Polynomial::Polynomial "

>  casadi::Polynomial::Polynomial(real_t scalar=1)
------------------------------------------------------------------------

Construct a constant polynomial.

>  casadi::Polynomial::Polynomial(real_t p0, real_t p1)
------------------------------------------------------------------------

Construct a linear polynomial.

>  casadi::Polynomial::Polynomial(real_t p0, real_t p1, real_t p2)
------------------------------------------------------------------------

Construct a quadratic polynomial.

>  casadi::Polynomial::Polynomial(real_t p0, real_t p1, real_t p2, real_t p3)
------------------------------------------------------------------------

Construct a cubic polynomial.

>  casadi::Polynomial::Polynomial(const std::vector< T > &coeff)
------------------------------------------------------------------------

Construct from a vector of polynomial coefficients.

";

%feature("docstring") casadi::Polynomial::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::Polynomial::anti_derivative "

Create a new polynomial for the anti-derivative (primitive function)

";

%feature("docstring") casadi::Polynomial::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::Polynomial::degree "

Degree of the polynomial.

";

%feature("docstring") casadi::Polynomial::toScalar "

Get scalar value (error if degree()!=0)

";

%feature("docstring") casadi::Polynomial::trim "

Remove excess zeros.

";

%feature("docstring") casadi::Polynomial::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::Polynomial::getRepresentation "

Return a string with a representation (for SWIG)

";


// File: classcasadi_1_1PrintableObject.xml
%feature("docstring") casadi::PrintableObject::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::PrintableObject::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::PrintableObject::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::PrintableObject "

Base class for objects that have a natural string representation.

Joel Andersson

C++ includes: printable_object.hpp ";

%feature("docstring") casadi::PrintableObject::getDescription "

Return a string with a description (for SWIG)

";


// File: structcasadi_1_1ProfilingData__ENTRY.xml
%feature("docstring") casadi::ProfilingData_ENTRY "[INTERNAL] C++ includes:
profiling.hpp ";


// File: structcasadi_1_1ProfilingData__EXIT.xml
%feature("docstring") casadi::ProfilingData_EXIT "[INTERNAL] C++ includes:
profiling.hpp ";


// File: structcasadi_1_1ProfilingData__IO.xml
%feature("docstring") casadi::ProfilingData_IO "[INTERNAL] C++ includes:
profiling.hpp ";


// File: structcasadi_1_1ProfilingData__NAME.xml
%feature("docstring") casadi::ProfilingData_NAME "[INTERNAL] C++ includes:
profiling.hpp ";


// File: structcasadi_1_1ProfilingData__SOURCE.xml
%feature("docstring") casadi::ProfilingData_SOURCE "[INTERNAL] C++
includes: profiling.hpp ";


// File: structcasadi_1_1ProfilingData__TIMELINE.xml
%feature("docstring") casadi::ProfilingData_TIMELINE "[INTERNAL] C++
includes: profiling.hpp ";


// File: structcasadi_1_1ProfilingHeader.xml
%feature("docstring") casadi::ProfilingHeader "[INTERNAL] C++ includes:
profiling.hpp ";


// File: classcasadi_1_1PsdIndefDpleSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::PsdIndefDpleSolver::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::PsdIndefDpleSolver::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::PsdIndefDpleSolver::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::PsdIndefDpleSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::PsdIndefDpleSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::PsdIndefDpleSolver::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::PsdIndefDpleSolver::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") casadi::PsdIndefDpleSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::PsdIndefDpleSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::PsdIndefDpleSolver::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::PsdIndefDpleSolver::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") casadi::PsdIndefDpleSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::PsdIndefDpleSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::PsdIndefDpleSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::PsdIndefDpleSolver::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::PsdIndefDpleSolver::getOption "

get an option value

";

%feature("docstring") casadi::PsdIndefDpleSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::PsdIndefDpleSolver::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::PsdIndefDpleSolver::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::PsdIndefDpleSolver::evaluate "

Evaluate.

";

%feature("docstring") casadi::PsdIndefDpleSolver::getCount "[INTERNAL]  Get
the reference count.

";

%feature("docstring") casadi::PsdIndefDpleSolver::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::PsdIndefDpleSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::PsdIndefDpleSolver::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::PsdIndefDpleSolver::printPtr "[INTERNAL]
Print the pointer to the internal class

";

%feature("docstring") casadi::PsdIndefDpleSolver::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::PsdIndefDpleSolver::printStats "

Print solver statistics.

";

%feature("docstring") casadi::PsdIndefDpleSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::PsdIndefDpleSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::PsdIndefDpleSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::PsdIndefDpleSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::PsdIndefDpleSolver::isInit "

Is initialized?

";

%feature("docstring") casadi::PsdIndefDpleSolver::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::PsdIndefDpleSolver::inputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::PsdIndefDpleSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::PsdIndefDpleSolver::callDerivative "[INTERNAL]  Evaluate the function symbolically or numerically with
directional derivatives The first two arguments are the nondifferentiated
inputs and results of the evaluation, the next two arguments are a set of
forward directional seeds and the resulting forward directional derivatives,
the length of the vector being the number of forward directions. The next
two arguments are a set of adjoint directional seeds and the resulting
adjoint directional derivatives, the length of the vector being the number
of adjoint directions.

";

%feature("docstring") casadi::PsdIndefDpleSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::PsdIndefDpleSolver::isNull "

Is a null pointer?

";

%feature("docstring") casadi::PsdIndefDpleSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::PsdIndefDpleSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::PsdIndefDpleSolver::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::PsdIndefDpleSolver::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::PsdIndefDpleSolver::assignNodeNoCount "[INTERNAL]  Assign the node to a node class pointer without reference
counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::PsdIndefDpleSolver::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::PsdIndefDpleSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::PsdIndefDpleSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::PsdIndefDpleSolver::hasOption "

check if there is an option str

";

%feature("docstring") casadi::PsdIndefDpleSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::PsdIndefDpleSolver::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") casadi::PsdIndefDpleSolver::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") casadi::PsdIndefDpleSolver::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::PsdIndefDpleSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::PsdIndefDpleSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::PsdIndefDpleSolver::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::PsdIndefDpleSolver::spCanEvaluate "[INTERNAL]
Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::PsdIndefDpleSolver::PsdIndefDpleSolver "

>  casadi::PsdIndefDpleSolver::PsdIndefDpleSolver()
------------------------------------------------------------------------

Default constructor.

>  casadi::PsdIndefDpleSolver::PsdIndefDpleSolver(const std::vector< Sparsity > &A, const std::vector< Sparsity > &V)
------------------------------------------------------------------------

Constructor.

Parameters:
-----------

A:  List of sparsities of A_i

V:  List of sparsities of V_i

";

%feature("docstring") casadi::PsdIndefDpleSolver::spInit "[INTERNAL]  Reset
the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::PsdIndefDpleSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::PsdIndefDpleSolver::checkInputs "[INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::PsdIndefDpleSolver::outputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::PsdIndefDpleSolver::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::PsdIndefDpleSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::PsdIndefDpleSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::PsdIndefDpleSolver::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::PsdIndefDpleSolver::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::PsdIndefDpleSolver::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::PsdIndefDpleSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::PsdIndefDpleSolver::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::PsdIndefDpleSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::PsdIndefDpleSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::PsdIndefDpleSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::PsdIndefDpleSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::PsdIndefDpleSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::PsdIndefDpleSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::PsdIndefDpleSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::PsdIndefDpleSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::PsdIndefDpleSolver::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::PsdIndefDpleSolver::schemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::PsdIndefDpleSolver "

An efficient solver for Discrete Periodic Lyapunov Equations using SLICOT.

Given matrices $A_k$ and symmetric $V_k, k = 0..K-1$

A_k in R^(n x n) V_k in R^n

provides all of $P_k$ that satisfy:

P_0 = A_(K-1)*P_(K-1)*A_(K-1)' + V_k P_k+1 = A_k*P_k*A_k' + V_k  for k =
1..K-1

Uses Periodic Schur Decomposition ('psd') and does not assume positive
definiteness. Based on Periodic Lyapunov equations: some applications and
new algorithms. Int. J. Control, vol. 67, pp. 69-87, 1997.

Joris Gillis

>Input scheme: casadi::DPLEInput (DPLE_NUM_IN = 3) [dpleIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| DPLE_A                 | a                      | A matrices (horzcat    |
|                        |                        | when const_dim,        |
|                        |                        | blkdiag otherwise) .   |
+------------------------+------------------------+------------------------+
| DPLE_V                 | v                      | V matrices (horzcat    |
|                        |                        | when const_dim,        |
|                        |                        | blkdiag otherwise) .   |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::DPLEOutput (DPLE_NUM_OUT = 2) [dpleOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| DPLE_P                 | p                      | Lyapunov matrix        |
|                        |                        | (horzcat when          |
|                        |                        | const_dim, blkdiag     |
|                        |                        | otherwise) (Cholesky   |
|                        |                        | of P if pos_def) .     |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| const_dim    | OT_BOOLEAN   | true         | Assume       | casadi::Dple |
|              |              |              | constant     | Internal     |
|              |              |              | dimension of |              |
|              |              |              | P            |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| eps_unstable | OT_REAL      | 0.000        | A margin for | casadi::Dple |
|              |              |              | unstability  | Internal     |
|              |              |              | detection    |              |
+--------------+--------------+--------------+--------------+--------------+
| error_unstab | OT_BOOLEAN   | false        | Throw an     | casadi::Dple |
| le           |              |              | exception    | Internal     |
|              |              |              | when it is   |              |
|              |              |              | detected     |              |
|              |              |              | that         |              |
|              |              |              | Product(A_i, |              |
|              |              |              | i=N..1) has  |              |
|              |              |              | eigenvalues  |              |
|              |              |              | greater than |              |
|              |              |              | 1-eps_unstab |              |
|              |              |              | le           |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_LINEARSOL | GenericType( | User-defined | casadi::PsdI |
| r            | VER          | )            | linear       | ndefDpleInte |
|              |              |              | solver       | rnal         |
|              |              |              | class.       |              |
|              |              |              | Needed for s |              |
|              |              |              | ensitivities |              |
|              |              |              | .            |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_DICTIONAR | GenericType( | Options to   | casadi::PsdI |
| r_options    | Y            | )            | be passed to | ndefDpleInte |
|              |              |              | the linear   | rnal         |
|              |              |              | solver.      |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| pos_def      | OT_BOOLEAN   | false        | Assume P     | casadi::Dple |
|              |              |              | positive     | Internal     |
|              |              |              | definite     |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: psd_indef_dple_solver.hpp ";

%feature("docstring") casadi::PsdIndefDpleSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::PsdIndefDpleSolver::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::PsdIndefDpleSolver::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") casadi::PsdIndefDpleSolver::print "[INTERNAL]  Print
a description of the object.

";

%feature("docstring") casadi::PsdIndefDpleSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::PsdIndefDpleSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::PsdIndefDpleSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::PsdIndefDpleSolver::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::PsdIndefDpleSolver::clone "

Clone.

";

%feature("docstring") casadi::PsdIndefDpleSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::PsdIndefDpleSolver::inputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::PsdIndefDpleSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::PsdIndefDpleSolver::outputScheme "[INTERNAL]
Access input/output scheme.

";


// File: classcasadi_1_1QCQPQPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::QCQPQPSolver::assignNode " [INTERNAL]  Assign the node to a node
class pointer (or null)

";

%feature("docstring") casadi::QCQPQPSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::QCQPQPSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::QCQPQPSolver::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::QCQPQPSolver::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::QCQPQPSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::QCQPQPSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::QCQPQPSolver::generateNativeCode "

Generate native code in the interfaced language for debugging

";

%feature("docstring") casadi::QCQPQPSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::QCQPQPSolver::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::QCQPQPSolver::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::QCQPQPSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::QCQPQPSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::QCQPQPSolver::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::QCQPQPSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::QCQPQPSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::QCQPQPSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::QCQPQPSolver::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::QCQPQPSolver::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::QCQPQPSolver::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::QCQPQPSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::QCQPQPSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::QCQPQPSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::QCQPQPSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::QCQPQPSolver::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::QCQPQPSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::QCQPQPSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::QCQPQPSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::QCQPQPSolver::QCQPQPSolver "

>  casadi::QCQPQPSolver::QCQPQPSolver()
------------------------------------------------------------------------

Default constructor.

>  casadi::QCQPQPSolver::QCQPQPSolver(const QPStructure &st)
------------------------------------------------------------------------

Constructor.

Parameters:
-----------

st:  Problem structure

";

%feature("docstring") casadi::QCQPQPSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::QCQPQPSolver::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::QCQPQPSolver::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::QCQPQPSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::QCQPQPSolver::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::QCQPQPSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::QCQPQPSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::QCQPQPSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::QCQPQPSolver::getOption "

get an option value

";

%feature("docstring") casadi::QCQPQPSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::QCQPQPSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::QCQPQPSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::QCQPQPSolver::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::QCQPQPSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::QCQPQPSolver::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::QCQPQPSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::QCQPQPSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::QCQPQPSolver::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") casadi::QCQPQPSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::QCQPQPSolver::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::QCQPQPSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::QCQPQPSolver::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::QCQPQPSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::QCQPQPSolver::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::QCQPQPSolver::schemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::QCQPQPSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::QCQPQPSolver "

Use a QCQP solver to solve q QP.

Solves the following strictly convex problem:

min          1/2 x' H x + g' x  x  subject to             LBA <= A x <= UBA
LBX <= x   <= UBX      with :       H sparse (n x n) positive definite
g dense  (n x 1)      n: number of decision variables (x)     nc: number of
constraints (A)

If H is not positive-definite, the solver should throw an error.

Joris Gillis

>Input scheme: casadi::QPSolverInput (QP_SOLVER_NUM_IN = 10) [qpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_H            | h                      | The square matrix H:   |
|                        |                        | sparse, (n x n). Only  |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical.     |
+------------------------+------------------------+------------------------+
| QP_SOLVER_G            | g                      | The vector g: dense,   |
|                        |                        | (n x 1) .              |
+------------------------+------------------------+------------------------+
| QP_SOLVER_A            | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LBA          | lba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_UBA          | uba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LBX          | lbx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_UBX          | ubx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_X0           | x0                     | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X0       | lam_x0                 | dense                  |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::QPSolverOutput (QP_SOLVER_NUM_OUT = 5) [qpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_X            | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| QP_SOLVER_COST         | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_A        | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X        | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| qcqp_solver  | OT_QCQPSOLVE | GenericType( | The          | casadi::QCQP |
|              | R            | )            | QCQPSolver   | QPInternal   |
|              |              |              | used to      |              |
|              |              |              | solve the    |              |
|              |              |              | QPs.         |              |
+--------------+--------------+--------------+--------------+--------------+
| qcqp_solver_ | OT_DICTIONAR | GenericType( | Options to   | casadi::QCQP |
| options      | Y            | )            | be passed to | QPInternal   |
|              |              |              | the          |              |
|              |              |              | QCQPSOlver   |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available stats
+-------------------+------------------------+
|        Id         |        Used in         |
+===================+========================+
| qcqp_solver_stats | casadi::QCQPQPInternal |
+-------------------+------------------------+

Diagrams

C++ includes: qcqp_qp_solver.hpp ";

%feature("docstring") casadi::QCQPQPSolver::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::QCQPQPSolver::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::QCQPQPSolver::evaluate "

Evaluate.

";

%feature("docstring") casadi::QCQPQPSolver::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::QCQPQPSolver::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::QCQPQPSolver::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::QCQPQPSolver::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::QCQPQPSolver::isInit "

Is initialized?

";

%feature("docstring") casadi::QCQPQPSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::QCQPQPSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::QCQPQPSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::QCQPQPSolver::checkInputs "[INTERNAL]  Check
if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::QCQPQPSolver::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::QCQPQPSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::QCQPQPSolver::isNull "

Is a null pointer?

";

%feature("docstring") casadi::QCQPQPSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::QCQPQPSolver::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::QCQPQPSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::QCQPQPSolver::hasOption "

check if there is an option str

";

%feature("docstring") casadi::QCQPQPSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::QCQPQPSolver::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") casadi::QCQPQPSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::QCQPQPSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::QCQPQPSolver::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::QCQPQPSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::QCQPQPSolver::setLPOptions "

Set options that make the QP solver more suitable for solving LPs.

";

%feature("docstring") casadi::QCQPQPSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::QCQPQPSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::QCQPQPSolver::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::QCQPQPSolver::spCanEvaluate "[INTERNAL]  Is
the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::QCQPQPSolver::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::QCQPQPSolver::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::QCQPQPSolver::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::QCQPQPSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::QCQPQPSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::QCQPQPSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::QCQPQPSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::QCQPQPSolver::getSolver "

Access underlying QCQP solver.

";


// File: classcasadi_1_1QCQPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring") casadi::QCQPSolver::repr
" [INTERNAL]  Print a representation of the object.

";

%feature("docstring") casadi::QCQPSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::QCQPSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::QCQPSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::QCQPSolver::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::QCQPSolver::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::QCQPSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::QCQPSolver::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::QCQPSolver::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::QCQPSolver::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") casadi::QCQPSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::QCQPSolver::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::QCQPSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::QCQPSolver::hasOption "

check if there is an option str

";

%feature("docstring") casadi::QCQPSolver::getOption "

get an option value

";

%feature("docstring") casadi::QCQPSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::QCQPSolver::isInit "

Is initialized?

";

%feature("docstring") casadi::QCQPSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::QCQPSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::QCQPSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::QCQPSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::QCQPSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::QCQPSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::QCQPSolver::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::QCQPSolver::evaluate "

Evaluate.

";

%feature("docstring") casadi::QCQPSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::QCQPSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::QCQPSolver::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::QCQPSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::QCQPSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::QCQPSolver::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::QCQPSolver::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") casadi::QCQPSolver::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::QCQPSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::QCQPSolver::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::QCQPSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::QCQPSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::QCQPSolver::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::QCQPSolver::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::QCQPSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::QCQPSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::QCQPSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::QCQPSolver::setQPOptions "

Set options that make the QP solver more suitable for solving LPs.

";

%feature("docstring") casadi::QCQPSolver::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::QCQPSolver::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::QCQPSolver::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::QCQPSolver::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::QCQPSolver::isNull "

Is a null pointer?

";

%feature("docstring") casadi::QCQPSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::QCQPSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::QCQPSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::QCQPSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::QCQPSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::QCQPSolver::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::QCQPSolver::QCQPSolver "

Default constructor.

";

%feature("docstring") casadi::QCQPSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::QCQPSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::QCQPSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::QCQPSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::QCQPSolver::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::QCQPSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::QCQPSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::QCQPSolver::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::QCQPSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::QCQPSolver::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::QCQPSolver::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::QCQPSolver::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::QCQPSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::QCQPSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::QCQPSolver::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::QCQPSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::QCQPSolver::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::QCQPSolver::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::QCQPSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::QCQPSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::QCQPSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::QCQPSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::QCQPSolver::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::QCQPSolver::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::QCQPSolver::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::QCQPSolver::spCanEvaluate "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::QCQPSolver::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") casadi::QCQPSolver::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::QCQPSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::QCQPSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::QCQPSolver "

QCQPSolver.

Solves the following strictly convex problem:

min          1/2 x' H x + g' x  x  subject to             1/2 x' Pi x +  qi'
x + ri  <= 0   for i=0..nq-1             LBA <= A x <= UBA LBX <= x   <= UBX
with :       H, Pi sparse (n x n) positive definite       g, qi dense  (n x
1)       ri scalar      n: number of decision variables (x)     nc: number
of linear constraints (A) nq: number of quadratic constraints

If H, Pi is not positive-definite, the solver should throw an error.

Joris Gillis

>Input scheme: casadi::QCQPSolverInput (QCQP_SOLVER_NUM_IN = 13) [qcqpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QCQP_SOLVER_H          | h                      | The square matrix H:   |
|                        |                        | sparse, (n x n). Only  |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical.     |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_G          | g                      | The vector g: dense,   |
|                        |                        | (n x 1) .              |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_P          | p                      | The horizontal stack   |
|                        |                        | of all Pi. Each Pi is  |
|                        |                        | sparse (n x n). Only   |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical.     |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_Q          | q                      | The vertical stack of  |
|                        |                        | all qi: dense, (nq n x |
|                        |                        | 1) .                   |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_R          | r                      | The vertical stack of  |
|                        |                        | all scalars ri (nq x   |
|                        |                        | 1) .                   |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_A          | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_LBA        | lba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_UBA        | uba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_LBX        | lbx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_UBX        | ubx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_X0         | x0                     | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_LAM_X0     | lam_x0                 | dense                  |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::QCQPSolverOutput (QCQP_SOLVER_NUM_OUT = 5) [qcqpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QCQP_SOLVER_X          | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_COST       | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_LAM_A      | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_LAM_X      | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: qcqp_solver.hpp ";

%feature("docstring") casadi::QCQPSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::QCQPSolver::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::QCQPSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::QCQPSolver::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::QCQPSolver::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::QCQPSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";


// File: classcasadi_1_1QCQPSolverInputIOSchemeVector.xml
%feature("docstring") casadi::QCQPSolverInputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring")
casadi::QCQPSolverInputIOSchemeVector::QCQPSolverInputIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::QCQPSolverInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::QCQPSolverInputIOSchemeVector::vector "[INTERNAL] ";

%feature("docstring") casadi::QCQPSolverInputIOSchemeVector::getDescription
"[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::QCQPSolverInputIOSchemeVector::print "[INTERNAL]  Print a description of the object.

";

%feature("docstring") casadi::QCQPSolverInputIOSchemeVector "[INTERNAL]
Helper function for 'QCQPSolverInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring")
casadi::QCQPSolverInputIOSchemeVector::getRepresentation "[INTERNAL]
Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::QCQPSolverInputIOSchemeVector::repr "[INTERNAL]  Print a representation of the object.

";


// File: classcasadi_1_1QCQPSolverOutputIOSchemeVector.xml
%feature("docstring") casadi::QCQPSolverOutputIOSchemeVector "[INTERNAL]
Helper function for 'QCQPSolverOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::QCQPSolverOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::QCQPSolverOutputIOSchemeVector::print "[INTERNAL]  Print a description of the object.

";

%feature("docstring")
casadi::QCQPSolverOutputIOSchemeVector::getRepresentation "[INTERNAL]
Return a string with a representation (for SWIG)

";

%feature("docstring")
casadi::QCQPSolverOutputIOSchemeVector::QCQPSolverOutputIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::QCQPSolverOutputIOSchemeVector::getDescription
"[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::QCQPSolverOutputIOSchemeVector::repr "[INTERNAL]  Print a representation of the object.

";

%feature("docstring") casadi::QCQPSolverOutputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring") casadi::QCQPSolverOutputIOSchemeVector::vector "[INTERNAL] ";


// File: classcasadi_1_1QCQPStructIOSchemeVector.xml
%feature("docstring") casadi::QCQPStructIOSchemeVector "[INTERNAL]  Helper
function for 'QCQPStruct'

C++ includes: casadi_types.hpp ";

%feature("docstring") casadi::QCQPStructIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::QCQPStructIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::QCQPStructIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") casadi::QCQPStructIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring")
casadi::QCQPStructIOSchemeVector::QCQPStructIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::QCQPStructIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") casadi::QCQPStructIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::QCQPStructIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";


// File: classcasadi_1_1QPLPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::QPLPSolver::output_struct " [INTERNAL]  Input/output structures of
the function

";

%feature("docstring") casadi::QPLPSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::QPLPSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::QPLPSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::QPLPSolver::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::QPLPSolver::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::QPLPSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::QPLPSolver::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::QPLPSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::QPLPSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::QPLPSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::QPLPSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::QPLPSolver::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::QPLPSolver::hasOption "

check if there is an option str

";

%feature("docstring") casadi::QPLPSolver::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::QPLPSolver::getSolver "

Access underlying QP solver.

";

%feature("docstring") casadi::QPLPSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::QPLPSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::QPLPSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::QPLPSolver::getOption "

get an option value

";

%feature("docstring") casadi::QPLPSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::QPLPSolver "

IPOPT QP Solver for quadratic programming.

Solves the following linear problem:

min          c' x  x  subject to             LBA <= A x <= UBA LBX <= x   <=
UBX      with x ( n x 1)          c ( n x 1 )          A sparse matrix ( nc
x n)          LBA, UBA dense vector (nc x 1) LBX, UBX dense vector (n x 1)
n: number of decision variables (x) nc: number of constraints (A)

Joris Gillis

>Input scheme: casadi::LPSolverInput (LP_SOLVER_NUM_IN = 7) [lpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| LP_SOLVER_C            | c                      | The vector c: dense (n |
|                        |                        | x 1) .                 |
+------------------------+------------------------+------------------------+
| LP_SOLVER_A            | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| LP_SOLVER_LBA          | lba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| LP_SOLVER_UBA          | uba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| LP_SOLVER_LBX          | lbx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| LP_SOLVER_UBX          | ubx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::LPSolverOutput (LP_SOLVER_NUM_OUT = 5) [lpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| LP_SOLVER_X            | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| LP_SOLVER_COST         | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| LP_SOLVER_LAM_A        | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| LP_SOLVER_LAM_X        | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| qp_solver    | OT_QPSOLVER  | GenericType( | The QPSOlver | casadi::QPLP |
|              |              | )            | used to      | Internal     |
|              |              |              | solve the    |              |
|              |              |              | LPs.         |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_solver_op | OT_DICTIONAR | GenericType( | Options to   | casadi::QPLP |
| tions        | Y            | )            | be passed to | Internal     |
|              |              |              | the QPSOlver |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available stats
+-----------------+----------------------+
|       Id        |       Used in        |
+=================+======================+
| qp_solver_stats | casadi::QPLPInternal |
+-----------------+----------------------+

Diagrams

C++ includes: qp_lp_solver.hpp ";

%feature("docstring") casadi::QPLPSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::QPLPSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::QPLPSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::QPLPSolver::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::QPLPSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::QPLPSolver::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::QPLPSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::QPLPSolver::evaluate "

Evaluate.

";

%feature("docstring") casadi::QPLPSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::QPLPSolver::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::QPLPSolver::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::QPLPSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::QPLPSolver::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::QPLPSolver::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::QPLPSolver::spCanEvaluate "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::QPLPSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::QPLPSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::QPLPSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::QPLPSolver::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::QPLPSolver::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::QPLPSolver::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::QPLPSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::QPLPSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::QPLPSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::QPLPSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::QPLPSolver::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") casadi::QPLPSolver::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::QPLPSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::QPLPSolver::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::QPLPSolver::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::QPLPSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::QPLPSolver::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::QPLPSolver::isNull "

Is a null pointer?

";

%feature("docstring") casadi::QPLPSolver::QPLPSolver "

>  casadi::QPLPSolver::QPLPSolver()
------------------------------------------------------------------------

Default constructor.

>  casadi::QPLPSolver::QPLPSolver(const LPStructure &st)
------------------------------------------------------------------------

Constructor.

Parameters:
-----------

st:  Problem structure

";

%feature("docstring") casadi::QPLPSolver::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::QPLPSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::QPLPSolver::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::QPLPSolver::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") casadi::QPLPSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::QPLPSolver::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::QPLPSolver::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::QPLPSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::QPLPSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::QPLPSolver::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::QPLPSolver::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") casadi::QPLPSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::QPLPSolver::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::QPLPSolver::isInit "

Is initialized?

";

%feature("docstring") casadi::QPLPSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::QPLPSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::QPLPSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::QPLPSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::QPLPSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::QPLPSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::QPLPSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::QPLPSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::QPLPSolver::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::QPLPSolver::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::QPLPSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::QPLPSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::QPLPSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::QPLPSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::QPLPSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::QPLPSolver::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::QPLPSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::QPLPSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::QPLPSolver::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::QPLPSolver::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::QPLPSolver::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::QPLPSolver::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";


// File: classcasadi_1_1QPOasesSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::QPOasesSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::QPOasesSolver::isNull "

Is a null pointer?

";

%feature("docstring") casadi::QPOasesSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::QPOasesSolver::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::QPOasesSolver::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::QPOasesSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::QPOasesSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::QPOasesSolver::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::QPOasesSolver::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::QPOasesSolver::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::QPOasesSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::QPOasesSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::QPOasesSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::QPOasesSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::QPOasesSolver::setLPOptions "

Set options that make the QP solver more suitable for solving LPs.

";

%feature("docstring") casadi::QPOasesSolver::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::QPOasesSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::QPOasesSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::QPOasesSolver::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::QPOasesSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::QPOasesSolver "

Interface to QPOases Solver for quadratic programming.

Solves the following strictly convex problem:

min          1/2 x' H x + g' x  x  subject to             LBA <= A x <= UBA
LBX <= x   <= UBX      with :       H sparse (n x n) positive definite
g dense  (n x 1)      n: number of decision variables (x)     nc: number of
constraints (A)

If H is not positive-definite, the solver should throw an error.

Joris Gillis, Joel Andersson

>Input scheme: casadi::QPSolverInput (QP_SOLVER_NUM_IN = 10) [qpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_H            | h                      | The square matrix H:   |
|                        |                        | sparse, (n x n). Only  |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical.     |
+------------------------+------------------------+------------------------+
| QP_SOLVER_G            | g                      | The vector g: dense,   |
|                        |                        | (n x 1) .              |
+------------------------+------------------------+------------------------+
| QP_SOLVER_A            | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LBA          | lba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_UBA          | uba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LBX          | lbx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_UBX          | ubx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_X0           | x0                     | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X0       | lam_x0                 | dense                  |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::QPSolverOutput (QP_SOLVER_NUM_OUT = 5) [qpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_X            | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| QP_SOLVER_COST         | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_A        | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X        | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| CPUtime      | OT_REAL      | GenericType( | The maximum  | casadi::QPOa |
|              |              | )            | allowed CPU  | sesInternal  |
|              |              |              | time in      |              |
|              |              |              | seconds for  |              |
|              |              |              | the whole in |              |
|              |              |              | itialisation |              |
|              |              |              | (and the     |              |
|              |              |              | actually     |              |
|              |              |              | required one |              |
|              |              |              | on output).  |              |
|              |              |              | Disabled if  |              |
|              |              |              | unset.       |              |
+--------------+--------------+--------------+--------------+--------------+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| enableEquali | OT_BOOLEAN   | BooleanType_ | Specifies    | casadi::QPOa |
| ties         |              | to_bool      | whether      | sesInternal  |
|              |              |              | equalities   |              |
|              |              |              | should be    |              |
|              |              |              | treated as   |              |
|              |              |              | always       |              |
|              |              |              | active       |              |
|              |              |              | (True) or    |              |
|              |              |              | not (False)  |              |
+--------------+--------------+--------------+--------------+--------------+
| enableFarBou | OT_BOOLEAN   | BooleanType_ | Enables the  | casadi::QPOa |
| nds          |              | to_bool      | use of far   | sesInternal  |
|              |              |              | bounds.      |              |
+--------------+--------------+--------------+--------------+--------------+
| enableFlippi | OT_BOOLEAN   | BooleanType_ | Enables the  | casadi::QPOa |
| ngBounds     |              | to_bool      | use of       | sesInternal  |
|              |              |              | flipping     |              |
|              |              |              | bounds.      |              |
+--------------+--------------+--------------+--------------+--------------+
| enableFullLI | OT_BOOLEAN   | BooleanType_ | Enables      | casadi::QPOa |
| Tests        |              | to_bool      | condition-   | sesInternal  |
|              |              |              | hardened     |              |
|              |              |              | (but more    |              |
|              |              |              | expensive)   |              |
|              |              |              | LI test.     |              |
+--------------+--------------+--------------+--------------+--------------+
| enableNZCTes | OT_BOOLEAN   | BooleanType_ | Enables      | casadi::QPOa |
| ts           |              | to_bool      | nonzero      | sesInternal  |
|              |              |              | curvature    |              |
|              |              |              | tests.       |              |
+--------------+--------------+--------------+--------------+--------------+
| enableRampin | OT_BOOLEAN   | BooleanType_ | Enables      | casadi::QPOa |
| g            |              | to_bool      | ramping.     | sesInternal  |
+--------------+--------------+--------------+--------------+--------------+
| enableRegula | OT_BOOLEAN   | BooleanType_ | Enables      | casadi::QPOa |
| risation     |              | to_bool      | automatic    | sesInternal  |
|              |              |              | Hessian regu |              |
|              |              |              | larisation.  |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| initialStatu | OT_STRING    | SubjectToSta | Initial      | casadi::QPOa |
| sBounds      |              | tus_to_strin | status of    | sesInternal  |
|              |              | g            | bounds at    |              |
|              |              |              | first        |              |
|              |              |              | iteration. ( |              |
|              |              |              | inactive::al |              |
|              |              |              | l bounds ina |              |
|              |              |              | ctive|lower  |              |
|              |              |              | all bounds   |              |
|              |              |              | active at    |              |
|              |              |              | their lower  |              |
|              |              |              | bound|upper  |              |
|              |              |              | all bounds   |              |
|              |              |              | active at    |              |
|              |              |              | their upper  |              |
|              |              |              | bound)       |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| nWSR         | OT_INTEGER   | GenericType( | The maximum  | casadi::QPOa |
|              |              | )            | number of    | sesInternal  |
|              |              |              | working set  |              |
|              |              |              | recalculatio |              |
|              |              |              | ns to be     |              |
|              |              |              | performed    |              |
|              |              |              | during the   |              |
|              |              |              | initial      |              |
|              |              |              | homotopy.    |              |
|              |              |              | Default is   |              |
|              |              |              | 5(nx + nc)   |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| printLevel   | OT_STRING    | PrintLevel_t | Defines the  | casadi::QPOa |
|              |              | o_string     | amount of    | sesInternal  |
|              |              |              | text output  |              |
|              |              |              | during QP    |              |
|              |              |              | solution,    |              |
|              |              |              | see Section  |              |
|              |              |              | 5.7 (none|lo |              |
|              |              |              | w|medium|hig |              |
|              |              |              | h)           |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: qpoases_solver.hpp ";

%feature("docstring") casadi::QPOasesSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::QPOasesSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::QPOasesSolver::inputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::QPOasesSolver::printPtr "[INTERNAL]  Print
the pointer to the internal class

";

%feature("docstring") casadi::QPOasesSolver::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::QPOasesSolver::hasOption "

check if there is an option str

";

%feature("docstring") casadi::QPOasesSolver::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::QPOasesSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::QPOasesSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::QPOasesSolver::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::QPOasesSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::QPOasesSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::QPOasesSolver::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::QPOasesSolver::QPOasesSolver "

>  casadi::QPOasesSolver::QPOasesSolver()
------------------------------------------------------------------------

Default constructor.

>  casadi::QPOasesSolver::QPOasesSolver(const QPStructure &st)
------------------------------------------------------------------------

Constructor.

Parameters:
-----------

st:  Problem structure

";

%feature("docstring") casadi::QPOasesSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::QPOasesSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::QPOasesSolver::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::QPOasesSolver::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::QPOasesSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::QPOasesSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::QPOasesSolver::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::QPOasesSolver::generateNativeCode "

Generate native code in the interfaced language for debugging

";

%feature("docstring") casadi::QPOasesSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::QPOasesSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::QPOasesSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::QPOasesSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::QPOasesSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::QPOasesSolver::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") casadi::QPOasesSolver::evaluate "

Evaluate.

";

%feature("docstring") casadi::QPOasesSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::QPOasesSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::QPOasesSolver::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::QPOasesSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::QPOasesSolver::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::QPOasesSolver::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::QPOasesSolver::isInit "

Is initialized?

";

%feature("docstring") casadi::QPOasesSolver::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::QPOasesSolver::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") casadi::QPOasesSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::QPOasesSolver::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::QPOasesSolver::getOption "

get an option value

";

%feature("docstring") casadi::QPOasesSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::QPOasesSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::QPOasesSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::QPOasesSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::QPOasesSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::QPOasesSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::QPOasesSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::QPOasesSolver::spCanEvaluate "[INTERNAL]  Is
the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::QPOasesSolver::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::QPOasesSolver::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::QPOasesSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::QPOasesSolver::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::QPOasesSolver::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::QPOasesSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::QPOasesSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::QPOasesSolver::checkInputs "[INTERNAL]  Check
if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::QPOasesSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::QPOasesSolver::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::QPOasesSolver::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::QPOasesSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::QPOasesSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::QPOasesSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::QPOasesSolver::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::QPOasesSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::QPOasesSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::QPOasesSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::QPOasesSolver::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::QPOasesSolver::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::QPOasesSolver::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::QPOasesSolver::schemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::QPOasesSolver::swap "[INTERNAL]  Swap content
with another instance.

";


// File: classcasadi_1_1QPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring") casadi::QPSolver::output
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::QPSolver::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::QPSolver::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::QPSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::QPSolver::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::QPSolver::swap "[INTERNAL]  Swap content with
another instance.

";

%feature("docstring") casadi::QPSolver::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::QPSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::QPSolver::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::QPSolver::getOption "

get an option value

";

%feature("docstring") casadi::QPSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::QPSolver::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::QPSolver::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::QPSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::QPSolver::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::QPSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::QPSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::QPSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::QPSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::QPSolver::evaluate "

Evaluate.

";

%feature("docstring") casadi::QPSolver::setOptionByAllowedIndex "[INTERNAL]
Set a certain option by giving its index into the allowed values.

";

%feature("docstring") casadi::QPSolver::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::QPSolver::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::QPSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::QPSolver "

QPSolver.

Solves the following strictly convex problem:

min          1/2 x' H x + g' x  x  subject to             LBA <= A x <= UBA
LBX <= x   <= UBX      with :       H sparse (n x n) positive definite
g dense  (n x 1)      n: number of decision variables (x)     nc: number of
constraints (A)

If H is not positive-definite, the solver should throw an error.

Joel Andersson

>Input scheme: casadi::QPSolverInput (QP_SOLVER_NUM_IN = 10) [qpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_H            | h                      | The square matrix H:   |
|                        |                        | sparse, (n x n). Only  |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical.     |
+------------------------+------------------------+------------------------+
| QP_SOLVER_G            | g                      | The vector g: dense,   |
|                        |                        | (n x 1) .              |
+------------------------+------------------------+------------------------+
| QP_SOLVER_A            | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LBA          | lba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_UBA          | uba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LBX          | lbx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_UBX          | ubx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_X0           | x0                     | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X0       | lam_x0                 | dense                  |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::QPSolverOutput (QP_SOLVER_NUM_OUT = 5) [qpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_X            | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| QP_SOLVER_COST         | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_A        | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X        | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: qp_solver.hpp ";

%feature("docstring") casadi::QPSolver::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::QPSolver::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::QPSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::QPSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::QPSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::QPSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::QPSolver::setLPOptions "

Set options that make the QP solver more suitable for solving LPs.

";

%feature("docstring") casadi::QPSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::QPSolver::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::QPSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::QPSolver::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::QPSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::QPSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::QPSolver::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::QPSolver::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::QPSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::QPSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::QPSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::QPSolver::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::QPSolver::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::QPSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::QPSolver::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::QPSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::QPSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::QPSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::QPSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::QPSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::QPSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::QPSolver::hasOption "

check if there is an option str

";

%feature("docstring") casadi::QPSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::QPSolver::getOptionEnumValue "[INTERNAL]  Get
the enum value corresponding to th certain option.

";

%feature("docstring") casadi::QPSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::QPSolver::spCanEvaluate "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::QPSolver::assertInit "[INTERNAL]  Assert that
it is initialized

";

%feature("docstring") casadi::QPSolver::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::QPSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::QPSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::QPSolver::isNull "

Is a null pointer?

";

%feature("docstring") casadi::QPSolver::inputSchemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::QPSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::QPSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::QPSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::QPSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::QPSolver::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") casadi::QPSolver::assignNode "[INTERNAL]  Assign the
node to a node class pointer (or null)

";

%feature("docstring") casadi::QPSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::QPSolver::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::QPSolver::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::QPSolver::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::QPSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::QPSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::QPSolver::isInit "

Is initialized?

";

%feature("docstring") casadi::QPSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::QPSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::QPSolver::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::QPSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::QPSolver::outputSchemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::QPSolver::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::QPSolver::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::QPSolver::QPSolver "

Default constructor.

";

%feature("docstring") casadi::QPSolver::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::QPSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::QPSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::QPSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::QPSolver::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::QPSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::QPSolver::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::QPSolver::generateNativeCode "

Generate native code in the interfaced language for debugging

";


// File: classcasadi_1_1QPSolverInputIOSchemeVector.xml
%feature("docstring") casadi::QPSolverInputIOSchemeVector "[INTERNAL]
Helper function for 'QPSolverInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::QPSolverInputIOSchemeVector::vector "[INTERNAL] ";

%feature("docstring") casadi::QPSolverInputIOSchemeVector::print "[INTERNAL]  Print a description of the object.

";

%feature("docstring")
casadi::QPSolverInputIOSchemeVector::QPSolverInputIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::QPSolverInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::QPSolverInputIOSchemeVector::getRepresentation
"[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::QPSolverInputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring") casadi::QPSolverInputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::QPSolverInputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";


// File: classcasadi_1_1QPSolverOutputIOSchemeVector.xml
%feature("docstring") casadi::QPSolverOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::QPSolverOutputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring") casadi::QPSolverOutputIOSchemeVector::print "[INTERNAL]  Print a description of the object.

";

%feature("docstring")
casadi::QPSolverOutputIOSchemeVector::getRepresentation "[INTERNAL]  Return
a string with a representation (for SWIG)

";

%feature("docstring") casadi::QPSolverOutputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::QPSolverOutputIOSchemeVector::repr "[INTERNAL]  Print a representation of the object.

";

%feature("docstring")
casadi::QPSolverOutputIOSchemeVector::QPSolverOutputIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::QPSolverOutputIOSchemeVector "[INTERNAL]
Helper function for 'QPSolverOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::QPSolverOutputIOSchemeVector::vector "[INTERNAL] ";


// File: classcasadi_1_1QPStabilizer.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::QPStabilizer::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::QPStabilizer::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::QPStabilizer::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::QPStabilizer::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::QPStabilizer::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::QPStabilizer::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::QPStabilizer::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") casadi::QPStabilizer::isInit "

Is initialized?

";

%feature("docstring") casadi::QPStabilizer::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::QPStabilizer::getOption "

get an option value

";

%feature("docstring") casadi::QPStabilizer::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::QPStabilizer::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::QPStabilizer::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::QPStabilizer::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::QPStabilizer::getSolver "

Access underlying QP solver.

";

%feature("docstring") casadi::QPStabilizer::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::QPStabilizer::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::QPStabilizer::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") casadi::QPStabilizer::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::QPStabilizer::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::QPStabilizer::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::QPStabilizer::evaluate "

Evaluate.

";

%feature("docstring") casadi::QPStabilizer::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::QPStabilizer::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::QPStabilizer::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::QPStabilizer::hasOption "

check if there is an option str

";

%feature("docstring") casadi::QPStabilizer::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") casadi::QPStabilizer::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::QPStabilizer "

IPOPT QP Solver for quadratic programming.

Solves the following strictly convex problem:

min          1/2 x' H x + g' x  x  subject to             LBA <= A x <= UBA
LBX <= x   <= UBX      with :       H sparse (n x n) positive definite
g dense  (n x 1)      n: number of decision variables (x)     nc: number of
constraints (A)

If H is not positive-definite, the solver should throw an error.

Joris Gillis

>Input scheme: casadi::StabilizedQPSolverInput (STABILIZED_QP_SOLVER_NUM_IN = 13) [stabilizedQpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| STABILIZED_QP_SOLVER_H | h                      | The square matrix H:   |
|                        |                        | sparse, (n x n). Only  |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical.     |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_G | g                      | The vector g: dense,   |
|                        |                        | (n x 1) .              |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_A | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_L | lba                    | dense, (nc x 1)        |
| BA                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_U | uba                    | dense, (nc x 1)        |
| BA                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_L | lbx                    | dense, (n x 1)         |
| BX                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_U | ubx                    | dense, (n x 1)         |
| BX                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_X | x0                     | dense, (n x 1)         |
| 0                      |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_L | lam_x0                 | dense                  |
| AM_X0                  |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_M | muR                    | dense (1 x 1)          |
| UR                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_M | muE                    | dense (nc x 1)         |
| UE                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_M | mu                     | dense (nc x 1)         |
| U                      |                        |                        |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::QPSolverOutput (QP_SOLVER_NUM_OUT = 5) [qpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_X            | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| QP_SOLVER_COST         | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_A        | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X        | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| qp_solver    | OT_QPSOLVER  | GenericType( | The QP       | casadi::QPSt |
|              |              | )            | solver used  | abilizerInte |
|              |              |              | to solve the | rnal         |
|              |              |              | stabilized   |              |
|              |              |              | QPs.         |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_solver_op | OT_DICTIONAR | GenericType( | Options to   | casadi::QPSt |
| tions        | Y            | )            | be passed to | abilizerInte |
|              |              |              | the QP       | rnal         |
|              |              |              | solver       |              |
|              |              |              | instance     |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available stats
+-----------------+------------------------------+
|       Id        |           Used in            |
+=================+==============================+
| qp_solver_stats | casadi::QPStabilizerInternal |
+-----------------+------------------------------+

Diagrams

C++ includes: qp_stabilizer.hpp ";

%feature("docstring") casadi::QPStabilizer::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::QPStabilizer::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::QPStabilizer::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::QPStabilizer::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::QPStabilizer::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::QPStabilizer::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::QPStabilizer::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::QPStabilizer::checkInputs "[INTERNAL]  Check
if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::QPStabilizer::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::QPStabilizer::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::QPStabilizer::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::QPStabilizer::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::QPStabilizer::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::QPStabilizer::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::QPStabilizer::setLPOptions "

Set options that make the QP solver more suitable for solving LPs.

";

%feature("docstring") casadi::QPStabilizer::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::QPStabilizer::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::QPStabilizer::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::QPStabilizer::QPStabilizer "

>  casadi::QPStabilizer::QPStabilizer()
------------------------------------------------------------------------

Default constructor.

>  casadi::QPStabilizer::QPStabilizer(const QPStructure &st)
------------------------------------------------------------------------

Constructor.

Parameters:
-----------

st:  Problem structure

";

%feature("docstring") casadi::QPStabilizer::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::QPStabilizer::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::QPStabilizer::schemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::QPStabilizer::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::QPStabilizer::isNull "

Is a null pointer?

";

%feature("docstring") casadi::QPStabilizer::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::QPStabilizer::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::QPStabilizer::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::QPStabilizer::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::QPStabilizer::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::QPStabilizer::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::QPStabilizer::generateNativeCode "

Generate native code in the interfaced language for debugging

";

%feature("docstring") casadi::QPStabilizer::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::QPStabilizer::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::QPStabilizer::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::QPStabilizer::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::QPStabilizer::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::QPStabilizer::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::QPStabilizer::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::QPStabilizer::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::QPStabilizer::spCanEvaluate "[INTERNAL]  Is
the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::QPStabilizer::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::QPStabilizer::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::QPStabilizer::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::QPStabilizer::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::QPStabilizer::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::QPStabilizer::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::QPStabilizer::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::QPStabilizer::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::QPStabilizer::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::QPStabilizer::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::QPStabilizer::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::QPStabilizer::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::QPStabilizer::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::QPStabilizer::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::QPStabilizer::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::QPStabilizer::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::QPStabilizer::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::QPStabilizer::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::QPStabilizer::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::QPStabilizer::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::QPStabilizer::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::QPStabilizer::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::QPStabilizer::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::QPStabilizer::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::QPStabilizer::printOptions "

Print options to a stream.

";


// File: classcasadi_1_1QPStructIOSchemeVector.xml
%feature("docstring") casadi::QPStructIOSchemeVector::vector "[INTERNAL] ";

%feature("docstring") casadi::QPStructIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::QPStructIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::QPStructIOSchemeVector "[INTERNAL]  Helper
function for 'QPStruct'

C++ includes: casadi_types.hpp ";

%feature("docstring") casadi::QPStructIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::QPStructIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::QPStructIOSchemeVector::QPStructIOSchemeVector
"[INTERNAL] ";

%feature("docstring") casadi::QPStructIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") casadi::QPStructIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";


// File: classcasadi_1_1RDAEInputIOSchemeVector.xml
%feature("docstring") casadi::RDAEInputIOSchemeVector "[INTERNAL]  Helper
function for 'RDAEInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring")
casadi::RDAEInputIOSchemeVector::RDAEInputIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::RDAEInputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::RDAEInputIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::RDAEInputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::RDAEInputIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") casadi::RDAEInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::RDAEInputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::RDAEInputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";


// File: classcasadi_1_1RDAEOutputIOSchemeVector.xml
%feature("docstring") casadi::RDAEOutputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring")
casadi::RDAEOutputIOSchemeVector::RDAEOutputIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::RDAEOutputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::RDAEOutputIOSchemeVector "[INTERNAL]  Helper
function for 'RDAEOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::RDAEOutputIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::RDAEOutputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::RDAEOutputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") casadi::RDAEOutputIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") casadi::RDAEOutputIOSchemeVector::__getitem__ "[INTERNAL] ";


// File: classcasadi_1_1RealtypeSX.xml
%feature("docstring") casadi::RealtypeSX::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") casadi::RealtypeSX::marked "[INTERNAL] ";

%feature("docstring") casadi::RealtypeSX::print "[INTERNAL]  print

";

%feature("docstring") casadi::RealtypeSX::isOne "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::RealtypeSX::getValue "[INTERNAL]  Get the
value.

";

%feature("docstring") casadi::RealtypeSX::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") casadi::RealtypeSX::getName "[INTERNAL] ";

%feature("docstring") casadi::RealtypeSX::isInf "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::RealtypeSX::isZero "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::RealtypeSX::getIntValue "[INTERNAL]  Get the
value.

";

%feature("docstring") casadi::RealtypeSX::isMinusOne "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::RealtypeSX::isMinusInf "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::RealtypeSX::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") casadi::RealtypeSX::isInteger "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::RealtypeSX::~RealtypeSX "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::RealtypeSX::isNan "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::RealtypeSX::init "[INTERNAL]  Initialize the
node (currently used only to give a similar interface to MXNode)

";

%feature("docstring") casadi::RealtypeSX::mark "[INTERNAL] ";

%feature("docstring") casadi::RealtypeSX "[INTERNAL]  DERIVED CLASSES.

Represents a constant real SX Joel Andersson

C++ includes: constant_sx.hpp ";

%feature("docstring") casadi::RealtypeSX::hasDep "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::RealtypeSX::isAlmostZero "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::RealtypeSX::isSymbolic "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::RealtypeSX::isSmooth "[INTERNAL]  Check if
smooth.

";

%feature("docstring") casadi::RealtypeSX::isConstant "[INTERNAL]
Properties.

";

%feature("docstring") casadi::RealtypeSX::dep "[INTERNAL]  get the
reference of a child

";


// File: classcasadi_1_1Reshape.xml
%feature("docstring") casadi::Reshape::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") casadi::Reshape::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") casadi::Reshape::getSubRef "[INTERNAL]  Get submatrix
reference.

";

%feature("docstring") casadi::Reshape::getSetSparse "[INTERNAL]  Create set
sparse.

";

%feature("docstring") casadi::Reshape::evaluateGen "[INTERNAL]  Evaluate
the function (template)

";

%feature("docstring") casadi::Reshape::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") casadi::Reshape::getHorzsplit "[INTERNAL]  Create a
horizontal split node.

";

%feature("docstring") casadi::Reshape::assertInit "[INTERNAL]  Assert that
the object has been initialized.

";

%feature("docstring") casadi::Reshape::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") casadi::Reshape::getBinarySwitch "[INTERNAL]  Get a
binary operation operation.

";

%feature("docstring") casadi::Reshape::getUnary "[INTERNAL]  Get a unary
operation.

";

%feature("docstring") casadi::Reshape::getVertsplit "[INTERNAL]  Create a
vertical split node (vectors only)

";

%feature("docstring") casadi::Reshape::getNorm2 "[INTERNAL]  Spectral norm.

";

%feature("docstring") casadi::Reshape::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") casadi::Reshape::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") casadi::Reshape::simplifyMe "[INTERNAL]  Simplify the
expression (ex is a reference to the node)

";

%feature("docstring") casadi::Reshape::getFunctionOutput "[INTERNAL]  Get
function output.

";

%feature("docstring") casadi::Reshape::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") casadi::Reshape::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring") casadi::Reshape::sameOpAndDeps "[INTERNAL]  Checks if
two nodes have the same operation and have equivalent dependencies up to a
given depth.

";

%feature("docstring") casadi::Reshape::getAddNonzeros "[INTERNAL]  Add the
nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::Reshape::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") casadi::Reshape::getGetNonzeros "[INTERNAL]  Get the
nonzeros of matrix.

";

%feature("docstring") casadi::Reshape::hasDep "[INTERNAL]  Does the node
depend on other nodes.

";

%feature("docstring") casadi::Reshape::shape "[INTERNAL] ";

%feature("docstring") casadi::Reshape::getMultiplication "[INTERNAL]
Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") casadi::Reshape::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") casadi::Reshape::mapping "[INTERNAL]  Get an IMatrix
representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") casadi::Reshape::getBinary "[INTERNAL]  Get a binary
operation operation (matrix-matrix)

";

%feature("docstring") casadi::Reshape::isNonLinear "[INTERNAL]  Is the node
nonlinear.

";

%feature("docstring") casadi::Reshape "[INTERNAL]   Reshape an expression.

Joel Andersson

C++ includes: reshape.hpp ";

%feature("docstring") casadi::Reshape::getValue "[INTERNAL]  Get the value
(only for scalar constant nodes)

";

%feature("docstring") casadi::Reshape::print "

>  void casadi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void casadi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") casadi::Reshape::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") casadi::Reshape::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") casadi::Reshape::evaluateSX "[INTERNAL]  Evaluate the
function symbolically (SX)

";

%feature("docstring") casadi::Reshape::propagateSparsity "[INTERNAL]
Propagate sparsity.

";

%feature("docstring") casadi::Reshape::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::Reshape::getNumOutputs "[INTERNAL]  Number of
outputs.

";

%feature("docstring") casadi::Reshape::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") casadi::Reshape::isUnaryOp "[INTERNAL]  Check if
unary operation.

";

%feature("docstring") casadi::Reshape::getNormInf "[INTERNAL]  Infinity
norm.

";

%feature("docstring") casadi::Reshape::getReshape "[INTERNAL]   Reshape.

";

%feature("docstring") casadi::Reshape::getSolve "[INTERNAL]   Solve a
system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") casadi::Reshape::assign "

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") casadi::Reshape::isMultipleOutput "[INTERNAL]  Check
if a multiple output node.

";

%feature("docstring") casadi::Reshape::Reshape "[INTERNAL]  Constructor.

";

%feature("docstring") casadi::Reshape::clone "[INTERNAL]  Clone function.

";

%feature("docstring") casadi::Reshape::deepCopyMembers "[INTERNAL]  Deep
copy data members.

";

%feature("docstring") casadi::Reshape::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") casadi::Reshape::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::Reshape::getName "[INTERNAL]  Get the name.

";

%feature("docstring") casadi::Reshape::size "[INTERNAL] ";

%feature("docstring") casadi::Reshape::getOutput "[INTERNAL]  Get an
output.

";

%feature("docstring") casadi::Reshape::numel "[INTERNAL]  Get shape.

";

%feature("docstring") casadi::Reshape::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") casadi::Reshape::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") casadi::Reshape::printPart "[INTERNAL]  Print a part
of the expression */.

";

%feature("docstring") casadi::Reshape::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") casadi::Reshape::isOutputNode "[INTERNAL]  Check if
evaluation output.

";

%feature("docstring") casadi::Reshape::getSetNonzeros "[INTERNAL]  Assign
the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::Reshape::getMatrixValue "[INTERNAL]  Get the
value (only for constant nodes)

";

%feature("docstring") casadi::Reshape::dep "

>  const MX & casadi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & casadi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::Reshape::getFunction "[INTERNAL]  Get
function reference.

";

%feature("docstring") casadi::Reshape::evaluateMX "

>  void casadi::Reshape::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void casadi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") casadi::Reshape::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") casadi::Reshape::evaluateD "[INTERNAL]  Evaluate the
function numerically.

";

%feature("docstring") casadi::Reshape::getFunctionInput "[INTERNAL]  Get
function input.

";

%feature("docstring") casadi::Reshape::getInverse "[INTERNAL]   Inverse.

";

%feature("docstring") casadi::Reshape::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") casadi::Reshape::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") casadi::Reshape::~Reshape "[INTERNAL]  Destructor.

";

%feature("docstring") casadi::Reshape::getNormF "[INTERNAL]  Frobenius
norm.

";

%feature("docstring") casadi::Reshape::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") casadi::Reshape::size1 "[INTERNAL] ";

%feature("docstring") casadi::Reshape::size2 "[INTERNAL] ";

%feature("docstring") casadi::Reshape::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") casadi::Reshape::setDependencies "

>  void casadi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void casadi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") casadi::Reshape::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::Reshape::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") casadi::Reshape::sparsity "

>  const Sparsity& casadi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & casadi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") casadi::Reshape::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";


// File: classcasadi_1_1RKIntegrator.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::RKIntegrator::resetB "

Reset the backward problem.

Time will be set to tf and backward state to input(INTEGRATOR_RX0)

";

%feature("docstring") casadi::RKIntegrator::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") casadi::RKIntegrator::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::RKIntegrator::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::RKIntegrator::hasOption "

check if there is an option str

";

%feature("docstring") casadi::RKIntegrator::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::RKIntegrator::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::RKIntegrator::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::RKIntegrator::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::RKIntegrator::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::RKIntegrator::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::RKIntegrator::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::RKIntegrator::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::RKIntegrator::isInit "

Is initialized?

";

%feature("docstring") casadi::RKIntegrator::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::RKIntegrator::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::RKIntegrator::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::RKIntegrator::getDAE "

Get the DAE.

";

%feature("docstring") casadi::RKIntegrator::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::RKIntegrator::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::RKIntegrator::RKIntegrator "

>  casadi::RKIntegrator::RKIntegrator()
------------------------------------------------------------------------

Default constructor.

>  casadi::RKIntegrator::RKIntegrator(const Function &f, const Function &g=Function())
------------------------------------------------------------------------

Create an integrator for explicit ODEs.

Parameters:
-----------

f:  dynamical system

>Input scheme: casadi::DAEInput (DAE_NUM_IN = 5) [daeIn]
+-----------+-------+----------------------------+
| Full name | Short |        Description         |
+===========+=======+============================+
| DAE_X     | x     | Differential state .       |
+-----------+-------+----------------------------+
| DAE_Z     | z     | Algebraic state .          |
+-----------+-------+----------------------------+
| DAE_P     | p     | Parameter .                |
+-----------+-------+----------------------------+
| DAE_T     | t     | Explicit time dependence . |
+-----------+-------+----------------------------+

>Output scheme: casadi::DAEOutput (DAE_NUM_OUT = 4) [daeOut]
+-----------+-------+--------------------------------------------+
| Full name | Short |                Description                 |
+===========+=======+============================================+
| DAE_ODE   | ode   | Right hand side of the implicit ODE .      |
+-----------+-------+--------------------------------------------+
| DAE_ALG   | alg   | Right hand side of algebraic equations .   |
+-----------+-------+--------------------------------------------+
| DAE_QUAD  | quad  | Right hand side of quadratures equations . |
+-----------+-------+--------------------------------------------+

Parameters:
-----------

g:  backwards system

>Input scheme: casadi::RDAEInput (RDAE_NUM_IN = 8) [rdaeIn]
+-----------+-------+-------------------------------+
| Full name | Short |          Description          |
+===========+=======+===============================+
| RDAE_RX   | rx    | Backward differential state . |
+-----------+-------+-------------------------------+
| RDAE_RZ   | rz    | Backward algebraic state .    |
+-----------+-------+-------------------------------+
| RDAE_RP   | rp    | Backward parameter vector .   |
+-----------+-------+-------------------------------+
| RDAE_X    | x     | Forward differential state .  |
+-----------+-------+-------------------------------+
| RDAE_Z    | z     | Forward algebraic state .     |
+-----------+-------+-------------------------------+
| RDAE_P    | p     | Parameter vector .            |
+-----------+-------+-------------------------------+
| RDAE_T    | t     | Explicit time dependence .    |
+-----------+-------+-------------------------------+

>Output scheme: casadi::RDAEOutput (RDAE_NUM_OUT = 4) [rdaeOut]
+-----------+-------+-------------------------------------------+
| Full name | Short |                Description                |
+===========+=======+===========================================+
| RDAE_ODE  | ode   | Right hand side of ODE. .                 |
+-----------+-------+-------------------------------------------+
| RDAE_ALG  | alg   | Right hand side of algebraic equations. . |
+-----------+-------+-------------------------------------------+
| RDAE_QUAD | quad  | Right hand side of quadratures. .         |
+-----------+-------+-------------------------------------------+

";

%feature("docstring") casadi::RKIntegrator::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::RKIntegrator::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::RKIntegrator::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::RKIntegrator::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::RKIntegrator::evaluate "

Evaluate.

";

%feature("docstring") casadi::RKIntegrator::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::RKIntegrator::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::RKIntegrator::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::RKIntegrator::spCanEvaluate "[INTERNAL]  Is
the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::RKIntegrator::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::RKIntegrator::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::RKIntegrator::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::RKIntegrator::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::RKIntegrator::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::RKIntegrator::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::RKIntegrator::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::RKIntegrator::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::RKIntegrator::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::RKIntegrator::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::RKIntegrator::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::RKIntegrator::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::RKIntegrator::reset "

Reset the forward problem Time will be set to t0 and state to
input(INTEGRATOR_X0)

";

%feature("docstring") casadi::RKIntegrator::getAugmented "

Generate a augmented DAE system with nfwd forward sensitivities and nadj
adjoint sensitivities.

";

%feature("docstring") casadi::RKIntegrator::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::RKIntegrator::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::RKIntegrator::schemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::RKIntegrator::isNull "

Is a null pointer?

";

%feature("docstring") casadi::RKIntegrator::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::RKIntegrator::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::RKIntegrator::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::RKIntegrator::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::RKIntegrator::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::RKIntegrator::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") casadi::RKIntegrator::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::RKIntegrator::checkInputs "[INTERNAL]  Check
if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::RKIntegrator "

Fixed-step explicit Runge-Kutta integrator for ODEs Currently implements
RK4.

The method is still under development

Joel Andersson

>Input scheme: casadi::IntegratorInput (INTEGRATOR_NUM_IN = 7) [integratorIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_X0          | x0                     | Differential state at  |
|                        |                        | the initial time .     |
+------------------------+------------------------+------------------------+
| INTEGRATOR_P           | p                      | Parameters .           |
+------------------------+------------------------+------------------------+
| INTEGRATOR_Z0          | z0                     | Initial guess for the  |
|                        |                        | algebraic variable .   |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RX0         | rx0                    | Backward differential  |
|                        |                        | state at the final     |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RP          | rp                     | Backward parameter     |
|                        |                        | vector .               |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZ0         | rz0                    | Initial guess for the  |
|                        |                        | backwards algebraic    |
|                        |                        | variable .             |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::IntegratorOutput (INTEGRATOR_NUM_OUT = 7) [integratorOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_XF          | xf                     | Differential state at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_QF          | qf                     | Quadrature state at    |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_ZF          | zf                     | Algebraic variable at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RXF         | rxf                    | Backward differential  |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RQF         | rqf                    | Backward quadrature    |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZF         | rzf                    | Backward algebraic     |
|                        |                        | variable at the        |
|                        |                        | initial time .         |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| augmented_op | OT_DICTIONAR | GenericType( | Options to   | casadi::Inte |
| tions        | Y            | )            | be passed    | gratorIntern |
|              |              |              | down to the  | al           |
|              |              |              | augmented    |              |
|              |              |              | integrator,  |              |
|              |              |              | if one is    |              |
|              |              |              | constructed. |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_augme | OT_BOOLEAN   | true         | If DAE       | casadi::Inte |
| nted         |              |              | callback     | gratorIntern |
|              |              |              | functions    | al           |
|              |              |              | are          |              |
|              |              |              | SXFunction , |              |
|              |              |              | have         |              |
|              |              |              | augmented    |              |
|              |              |              | DAE callback |              |
|              |              |              | function     |              |
|              |              |              | also be      |              |
|              |              |              | SXFunction . |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| number_of_fi | OT_INTEGER   | 20           | Number of    | casadi::Fixe |
| nite_element |              |              | finite       | dStepIntegra |
| s            |              |              | elements     | torInternal  |
+--------------+--------------+--------------+--------------+--------------+
| print_stats  | OT_BOOLEAN   | false        | Print out    | casadi::Inte |
|              |              |              | statistics   | gratorIntern |
|              |              |              | after        | al           |
|              |              |              | integration  |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| t0           | OT_REAL      | 0            | Beginning of | casadi::Inte |
|              |              |              | the time     | gratorIntern |
|              |              |              | horizon      | al           |
+--------------+--------------+--------------+--------------+--------------+
| tf           | OT_REAL      | 1            | End of the   | casadi::Inte |
|              |              |              | time horizon | gratorIntern |
|              |              |              |              | al           |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: rk_integrator.hpp ";

%feature("docstring") casadi::RKIntegrator::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::RKIntegrator::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::RKIntegrator::printStats "

Print solver statistics.

";

%feature("docstring") casadi::RKIntegrator::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::RKIntegrator::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::RKIntegrator::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::RKIntegrator::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::RKIntegrator::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::RKIntegrator::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::RKIntegrator::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::RKIntegrator::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::RKIntegrator::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::RKIntegrator::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::RKIntegrator::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::RKIntegrator::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::RKIntegrator::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::RKIntegrator::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::RKIntegrator::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::RKIntegrator::integrateB "

Integrate backward until a specified time point.

";

%feature("docstring") casadi::RKIntegrator::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::RKIntegrator::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::RKIntegrator::clone "

Clone.

";

%feature("docstring") casadi::RKIntegrator::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::RKIntegrator::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::RKIntegrator::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::RKIntegrator::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::RKIntegrator::getOption "

get an option value

";

%feature("docstring") casadi::RKIntegrator::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::RKIntegrator::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") casadi::RKIntegrator::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::RKIntegrator::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::RKIntegrator::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::RKIntegrator::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::RKIntegrator::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::RKIntegrator::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::RKIntegrator::integrate "

Integrate forward until a specified time point.

";

%feature("docstring") casadi::RKIntegrator::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::RKIntegrator::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::RKIntegrator::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::RKIntegrator::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::RKIntegrator::setInputScheme "

Set input scheme.

";


// File: structcasadi_1_1RuntimeConst.xml
%feature("docstring") casadi::RuntimeConst::RuntimeConst "[INTERNAL] ";

%feature("docstring") casadi::RuntimeConst "[INTERNAL]   Constant known at
runtime.

C++ includes: constant_mx.hpp ";


// File: structcasadi_1_1ScalarAtomic.xml
%feature("docstring") casadi::ScalarAtomic "[INTERNAL]  An atomic operation
for the SXElement virtual machine.

C++ includes: sx_function.hpp ";


// File: classcasadi_1_1ScalarSparseSparsity.xml


/*  Check if two sparsity patterns are identical  */

/*  Size and element counting  */ %feature("docstring")
casadi::ScalarSparseSparsity::unit " [INTERNAL]  Create the sparsity pattern
for a unit vector of length n and a nonzero on position el.

";

%feature("docstring") casadi::ScalarSparseSparsity::unidirectionalColoring "[INTERNAL]  Perform a unidirectional coloring: A greedy distance-2 coloring
algorithm (Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN)

";

%feature("docstring") casadi::ScalarSparseSparsity::transpose "

>  Sparsity casadi::Sparsity::transpose() const 
------------------------------------------------------------------------
[INTERNAL] 
 Transpose the matrix.

>  Sparsity casadi::Sparsity::transpose(std::vector< int > &mapping, bool invert_mapping=false) const 
------------------------------------------------------------------------
[INTERNAL] 
 Transpose the matrix and get the reordering of the non-zero entries.

Parameters:
-----------

mapping:  the non-zeros of the original matrix for each non-zero of the new
matrix

";

%feature("docstring") casadi::ScalarSparseSparsity::eliminationTree "[INTERNAL]  Calculate the elimination tree See Direct Methods for Sparse
Linear Systems by Davis (2006). If the parameter ata is false, the algorithm
is equivalent to Matlab's etree(A), except that the indices are zero- based.
If ata is true, the algorithm is equivalent to Matlab's etree(A, 'row').

";

%feature("docstring") casadi::ScalarSparseSparsity::starColoring "[INTERNAL]  Perform a star coloring of a symmetric matrix: A greedy
distance-2 coloring algorithm (Algorithm 4.1 in A. H. GEBREMEDHIN, F. MANNE,
A. POTHEN) Ordering options: None (0), largest first (1)

";

%feature("docstring") casadi::ScalarSparseSparsity::isSymmetric "[INTERNAL]
Is symmetric?

";

%feature("docstring") casadi::ScalarSparseSparsity::patternProduct "[INTERNAL]   Sparsity pattern for a matrix-matrix product Returns the
sparsity pattern resulting from pre-multiplying the pattern with the
transpose of x. Returns the new sparsity pattern as well as a mapping with
the same length as the number of non-zero elements The mapping contains a
vector of the index pairs that makes up the scalar products for each non-
zero.

";

%feature("docstring") casadi::ScalarSparseSparsity::getCount "[INTERNAL]
Get the reference count.

";

%feature("docstring") casadi::ScalarSparseSparsity::makeDense "[INTERNAL]
Make a patten dense.

";

%feature("docstring") casadi::ScalarSparseSparsity::getCCS "[INTERNAL]  Get
the sparsity in compressed column storage (CCS) format.

";

%feature("docstring") casadi::ScalarSparseSparsity::compressed "[INTERNAL]
Create from a single vector containing the pattern in compressed column
storage format: The format: The first two entries are the number of rows
(nrow) and columns (ncol) The next ncol+1 entries are the column offsets
(colind). Note that the last element, colind[ncol], gives the number of
nonzeros The last colind[ncol] entries are the row indices

";

%feature("docstring") casadi::ScalarSparseSparsity::getNZInplace "[INTERNAL]  Get the nonzero index for a set of elements The index vector is
used both for input and outputs and must be sorted by increasing nonzero
index, i.e. column-wise. Elements not found in the sparsity pattern are set
to -1.

";

%feature("docstring") casadi::ScalarSparseSparsity::isVector "[INTERNAL]
Is vector (i.e. size2()==1)

";

%feature("docstring") casadi::ScalarSparseSparsity::init "[INTERNAL]
Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::ScalarSparseSparsity "[INTERNAL] ";

%feature("docstring") casadi::ScalarSparseSparsity::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") casadi::ScalarSparseSparsity::removeDuplicates "[INTERNAL]  Remove duplicate entries.

The same indices will be removed from the mapping vector, which must have
the same length as the number of nonzeros

";

%feature("docstring") casadi::ScalarSparseSparsity::isDiagonal "[INTERNAL]
Is diagonal?

";

%feature("docstring") casadi::ScalarSparseSparsity::hash "[INTERNAL] ";

%feature("docstring") casadi::ScalarSparseSparsity::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") casadi::ScalarSparseSparsity::hasNZ "[INTERNAL]
Returns true if the pattern has a non-zero at location rr, cc.

";

%feature("docstring") casadi::ScalarSparseSparsity::patternUnion "[INTERNAL]  Union of two sparsity patterns.

";

%feature("docstring") casadi::ScalarSparseSparsity::starColoring2 "[INTERNAL]  Perform a star coloring of a symmetric matrix: A new greedy
distance-2 coloring algorithm (Algorithm 4.1 in A. H. GEBREMEDHIN, A.
TARAFDAR, F. MANNE, A. POTHEN) Ordering options: None (0), largest first (1)

";

%feature("docstring") casadi::ScalarSparseSparsity::getUpperNZ "[INTERNAL]
Get nonzeros in upper triangular part.

";

%feature("docstring") casadi::ScalarSparseSparsity::size "[INTERNAL]  Get
the number of (structural) non-zeros.

See:   numel()

";

%feature("docstring") casadi::ScalarSparseSparsity::printCompact "[INTERNAL]  Print a compact description of the sparsity pattern.

";

%feature("docstring") casadi::ScalarSparseSparsity::enlargeColumns "[INTERNAL]  Enlarge the matrix along the second dimension (i.e. insert
columns)

";

%feature("docstring") casadi::ScalarSparseSparsity::getElements "

>  std::vector< int > casadi::Sparsity::getElements(bool col_major=true) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the location of all non-zero elements as they would appear in a
Dense matrix A : DenseMatrix 4 x 3 B : SparseMatrix 4 x 3 , 5
structural non-zeros.

k = A.getElements() A[k] will contain the elements of A that are non- zero
in B

>  void casadi::Sparsity::getElements(std::vector< int > &loc, bool col_major=true) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the location of all nonzero elements (inplace version)

";

%feature("docstring") casadi::ScalarSparseSparsity::enlarge "[INTERNAL]
Enlarge matrix Make the matrix larger by inserting empty rows and columns,
keeping the existing non-zeros.

For the matrices A to B A(m, n) length(jj)=m , length(ii)=n B(nrow, ncol)

A=enlarge(m, n, ii, jj) makes sure that

B[jj, ii] == A

";

%feature("docstring") casadi::ScalarSparseSparsity::spyMatlab "[INTERNAL]
Generate a script for Matlab or Octave which visualizes the sparsity using
the spy command.

";

%feature("docstring") casadi::ScalarSparseSparsity::isTriu "[INTERNAL]  Is
upper triangular?

";

%feature("docstring") casadi::ScalarSparseSparsity::scalar "[INTERNAL]
Create a scalar sparsity pattern.

";

%feature("docstring") casadi::ScalarSparseSparsity::isTril "[INTERNAL]  Is
lower triangular?

";

%feature("docstring") casadi::ScalarSparseSparsity::resize "[INTERNAL]
Resize.

";

%feature("docstring") casadi::ScalarSparseSparsity::bor "

>  void casadi::Sparsity::bor(T *data, const T *val_data, const Sparsity &val_sp) const 
------------------------------------------------------------------------
[INTERNAL] 
Bitwise or of the nonzero entries of one sparsity pattern and the
nonzero entries of another sparsity pattern.

>  void casadi::Sparsity::bor(DataType *data, const DataType *val_data, const Sparsity &val_sp) const 
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::ScalarSparseSparsity::spy "[INTERNAL]  Print
a textual representation of sparsity.

";

%feature("docstring") casadi::ScalarSparseSparsity::patternIntersection "[INTERNAL]  Intersection of two sparsity patterns Returns the new sparsity
pattern as well as a mapping with the same length as the number of non-zero
elements The value is 1 if the non-zero comes from the first (i.e. this)
object, 2 if it is from the second and 3 (i.e. 1 | 2) if from both.

";

%feature("docstring") casadi::ScalarSparseSparsity::isEmpty "[INTERNAL]
Check if the sparsity is empty.

A sparsity is considered empty if one of the dimensions is zero (or
optionally both dimensions)

";

%feature("docstring") casadi::ScalarSparseSparsity::appendColumns "[INTERNAL]  Append another sparsity patten horizontally.

";

%feature("docstring") casadi::ScalarSparseSparsity::sizeL "[INTERNAL]
Number of non-zeros in the lower triangular half, i.e. the number of
elements (i, j) with j<=i.

";

%feature("docstring") casadi::ScalarSparseSparsity::erase "[INTERNAL]
Erase rows and/or columns of a matrix.

";

%feature("docstring") casadi::ScalarSparseSparsity::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::ScalarSparseSparsity::clone "[INTERNAL]  Deep
copy.

";

%feature("docstring") casadi::ScalarSparseSparsity::colind "

>  const std::vector< int > & casadi::Sparsity::colind() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a reference to the colindex of all column element (see class
description)

>  int casadi::Sparsity::colind(int i) const 
------------------------------------------------------------------------
[INTERNAL] 
Get a reference to the colindex of col i (see class description)

";

%feature("docstring") casadi::ScalarSparseSparsity::largestFirstOrdering "[INTERNAL]  Order the cols by decreasing degree.

";

%feature("docstring") casadi::ScalarSparseSparsity::repr "[INTERNAL]  Print
a representation of the object.

";

%feature("docstring") casadi::ScalarSparseSparsity::getCRS "[INTERNAL]  Get
the sparsity in compressed row storage (CRS) format.

";

%feature("docstring") casadi::ScalarSparseSparsity::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") casadi::ScalarSparseSparsity::size2 "[INTERNAL]  Get
the number of columns.

";

%feature("docstring") casadi::ScalarSparseSparsity::size1 "[INTERNAL]  Get
the number of rows.

";

%feature("docstring") casadi::ScalarSparseSparsity::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::ScalarSparseSparsity::isScalar "[INTERNAL]
Is scalar?

";

%feature("docstring") casadi::ScalarSparseSparsity::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::ScalarSparseSparsity::enlargeRows "[INTERNAL]
Enlarge the matrix along the first dimension (i.e. insert rows)

";

%feature("docstring") casadi::ScalarSparseSparsity::colindRef "[INTERNAL]
Get a reference to the colindex of all column element (copy if not unique!)

";

%feature("docstring") casadi::ScalarSparseSparsity::getLowerNZ "[INTERNAL]
Get nonzeros in lower triangular part.

";

%feature("docstring") casadi::ScalarSparseSparsity::append "[INTERNAL]
Append another sparsity patten vertically (NOTE: only efficient if vector)

";

%feature("docstring") casadi::ScalarSparseSparsity::isEqual "[INTERNAL] ";

%feature("docstring") casadi::ScalarSparseSparsity::printPtr "[INTERNAL]
Print the pointer to the internal class

";

%feature("docstring") casadi::ScalarSparseSparsity::isSquare "[INTERNAL]
Is square?

";

%feature("docstring") casadi::ScalarSparseSparsity::ScalarSparseSparsity "[INTERNAL] ";

%feature("docstring") casadi::ScalarSparseSparsity::reshape "[INTERNAL]
Reshape a sparsity, order of nonzeros remains the same.

";

%feature("docstring") casadi::ScalarSparseSparsity::dulmageMendelsohn "[INTERNAL]  Compute the Dulmage-Mendelsohn decomposition See Direct Methods
for Sparse Linear Systems by Davis (2006).

Dulmage-Mendelsohn will try to bring your matrix into lower block-
triangular (LBT) form. It will not care about the distance of off- diagonal
elements to the diagonal: there is no guarantee you will get a block-
diagonal matrix if you supply a randomly permuted block- diagonal matrix.

If your matrix is symmetrical, this method is of limited use; permutation
can make it non-symmetric.

See:   stronglyConnectedComponents

";

%feature("docstring") casadi::ScalarSparseSparsity::isTranspose "[INTERNAL]
Check if the sparsity is the transpose of another.

";

%feature("docstring") casadi::ScalarSparseSparsity::dense "[INTERNAL]
Create a dense rectangular sparsity pattern.

";

%feature("docstring") casadi::ScalarSparseSparsity::getDiag "[INTERNAL]
Get the diagonal of the matrix/create a diagonal matrix (mapping will
contain the nonzero mapping) When the input is square, the diagonal elements
are returned. If the input is vector-like, a diagonal matrix is constructed
with it.

";

%feature("docstring") casadi::ScalarSparseSparsity::patternCombine "[INTERNAL]  Combine two sparsity patterns Returns the new sparsity pattern
as well as a mapping with the same length as the number of non-zero elements
The mapping matrix contains the arguments for each nonzero, the first bit
indicates if the first argument is nonzero, the second bit indicates if the
second argument is nonzero (note that none of, one of or both of the
arguments can be nonzero)

";

%feature("docstring") casadi::ScalarSparseSparsity::sub "[INTERNAL]  Get a
submatrix.

Returns the sparsity of the submatrix, with a mapping such that submatrix[k]
= originalmatrix[mapping[k]]

";

%feature("docstring") casadi::ScalarSparseSparsity::pmult "[INTERNAL]
Permute rows and/or columns Multiply the sparsity with a permutation matrix
from the left and/or from the right P * A * trans(P), A * trans(P) or A *
trans(P) with P defined by an index vector containing the row for each col.
As an alternative, P can be transposed (inverted).

";

%feature("docstring") casadi::ScalarSparseSparsity::sizeU "[INTERNAL]
Number of non-zeros in the upper triangular half, i.e. the number of
elements (i, j) with j>=i.

";

%feature("docstring") casadi::ScalarSparseSparsity::add "

>  void casadi::Sparsity::add(T *data, const T *val_data, const Sparsity &val_sp) const 
------------------------------------------------------------------------
[INTERNAL] 
Add the nonzero entries of one sparsity pattern to the nonzero entries
of another sparsity pattern.

>  void casadi::Sparsity::add(DataType *data, const DataType *val_data, const Sparsity &val_sp) const 
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::ScalarSparseSparsity::rowsSequential "[INTERNAL]  Do the rows appear sequentially on each column.

Parameters:
-----------

strictly:  if true, then do not allow multiple entries

";

%feature("docstring") casadi::ScalarSparseSparsity::sparse "[INTERNAL]
Create a sparse (empty) rectangular sparsity pattern.

";

%feature("docstring") casadi::ScalarSparseSparsity::numel "[INTERNAL]  The
total number of elements, including structural zeros, i.e. size2()*size1()

See:   size()

";

%feature("docstring") casadi::ScalarSparseSparsity::isDense "[INTERNAL]  Is
dense?

";

%feature("docstring") casadi::ScalarSparseSparsity::isSingular "[INTERNAL]
Check whether the sparsity-pattern indicates structural singularity.

";

%feature("docstring") casadi::ScalarSparseSparsity::isReshape "[INTERNAL]
Check if the sparsity is a reshape of another.

";

%feature("docstring") casadi::ScalarSparseSparsity::rowRef "[INTERNAL]  Get
a reference to the rows of all non-zero element (copy if not unique!)

";

%feature("docstring") casadi::ScalarSparseSparsity::assignNodeNoCount "[INTERNAL]  Assign the node to a node class pointer without reference
counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::ScalarSparseSparsity::isInit "[INTERNAL]  Is
initialized?

";

%feature("docstring") casadi::ScalarSparseSparsity::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::ScalarSparseSparsity::reCache "[INTERNAL]
Check if there is an identical copy of the sparsity pattern in the cache,
and if so, make a shallow copy of that one.

";

%feature("docstring") casadi::ScalarSparseSparsity::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") casadi::ScalarSparseSparsity::getCol "[INTERNAL]  Get
the column for each non-zero entry Together with the row-vector, this vector
gives the sparsity of the matrix in sparse triplet format, i.e. the column
and row for each non-zero elements.

";

%feature("docstring") casadi::ScalarSparseSparsity::sanityCheck "[INTERNAL]
Check if the dimensions and colind, row vectors are compatible.

Parameters:
-----------

complete:  set to true to also check elementwise throws an error as possible
result

";

%feature("docstring")
casadi::ScalarSparseSparsity::stronglyConnectedComponents "[INTERNAL]  Find
the strongly connected components of the bigraph defined by the sparsity
pattern of a square matrix.

See Direct Methods for Sparse Linear Systems by Davis (2006). Returns:
Number of components

Offset for each components (length: 1 + number of components)

Indices for each components, component i has indices index[offset[i]], ...,
index[offset[i+1]]

In the case that the matrix is symmetric, the result has a particular
interpretation: Given a symmetric matrix A and n =
A.stronglyConnectedComponents(p, r)

=> A[p, p] will appear block-diagonal with n blocks and with the indices of
the block boundaries to be found in r.

";

%feature("docstring") casadi::ScalarSparseSparsity::patternInverse "[INTERNAL]  Take the inverse of a sparsity pattern; flip zeros and non-
zeros.

";

%feature("docstring") casadi::ScalarSparseSparsity::shape "[INTERNAL]  Get
the shape.

";

%feature("docstring") casadi::ScalarSparseSparsity::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::ScalarSparseSparsity::dimString "[INTERNAL]
Get the dimension as a string.

";

%feature("docstring") casadi::ScalarSparseSparsity::depthFirstSearch "[INTERNAL]  Depth-first search on the adjacency graph of the sparsity See
Direct Methods for Sparse Linear Systems by Davis (2006).

";

%feature("docstring") casadi::ScalarSparseSparsity::isNull "[INTERNAL]  Is
a null pointer?

";

%feature("docstring") casadi::ScalarSparseSparsity::reserve "[INTERNAL]
Reserve space.

";

%feature("docstring") casadi::ScalarSparseSparsity::row "

>  const std::vector< int > & casadi::Sparsity::row() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a reference to row-vector, containing rows for all non-zero
elements (see class description)

>  int casadi::Sparsity::row(int el) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the row of a non-zero element.

";

%feature("docstring") casadi::ScalarSparseSparsity::getNZ "

>  int casadi::Sparsity::getNZ(int rr, int cc)
------------------------------------------------------------------------
[INTERNAL] 
Get the index of a non-zero element Add the element if it does not
exist and copy object if it's not unique.

>  int casadi::Sparsity::getNZ(int rr, int cc) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the index of an existing non-zero element return -1 if the element
does not exist.

>  std::vector< int > casadi::Sparsity::getNZ(const std::vector< int > &rr, const std::vector< int > &cc) const 
------------------------------------------------------------------------
[INTERNAL] 
Get a set of non-zero element return -1 if the element does not exist.

";

%feature("docstring") casadi::ScalarSparseSparsity::sizeD "[INTERNAL]
Number of non-zeros on the diagonal, i.e. the number of elements (i, j) with
j==i.

";

%feature("docstring") casadi::ScalarSparseSparsity::diag "[INTERNAL]
Create diagonal sparsity pattern.

";

%feature("docstring") casadi::ScalarSparseSparsity::getTriu "[INTERNAL]
Get upper triangular part.

";

%feature("docstring") casadi::ScalarSparseSparsity::getTriplet "[INTERNAL]
Get the sparsity in sparse triplet format.

";

%feature("docstring") casadi::ScalarSparseSparsity::T "[INTERNAL]
Transpose the matrix (shorthand)

";

%feature("docstring") casadi::ScalarSparseSparsity::compress "[INTERNAL]
Compress a sparsity pattern.

";

%feature("docstring") casadi::ScalarSparseSparsity::checkNode "[INTERNAL]
Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::ScalarSparseSparsity::getTril "[INTERNAL]
Get lower triangular part.

";

%feature("docstring") casadi::ScalarSparseSparsity::set "

>  void casadi::Sparsity::set(T *data, const T *val_data, const Sparsity &val_sp) const 
------------------------------------------------------------------------
[INTERNAL] 
Assign the nonzero entries of one sparsity pattern to the nonzero
entries of another sparsity pattern.

>  void casadi::Sparsity::set(DataType *data, const DataType *val_data, const Sparsity &val_sp) const 
------------------------------------------------------------------------
[INTERNAL] 
";


// File: classcasadi_1_1ScalarSparsity.xml


/*  Check if two sparsity patterns are identical  */

/*  Size and element counting  */ %feature("docstring")
casadi::ScalarSparsity::transpose "

>  Sparsity casadi::Sparsity::transpose() const 
------------------------------------------------------------------------
[INTERNAL] 
 Transpose the matrix.

>  Sparsity casadi::Sparsity::transpose(std::vector< int > &mapping, bool invert_mapping=false) const 
------------------------------------------------------------------------
[INTERNAL] 
 Transpose the matrix and get the reordering of the non-zero entries.

Parameters:
-----------

mapping:  the non-zeros of the original matrix for each non-zero of the new
matrix

";

%feature("docstring") casadi::ScalarSparsity::isScalar "[INTERNAL]  Is
scalar?

";

%feature("docstring") casadi::ScalarSparsity::isDiagonal "[INTERNAL]  Is
diagonal?

";

%feature("docstring") casadi::ScalarSparsity::dimString "[INTERNAL]  Get
the dimension as a string.

";

%feature("docstring") casadi::ScalarSparsity::largestFirstOrdering "[INTERNAL]  Order the cols by decreasing degree.

";

%feature("docstring") casadi::ScalarSparsity::depthFirstSearch "[INTERNAL]
Depth-first search on the adjacency graph of the sparsity See Direct Methods
for Sparse Linear Systems by Davis (2006).

";

%feature("docstring") casadi::ScalarSparsity::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::ScalarSparsity::reCache "[INTERNAL]  Check if
there is an identical copy of the sparsity pattern in the cache, and if so,
make a shallow copy of that one.

";

%feature("docstring") casadi::ScalarSparsity::isSymmetric "[INTERNAL]  Is
symmetric?

";

%feature("docstring") casadi::ScalarSparsity::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::ScalarSparsity::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") casadi::ScalarSparsity::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::ScalarSparsity::getNZ "

>  int casadi::Sparsity::getNZ(int rr, int cc)
------------------------------------------------------------------------
[INTERNAL] 
Get the index of a non-zero element Add the element if it does not
exist and copy object if it's not unique.

>  int casadi::Sparsity::getNZ(int rr, int cc) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the index of an existing non-zero element return -1 if the element
does not exist.

>  std::vector< int > casadi::Sparsity::getNZ(const std::vector< int > &rr, const std::vector< int > &cc) const 
------------------------------------------------------------------------
[INTERNAL] 
Get a set of non-zero element return -1 if the element does not exist.

";

%feature("docstring") casadi::ScalarSparsity::reserve "[INTERNAL]  Reserve
space.

";

%feature("docstring") casadi::ScalarSparsity::colind "

>  const std::vector< int > & casadi::Sparsity::colind() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a reference to the colindex of all column element (see class
description)

>  int casadi::Sparsity::colind(int i) const 
------------------------------------------------------------------------
[INTERNAL] 
Get a reference to the colindex of col i (see class description)

";

%feature("docstring") casadi::ScalarSparsity::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::ScalarSparsity::patternCombine "[INTERNAL]
Combine two sparsity patterns Returns the new sparsity pattern as well as a
mapping with the same length as the number of non-zero elements The mapping
matrix contains the arguments for each nonzero, the first bit indicates if
the first argument is nonzero, the second bit indicates if the second
argument is nonzero (note that none of, one of or both of the arguments can
be nonzero)

";

%feature("docstring") casadi::ScalarSparsity::resize "[INTERNAL]  Resize.

";

%feature("docstring") casadi::ScalarSparsity::isSquare "[INTERNAL]  Is
square?

";

%feature("docstring") casadi::ScalarSparsity::isInit "[INTERNAL]  Is
initialized?

";

%feature("docstring") casadi::ScalarSparsity::patternProduct "[INTERNAL]
Sparsity pattern for a matrix-matrix product Returns the sparsity pattern
resulting from pre-multiplying the pattern with the transpose of x. Returns
the new sparsity pattern as well as a mapping with the same length as the
number of non-zero elements The mapping contains a vector of the index pairs
that makes up the scalar products for each non-zero.

";

%feature("docstring") casadi::ScalarSparsity::spy "[INTERNAL]  Print a
textual representation of sparsity.

";

%feature("docstring") casadi::ScalarSparsity::add "

>  void casadi::Sparsity::add(T *data, const T *val_data, const Sparsity &val_sp) const 
------------------------------------------------------------------------
[INTERNAL] 
Add the nonzero entries of one sparsity pattern to the nonzero entries
of another sparsity pattern.

>  void casadi::Sparsity::add(DataType *data, const DataType *val_data, const Sparsity &val_sp) const 
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::ScalarSparsity::patternInverse "[INTERNAL]
Take the inverse of a sparsity pattern; flip zeros and non-zeros.

";

%feature("docstring") casadi::ScalarSparsity::getCol "[INTERNAL]  Get the
column for each non-zero entry Together with the row-vector, this vector
gives the sparsity of the matrix in sparse triplet format, i.e. the column
and row for each non-zero elements.

";

%feature("docstring") casadi::ScalarSparsity::getTriplet "[INTERNAL]  Get
the sparsity in sparse triplet format.

";

%feature("docstring") casadi::ScalarSparsity::spyMatlab "[INTERNAL]
Generate a script for Matlab or Octave which visualizes the sparsity using
the spy command.

";

%feature("docstring") casadi::ScalarSparsity::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::ScalarSparsity::getUpperNZ "[INTERNAL]  Get
nonzeros in upper triangular part.

";

%feature("docstring") casadi::ScalarSparsity::init "[INTERNAL]  Initialize
or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::ScalarSparsity::set "

>  void casadi::Sparsity::set(T *data, const T *val_data, const Sparsity &val_sp) const 
------------------------------------------------------------------------
[INTERNAL] 
Assign the nonzero entries of one sparsity pattern to the nonzero
entries of another sparsity pattern.

>  void casadi::Sparsity::set(DataType *data, const DataType *val_data, const Sparsity &val_sp) const 
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::ScalarSparsity::getLowerNZ "[INTERNAL]  Get
nonzeros in lower triangular part.

";

%feature("docstring") casadi::ScalarSparsity::dulmageMendelsohn "[INTERNAL]
Compute the Dulmage-Mendelsohn decomposition See Direct Methods for Sparse
Linear Systems by Davis (2006).

Dulmage-Mendelsohn will try to bring your matrix into lower block-
triangular (LBT) form. It will not care about the distance of off- diagonal
elements to the diagonal: there is no guarantee you will get a block-
diagonal matrix if you supply a randomly permuted block- diagonal matrix.

If your matrix is symmetrical, this method is of limited use; permutation
can make it non-symmetric.

See:   stronglyConnectedComponents

";

%feature("docstring") casadi::ScalarSparsity::erase "[INTERNAL]  Erase rows
and/or columns of a matrix.

";

%feature("docstring") casadi::ScalarSparsity::appendColumns "[INTERNAL]
Append another sparsity patten horizontally.

";

%feature("docstring") casadi::ScalarSparsity::sub "[INTERNAL]  Get a
submatrix.

Returns the sparsity of the submatrix, with a mapping such that submatrix[k]
= originalmatrix[mapping[k]]

";

%feature("docstring") casadi::ScalarSparsity::getDescription "[INTERNAL]
Return a string with a description (for SWIG)

";

%feature("docstring") casadi::ScalarSparsity::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::ScalarSparsity::makeDense "[INTERNAL]  Make a
patten dense.

";

%feature("docstring") casadi::ScalarSparsity::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") casadi::ScalarSparsity::getElements "

>  std::vector< int > casadi::Sparsity::getElements(bool col_major=true) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the location of all non-zero elements as they would appear in a
Dense matrix A : DenseMatrix 4 x 3 B : SparseMatrix 4 x 3 , 5
structural non-zeros.

k = A.getElements() A[k] will contain the elements of A that are non- zero
in B

>  void casadi::Sparsity::getElements(std::vector< int > &loc, bool col_major=true) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the location of all nonzero elements (inplace version)

";

%feature("docstring") casadi::ScalarSparsity::getDiag "[INTERNAL]  Get the
diagonal of the matrix/create a diagonal matrix (mapping will contain the
nonzero mapping) When the input is square, the diagonal elements are
returned. If the input is vector-like, a diagonal matrix is constructed with
it.

";

%feature("docstring") casadi::ScalarSparsity::hash "[INTERNAL] ";

%feature("docstring") casadi::ScalarSparsity::bor "

>  void casadi::Sparsity::bor(T *data, const T *val_data, const Sparsity &val_sp) const 
------------------------------------------------------------------------
[INTERNAL] 
Bitwise or of the nonzero entries of one sparsity pattern and the
nonzero entries of another sparsity pattern.

>  void casadi::Sparsity::bor(DataType *data, const DataType *val_data, const Sparsity &val_sp) const 
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::ScalarSparsity::isVector "[INTERNAL]  Is
vector (i.e. size2()==1)

";

%feature("docstring") casadi::ScalarSparsity::ScalarSparsity "[INTERNAL] ";

%feature("docstring") casadi::ScalarSparsity::printCompact "[INTERNAL]
Print a compact description of the sparsity pattern.

";

%feature("docstring") casadi::ScalarSparsity::compressed "[INTERNAL]
Create from a single vector containing the pattern in compressed column
storage format: The format: The first two entries are the number of rows
(nrow) and columns (ncol) The next ncol+1 entries are the column offsets
(colind). Note that the last element, colind[ncol], gives the number of
nonzeros The last colind[ncol] entries are the row indices

";

%feature("docstring") casadi::ScalarSparsity::enlargeColumns "[INTERNAL]
Enlarge the matrix along the second dimension (i.e. insert columns)

";

%feature("docstring") casadi::ScalarSparsity::dense "[INTERNAL]  Create a
dense rectangular sparsity pattern.

";

%feature("docstring") casadi::ScalarSparsity::checkNode "[INTERNAL]  Check
if the node is pointing to the right type of object.

";

%feature("docstring") casadi::ScalarSparsity::diag "[INTERNAL]  Create
diagonal sparsity pattern.

";

%feature("docstring") casadi::ScalarSparsity::colindRef "[INTERNAL]  Get a
reference to the colindex of all column element (copy if not unique!)

";

%feature("docstring") casadi::ScalarSparsity::unit "[INTERNAL]  Create the
sparsity pattern for a unit vector of length n and a nonzero on position el.

";

%feature("docstring") casadi::ScalarSparsity::eliminationTree "[INTERNAL]
Calculate the elimination tree See Direct Methods for Sparse Linear Systems
by Davis (2006). If the parameter ata is false, the algorithm is equivalent
to Matlab's etree(A), except that the indices are zero- based. If ata is
true, the algorithm is equivalent to Matlab's etree(A, 'row').

";

%feature("docstring") casadi::ScalarSparsity::numel "[INTERNAL]  The total
number of elements, including structural zeros, i.e. size2()*size1()

See:   size()

";

%feature("docstring") casadi::ScalarSparsity::getCCS "[INTERNAL]  Get the
sparsity in compressed column storage (CCS) format.

";

%feature("docstring") casadi::ScalarSparsity::compress "[INTERNAL]
Compress a sparsity pattern.

";

%feature("docstring") casadi::ScalarSparsity::isEqual "[INTERNAL] ";

%feature("docstring") casadi::ScalarSparsity::pmult "[INTERNAL]  Permute
rows and/or columns Multiply the sparsity with a permutation matrix from the
left and/or from the right P * A * trans(P), A * trans(P) or A * trans(P)
with P defined by an index vector containing the row for each col. As an
alternative, P can be transposed (inverted).

";

%feature("docstring") casadi::ScalarSparsity::isNull "[INTERNAL]  Is a null
pointer?

";

%feature("docstring") casadi::ScalarSparsity::starColoring "[INTERNAL]
Perform a star coloring of a symmetric matrix: A greedy distance-2 coloring
algorithm (Algorithm 4.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN) Ordering
options: None (0), largest first (1)

";

%feature("docstring") casadi::ScalarSparsity::getCRS "[INTERNAL]  Get the
sparsity in compressed row storage (CRS) format.

";

%feature("docstring") casadi::ScalarSparsity::patternIntersection "[INTERNAL]  Intersection of two sparsity patterns Returns the new sparsity
pattern as well as a mapping with the same length as the number of non-zero
elements The value is 1 if the non-zero comes from the first (i.e. this)
object, 2 if it is from the second and 3 (i.e. 1 | 2) if from both.

";

%feature("docstring") casadi::ScalarSparsity::isReshape "[INTERNAL]  Check
if the sparsity is a reshape of another.

";

%feature("docstring") casadi::ScalarSparsity::T "[INTERNAL]   Transpose the
matrix (shorthand)

";

%feature("docstring") casadi::ScalarSparsity::getTriu "[INTERNAL]  Get
upper triangular part.

";

%feature("docstring") casadi::ScalarSparsity::getNZInplace "[INTERNAL]  Get
the nonzero index for a set of elements The index vector is used both for
input and outputs and must be sorted by increasing nonzero index, i.e.
column-wise. Elements not found in the sparsity pattern are set to -1.

";

%feature("docstring") casadi::ScalarSparsity::isDense "[INTERNAL]  Is
dense?

";

%feature("docstring") casadi::ScalarSparsity::shape "[INTERNAL]  Get the
shape.

";

%feature("docstring") casadi::ScalarSparsity::rowsSequential "[INTERNAL]
Do the rows appear sequentially on each column.

Parameters:
-----------

strictly:  if true, then do not allow multiple entries

";

%feature("docstring") casadi::ScalarSparsity::isTranspose "[INTERNAL]
Check if the sparsity is the transpose of another.

";

%feature("docstring") casadi::ScalarSparsity::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::ScalarSparsity::getRepresentation "[INTERNAL]
Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::ScalarSparsity::getTril "[INTERNAL]  Get
lower triangular part.

";

%feature("docstring") casadi::ScalarSparsity::stronglyConnectedComponents "[INTERNAL]  Find the strongly connected components of the bigraph defined by
the sparsity pattern of a square matrix.

See Direct Methods for Sparse Linear Systems by Davis (2006). Returns:
Number of components

Offset for each components (length: 1 + number of components)

Indices for each components, component i has indices index[offset[i]], ...,
index[offset[i+1]]

In the case that the matrix is symmetric, the result has a particular
interpretation: Given a symmetric matrix A and n =
A.stronglyConnectedComponents(p, r)

=> A[p, p] will appear block-diagonal with n blocks and with the indices of
the block boundaries to be found in r.

";

%feature("docstring") casadi::ScalarSparsity::enlargeRows "[INTERNAL]
Enlarge the matrix along the first dimension (i.e. insert rows)

";

%feature("docstring") casadi::ScalarSparsity::isEmpty "[INTERNAL]  Check if
the sparsity is empty.

A sparsity is considered empty if one of the dimensions is zero (or
optionally both dimensions)

";

%feature("docstring") casadi::ScalarSparsity::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") casadi::ScalarSparsity::reshape "[INTERNAL]   Reshape
a sparsity, order of nonzeros remains the same.

";

%feature("docstring") casadi::ScalarSparsity::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::ScalarSparsity::sizeD "[INTERNAL]  Number of
non-zeros on the diagonal, i.e. the number of elements (i, j) with j==i.

";

%feature("docstring") casadi::ScalarSparsity::sizeL "[INTERNAL]  Number of
non-zeros in the lower triangular half, i.e. the number of elements (i, j)
with j<=i.

";

%feature("docstring") casadi::ScalarSparsity::sizeU "[INTERNAL]  Number of
non-zeros in the upper triangular half, i.e. the number of elements (i, j)
with j>=i.

";

%feature("docstring") casadi::ScalarSparsity::unidirectionalColoring "[INTERNAL]  Perform a unidirectional coloring: A greedy distance-2 coloring
algorithm (Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN)

";

%feature("docstring") casadi::ScalarSparsity::rowRef "[INTERNAL]  Get a
reference to the rows of all non-zero element (copy if not unique!)

";

%feature("docstring") casadi::ScalarSparsity::sparse "[INTERNAL]  Create a
sparse (empty) rectangular sparsity pattern.

";

%feature("docstring") casadi::ScalarSparsity::hasNZ "[INTERNAL]  Returns
true if the pattern has a non-zero at location rr, cc.

";

%feature("docstring") casadi::ScalarSparsity::patternUnion "[INTERNAL]
Union of two sparsity patterns.

";

%feature("docstring") casadi::ScalarSparsity::scalar "[INTERNAL]  Create a
scalar sparsity pattern.

";

%feature("docstring") casadi::ScalarSparsity::row "

>  const std::vector< int > & casadi::Sparsity::row() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a reference to row-vector, containing rows for all non-zero
elements (see class description)

>  int casadi::Sparsity::row(int el) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the row of a non-zero element.

";

%feature("docstring") casadi::ScalarSparsity::isSingular "[INTERNAL]  Check
whether the sparsity-pattern indicates structural singularity.

";

%feature("docstring") casadi::ScalarSparsity::printPtr "[INTERNAL]  Print
the pointer to the internal class

";

%feature("docstring") casadi::ScalarSparsity::enlarge "[INTERNAL]  Enlarge
matrix Make the matrix larger by inserting empty rows and columns, keeping
the existing non-zeros.

For the matrices A to B A(m, n) length(jj)=m , length(ii)=n B(nrow, ncol)

A=enlarge(m, n, ii, jj) makes sure that

B[jj, ii] == A

";

%feature("docstring") casadi::ScalarSparsity::size "[INTERNAL]  Get the
number of (structural) non-zeros.

See:   numel()

";

%feature("docstring") casadi::ScalarSparsity::removeDuplicates "[INTERNAL]
Remove duplicate entries.

The same indices will be removed from the mapping vector, which must have
the same length as the number of nonzeros

";

%feature("docstring") casadi::ScalarSparsity::isTril "[INTERNAL]  Is lower
triangular?

";

%feature("docstring") casadi::ScalarSparsity "[INTERNAL] ";

%feature("docstring") casadi::ScalarSparsity::starColoring2 "[INTERNAL]
Perform a star coloring of a symmetric matrix: A new greedy distance-2
coloring algorithm (Algorithm 4.1 in A. H. GEBREMEDHIN, A. TARAFDAR, F.
MANNE, A. POTHEN) Ordering options: None (0), largest first (1)

";

%feature("docstring") casadi::ScalarSparsity::isTriu "[INTERNAL]  Is upper
triangular?

";

%feature("docstring") casadi::ScalarSparsity::size1 "[INTERNAL]  Get the
number of rows.

";

%feature("docstring") casadi::ScalarSparsity::size2 "[INTERNAL]  Get the
number of columns.

";

%feature("docstring") casadi::ScalarSparsity::sanityCheck "[INTERNAL]
Check if the dimensions and colind, row vectors are compatible.

Parameters:
-----------

complete:  set to true to also check elementwise throws an error as possible
result

";

%feature("docstring") casadi::ScalarSparsity::append "[INTERNAL]  Append
another sparsity patten vertically (NOTE: only efficient if vector)

";


// File: classcasadi_1_1SCPgen.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::SCPgen::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::SCPgen::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::SCPgen::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::SCPgen::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::SCPgen::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::SCPgen::outputSchemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SCPgen::hasOption "

check if there is an option str

";

%feature("docstring") casadi::SCPgen::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::SCPgen::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::SCPgen::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::SCPgen::setOptionByEnumValue "[INTERNAL]  Set
a certain option by giving an enum value.

";

%feature("docstring") casadi::SCPgen::reportConstraints "

Prints out a human readable report about possible constraint violations,
after solving.

";

%feature("docstring") casadi::SCPgen::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::SCPgen::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::SCPgen::gradF "

Access the objective gradient function>Input scheme: casadi::GradFInput
(GRADF_NUM_IN = 3) [gradFIn] +-----------+-------+---------------------+ |
Full name | Short |     Description     |
+===========+=======+=====================+ | GRADF_X   | x     | Decision
variable . | +-----------+-------+---------------------+ | GRADF_P   | p
| Fixed parameter .   | +-----------+-------+---------------------+

";

%feature("docstring") casadi::SCPgen::inputSchemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SCPgen::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::SCPgen::nlp "

Access the NLP.

>Input scheme: casadi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::SCPgen::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::SCPgen::spEvaluate "[INTERNAL]  Propagate the
sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::SCPgen::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::SCPgen::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::SCPgen::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::SCPgen::getReportConstraints "";

%feature("docstring") casadi::SCPgen::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::SCPgen::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::SCPgen::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::SCPgen::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SCPgen::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::SCPgen::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::SCPgen::jacG "

Access the Jacobian of the constraint function.

>Input scheme: casadi::HessLagInput (HESSLAG_NUM_IN = 5) [hessLagIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| HESSLAG_X              | x                      | Decision variable .    |
+------------------------+------------------------+------------------------+
| HESSLAG_P              | p                      | Fixed parameter .      |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_F          | lam_f                  | Multiplier for f. Just |
|                        |                        | a scalar factor for    |
|                        |                        | the objective that the |
|                        |                        | NLP solver might use   |
|                        |                        | to scale the           |
|                        |                        | objective.             |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_G          | lam_g                  | Multiplier for g .     |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::HessLagOutput (HESSLAG_NUM_OUT = 6) [hessLagOut]
+----------------+--------+------------------------------------------------+
|   Full name    | Short  |                  Description                   |
+================+========+================================================+
| HESSLAG_HESS   | hess   | Hessian of the Lagrangian .                    |
+----------------+--------+------------------------------------------------+
| HESSLAG_F      | f      | Objective function .                           |
+----------------+--------+------------------------------------------------+
| HESSLAG_G      | g      | Constraint function .                          |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_X | grad_x | Gradient of the Lagrangian with respect to x . |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_P | grad_p | Gradient of the Lagrangian with respect to p . |
+----------------+--------+------------------------------------------------+

";

%feature("docstring") casadi::SCPgen::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::SCPgen::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::SCPgen::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::SCPgen::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::SCPgen::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::SCPgen::checkInputs "[INTERNAL]  Check if the
numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::SCPgen::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::SCPgen::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::SCPgen::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::SCPgen::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::SCPgen::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::SCPgen::isNull "

Is a null pointer?

";

%feature("docstring") casadi::SCPgen::setOptionByAllowedIndex "[INTERNAL]
Set a certain option by giving its index into the allowed values.

";

%feature("docstring") casadi::SCPgen::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::SCPgen::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::SCPgen::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::SCPgen::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::SCPgen "

A structure-exploiting sequential quadratic programming (to be come
sequential convex programming) method for nonlinear programming.

Joel Andersson, Attila Kozma and Joris Gillis

>Input scheme: casadi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| beta         | OT_REAL      | 0.800        | Line-search  | casadi::SCPg |
|              |              |              | parameter,   | enInternal   |
|              |              |              | restoration  |              |
|              |              |              | factor of    |              |
|              |              |              | stepsize     |              |
+--------------+--------------+--------------+--------------+--------------+
| c1           | OT_REAL      | 0.000        | Armijo       | casadi::SCPg |
|              |              |              | condition,   | enInternal   |
|              |              |              | coefficient  |              |
|              |              |              | of decrease  |              |
|              |              |              | in merit     |              |
+--------------+--------------+--------------+--------------+--------------+
| codegen      | OT_BOOLEAN   | false        | C-code       | casadi::SCPg |
|              |              |              | generation   | enInternal   |
+--------------+--------------+--------------+--------------+--------------+
| compiler     | OT_STRING    | \"gcc -fPIC   | Compiler     | casadi::SCPg |
|              |              | -O2\"         | command to   | enInternal   |
|              |              |              | be used for  |              |
|              |              |              | compiling    |              |
|              |              |              | generated    |              |
|              |              |              | code         |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| expand       | OT_BOOLEAN   | false        | Expand the   | casadi::NLPS |
|              |              |              | NLP function | olverInterna |
|              |              |              | in terms of  | l            |
|              |              |              | scalar       |              |
|              |              |              | operations,  |              |
|              |              |              | i.e. MX->SX  |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| grad_f       | OT_FUNCTION  | GenericType( | Function for | casadi::NLPS |
|              |              | )            | calculating  | olverInterna |
|              |              |              | the gradient | l            |
|              |              |              | of the       |              |
|              |              |              | objective    |              |
|              |              |              | (column, aut |              |
|              |              |              | ogenerated   |              |
|              |              |              | by default)  |              |
+--------------+--------------+--------------+--------------+--------------+
| grad_lag     | OT_FUNCTION  | GenericType( | Function for | casadi::NLPS |
|              |              | )            | calculating  | olverInterna |
|              |              |              | the gradient | l            |
|              |              |              | of the       |              |
|              |              |              | Lagrangian ( |              |
|              |              |              | autogenerate |              |
|              |              |              | d by         |              |
|              |              |              | default)     |              |
+--------------+--------------+--------------+--------------+--------------+
| hess_lag     | OT_FUNCTION  | GenericType( | Function for | casadi::NLPS |
|              |              | )            | calculating  | olverInterna |
|              |              |              | the Hessian  | l            |
|              |              |              | of the       |              |
|              |              |              | Lagrangian ( |              |
|              |              |              | autogenerate |              |
|              |              |              | d by         |              |
|              |              |              | default)     |              |
+--------------+--------------+--------------+--------------+--------------+
| hessian_appr | OT_STRING    | \"exact\"      | gauss-       | casadi::SCPg |
| oximation    |              |              | newton|exact | enInternal   |
+--------------+--------------+--------------+--------------+--------------+
| ignore_check | OT_BOOLEAN   | false        | If set to    | casadi::NLPS |
| _vec         |              |              | true, the    | olverInterna |
|              |              |              | input shape  | l            |
|              |              |              | of F will    |              |
|              |              |              | not be       |              |
|              |              |              | checked.     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_CALLBACK  | GenericType( | A function   | casadi::NLPS |
| llback       |              | )            | that will be | olverInterna |
|              |              |              | called at    | l            |
|              |              |              | each         |              |
|              |              |              | iteration    |              |
|              |              |              | with the     |              |
|              |              |              | solver as    |              |
|              |              |              | input. Check |              |
|              |              |              | documentatio |              |
|              |              |              | n of         |              |
|              |              |              | Callback .   |              |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_BOOLEAN   | false        | If set to    | casadi::NLPS |
| llback_ignor |              |              | true, errors | olverInterna |
| e_errors     |              |              | thrown by it | l            |
|              |              |              | eration_call |              |
|              |              |              | back will be |              |
|              |              |              | ignored.     |              |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_INTEGER   | 1            | Only call    | casadi::NLPS |
| llback_step  |              |              | the callback | olverInterna |
|              |              |              | function     | l            |
|              |              |              | every few    |              |
|              |              |              | iterations.  |              |
+--------------+--------------+--------------+--------------+--------------+
| jac_f        | OT_FUNCTION  | GenericType( | Function for | casadi::NLPS |
|              |              | )            | calculating  | olverInterna |
|              |              |              | the jacobian | l            |
|              |              |              | of the       |              |
|              |              |              | objective    |              |
|              |              |              | (sparse row, |              |
|              |              |              | autogenerate |              |
|              |              |              | d by         |              |
|              |              |              | default)     |              |
+--------------+--------------+--------------+--------------+--------------+
| jac_g        | OT_FUNCTION  | GenericType( | Function for | casadi::NLPS |
|              |              | )            | calculating  | olverInterna |
|              |              |              | the Jacobian | l            |
|              |              |              | of the       |              |
|              |              |              | constraints  |              |
|              |              |              | (autogenerat |              |
|              |              |              | ed by        |              |
|              |              |              | default)     |              |
+--------------+--------------+--------------+--------------+--------------+
| lbfgs_memory | OT_INTEGER   | 10           | Size of      | casadi::SCPg |
|              |              |              | L-BFGS       | enInternal   |
|              |              |              | memory.      |              |
+--------------+--------------+--------------+--------------+--------------+
| max_iter     | OT_INTEGER   | 50           | Maximum      | casadi::SCPg |
|              |              |              | number of    | enInternal   |
|              |              |              | SQP          |              |
|              |              |              | iterations   |              |
+--------------+--------------+--------------+--------------+--------------+
| max_iter_ls  | OT_INTEGER   | 1            | Maximum      | casadi::SCPg |
|              |              |              | number of    | enInternal   |
|              |              |              | linesearch   |              |
|              |              |              | iterations   |              |
+--------------+--------------+--------------+--------------+--------------+
| merit_memsiz | OT_INTEGER   | 4            | Size of      | casadi::SCPg |
| e            |              |              | memory to    | enInternal   |
|              |              |              | store        |              |
|              |              |              | history of   |              |
|              |              |              | merit        |              |
|              |              |              | function     |              |
|              |              |              | values       |              |
+--------------+--------------+--------------+--------------+--------------+
| merit_start  | OT_REAL      | 0.000        | Lower bound  | casadi::SCPg |
|              |              |              | for the      | enInternal   |
|              |              |              | merit        |              |
|              |              |              | function     |              |
|              |              |              | parameter    |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp | casadi::SCPg |
|              |              |              | uts)  (eval_ | enInternal   |
|              |              |              | f|eval_g|eva |              |
|              |              |              | l_jac_g|eval |              |
|              |              |              | _grad_f|eval |              |
|              |              |              | _h|qp|dx)    |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| name_x       | OT_STRINGVEC | GenericType( | Names of the | casadi::SCPg |
|              | TOR          | )            | variables.   | enInternal   |
+--------------+--------------+--------------+--------------+--------------+
| print_header | OT_BOOLEAN   | true         | Print the    | casadi::SCPg |
|              |              |              | header with  | enInternal   |
|              |              |              | problem      |              |
|              |              |              | statistics   |              |
+--------------+--------------+--------------+--------------+--------------+
| print_time   | OT_BOOLEAN   | true         | Print        | casadi::SCPg |
|              |              |              | information  | enInternal   |
|              |              |              | about        |              |
|              |              |              | execution    |              |
|              |              |              | time         |              |
+--------------+--------------+--------------+--------------+--------------+
| print_x      | OT_INTEGERVE | GenericType( | Which        | casadi::SCPg |
|              | CTOR         | )            | variables to | enInternal   |
|              |              |              | print.       |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_solver    | OT_QPSOLVER  | GenericType( | The QP       | casadi::SCPg |
|              |              | )            | solver to be | enInternal   |
|              |              |              | used by the  |              |
|              |              |              | SQP method   |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_solver_op | OT_DICTIONAR | GenericType( | Options to   | casadi::SCPg |
| tions        | Y            | )            | be passed to | enInternal   |
|              |              |              | the QP       |              |
|              |              |              | solver       |              |
+--------------+--------------+--------------+--------------+--------------+
| reg_threshol | OT_REAL      | 0.000        | Threshold    | casadi::SCPg |
| d            |              |              | for the regu | enInternal   |
|              |              |              | larization.  |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| regularize   | OT_BOOLEAN   | false        | Automatic re | casadi::SCPg |
|              |              |              | gularization | enInternal   |
|              |              |              | of Lagrange  |              |
|              |              |              | Hessian.     |              |
+--------------+--------------+--------------+--------------+--------------+
| tol_du       | OT_REAL      | 0.000        | Stopping     | casadi::SCPg |
|              |              |              | criterion    | enInternal   |
|              |              |              | for dual inf |              |
|              |              |              | easability   |              |
+--------------+--------------+--------------+--------------+--------------+
| tol_pr       | OT_REAL      | 0.000        | Stopping     | casadi::SCPg |
|              |              |              | criterion    | enInternal   |
|              |              |              | for primal i |              |
|              |              |              | nfeasibility |              |
+--------------+--------------+--------------+--------------+--------------+
| tol_pr_step  | OT_REAL      | 0.000        | Stopping     | casadi::SCPg |
|              |              |              | criterion    | enInternal   |
|              |              |              | for the step |              |
|              |              |              | size         |              |
+--------------+--------------+--------------+--------------+--------------+
| tol_reg      | OT_REAL      | 0.000        | Stopping     | casadi::SCPg |
|              |              |              | criterion    | enInternal   |
|              |              |              | for regulari |              |
|              |              |              | zation       |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+
| warn_initial | OT_BOOLEAN   | false        | Warn if the  | casadi::NLPS |
| _bounds      |              |              | initial      | olverInterna |
|              |              |              | guess does   | l            |
|              |              |              | not satisfy  |              |
|              |              |              | LBX and UBX  |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available monitors
+-------------+--------------------------+
|     Id      |         Used in          |
+=============+==========================+
| dx          | casadi::SCPgenInternal   |
+-------------+--------------------------+
| eval_f      | casadi::SCPgenInternal   |
+-------------+--------------------------+
| eval_g      | casadi::SCPgenInternal   |
+-------------+--------------------------+
| eval_grad_f | casadi::SCPgenInternal   |
+-------------+--------------------------+
| eval_h      | casadi::SCPgenInternal   |
+-------------+--------------------------+
| eval_jac_g  | casadi::SCPgenInternal   |
+-------------+--------------------------+
| inputs      | casadi::FunctionInternal |
+-------------+--------------------------+
| outputs     | casadi::FunctionInternal |
+-------------+--------------------------+
| qp          | casadi::SCPgenInternal   |
+-------------+--------------------------+

>List of available stats
+------------+------------------------+
|     Id     |        Used in         |
+============+========================+
| iter_count | casadi::SCPgenInternal |
+------------+------------------------+

Diagrams

C++ includes: scpgen.hpp ";

%feature("docstring") casadi::SCPgen::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::SCPgen::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::SCPgen::SCPgen "

>  casadi::SCPgen::SCPgen()
------------------------------------------------------------------------

Default constructor.

>  casadi::SCPgen::SCPgen(const Function &nlp)
------------------------------------------------------------------------

Create an NLP solver instance.

";

%feature("docstring") casadi::SCPgen::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::SCPgen::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::SCPgen::assignNode "[INTERNAL]  Assign the
node to a node class pointer (or null)

";

%feature("docstring") casadi::SCPgen::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::SCPgen::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::SCPgen::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::SCPgen::assignNodeNoCount "[INTERNAL]  Assign
the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::SCPgen::isInit "

Is initialized?

";

%feature("docstring") casadi::SCPgen::getOptionEnumValue "[INTERNAL]  Get
the enum value corresponding to th certain option.

";

%feature("docstring") casadi::SCPgen::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::SCPgen::evaluate "

Evaluate.

";

%feature("docstring") casadi::SCPgen::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::SCPgen::setQPOptions "

Set options that make the NLP solver more suitable for solving QPs.

";

%feature("docstring") casadi::SCPgen::swap "[INTERNAL]  Swap content with
another instance.

";

%feature("docstring") casadi::SCPgen::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::SCPgen::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::SCPgen::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::SCPgen::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::SCPgen::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::SCPgen::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::SCPgen::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::SCPgen::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::SCPgen::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::SCPgen::assertInit "[INTERNAL]  Assert that
it is initialized

";

%feature("docstring") casadi::SCPgen::getOption "

get an option value

";

%feature("docstring") casadi::SCPgen::callDerivative "[INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring") casadi::SCPgen::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::SCPgen::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::SCPgen::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::SCPgen::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::SCPgen::getQPSolver "

Access the QPSolver used internally.

";

%feature("docstring") casadi::SCPgen::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::SCPgen::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::SCPgen::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::SCPgen::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::SCPgen::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::SCPgen::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::SCPgen::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::SCPgen::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::SCPgen::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::SCPgen::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::SCPgen::hessLag "

Access the Hessian of the Lagrangian function.

>Input scheme: casadi::JacGInput (JACG_NUM_IN = 3) [jacGIn]
+-----------+-------+---------------------+
| Full name | Short |     Description     |
+===========+=======+=====================+
| JACG_X    | x     | Decision variable . |
+-----------+-------+---------------------+
| JACG_P    | p     | Fixed parameter .   |
+-----------+-------+---------------------+

>Output scheme: casadi::JacGOutput (JACG_NUM_OUT = 4) [jacGOut]
+-----------+-------+-------------------------------+
| Full name | Short |          Description          |
+===========+=======+===============================+
| JACG_JAC  | jac   | Jacobian of the constraints . |
+-----------+-------+-------------------------------+
| JACG_F    | f     | Objective function .          |
+-----------+-------+-------------------------------+
| JACG_G    | g     | Constraint function .         |
+-----------+-------+-------------------------------+

";

%feature("docstring") casadi::SCPgen::spCanEvaluate "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::SCPgen::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::SCPgen::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::SCPgen::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::SCPgen::clone "[INTERNAL]  Deep copy.

";


// File: classcasadi_1_1SDPInputIOSchemeVector.xml
%feature("docstring") casadi::SDPInputIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::SDPInputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::SDPInputIOSchemeVector::vector "[INTERNAL] ";

%feature("docstring") casadi::SDPInputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") casadi::SDPInputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::SDPInputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::SDPInputIOSchemeVector "[INTERNAL]  Helper
function for 'SDPInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::SDPInputIOSchemeVector::SDPInputIOSchemeVector
"[INTERNAL] ";

%feature("docstring") casadi::SDPInputIOSchemeVector::__getitem__ "[INTERNAL] ";


// File: classcasadi_1_1SDPOutputIOSchemeVector.xml
%feature("docstring") casadi::SDPOutputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::SDPOutputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::SDPOutputIOSchemeVector "[INTERNAL]  Helper
function for 'SDPOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::SDPOutputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::SDPOutputIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::SDPOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::SDPOutputIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") casadi::SDPOutputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring")
casadi::SDPOutputIOSchemeVector::SDPOutputIOSchemeVector "[INTERNAL] ";


// File: classcasadi_1_1SDPSDQPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::SDPSDQPSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::SDPSDQPSolver::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") casadi::SDPSDQPSolver::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::SDPSDQPSolver::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::SDPSDQPSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::SDPSDQPSolver::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::SDPSDQPSolver::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::SDPSDQPSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::SDPSDQPSolver::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") casadi::SDPSDQPSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::SDPSDQPSolver::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::SDPSDQPSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::SDPSDQPSolver::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::SDPSDQPSolver::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::SDPSDQPSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::SDPSDQPSolver::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") casadi::SDPSDQPSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::SDPSDQPSolver::isNull "

Is a null pointer?

";

%feature("docstring") casadi::SDPSDQPSolver::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::SDPSDQPSolver::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::SDPSDQPSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::SDPSDQPSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::SDPSDQPSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::SDPSDQPSolver::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::SDPSDQPSolver::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::SDPSDQPSolver::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::SDPSDQPSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::SDPSDQPSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::SDPSDQPSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::SDPSDQPSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::SDPSDQPSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::SDPSDQPSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::SDPSDQPSolver::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::SDPSDQPSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::SDPSDQPSolver::getSolver "

Access underlying SDP solver.

";

%feature("docstring") casadi::SDPSDQPSolver::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::SDPSDQPSolver::isInit "

Is initialized?

";

%feature("docstring") casadi::SDPSDQPSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::SDPSDQPSolver::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::SDPSDQPSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::SDPSDQPSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::SDPSDQPSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::SDPSDQPSolver::getOption "

get an option value

";

%feature("docstring") casadi::SDPSDQPSolver::spCanEvaluate "[INTERNAL]  Is
the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::SDPSDQPSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::SDPSDQPSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::SDPSDQPSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::SDPSDQPSolver::checkInputs "[INTERNAL]  Check
if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::SDPSDQPSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::SDPSDQPSolver::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::SDPSDQPSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::SDPSDQPSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::SDPSDQPSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::SDPSDQPSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::SDPSDQPSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::SDPSDQPSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::SDPSDQPSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::SDPSDQPSolver::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::SDPSDQPSolver "

SDP SDQP Solver for quadratic programming.

Note: this implementation relies on Cholesky decomposition: Chol(H) = L -> H
= LL' with L lower triangular This requires Pi, H to be positive definite.
Positive semi-definite is not sufficient. Notably, H==0 will not work.

A better implementation would rely on matrix square root, but we need
singular value decomposition to implement that.

Same as an SDPSolver, but with a quadratic objective 1/2 x' H x

Joris Gillis

>Input scheme: casadi::SDQPInput (SDQP_SOLVER_NUM_IN = 10) [sdqpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SDQP_SOLVER_H          | h                      | The matrix H: sparse ( |
|                        |                        | n x n) .               |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_C          | c                      | The vector c: ( n x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_F          | f                      | The horizontal stack   |
|                        |                        | of all matrices F_i: ( |
|                        |                        | m x nm) .              |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_G          | g                      | The matrix G: ( m x m) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_A          | a                      | The matrix A: ( nc x   |
|                        |                        | n) .                   |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_LBA        | lba                    | Lower bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_UBA        | uba                    | Upper bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_LBX        | lbx                    | Lower bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_UBX        | ubx                    | Upper bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::SDQPOutput (SDQP_SOLVER_NUM_OUT = 8) [sdqpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SDQP_SOLVER_X          | x                      | The primal solution (n |
|                        |                        | x 1) - may be used as  |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_P          | p                      | The solution P (m x m) |
|                        |                        | - may be used as       |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_DUAL       | dual                   | The dual solution (m x |
|                        |                        | m) - may be used as    |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_COST       | cost                   | The primal optimal     |
|                        |                        | cost (1 x 1) .         |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_DUAL_COST  | dual_cost              | The dual optimal cost  |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_LAM_A      | lam_a                  | The dual solution      |
|                        |                        | corresponding to the   |
|                        |                        | linear constraints (nc |
|                        |                        | x 1) .                 |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_LAM_X      | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds (n x 1)  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| sdp_solver   | OT_SDPSOLVER | GenericType( | The          | casadi::SDPS |
|              |              | )            | SDPSolver    | DQPInternal  |
|              |              |              | used to      |              |
|              |              |              | solve the    |              |
|              |              |              | SDQPs.       |              |
+--------------+--------------+--------------+--------------+--------------+
| sdp_solver_o | OT_DICTIONAR | GenericType( | Options to   | casadi::SDPS |
| ptions       | Y            | )            | be passed to | DQPInternal  |
|              |              |              | the          |              |
|              |              |              | SDPSOlver    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available stats
+------------------+-------------------------+
|        Id        |         Used in         |
+==================+=========================+
| sdp_solver_stats | casadi::SDPSDQPInternal |
+------------------+-------------------------+

Diagrams

C++ includes: sdp_sdqp_solver.hpp ";

%feature("docstring") casadi::SDPSDQPSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::SDPSDQPSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::SDPSDQPSolver::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::SDPSDQPSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::SDPSDQPSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::SDPSDQPSolver::hasOption "

check if there is an option str

";

%feature("docstring") casadi::SDPSDQPSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::SDPSDQPSolver::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SDPSDQPSolver::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::SDPSDQPSolver::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::SDPSDQPSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::SDPSDQPSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::SDPSDQPSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::SDPSDQPSolver::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::SDPSDQPSolver::setSOCQPOptions "

Set options that make the SDQP solver more suitable for solving SOCPs.

";

%feature("docstring") casadi::SDPSDQPSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::SDPSDQPSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::SDPSDQPSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::SDPSDQPSolver::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::SDPSDQPSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::SDPSDQPSolver::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::SDPSDQPSolver::SDPSDQPSolver "

>  casadi::SDPSDQPSolver::SDPSDQPSolver()
------------------------------------------------------------------------

Default constructor.

>  casadi::SDPSDQPSolver::SDPSDQPSolver(const SDQPStructure &st)
------------------------------------------------------------------------

Constructor.

Parameters:
-----------

st:  Problem structure

";

%feature("docstring") casadi::SDPSDQPSolver::evaluate "

Evaluate.

";

%feature("docstring") casadi::SDPSDQPSolver::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::SDPSDQPSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::SDPSDQPSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::SDPSDQPSolver::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::SDPSDQPSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::SDPSDQPSolver::inputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::SDPSDQPSolver::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::SDPSDQPSolver::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::SDPSDQPSolver::schemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SDPSDQPSolver::printPtr "[INTERNAL]  Print
the pointer to the internal class

";

%feature("docstring") casadi::SDPSDQPSolver::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";


// File: classcasadi_1_1SDPSOCPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::SDPSOCPSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::SDPSOCPSolver::hasOption "

check if there is an option str

";

%feature("docstring") casadi::SDPSOCPSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::SDPSOCPSolver::inputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::SDPSOCPSolver::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::SDPSOCPSolver::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::SDPSOCPSolver::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::SDPSOCPSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::SDPSOCPSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::SDPSOCPSolver::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::SDPSOCPSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::SDPSOCPSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::SDPSOCPSolver::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::SDPSOCPSolver::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::SDPSOCPSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::SDPSOCPSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::SDPSOCPSolver::checkInputs "[INTERNAL]  Check
if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::SDPSOCPSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::SDPSOCPSolver::getSolver "

Access underlying SDP solver.

";

%feature("docstring") casadi::SDPSOCPSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::SDPSOCPSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::SDPSOCPSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::SDPSOCPSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::SDPSOCPSolver::isNull "

Is a null pointer?

";

%feature("docstring") casadi::SDPSOCPSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::SDPSOCPSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::SDPSOCPSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::SDPSOCPSolver::getOption "

get an option value

";

%feature("docstring") casadi::SDPSOCPSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::SDPSOCPSolver::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") casadi::SDPSOCPSolver::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::SDPSOCPSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::SDPSOCPSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::SDPSOCPSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::SDPSOCPSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::SDPSOCPSolver::isInit "

Is initialized?

";

%feature("docstring") casadi::SDPSOCPSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::SDPSOCPSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::SDPSOCPSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::SDPSOCPSolver::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::SDPSOCPSolver::SDPSOCPSolver "

>  casadi::SDPSOCPSolver::SDPSOCPSolver()
------------------------------------------------------------------------

Default constructor.

>  casadi::SDPSOCPSolver::SDPSOCPSolver(const SOCPStructure &st)
------------------------------------------------------------------------

Constructor.

Parameters:
-----------

st:  Problem structure

";

%feature("docstring") casadi::SDPSOCPSolver::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::SDPSOCPSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::SDPSOCPSolver::printPtr "[INTERNAL]  Print
the pointer to the internal class

";

%feature("docstring") casadi::SDPSOCPSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::SDPSOCPSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::SDPSOCPSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::SDPSOCPSolver::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::SDPSOCPSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::SDPSOCPSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::SDPSOCPSolver::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::SDPSOCPSolver::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::SDPSOCPSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::SDPSOCPSolver::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::SDPSOCPSolver::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::SDPSOCPSolver::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SDPSOCPSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::SDPSOCPSolver "

SOCP Solver for quadratic programming.

Solves an Second Order Cone Programming (SOCP) problem in standard form.

Primal:

min          c' x  x subject to               || Gi' x + hi ||_2 <= ei' x +
fi  i = 1..m              LBA <= A x <= UBA             LBX <= x   <= UBX
with x ( n x 1)          c ( n x 1 )          Gi sparse (n x ni)          hi
dense (ni x 1)          ei  dense (n x 1) fi  dense (1 x 1)          N =
Sum_i^m ni          A sparse (nc x n) LBA, UBA dense vector (nc x 1)
LBX, UBX dense vector (n x 1)

Joris Gillis

>Input scheme: casadi::SOCPInput (SOCP_SOLVER_NUM_IN = 11) [socpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SOCP_SOLVER_G          | g                      | The horizontal stack   |
|                        |                        | of all matrices Gi: (  |
|                        |                        | n x N) .               |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_H          | h                      | The vertical stack of  |
|                        |                        | all vectors hi: ( N x  |
|                        |                        | 1) .                   |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_E          | e                      | The vertical stack of  |
|                        |                        | all vectors ei: ( nm x |
|                        |                        | 1) .                   |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_F          | f                      | The vertical stack of  |
|                        |                        | all scalars fi: ( m x  |
|                        |                        | 1) .                   |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_C          | c                      | The vector c: ( n x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_A          | a                      | The matrix A: ( nc x   |
|                        |                        | n) .                   |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_LBA        | lba                    | Lower bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_UBA        | uba                    | Upper bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_LBX        | lbx                    | Lower bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_UBX        | ubx                    | Upper bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::SOCPOutput (SOCP_SOLVER_NUM_OUT = 5) [socpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SOCP_SOLVER_X          | x                      | The primal solution (n |
|                        |                        | x 1) .                 |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_COST       | cost                   | The primal optimal     |
|                        |                        | cost (1 x 1) .         |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_LAM_A      | lam_a                  | The dual solution      |
|                        |                        | corresponding to the   |
|                        |                        | linear constraints (nc |
|                        |                        | x 1) .                 |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_LAM_X      | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds (n x 1)  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| ni           | OT_INTEGERVE | GenericType( | Provide the  | casadi::SOCP |
|              | CTOR         | )            | size of each | SolverIntern |
|              |              |              | SOC          | al           |
|              |              |              | constraint.  |              |
|              |              |              | Must sum up  |              |
|              |              |              | to N.        |              |
+--------------+--------------+--------------+--------------+--------------+
| print_proble | OT_BOOLEAN   | false        | Print out    | casadi::SOCP |
| m            |              |              | problem      | SolverIntern |
|              |              |              | statement    | al           |
|              |              |              | for          |              |
|              |              |              | debugging.   |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| sdp_solver   | OT_SDPSOLVER | GenericType( | The          | casadi::SDPS |
|              |              | )            | SDPSolver    | OCPInternal  |
|              |              |              | used to      |              |
|              |              |              | solve the    |              |
|              |              |              | SOCPs.       |              |
+--------------+--------------+--------------+--------------+--------------+
| sdp_solver_o | OT_DICTIONAR | GenericType( | Options to   | casadi::SDPS |
| ptions       | Y            | )            | be passed to | OCPInternal  |
|              |              |              | the          |              |
|              |              |              | SDPSOlver    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available stats
+------------------+-------------------------+
|        Id        |         Used in         |
+==================+=========================+
| sdp_solver_stats | casadi::SDPSOCPInternal |
+------------------+-------------------------+

Diagrams

C++ includes: sdp_socp_solver.hpp ";

%feature("docstring") casadi::SDPSOCPSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::SDPSOCPSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::SDPSOCPSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::SDPSOCPSolver::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::SDPSOCPSolver::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::SDPSOCPSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::SDPSOCPSolver::evaluate "

Evaluate.

";

%feature("docstring") casadi::SDPSOCPSolver::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::SDPSOCPSolver::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::SDPSOCPSolver::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::SDPSOCPSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::SDPSOCPSolver::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::SDPSOCPSolver::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::SDPSOCPSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::SDPSOCPSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::SDPSOCPSolver::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::SDPSOCPSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::SDPSOCPSolver::spCanEvaluate "[INTERNAL]  Is
the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::SDPSOCPSolver::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") casadi::SDPSOCPSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::SDPSOCPSolver::schemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SDPSOCPSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::SDPSOCPSolver::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::SDPSOCPSolver::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") casadi::SDPSOCPSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::SDPSOCPSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::SDPSOCPSolver::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::SDPSOCPSolver::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SDPSOCPSolver::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::SDPSOCPSolver::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::SDPSOCPSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::SDPSOCPSolver::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::SDPSOCPSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::SDPSOCPSolver::getRepresentation "

Return a string with a representation (for SWIG)

";


// File: classcasadi_1_1SDPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::SDPSolver::setSOCPOptions "

Set options that make the SDP solver more suitable for solving SOCPs.

";

%feature("docstring") casadi::SDPSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::SDPSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::SDPSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::SDPSolver "

SDPSolver.

Solves an SDP problem in standard form.
Seehttp://sdpa.indsys.chuo-u.ac.jp/sdpa/files/sdpa-c.6.2.0.manual.pdf

Primal:

min          c' x  x subject to               P = Sum_i^m F_i x_i - G P
negative semidefinite              LBA <= A x <= UBA             LBX <= x
<= UBX      with x ( n x 1)          c ( n x 1 )          G, F_i  sparse
symmetric (m x m)          X dense symmetric ( m x m ) A sparse matrix ( nc
x n)          LBA, UBA dense vector (nc x 1) LBX, UBX dense vector (n x 1)

This formulation is chosen as primal, because it does not call for a large
decision variable space.

Dual:

max          trace(G Y)  Y  subject to             trace(F_i Y) = c_i Y
positive semidefinite      with Y dense symmetric ( m x m)

On generality: you might have formulation with block partitioning:

Primal:

min          c' x  x subject to               Pj = Sum_i^m F_ij x_i - gj
for all j               Pj negative semidefinite   for all j with x ( n x 1)
c ( n x 1 )          G, F_i  sparse symmetric (m x m)          X dense
symmetric ( m x m )

Dual:max          Sum_j trace(Gj Yj)  Yj  subject to             Sum_j
trace(F_ij Yj) = c_i   for all j             Yj positive semidefinite for
all j      with Y dense symmetric ( m x m)

You can cast this into the standard form with: G = blkdiag(Gj for all j) Fi
= blkdiag(F_ij for all j)

Implementations of SDPSolver are encouraged to exploit this block structure.

Joel Andersson

>Input scheme: casadi::SDPInput (SDP_SOLVER_NUM_IN = 9) [sdpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SDP_SOLVER_F           | f                      | The horizontal stack   |
|                        |                        | of all matrices F_i: ( |
|                        |                        | m x nm) .              |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_C           | c                      | The vector c: ( n x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_G           | g                      | The matrix G: ( m x m) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_A           | a                      | The matrix A: ( nc x   |
|                        |                        | n) .                   |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_LBA         | lba                    | Lower bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_UBA         | uba                    | Upper bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_LBX         | lbx                    | Lower bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_UBX         | ubx                    | Upper bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::SDPOutput (SDP_SOLVER_NUM_OUT = 8) [sdpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SDP_SOLVER_X           | x                      | The primal solution (n |
|                        |                        | x 1) - may be used as  |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_P           | p                      | The solution P (m x m) |
|                        |                        | - may be used as       |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_DUAL        | dual                   | The dual solution (m x |
|                        |                        | m) - may be used as    |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_COST        | cost                   | The primal optimal     |
|                        |                        | cost (1 x 1) .         |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_DUAL_COST   | dual_cost              | The dual optimal cost  |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_LAM_A       | lam_a                  | The dual solution      |
|                        |                        | corresponding to the   |
|                        |                        | linear constraints (nc |
|                        |                        | x 1) .                 |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_LAM_X       | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds (n x 1)  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| calc_dual    | OT_BOOLEAN   | true         | Indicate if  | casadi::SDPS |
|              |              |              | dual should  | olverInterna |
|              |              |              | be allocated | l            |
|              |              |              | and          |              |
|              |              |              | calculated.  |              |
|              |              |              | You may want |              |
|              |              |              | to avoid     |              |
|              |              |              | calculating  |              |
|              |              |              | this         |              |
|              |              |              | variable for |              |
|              |              |              | problems     |              |
|              |              |              | with n       |              |
|              |              |              | large, as is |              |
|              |              |              | always dense |              |
|              |              |              | (m x m).     |              |
+--------------+--------------+--------------+--------------+--------------+
| calc_p       | OT_BOOLEAN   | true         | Indicate if  | casadi::SDPS |
|              |              |              | the P-part   | olverInterna |
|              |              |              | of primal    | l            |
|              |              |              | solution     |              |
|              |              |              | should be    |              |
|              |              |              | allocated    |              |
|              |              |              | and          |              |
|              |              |              | calculated.  |              |
|              |              |              | You may want |              |
|              |              |              | to avoid     |              |
|              |              |              | calculating  |              |
|              |              |              | this         |              |
|              |              |              | variable for |              |
|              |              |              | problems     |              |
|              |              |              | with n       |              |
|              |              |              | large, as is |              |
|              |              |              | always dense |              |
|              |              |              | (m x m).     |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| print_proble | OT_BOOLEAN   | false        | Print out    | casadi::SDPS |
| m            |              |              | problem      | olverInterna |
|              |              |              | statement    | l            |
|              |              |              | for          |              |
|              |              |              | debugging.   |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: sdp_solver.hpp ";

%feature("docstring") casadi::SDPSolver::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::SDPSolver::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::SDPSolver::isNull "

Is a null pointer?

";

%feature("docstring") casadi::SDPSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::SDPSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::SDPSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::SDPSolver::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::SDPSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::SDPSolver::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::SDPSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::SDPSolver::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::SDPSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::SDPSolver::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::SDPSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::SDPSolver::assignNode "[INTERNAL]  Assign the
node to a node class pointer (or null)

";

%feature("docstring") casadi::SDPSolver::spCanEvaluate "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::SDPSolver::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::SDPSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::SDPSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::SDPSolver::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::SDPSolver::evaluate "

Evaluate.

";

%feature("docstring") casadi::SDPSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::SDPSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::SDPSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::SDPSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::SDPSolver::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::SDPSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::SDPSolver::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::SDPSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::SDPSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::SDPSolver::inputSchemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SDPSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::SDPSolver::hasOption "

check if there is an option str

";

%feature("docstring") casadi::SDPSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::SDPSolver::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::SDPSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::SDPSolver::SDPSolver "

Default constructor.

";

%feature("docstring") casadi::SDPSolver::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::SDPSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::SDPSolver::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::SDPSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::SDPSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::SDPSolver::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") casadi::SDPSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::SDPSolver::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::SDPSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::SDPSolver::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::SDPSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::SDPSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::SDPSolver::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::SDPSolver::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::SDPSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::SDPSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::SDPSolver::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::SDPSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::SDPSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::SDPSolver::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::SDPSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::SDPSolver::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::SDPSolver::isInit "

Is initialized?

";

%feature("docstring") casadi::SDPSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::SDPSolver::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::SDPSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::SDPSolver::getOption "

get an option value

";

%feature("docstring") casadi::SDPSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::SDPSolver::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SDPSolver::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::SDPSolver::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SDPSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::SDPSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::SDPSolver::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::SDPSolver::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::SDPSolver::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::SDPSolver::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::SDPSolver::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") casadi::SDPSolver::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::SDPSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::SDPSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::SDPSolver::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::SDPSolver::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::SDPSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::SDPSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::SDPSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::SDPSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::SDPSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::SDPSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::SDPSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";


// File: classcasadi_1_1SDPStructIOSchemeVector.xml
%feature("docstring")
casadi::SDPStructIOSchemeVector::SDPStructIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::SDPStructIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::SDPStructIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::SDPStructIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::SDPStructIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::SDPStructIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::SDPStructIOSchemeVector "[INTERNAL]  Helper
function for 'SDPStruct'

C++ includes: casadi_types.hpp ";

%feature("docstring") casadi::SDPStructIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") casadi::SDPStructIOSchemeVector::vector "[INTERNAL]
";


// File: classcasadi_1_1SDQPInputIOSchemeVector.xml
%feature("docstring") casadi::SDQPInputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") casadi::SDQPInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::SDQPInputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::SDQPInputIOSchemeVector "[INTERNAL]  Helper
function for 'SDQPInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring")
casadi::SDQPInputIOSchemeVector::SDQPInputIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::SDQPInputIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::SDQPInputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::SDQPInputIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") casadi::SDQPInputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";


// File: classcasadi_1_1SDQPOutputIOSchemeVector.xml
%feature("docstring") casadi::SDQPOutputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::SDQPOutputIOSchemeVector "[INTERNAL]  Helper
function for 'SDQPOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::SDQPOutputIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") casadi::SDQPOutputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") casadi::SDQPOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::SDQPOutputIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring")
casadi::SDQPOutputIOSchemeVector::SDQPOutputIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::SDQPOutputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::SDQPOutputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";


// File: classcasadi_1_1SDQPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::SDQPSolver::inputScheme " [INTERNAL]  Access input/output scheme.

";

%feature("docstring") casadi::SDQPSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::SDQPSolver::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::SDQPSolver::evaluate "

Evaluate.

";

%feature("docstring") casadi::SDQPSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::SDQPSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::SDQPSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::SDQPSolver::spCanEvaluate "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::SDQPSolver::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::SDQPSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::SDQPSolver::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::SDQPSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::SDQPSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::SDQPSolver::isInit "

Is initialized?

";

%feature("docstring") casadi::SDQPSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::SDQPSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::SDQPSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::SDQPSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::SDQPSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::SDQPSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::SDQPSolver::SDQPSolver "

Default constructor.

";

%feature("docstring") casadi::SDQPSolver::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::SDQPSolver::setSOCQPOptions "

Set options that make the SDQP solver more suitable for solving SOCPs.

";

%feature("docstring") casadi::SDQPSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::SDQPSolver::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::SDQPSolver::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SDQPSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::SDQPSolver::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") casadi::SDQPSolver "

SDQPSolver.

Same as an SDPSolver, but with a quadratic objective 1/2 x' H x

Joel Andersson

>Input scheme: casadi::SDQPInput (SDQP_SOLVER_NUM_IN = 10) [sdqpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SDQP_SOLVER_H          | h                      | The matrix H: sparse ( |
|                        |                        | n x n) .               |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_C          | c                      | The vector c: ( n x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_F          | f                      | The horizontal stack   |
|                        |                        | of all matrices F_i: ( |
|                        |                        | m x nm) .              |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_G          | g                      | The matrix G: ( m x m) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_A          | a                      | The matrix A: ( nc x   |
|                        |                        | n) .                   |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_LBA        | lba                    | Lower bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_UBA        | uba                    | Upper bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_LBX        | lbx                    | Lower bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_UBX        | ubx                    | Upper bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::SDQPOutput (SDQP_SOLVER_NUM_OUT = 8) [sdqpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SDQP_SOLVER_X          | x                      | The primal solution (n |
|                        |                        | x 1) - may be used as  |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_P          | p                      | The solution P (m x m) |
|                        |                        | - may be used as       |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_DUAL       | dual                   | The dual solution (m x |
|                        |                        | m) - may be used as    |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_COST       | cost                   | The primal optimal     |
|                        |                        | cost (1 x 1) .         |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_DUAL_COST  | dual_cost              | The dual optimal cost  |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_LAM_A      | lam_a                  | The dual solution      |
|                        |                        | corresponding to the   |
|                        |                        | linear constraints (nc |
|                        |                        | x 1) .                 |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_LAM_X      | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds (n x 1)  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| sdp_solver   | OT_SDPSOLVER | GenericType( | The          | casadi::SDQP |
|              |              | )            | SDQPSolver   | SolverIntern |
|              |              |              | used to      | al           |
|              |              |              | solve the    |              |
|              |              |              | SDPs.        |              |
+--------------+--------------+--------------+--------------+--------------+
| sdp_solver_o | OT_DICTIONAR | GenericType( | Options to   | casadi::SDQP |
| ptions       | Y            | )            | be passed to | SolverIntern |
|              |              |              | the          | al           |
|              |              |              | SDPSOlver    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: sdqp_solver.hpp ";

%feature("docstring") casadi::SDQPSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::SDQPSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::SDQPSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::SDQPSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::SDQPSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::SDQPSolver::isNull "

Is a null pointer?

";

%feature("docstring") casadi::SDQPSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::SDQPSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::SDQPSolver::hasOption "

check if there is an option str

";

%feature("docstring") casadi::SDQPSolver::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::SDQPSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::SDQPSolver::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::SDQPSolver::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::SDQPSolver::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::SDQPSolver::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::SDQPSolver::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SDQPSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::SDQPSolver::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::SDQPSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::SDQPSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::SDQPSolver::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") casadi::SDQPSolver::getOption "

get an option value

";

%feature("docstring") casadi::SDQPSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::SDQPSolver::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::SDQPSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::SDQPSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::SDQPSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::SDQPSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::SDQPSolver::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::SDQPSolver::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::SDQPSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::SDQPSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::SDQPSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::SDQPSolver::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::SDQPSolver::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::SDQPSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::SDQPSolver::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::SDQPSolver::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::SDQPSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::SDQPSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::SDQPSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::SDQPSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::SDQPSolver::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::SDQPSolver::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") casadi::SDQPSolver::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::SDQPSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::SDQPSolver::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::SDQPSolver::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::SDQPSolver::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SDQPSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::SDQPSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::SDQPSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::SDQPSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::SDQPSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::SDQPSolver::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::SDQPSolver::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::SDQPSolver::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::SDQPSolver::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::SDQPSolver::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::SDQPSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::SDQPSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::SDQPSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::SDQPSolver::print "[INTERNAL]  Print a
description of the object.

";


// File: classcasadi_1_1SDQPStructIOSchemeVector.xml
%feature("docstring") casadi::SDQPStructIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::SDQPStructIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::SDQPStructIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::SDQPStructIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::SDQPStructIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") casadi::SDQPStructIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring")
casadi::SDQPStructIOSchemeVector::SDQPStructIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::SDQPStructIOSchemeVector "[INTERNAL]  Helper
function for 'SDQPStruct'

C++ includes: casadi_types.hpp ";

%feature("docstring") casadi::SDQPStructIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";


// File: classcasadi_1_1SetNonzeros.xml
%feature("docstring") casadi::SetNonzeros::getGetNonzeros "[INTERNAL]  Get
the nonzeros of matrix.

";

%feature("docstring") casadi::SetNonzeros::getBinarySwitch "[INTERNAL]  Get
a binary operation operation.

";

%feature("docstring") casadi::SetNonzeros::getInverse "[INTERNAL]
Inverse.

";

%feature("docstring") casadi::SetNonzeros::mapping "[INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") casadi::SetNonzeros::numel "[INTERNAL]  Get shape.

";

%feature("docstring") casadi::SetNonzeros::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") casadi::SetNonzeros::getNorm2 "[INTERNAL]  Spectral
norm.

";

%feature("docstring") casadi::SetNonzeros::getReshape "[INTERNAL]
Reshape.

";

%feature("docstring") casadi::SetNonzeros::getValue "[INTERNAL]  Get the
value (only for scalar constant nodes)

";

%feature("docstring") casadi::SetNonzeros::__nonzero__ "[INTERNAL]  Check
the truth value of this node.

";

%feature("docstring") casadi::SetNonzeros::getHorzsplit "[INTERNAL]  Create
a horizontal split node.

";

%feature("docstring") casadi::SetNonzeros::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") casadi::SetNonzeros::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") casadi::SetNonzeros::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") casadi::SetNonzeros::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::SetNonzeros::hasDep "[INTERNAL]  Does the
node depend on other nodes.

";

%feature("docstring") casadi::SetNonzeros::getNormF "[INTERNAL]  Frobenius
norm.

";

%feature("docstring") casadi::SetNonzeros::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") casadi::SetNonzeros::getVertsplit "[INTERNAL]  Create
a vertical split node (vectors only)

";

%feature("docstring") casadi::SetNonzeros::setDependencies "

>  void casadi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void casadi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") casadi::SetNonzeros::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") casadi::SetNonzeros::getMultiplication "[INTERNAL]
Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") casadi::SetNonzeros::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") casadi::SetNonzeros::isOutputNode "[INTERNAL]  Check
if evaluation output.

";

%feature("docstring") casadi::SetNonzeros::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::SetNonzeros::isNonLinear "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring") casadi::SetNonzeros::isMultipleOutput "[INTERNAL]
Check if a multiple output node.

";

%feature("docstring") casadi::SetNonzeros::dep "

>  const MX & casadi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & casadi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::SetNonzeros::sameOpAndDeps "[INTERNAL]
Checks if two nodes have the same operation and have equivalent dependencies
up to a given depth.

";

%feature("docstring") casadi::SetNonzeros::print "

>  void casadi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void casadi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") casadi::SetNonzeros::assign "

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") casadi::SetNonzeros::evaluateD "[INTERNAL]  Evaluate
numerically.

";

%feature("docstring") casadi::SetNonzeros::getNumOutputs "[INTERNAL]
Number of outputs.

";

%feature("docstring") casadi::SetNonzeros::SetNonzeros "[INTERNAL]
Constructor.

";

%feature("docstring") casadi::SetNonzeros::clone "[INTERNAL]  Clone
function.

";

%feature("docstring") casadi::SetNonzeros::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") casadi::SetNonzeros::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") casadi::SetNonzeros::getFunctionOutput "[INTERNAL]
Get function output.

";

%feature("docstring") casadi::SetNonzeros::getNormInf "[INTERNAL]  Infinity
norm.

";

%feature("docstring") casadi::SetNonzeros::deepCopyMembers "[INTERNAL]
Deep copy data members.

";

%feature("docstring") casadi::SetNonzeros::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") casadi::SetNonzeros::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::SetNonzeros::evaluateSX "[INTERNAL]  Evaluate
symbolically (SX)

";

%feature("docstring") casadi::SetNonzeros::getOutput "[INTERNAL]  Get an
output.

";

%feature("docstring") casadi::SetNonzeros::getSolve "[INTERNAL]   Solve a
system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") casadi::SetNonzeros::size "[INTERNAL] ";

%feature("docstring") casadi::SetNonzeros::shape "[INTERNAL] ";

%feature("docstring") casadi::SetNonzeros::getAddNonzeros "[INTERNAL]  Add
the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::SetNonzeros::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") casadi::SetNonzeros::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") casadi::SetNonzeros::getMatrixValue "[INTERNAL]  Get
the value (only for constant nodes)

";

%feature("docstring") casadi::SetNonzeros::propagateSparsity "

>  virtual void casadi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity.

>  void casadi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity, no work.

";

%feature("docstring") casadi::SetNonzeros::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") casadi::SetNonzeros::getSetNonzeros "[INTERNAL]
Assign the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::SetNonzeros::size1 "[INTERNAL] ";

%feature("docstring") casadi::SetNonzeros::size2 "[INTERNAL] ";

%feature("docstring") casadi::SetNonzeros::isEqual "[INTERNAL]  Check if
two nodes are equivalent up to a given depth.

";

%feature("docstring") casadi::SetNonzeros::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") casadi::SetNonzeros::getSubRef "[INTERNAL]  Get
submatrix reference.

";

%feature("docstring") casadi::SetNonzeros::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") casadi::SetNonzeros::~SetNonzeros "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::SetNonzeros::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") casadi::SetNonzeros::getAll "[INTERNAL]  Get all the
nonzeros.

";

%feature("docstring") casadi::SetNonzeros::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") casadi::SetNonzeros::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") casadi::SetNonzeros::getSetSparse "[INTERNAL]  Create
set sparse.

";

%feature("docstring") casadi::SetNonzeros::evaluateMX "

>  void casadi::SetNonzeros< Add >::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void casadi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") casadi::SetNonzeros::isUnaryOp "[INTERNAL]  Check if
unary operation.

";

%feature("docstring") casadi::SetNonzeros::getFunctionInput "[INTERNAL]
Get function input.

";

%feature("docstring") casadi::SetNonzeros::assertInit "[INTERNAL]  Assert
that the object has been initialized.

";

%feature("docstring") casadi::SetNonzeros::getBinary "[INTERNAL]  Get a
binary operation operation (matrix-matrix)

";

%feature("docstring") casadi::SetNonzeros::getUnary "[INTERNAL]  Get a
unary operation.

";

%feature("docstring") casadi::SetNonzeros::getName "[INTERNAL]  Get the
name.

";

%feature("docstring") casadi::SetNonzeros::printPart "[INTERNAL]  Print a
part of the expression.

";

%feature("docstring") casadi::SetNonzeros::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") casadi::SetNonzeros::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") casadi::SetNonzeros::simplifyMe "[INTERNAL]  Simplify
the expression (ex is a reference to the node)

";

%feature("docstring") casadi::SetNonzeros::getFunction "[INTERNAL]  Get
function reference.

";

%feature("docstring") casadi::SetNonzeros::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") casadi::SetNonzeros::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") casadi::SetNonzeros::sparsity "

>  const Sparsity& casadi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & casadi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") casadi::SetNonzeros "[INTERNAL]  Assign or add
entries to a matrix.

Joel Andersson

C++ includes: setnonzeros.hpp ";


// File: classcasadi_1_1SetNonzerosSlice.xml
%feature("docstring") casadi::SetNonzerosSlice::evaluateMX "

>  void casadi::SetNonzeros< Add >::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void casadi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") casadi::SetNonzerosSlice::isInit "[INTERNAL]  Check
if the object has been initialized.

";

%feature("docstring") casadi::SetNonzerosSlice "[INTERNAL] C++ includes:
setnonzeros.hpp ";

%feature("docstring") casadi::SetNonzerosSlice::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") casadi::SetNonzerosSlice::mapping "[INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") casadi::SetNonzerosSlice::propagateSparsity "[INTERNAL]  Propagate sparsity.

";

%feature("docstring") casadi::SetNonzerosSlice::addDependency "[INTERNAL]
Add a dependency.

";

%feature("docstring") casadi::SetNonzerosSlice::getOutput "[INTERNAL]  Get
an output.

";

%feature("docstring") casadi::SetNonzerosSlice::size2 "[INTERNAL] ";

%feature("docstring") casadi::SetNonzerosSlice::getSubAssign "[INTERNAL]
Get submatrix assignment.

";

%feature("docstring") casadi::SetNonzerosSlice::getSetSparse "[INTERNAL]
Create set sparse.

";

%feature("docstring") casadi::SetNonzerosSlice::isAssignment "[INTERNAL]
Check if the instance is in fact a simple assignment.

";

%feature("docstring") casadi::SetNonzerosSlice::numel "[INTERNAL]  Get
shape.

";

%feature("docstring") casadi::SetNonzerosSlice::getSolve "[INTERNAL]
Solve a system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") casadi::SetNonzerosSlice::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") casadi::SetNonzerosSlice::getReshape "[INTERNAL]
Reshape.

";

%feature("docstring") casadi::SetNonzerosSlice::getHorzcat "[INTERNAL]
Create a horizontal concatenation node.

";

%feature("docstring") casadi::SetNonzerosSlice::__nonzero__ "[INTERNAL]
Check the truth value of this node.

";

%feature("docstring") casadi::SetNonzerosSlice::SetNonzerosSlice "[INTERNAL]  Constructor.

";

%feature("docstring") casadi::SetNonzerosSlice::evaluateSX "[INTERNAL]
Evaluate the function symbolically (SX)

";

%feature("docstring") casadi::SetNonzerosSlice::getMultiplication "[INTERNAL]   Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") casadi::SetNonzerosSlice::shape "[INTERNAL] ";

%feature("docstring") casadi::SetNonzerosSlice::size1 "[INTERNAL] ";

%feature("docstring") casadi::SetNonzerosSlice::getCount "[INTERNAL]  Get
the reference count.

";

%feature("docstring") casadi::SetNonzerosSlice::getFunction "[INTERNAL]
Get function reference.

";

%feature("docstring") casadi::SetNonzerosSlice::clone "[INTERNAL]  Clone
function.

";

%feature("docstring") casadi::SetNonzerosSlice::getNorm2 "[INTERNAL]
Spectral norm.

";

%feature("docstring") casadi::SetNonzerosSlice::getSubRef "[INTERNAL]  Get
submatrix reference.

";

%feature("docstring") casadi::SetNonzerosSlice::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") casadi::SetNonzerosSlice::getInnerProd "[INTERNAL]
Inner product.

";

%feature("docstring") casadi::SetNonzerosSlice::getFunctionInput "[INTERNAL]  Get function input.

";

%feature("docstring") casadi::SetNonzerosSlice::isZero "[INTERNAL]  Check
if identically zero.

";

%feature("docstring") casadi::SetNonzerosSlice::size "[INTERNAL] ";

%feature("docstring") casadi::SetNonzerosSlice::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") casadi::SetNonzerosSlice::isMultipleOutput "[INTERNAL]  Check if a multiple output node.

";

%feature("docstring") casadi::SetNonzerosSlice::getUnary "[INTERNAL]  Get a
unary operation.

";

%feature("docstring") casadi::SetNonzerosSlice::getAddNonzeros "[INTERNAL]
Add the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::SetNonzerosSlice::isValue "[INTERNAL]  Check
if a certain value.

";

%feature("docstring") casadi::SetNonzerosSlice::sameOpAndDeps "[INTERNAL]
Checks if two nodes have the same operation and have equivalent dependencies
up to a given depth.

";

%feature("docstring") casadi::SetNonzerosSlice::assertInit "[INTERNAL]
Assert that the object has been initialized.

";

%feature("docstring") casadi::SetNonzerosSlice::sparsity "

>  const Sparsity& casadi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & casadi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") casadi::SetNonzerosSlice::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") casadi::SetNonzerosSlice::isNonLinear "[INTERNAL]  Is
the node nonlinear.

";

%feature("docstring") casadi::SetNonzerosSlice::nTmp "[INTERNAL]  Get
number of temporary variables needed.

";

%feature("docstring") casadi::SetNonzerosSlice::evaluateD "[INTERNAL]
Evaluate the function numerically.

";

%feature("docstring") casadi::SetNonzerosSlice::getNorm1 "[INTERNAL]
1-norm

";

%feature("docstring") casadi::SetNonzerosSlice::getNormInf "[INTERNAL]
Infinity norm.

";

%feature("docstring") casadi::SetNonzerosSlice::getBinary "[INTERNAL]  Get
a binary operation operation (matrix-matrix)

";

%feature("docstring") casadi::SetNonzerosSlice::isUnaryOp "[INTERNAL]
Check if unary operation.

";

%feature("docstring") casadi::SetNonzerosSlice::print "

>  void casadi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void casadi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") casadi::SetNonzerosSlice::getNumOutputs "[INTERNAL]
Number of outputs.

";

%feature("docstring") casadi::SetNonzerosSlice::getFunctionOutput "[INTERNAL]  Get function output.

";

%feature("docstring") casadi::SetNonzerosSlice::getSetNonzeros "[INTERNAL]
Assign the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::SetNonzerosSlice::getMatrixValue "[INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring") casadi::SetNonzerosSlice::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") casadi::SetNonzerosSlice::numInplace "[INTERNAL]  Can
the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") casadi::SetNonzerosSlice::isOutputNode "[INTERNAL]
Check if evaluation output.

";

%feature("docstring") casadi::SetNonzerosSlice::deepCopyMembers "[INTERNAL]
Deep copy data members.

";

%feature("docstring") casadi::SetNonzerosSlice::hasDep "[INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring") casadi::SetNonzerosSlice::evaluateGen "[INTERNAL]
Evaluate the function (template)

";

%feature("docstring") casadi::SetNonzerosSlice::getNormF "[INTERNAL]
Frobenius norm.

";

%feature("docstring") casadi::SetNonzerosSlice::isEqual "[INTERNAL]  Check
if two nodes are equivalent up to a given depth.

";

%feature("docstring") casadi::SetNonzerosSlice::setSparsity "[INTERNAL]
Set the sparsity.

";

%feature("docstring") casadi::SetNonzerosSlice::assign "

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") casadi::SetNonzerosSlice::printPart "[INTERNAL]
Print a part of the expression */.

";

%feature("docstring") casadi::SetNonzerosSlice::setDependencies "

>  void casadi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void casadi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") casadi::SetNonzerosSlice::~SetNonzerosSlice "[INTERNAL]  Destructor.

";

%feature("docstring") casadi::SetNonzerosSlice::getVertcat "[INTERNAL]
Create a vertical concatenation node (vectors only)

";

%feature("docstring") casadi::SetNonzerosSlice::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") casadi::SetNonzerosSlice::getHorzsplit "[INTERNAL]
Create a horizontal split node.

";

%feature("docstring") casadi::SetNonzerosSlice::getAll "[INTERNAL]  Get all
the nonzeros.

";

%feature("docstring") casadi::SetNonzerosSlice::getInverse "[INTERNAL]
Inverse.

";

%feature("docstring") casadi::SetNonzerosSlice::getBinarySwitch "[INTERNAL]
Get a binary operation operation.

";

%feature("docstring") casadi::SetNonzerosSlice::getGetNonzeros "[INTERNAL]
Get the nonzeros of matrix.

";

%feature("docstring") casadi::SetNonzerosSlice::generateOperation "[INTERNAL]  Generate code for the operation.

";

%feature("docstring") casadi::SetNonzerosSlice::simplifyMe "[INTERNAL]
Simplify.

";

%feature("docstring") casadi::SetNonzerosSlice::isIdentity "[INTERNAL]
Check if identity matrix.

";

%feature("docstring") casadi::SetNonzerosSlice::getValue "[INTERNAL]  Get
the value (only for scalar constant nodes)

";

%feature("docstring") casadi::SetNonzerosSlice::dep "

>  const MX & casadi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & casadi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::SetNonzerosSlice::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") casadi::SetNonzerosSlice::getName "[INTERNAL]  Get
the name.

";

%feature("docstring") casadi::SetNonzerosSlice::getVertsplit "[INTERNAL]
Create a vertical split node (vectors only)

";

%feature("docstring") casadi::SetNonzerosSlice::init "[INTERNAL]
Initialize the object.

";

%feature("docstring") casadi::SetNonzerosSlice::isBinaryOp "[INTERNAL]
Check if binary operation.

";


// File: classcasadi_1_1SetNonzerosSlice2.xml
%feature("docstring") casadi::SetNonzerosSlice2::getMultiplication "[INTERNAL]   Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") casadi::SetNonzerosSlice2::getNumOutputs "[INTERNAL]
Number of outputs.

";

%feature("docstring") casadi::SetNonzerosSlice2::getMatrixValue "[INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring") casadi::SetNonzerosSlice2::sparsity "

>  const Sparsity& casadi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & casadi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") casadi::SetNonzerosSlice2::generateOperation "[INTERNAL]  Generate code for the operation.

";

%feature("docstring") casadi::SetNonzerosSlice2::shape "[INTERNAL] ";

%feature("docstring") casadi::SetNonzerosSlice2::SetNonzerosSlice2 "[INTERNAL]  Constructor.

";

%feature("docstring") casadi::SetNonzerosSlice2::getHorzcat "[INTERNAL]
Create a horizontal concatenation node.

";

%feature("docstring") casadi::SetNonzerosSlice2::hasDep "[INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring") casadi::SetNonzerosSlice2::dep "

>  const MX & casadi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & casadi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::SetNonzerosSlice2::size2 "[INTERNAL] ";

%feature("docstring") casadi::SetNonzerosSlice2::deepCopyMembers "[INTERNAL]  Deep copy data members.

";

%feature("docstring") casadi::SetNonzerosSlice2::getNorm2 "[INTERNAL]
Spectral norm.

";

%feature("docstring") casadi::SetNonzerosSlice2::getNormF "[INTERNAL]
Frobenius norm.

";

%feature("docstring") casadi::SetNonzerosSlice2::getBinarySwitch "[INTERNAL]  Get a binary operation operation.

";

%feature("docstring") casadi::SetNonzerosSlice2::isOutputNode "[INTERNAL]
Check if evaluation output.

";

%feature("docstring") casadi::SetNonzerosSlice2::evaluateGen "[INTERNAL]
Evaluate the function (template)

";

%feature("docstring") casadi::SetNonzerosSlice2::evaluateSX "[INTERNAL]
Evaluate the function symbolically (SX)

";

%feature("docstring") casadi::SetNonzerosSlice2::isNonLinear "[INTERNAL]
Is the node nonlinear.

";

%feature("docstring") casadi::SetNonzerosSlice2::simplifyMe "[INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring") casadi::SetNonzerosSlice2::setDependencies "

>  void casadi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void casadi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") casadi::SetNonzerosSlice2::getNormInf "[INTERNAL]
Infinity norm.

";

%feature("docstring") casadi::SetNonzerosSlice2::getAddNonzeros "[INTERNAL]
Add the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::SetNonzerosSlice2::assertInit "[INTERNAL]
Assert that the object has been initialized.

";

%feature("docstring") casadi::SetNonzerosSlice2::__nonzero__ "[INTERNAL]
Check the truth value of this node.

";

%feature("docstring") casadi::SetNonzerosSlice2::isOne "[INTERNAL]  Check
if identically one.

";

%feature("docstring") casadi::SetNonzerosSlice2::isZero "[INTERNAL]  Check
if identically zero.

";

%feature("docstring") casadi::SetNonzerosSlice2::getUnary "[INTERNAL]  Get
a unary operation.

";

%feature("docstring") casadi::SetNonzerosSlice2::size "[INTERNAL] ";

%feature("docstring") casadi::SetNonzerosSlice2::getReshape "[INTERNAL]
Reshape.

";

%feature("docstring") casadi::SetNonzerosSlice2::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") casadi::SetNonzerosSlice2::getInverse "[INTERNAL]
Inverse.

";

%feature("docstring") casadi::SetNonzerosSlice2::getAll "[INTERNAL]  Get
all the nonzeros.

";

%feature("docstring") casadi::SetNonzerosSlice2::print "

>  void casadi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void casadi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") casadi::SetNonzerosSlice2::numel "[INTERNAL]  Get
shape.

";

%feature("docstring") casadi::SetNonzerosSlice2::isBinaryOp "[INTERNAL]
Check if binary operation.

";

%feature("docstring") casadi::SetNonzerosSlice2::size1 "[INTERNAL] ";

%feature("docstring") casadi::SetNonzerosSlice2::getFunctionOutput "[INTERNAL]  Get function output.

";

%feature("docstring") casadi::SetNonzerosSlice2::getFunction "[INTERNAL]
Get function reference.

";

%feature("docstring") casadi::SetNonzerosSlice2 "[INTERNAL] C++ includes:
setnonzeros.hpp ";

%feature("docstring") casadi::SetNonzerosSlice2::getGetNonzeros "[INTERNAL]
Get the nonzeros of matrix.

";

%feature("docstring") casadi::SetNonzerosSlice2::isValue "[INTERNAL]  Check
if a certain value.

";

%feature("docstring") casadi::SetNonzerosSlice2::propagateSparsity "[INTERNAL]  Propagate sparsity.

";

%feature("docstring") casadi::SetNonzerosSlice2::clone "[INTERNAL]  Clone
function.

";

%feature("docstring") casadi::SetNonzerosSlice2::getSetSparse "[INTERNAL]
Create set sparse.

";

%feature("docstring") casadi::SetNonzerosSlice2::getBinary "[INTERNAL]  Get
a binary operation operation (matrix-matrix)

";

%feature("docstring") casadi::SetNonzerosSlice2::getSolve "[INTERNAL]
Solve a system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") casadi::SetNonzerosSlice2::assign "

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") casadi::SetNonzerosSlice2::isMultipleOutput "[INTERNAL]  Check if a multiple output node.

";

%feature("docstring") casadi::SetNonzerosSlice2::setSparsity "[INTERNAL]
Set the sparsity.

";

%feature("docstring") casadi::SetNonzerosSlice2::isEqual "[INTERNAL]  Check
if two nodes are equivalent up to a given depth.

";

%feature("docstring") casadi::SetNonzerosSlice2::mapping "[INTERNAL]  Get
an IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") casadi::SetNonzerosSlice2::getVertsplit "[INTERNAL]
Create a vertical split node (vectors only)

";

%feature("docstring") casadi::SetNonzerosSlice2::addDependency "[INTERNAL]
Add a dependency.

";

%feature("docstring") casadi::SetNonzerosSlice2::getNorm1 "[INTERNAL]
1-norm

";

%feature("docstring") casadi::SetNonzerosSlice2::evaluateMX "

>  void casadi::SetNonzeros< Add >::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void casadi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") casadi::SetNonzerosSlice2::isUnaryOp "[INTERNAL]
Check if unary operation.

";

%feature("docstring") casadi::SetNonzerosSlice2::init "[INTERNAL]
Initialize the object.

";

%feature("docstring") casadi::SetNonzerosSlice2::getVertcat "[INTERNAL]
Create a vertical concatenation node (vectors only)

";

%feature("docstring") casadi::SetNonzerosSlice2::getHorzsplit "[INTERNAL]
Create a horizontal split node.

";

%feature("docstring") casadi::SetNonzerosSlice2::evaluateD "[INTERNAL]
Evaluate the function numerically.

";

%feature("docstring") casadi::SetNonzerosSlice2::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") casadi::SetNonzerosSlice2::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") casadi::SetNonzerosSlice2::numInplace "[INTERNAL]
Can the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") casadi::SetNonzerosSlice2::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") casadi::SetNonzerosSlice2::getValue "[INTERNAL]  Get
the value (only for scalar constant nodes)

";

%feature("docstring") casadi::SetNonzerosSlice2::isIdentity "[INTERNAL]
Check if identity matrix.

";

%feature("docstring") casadi::SetNonzerosSlice2::getCount "[INTERNAL]  Get
the reference count.

";

%feature("docstring") casadi::SetNonzerosSlice2::getInnerProd "[INTERNAL]
Inner product.

";

%feature("docstring") casadi::SetNonzerosSlice2::getSubAssign "[INTERNAL]
Get submatrix assignment.

";

%feature("docstring") casadi::SetNonzerosSlice2::sameOpAndDeps "[INTERNAL]
Checks if two nodes have the same operation and have equivalent dependencies
up to a given depth.

";

%feature("docstring") casadi::SetNonzerosSlice2::isInit "[INTERNAL]  Check
if the object has been initialized.

";

%feature("docstring") casadi::SetNonzerosSlice2::printPart "[INTERNAL]
Print a part of the expression */.

";

%feature("docstring") casadi::SetNonzerosSlice2::getName "[INTERNAL]  Get
the name.

";

%feature("docstring") casadi::SetNonzerosSlice2::getOutput "[INTERNAL]  Get
an output.

";

%feature("docstring") casadi::SetNonzerosSlice2::getSetNonzeros "[INTERNAL]
Assign the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::SetNonzerosSlice2::nTmp "[INTERNAL]  Get
number of temporary variables needed.

";

%feature("docstring") casadi::SetNonzerosSlice2::getSubRef "[INTERNAL]  Get
submatrix reference.

";

%feature("docstring") casadi::SetNonzerosSlice2::ndep "[INTERNAL]  Number
of dependencies.

";

%feature("docstring") casadi::SetNonzerosSlice2::~SetNonzerosSlice2 "[INTERNAL]  Destructor.

";

%feature("docstring") casadi::SetNonzerosSlice2::getFunctionInput "[INTERNAL]  Get function input.

";

%feature("docstring") casadi::SetNonzerosSlice2::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") casadi::SetNonzerosSlice2::repr "[INTERNAL]  Print a
representation.

";


// File: classcasadi_1_1SetNonzerosVector.xml
%feature("docstring") casadi::SetNonzerosVector::getVertsplit "[INTERNAL]
Create a vertical split node (vectors only)

";

%feature("docstring") casadi::SetNonzerosVector::ndep "[INTERNAL]  Number
of dependencies.

";

%feature("docstring") casadi::SetNonzerosVector::evaluateD "[INTERNAL]
Evaluate the function numerically.

";

%feature("docstring") casadi::SetNonzerosVector::getGetNonzeros "[INTERNAL]
Get the nonzeros of matrix.

";

%feature("docstring") casadi::SetNonzerosVector::getUnary "[INTERNAL]  Get
a unary operation.

";

%feature("docstring") casadi::SetNonzerosVector::getBinarySwitch "[INTERNAL]  Get a binary operation operation.

";

%feature("docstring") casadi::SetNonzerosVector::isValue "[INTERNAL]  Check
if a certain value.

";

%feature("docstring") casadi::SetNonzerosVector::hasDep "[INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring") casadi::SetNonzerosVector::evaluateGen "[INTERNAL]
Evaluate the function (template)

";

%feature("docstring") casadi::SetNonzerosVector::propagateSparsity "[INTERNAL]  Propagate sparsity.

";

%feature("docstring") casadi::SetNonzerosVector::dep "

>  const MX & casadi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & casadi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::SetNonzerosVector::getMultiplication "[INTERNAL]   Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") casadi::SetNonzerosVector::shape "[INTERNAL] ";

%feature("docstring") casadi::SetNonzerosVector::printPart "[INTERNAL]
Print a part of the expression */.

";

%feature("docstring") casadi::SetNonzerosVector::getName "[INTERNAL]  Get
the name.

";

%feature("docstring") casadi::SetNonzerosVector::getInverse "[INTERNAL]
Inverse.

";

%feature("docstring") casadi::SetNonzerosVector::getFunctionOutput "[INTERNAL]  Get function output.

";

%feature("docstring") casadi::SetNonzerosVector::getHorzcat "[INTERNAL]
Create a horizontal concatenation node.

";

%feature("docstring") casadi::SetNonzerosVector::getFunctionInput "[INTERNAL]  Get function input.

";

%feature("docstring") casadi::SetNonzerosVector::isOne "[INTERNAL]  Check
if identically one.

";

%feature("docstring") casadi::SetNonzerosVector::getMatrixValue "[INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring") casadi::SetNonzerosVector::__nonzero__ "[INTERNAL]
Check the truth value of this node.

";

%feature("docstring") casadi::SetNonzerosVector::addDependency "[INTERNAL]
Add a dependency.

";

%feature("docstring") casadi::SetNonzerosVector::isUnaryOp "[INTERNAL]
Check if unary operation.

";

%feature("docstring") casadi::SetNonzerosVector::simplifyMe "[INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring") casadi::SetNonzerosVector::getNormInf "[INTERNAL]
Infinity norm.

";

%feature("docstring") casadi::SetNonzerosVector::SetNonzerosVector "[INTERNAL]  Constructor.

";

%feature("docstring") casadi::SetNonzerosVector::isBinaryOp "[INTERNAL]
Check if binary operation.

";

%feature("docstring") casadi::SetNonzerosVector::mapping "[INTERNAL]  Get
an IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") casadi::SetNonzerosVector::getSetNonzeros "[INTERNAL]
Assign the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::SetNonzerosVector::setDependencies "

>  void casadi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void casadi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") casadi::SetNonzerosVector::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") casadi::SetNonzerosVector::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") casadi::SetNonzerosVector::getNumOutputs "[INTERNAL]
Number of outputs.

";

%feature("docstring") casadi::SetNonzerosVector::getOutput "[INTERNAL]  Get
an output.

";

%feature("docstring") casadi::SetNonzerosVector::assertInit "[INTERNAL]
Assert that the object has been initialized.

";

%feature("docstring") casadi::SetNonzerosVector::isZero "[INTERNAL]  Check
if identically zero.

";

%feature("docstring") casadi::SetNonzerosVector::isMultipleOutput "[INTERNAL]  Check if a multiple output node.

";

%feature("docstring") casadi::SetNonzerosVector::setSparsity "[INTERNAL]
Set the sparsity.

";

%feature("docstring") casadi::SetNonzerosVector::isNonLinear "[INTERNAL]
Is the node nonlinear.

";

%feature("docstring") casadi::SetNonzerosVector::nTmp "[INTERNAL]  Get
number of temporary variables needed.

";

%feature("docstring") casadi::SetNonzerosVector::generateOperation "[INTERNAL]  Generate code for the operation.

";

%feature("docstring") casadi::SetNonzerosVector::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") casadi::SetNonzerosVector::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") casadi::SetNonzerosVector::getAll "[INTERNAL]  Get
all the nonzeros.

";

%feature("docstring") casadi::SetNonzerosVector::assign "

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") casadi::SetNonzerosVector::clone "[INTERNAL]  Clone
function.

";

%feature("docstring") casadi::SetNonzerosVector::getNorm1 "[INTERNAL]
1-norm

";

%feature("docstring") casadi::SetNonzerosVector::getInnerProd "[INTERNAL]
Inner product.

";

%feature("docstring") casadi::SetNonzerosVector::getHorzsplit "[INTERNAL]
Create a horizontal split node.

";

%feature("docstring") casadi::SetNonzerosVector::numel "[INTERNAL]  Get
shape.

";

%feature("docstring") casadi::SetNonzerosVector "[INTERNAL]  Add the
nonzeros of a matrix to another matrix.

Joel Andersson

C++ includes: setnonzeros.hpp ";

%feature("docstring") casadi::SetNonzerosVector::getVertcat "[INTERNAL]
Create a vertical concatenation node (vectors only)

";

%feature("docstring") casadi::SetNonzerosVector::getBinary "[INTERNAL]  Get
a binary operation operation (matrix-matrix)

";

%feature("docstring") casadi::SetNonzerosVector::deepCopyMembers "[INTERNAL]  Deep copy data members.

";

%feature("docstring") casadi::SetNonzerosVector::size "[INTERNAL] ";

%feature("docstring") casadi::SetNonzerosVector::getSubAssign "[INTERNAL]
Get submatrix assignment.

";

%feature("docstring") casadi::SetNonzerosVector::isInit "[INTERNAL]  Check
if the object has been initialized.

";

%feature("docstring") casadi::SetNonzerosVector::sparsity "

>  const Sparsity& casadi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & casadi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") casadi::SetNonzerosVector::numInplace "[INTERNAL]
Can the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") casadi::SetNonzerosVector::size1 "[INTERNAL] ";

%feature("docstring") casadi::SetNonzerosVector::getSubRef "[INTERNAL]  Get
submatrix reference.

";

%feature("docstring") casadi::SetNonzerosVector::init "[INTERNAL]
Initialize the object.

";

%feature("docstring") casadi::SetNonzerosVector::size2 "[INTERNAL] ";

%feature("docstring") casadi::SetNonzerosVector::getValue "[INTERNAL]  Get
the value (only for scalar constant nodes)

";

%feature("docstring") casadi::SetNonzerosVector::getAddNonzeros "[INTERNAL]
Add the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::SetNonzerosVector::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") casadi::SetNonzerosVector::getCount "[INTERNAL]  Get
the reference count.

";

%feature("docstring") casadi::SetNonzerosVector::getFunction "[INTERNAL]
Get function reference.

";

%feature("docstring") casadi::SetNonzerosVector::getNormF "[INTERNAL]
Frobenius norm.

";

%feature("docstring") casadi::SetNonzerosVector::evaluateSX "[INTERNAL]
Evaluate the function symbolically (SX)

";

%feature("docstring") casadi::SetNonzerosVector::getSolve "[INTERNAL]
Solve a system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") casadi::SetNonzerosVector::getReshape "[INTERNAL]
Reshape.

";

%feature("docstring") casadi::SetNonzerosVector::getNorm2 "[INTERNAL]
Spectral norm.

";

%feature("docstring") casadi::SetNonzerosVector::isEqual "[INTERNAL]  Check
if two nodes are equivalent up to a given depth.

";

%feature("docstring") casadi::SetNonzerosVector::getSetSparse "[INTERNAL]
Create set sparse.

";

%feature("docstring") casadi::SetNonzerosVector::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") casadi::SetNonzerosVector::evaluateMX "

>  void casadi::SetNonzeros< Add >::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void casadi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") casadi::SetNonzerosVector::~SetNonzerosVector "[INTERNAL]  Destructor.

";

%feature("docstring") casadi::SetNonzerosVector::sameOpAndDeps "[INTERNAL]
Checks if two nodes have the same operation and have equivalent dependencies
up to a given depth.

";

%feature("docstring") casadi::SetNonzerosVector::isIdentity "[INTERNAL]
Check if identity matrix.

";

%feature("docstring") casadi::SetNonzerosVector::isOutputNode "[INTERNAL]
Check if evaluation output.

";

%feature("docstring") casadi::SetNonzerosVector::print "

>  void casadi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void casadi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";


// File: classcasadi_1_1SetSparse.xml
%feature("docstring") casadi::SetSparse::getBinary "[INTERNAL]  Get a
binary operation operation (matrix-matrix)

";

%feature("docstring") casadi::SetSparse::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") casadi::SetSparse "[INTERNAL]  Change the sparsity of
an expression.

Joel Andersson

C++ includes: set_sparse.hpp ";

%feature("docstring") casadi::SetSparse::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::SetSparse::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") casadi::SetSparse::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring") casadi::SetSparse::simplifyMe "[INTERNAL]  Simplify
the expression (ex is a reference to the node)

";

%feature("docstring") casadi::SetSparse::getSubRef "[INTERNAL]  Get
submatrix reference.

";

%feature("docstring") casadi::SetSparse::propagateSparsity "[INTERNAL]
Propagate sparsity.

";

%feature("docstring") casadi::SetSparse::getVertsplit "[INTERNAL]  Create a
vertical split node (vectors only)

";

%feature("docstring") casadi::SetSparse::~SetSparse "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::SetSparse::getAddNonzeros "[INTERNAL]  Add
the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::SetSparse::dep "

>  const MX & casadi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & casadi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::SetSparse::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") casadi::SetSparse::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") casadi::SetSparse::clone "[INTERNAL]  Clone function.

";

%feature("docstring") casadi::SetSparse::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") casadi::SetSparse::evaluateMX "

>  void casadi::SetSparse::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void casadi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") casadi::SetSparse::isUnaryOp "[INTERNAL]  Check if
unary operation.

";

%feature("docstring") casadi::SetSparse::evaluateD "[INTERNAL]  Evaluate
the function numerically.

";

%feature("docstring") casadi::SetSparse::printPart "[INTERNAL]  Print a
part of the expression.

";

%feature("docstring") casadi::SetSparse::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") casadi::SetSparse::numel "[INTERNAL]  Get shape.

";

%feature("docstring") casadi::SetSparse::SetSparse "[INTERNAL]
Constructor.

";

%feature("docstring") casadi::SetSparse::getNorm2 "[INTERNAL]  Spectral
norm.

";

%feature("docstring") casadi::SetSparse::getSetSparse "[INTERNAL]  Create
set sparse.

";

%feature("docstring") casadi::SetSparse::setDependencies "

>  void casadi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void casadi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") casadi::SetSparse::size "[INTERNAL] ";

%feature("docstring") casadi::SetSparse::getNormInf "[INTERNAL]  Infinity
norm.

";

%feature("docstring") casadi::SetSparse::hasDep "[INTERNAL]  Does the node
depend on other nodes.

";

%feature("docstring") casadi::SetSparse::getGetNonzeros "[INTERNAL]  Get
the nonzeros of matrix.

";

%feature("docstring") casadi::SetSparse::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") casadi::SetSparse::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") casadi::SetSparse::size2 "[INTERNAL] ";

%feature("docstring") casadi::SetSparse::mapping "[INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") casadi::SetSparse::getBinarySwitch "[INTERNAL]  Get a
binary operation operation.

";

%feature("docstring") casadi::SetSparse::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") casadi::SetSparse::getMatrixValue "[INTERNAL]  Get
the value (only for constant nodes)

";

%feature("docstring") casadi::SetSparse::getOutput "[INTERNAL]  Get an
output.

";

%feature("docstring") casadi::SetSparse::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") casadi::SetSparse::size1 "[INTERNAL] ";

%feature("docstring") casadi::SetSparse::evaluateGen "[INTERNAL]  Evaluate
the function (template)

";

%feature("docstring") casadi::SetSparse::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") casadi::SetSparse::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") casadi::SetSparse::getHorzsplit "[INTERNAL]  Create a
horizontal split node.

";

%feature("docstring") casadi::SetSparse::shape "[INTERNAL] ";

%feature("docstring") casadi::SetSparse::getNumOutputs "[INTERNAL]  Number
of outputs.

";

%feature("docstring") casadi::SetSparse::sparsity "

>  const Sparsity& casadi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & casadi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") casadi::SetSparse::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") casadi::SetSparse::print "

>  void casadi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void casadi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") casadi::SetSparse::getMultiplication "[INTERNAL]
Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") casadi::SetSparse::getFunction "[INTERNAL]  Get
function reference.

";

%feature("docstring") casadi::SetSparse::getSetNonzeros "[INTERNAL]  Assign
the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::SetSparse::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") casadi::SetSparse::getUnary "[INTERNAL]  Get a unary
operation.

";

%feature("docstring") casadi::SetSparse::getValue "[INTERNAL]  Get the
value (only for scalar constant nodes)

";

%feature("docstring") casadi::SetSparse::getFunctionInput "[INTERNAL]  Get
function input.

";

%feature("docstring") casadi::SetSparse::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") casadi::SetSparse::isMultipleOutput "[INTERNAL]
Check if a multiple output node.

";

%feature("docstring") casadi::SetSparse::isOutputNode "[INTERNAL]  Check if
evaluation output.

";

%feature("docstring") casadi::SetSparse::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::SetSparse::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::SetSparse::getInverse "[INTERNAL]   Inverse.

";

%feature("docstring") casadi::SetSparse::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") casadi::SetSparse::getSolve "[INTERNAL]   Solve a
system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") casadi::SetSparse::getNormF "[INTERNAL]  Frobenius
norm.

";

%feature("docstring") casadi::SetSparse::deepCopyMembers "[INTERNAL]  Deep
copy data members.

";

%feature("docstring") casadi::SetSparse::getFunctionOutput "[INTERNAL]  Get
function output.

";

%feature("docstring") casadi::SetSparse::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") casadi::SetSparse::assign "

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") casadi::SetSparse::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") casadi::SetSparse::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") casadi::SetSparse::isNonLinear "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring") casadi::SetSparse::getReshape "[INTERNAL]   Reshape.

";

%feature("docstring") casadi::SetSparse::sameOpAndDeps "[INTERNAL]  Checks
if two nodes have the same operation and have equivalent dependencies up to
a given depth.

";

%feature("docstring") casadi::SetSparse::getName "[INTERNAL]  Get the name.

";

%feature("docstring") casadi::SetSparse::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") casadi::SetSparse::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") casadi::SetSparse::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") casadi::SetSparse::assertInit "[INTERNAL]  Assert
that the object has been initialized.

";

%feature("docstring") casadi::SetSparse::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") casadi::SetSparse::evaluateSX "[INTERNAL]  Evaluate
the function symbolically (SX)

";


// File: classcasadi_1_1SharedObject.xml
%feature("docstring") casadi::SharedObject::isNull "

Is a null pointer?

";

%feature("docstring") casadi::SharedObject::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::SharedObject::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::SharedObject::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::SharedObject::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::SharedObject::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::SharedObject::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::SharedObject::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::SharedObject::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::SharedObject::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") casadi::SharedObject::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::SharedObject::checkNode "[INTERNAL]  Assert
that the node is pointing to the right type of object

";

%feature("docstring") casadi::SharedObject::SharedObject "

>  casadi::SharedObject::SharedObject()
------------------------------------------------------------------------
[INTERNAL] 
Default constructor.

>  casadi::SharedObject::SharedObject(const SharedObject &ref)
------------------------------------------------------------------------
[INTERNAL] 
Copy constructor (shallow copy)

";

%feature("docstring") casadi::SharedObject::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::SharedObject::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::SharedObject::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") casadi::SharedObject::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::SharedObject::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::SharedObject::isInit "

Is initialized?

";

%feature("docstring") casadi::SharedObject::~SharedObject "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::SharedObject "

SharedObject implements a reference counting framework similar for efficient
and easily-maintained memory management.

To use the class, both the SharedObject class (the public class), and the
SharedObjectNode class (the internal class) must be inherited from. It can
be done in two different files and together with memory management, this
approach provides a clear distinction of which methods of the class are to
be considered \"public\", i.e. methods for public use that can be considered
to remain over time with small changes, and the internal memory.

When interfacing a software, which typically includes including some header
file, this is best done only in the file where the internal class is
defined, to avoid polluting the global namespace and other side effects.

The default constructor always means creating a null pointer to an internal
class only. To allocate an internal class (this works only when the internal
class isn't abstract), use the constructor with arguments.

The copy constructor and the assignment operator perform shallow copies
only, to make a deep copy you must use the clone method explicitly. This
will give a shared pointer instance.

In an inheritance hierarchy, you can cast down automatically, e.g. (
SXFunction is a child class of Function): SXFunction derived(...); Function
base = derived;

To cast up, use the shared_cast template function, which works analogously
to dynamic_cast, static_cast, const_cast etc, e.g.: SXFunction derived(...);
Function base = derived; SXFunction derived_from_base =
shared_cast<SXFunction>(base);

A failed shared_cast will result in a null pointer (cf. dynamic_cast)

Joel Andersson

C++ includes: shared_object.hpp ";


// File: classcasadi_1_1SharedObjectNode.xml
%feature("docstring") casadi::SharedObjectNode::getCount "[INTERNAL]  Get
the reference count.

";

%feature("docstring") casadi::SharedObjectNode::SharedObjectNode "

>  casadi::SharedObjectNode::SharedObjectNode()
------------------------------------------------------------------------
[INTERNAL] 
Default constructor.

>  casadi::SharedObjectNode::SharedObjectNode(const SharedObjectNode &node)
------------------------------------------------------------------------
[INTERNAL] 
Copy constructor.

";

%feature("docstring") casadi::SharedObjectNode::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::SharedObjectNode "[INTERNAL]  Internal class
for the reference counting framework, see comments on the public class.

C++ includes: shared_object.hpp ";

%feature("docstring") casadi::SharedObjectNode::isInit "[INTERNAL]  Check
if the object has been initialized.

";

%feature("docstring") casadi::SharedObjectNode::deepCopyMembers "[INTERNAL]
Deep copy data members.

";

%feature("docstring") casadi::SharedObjectNode::init "[INTERNAL]
Initialize the object.

";

%feature("docstring") casadi::SharedObjectNode::~SharedObjectNode "[INTERNAL]  Destructor.

";

%feature("docstring") casadi::SharedObjectNode::clone "[INTERNAL]  Make a
deep copy of the instance.

";

%feature("docstring") casadi::SharedObjectNode::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") casadi::SharedObjectNode::assertInit "[INTERNAL]
Assert that the object has been initialized.

";

%feature("docstring") casadi::SharedObjectNode::print "[INTERNAL]  Print a
description of the object.

";


// File: classcasadi_1_1SimpleHomotopyNLPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::SimpleHomotopyNLPSolver::outputSchemeEntry " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::getOption "

get an option value

";

%feature("docstring")
casadi::SimpleHomotopyNLPSolver::SimpleHomotopyNLPSolver "

>  casadi::SimpleHomotopyNLPSolver::SimpleHomotopyNLPSolver()
------------------------------------------------------------------------

Default constructor.

>  casadi::SimpleHomotopyNLPSolver::SimpleHomotopyNLPSolver(const Function &hnlp)
------------------------------------------------------------------------

Create an NLP solver instance.

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::spEvaluate "[INTERNAL]  Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::inputScheme "[INTERNAL]  Access input/output scheme.

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::input_struct "[INTERNAL]  Input/output structures of the function

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::clone "[INTERNAL]
Deep copy.

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::checkInputs "[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::inputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::schemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::hasOption "

check if there is an option str

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::isNull "

Is a null pointer?

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver "

Solving an NLP homotopy with regular NLP solvers.

Joris Gillis

>Input scheme: casadi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| expand       | OT_BOOLEAN   | false        | Expand the   | casadi::Homo |
|              |              |              | NLP function | topyNLPInter |
|              |              |              | in terms of  | nal          |
|              |              |              | scalar       |              |
|              |              |              | operations,  |              |
|              |              |              | i.e. MX->SX  |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| nlp_solver   | OT_NLPSOLVER | GenericType( | The NLP      | casadi::Simp |
|              |              | )            | solver to be | leHomotopyNL |
|              |              |              | used by the  | PInternal    |
|              |              |              | Homotopy     |              |
|              |              |              | solver       |              |
+--------------+--------------+--------------+--------------+--------------+
| nlp_solver_o | OT_DICTIONAR | GenericType( | Options to   | casadi::Simp |
| ptions       | Y            | )            | be passed to | leHomotopyNL |
|              |              |              | the Homotopy | PInternal    |
|              |              |              | solver       |              |
+--------------+--------------+--------------+--------------+--------------+
| num_steps    | OT_INTEGER   | 10           | Take this    | casadi::Simp |
|              |              |              | many steps   | leHomotopyNL |
|              |              |              | to go from   | PInternal    |
|              |              |              | tau=0 to     |              |
|              |              |              | tau=1.       |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: simple_homotopy_nlp_solver.hpp ";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::isInit "

Is initialized?

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::printPtr "[INTERNAL]
Print the pointer to the internal class

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::assignNodeNoCount "[INTERNAL]  Assign the node to a node class pointer without reference
counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::spCanEvaluate "[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::getNumOutputElements
"

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::evaluate "

Evaluate.

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::swap "[INTERNAL]
Swap content with another instance.

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::getCount "[INTERNAL]
Get the reference count.

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::weak "[INTERNAL]
Get a weak reference to the object.

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::setOptionByEnumValue
"[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::output_struct "[INTERNAL]  Input/output structures of the function

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::spInit "[INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::assertInit "[INTERNAL]  Assert that it is initialized

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::printOptions "

Print options to a stream.

";

%feature("docstring")
casadi::SimpleHomotopyNLPSolver::setOptionByAllowedIndex "[INTERNAL]  Set a
certain option by giving its index into the allowed values.

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::getOptionAllowedIndex
"[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::callDerivative "[INTERNAL]  Evaluate the function symbolically or numerically with
directional derivatives The first two arguments are the nondifferentiated
inputs and results of the evaluation, the next two arguments are a set of
forward directional seeds and the resulting forward directional derivatives,
the length of the vector being the number of forward directions. The next
two arguments are a set of adjoint directional seeds and the resulting
adjoint directional derivatives, the length of the vector being the number
of adjoint directions.

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::getOptionDescription
"

Get the description of a certain option.

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::outputScheme "[INTERNAL]  Access input/output scheme.

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::getNumOutputNonzeros
"

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::assignNode "[INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver::repr "[INTERNAL]
Print a representation of the object.

";


// File: classcasadi_1_1SimpleIndefDpleSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::SimpleIndefDpleSolver::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::SimpleIndefDpleSolver::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::SimpleIndefDpleSolver::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::SimpleIndefDpleSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::SimpleIndefDpleSolver::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::SimpleIndefDpleSolver::outputScheme "[INTERNAL]  Access input/output scheme.

";

%feature("docstring") casadi::SimpleIndefDpleSolver::SimpleIndefDpleSolver "

>  casadi::SimpleIndefDpleSolver::SimpleIndefDpleSolver()
------------------------------------------------------------------------

Default constructor.

>  casadi::SimpleIndefDpleSolver::SimpleIndefDpleSolver(const std::vector< Sparsity > &A, const std::vector< Sparsity > &V)
------------------------------------------------------------------------

Constructor.

Parameters:
-----------

A:  List of sparsities of A_i

V:  List of sparsities of V_i

";

%feature("docstring") casadi::SimpleIndefDpleSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::SimpleIndefDpleSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::SimpleIndefDpleSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::SimpleIndefDpleSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::SimpleIndefDpleSolver::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::SimpleIndefDpleSolver::outputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SimpleIndefDpleSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::SimpleIndefDpleSolver::callDerivative "[INTERNAL]  Evaluate the function symbolically or numerically with
directional derivatives The first two arguments are the nondifferentiated
inputs and results of the evaluation, the next two arguments are a set of
forward directional seeds and the resulting forward directional derivatives,
the length of the vector being the number of forward directions. The next
two arguments are a set of adjoint directional seeds and the resulting
adjoint directional derivatives, the length of the vector being the number
of adjoint directions.

";

%feature("docstring") casadi::SimpleIndefDpleSolver::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::SimpleIndefDpleSolver::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::SimpleIndefDpleSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::SimpleIndefDpleSolver::evaluate "

Evaluate.

";

%feature("docstring") casadi::SimpleIndefDpleSolver::schemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SimpleIndefDpleSolver::printPtr "[INTERNAL]
Print the pointer to the internal class

";

%feature("docstring") casadi::SimpleIndefDpleSolver::assignNodeNoCount "[INTERNAL]  Assign the node to a node class pointer without reference
counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::SimpleIndefDpleSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::SimpleIndefDpleSolver::hasOption "

check if there is an option str

";

%feature("docstring") casadi::SimpleIndefDpleSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::SimpleIndefDpleSolver::printStats "

Print solver statistics.

";

%feature("docstring") casadi::SimpleIndefDpleSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::SimpleIndefDpleSolver "

Solving the Discrete Periodic Lyapunov Equations with regular Linear
Solvers.

Given matrices $A_k$ and symmetric $V_k, k = 0..K-1$

A_k in R^(n x n) V_k in R^n

provides all of $P_k$ that satisfy:

P_0 = A_(K-1)*P_(K-1)*A_(K-1)' + V_k P_k+1 = A_k*P_k*A_k' + V_k  for k =
1..K-1

Uses Periodic Schur Decomposition (simple) and does not assume positive
definiteness. Based on Periodic Lyapunov equations: some applications and
new algorithms. Int. J. Control, vol. 67, pp. 69-87, 1997.

Joris Gillis

>Input scheme: casadi::DPLEInput (DPLE_NUM_IN = 3) [dpleIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| DPLE_A                 | a                      | A matrices (horzcat    |
|                        |                        | when const_dim,        |
|                        |                        | blkdiag otherwise) .   |
+------------------------+------------------------+------------------------+
| DPLE_V                 | v                      | V matrices (horzcat    |
|                        |                        | when const_dim,        |
|                        |                        | blkdiag otherwise) .   |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::DPLEOutput (DPLE_NUM_OUT = 2) [dpleOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| DPLE_P                 | p                      | Lyapunov matrix        |
|                        |                        | (horzcat when          |
|                        |                        | const_dim, blkdiag     |
|                        |                        | otherwise) (Cholesky   |
|                        |                        | of P if pos_def) .     |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| const_dim    | OT_BOOLEAN   | true         | Assume       | casadi::Dple |
|              |              |              | constant     | Internal     |
|              |              |              | dimension of |              |
|              |              |              | P            |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| eps_unstable | OT_REAL      | 0.000        | A margin for | casadi::Dple |
|              |              |              | unstability  | Internal     |
|              |              |              | detection    |              |
+--------------+--------------+--------------+--------------+--------------+
| error_unstab | OT_BOOLEAN   | false        | Throw an     | casadi::Dple |
| le           |              |              | exception    | Internal     |
|              |              |              | when it is   |              |
|              |              |              | detected     |              |
|              |              |              | that         |              |
|              |              |              | Product(A_i, |              |
|              |              |              | i=N..1) has  |              |
|              |              |              | eigenvalues  |              |
|              |              |              | greater than |              |
|              |              |              | 1-eps_unstab |              |
|              |              |              | le           |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_LINEARSOL | GenericType( | User-defined | casadi::Simp |
| r            | VER          | )            | linear       | leIndefDpleI |
|              |              |              | solver       | nternal      |
|              |              |              | class.       |              |
|              |              |              | Needed for s |              |
|              |              |              | ensitivities |              |
|              |              |              | .            |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_DICTIONAR | GenericType( | Options to   | casadi::Simp |
| r_options    | Y            | )            | be passed to | leIndefDpleI |
|              |              |              | the linear   | nternal      |
|              |              |              | solver.      |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| pos_def      | OT_BOOLEAN   | false        | Assume P     | casadi::Dple |
|              |              |              | positive     | Internal     |
|              |              |              | definite     |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: simple_indef_dple_solver.hpp ";

%feature("docstring") casadi::SimpleIndefDpleSolver::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::SimpleIndefDpleSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::SimpleIndefDpleSolver::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::SimpleIndefDpleSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::SimpleIndefDpleSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::SimpleIndefDpleSolver::spCanEvaluate "[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::SimpleIndefDpleSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::SimpleIndefDpleSolver::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::SimpleIndefDpleSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::SimpleIndefDpleSolver::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") casadi::SimpleIndefDpleSolver::isNull "

Is a null pointer?

";

%feature("docstring") casadi::SimpleIndefDpleSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::SimpleIndefDpleSolver::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::SimpleIndefDpleSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::SimpleIndefDpleSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::SimpleIndefDpleSolver::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") casadi::SimpleIndefDpleSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::SimpleIndefDpleSolver::getCount "[INTERNAL]
Get the reference count.

";

%feature("docstring") casadi::SimpleIndefDpleSolver::inputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SimpleIndefDpleSolver::setOptionByAllowedIndex
"[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::SimpleIndefDpleSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::SimpleIndefDpleSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::SimpleIndefDpleSolver::inputScheme "[INTERNAL]  Access input/output scheme.

";

%feature("docstring") casadi::SimpleIndefDpleSolver::checkInputs "[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::SimpleIndefDpleSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::SimpleIndefDpleSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::SimpleIndefDpleSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::SimpleIndefDpleSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::SimpleIndefDpleSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::SimpleIndefDpleSolver::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") casadi::SimpleIndefDpleSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::SimpleIndefDpleSolver::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::SimpleIndefDpleSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::SimpleIndefDpleSolver::input_struct "[INTERNAL]  Input/output structures of the function

";

%feature("docstring") casadi::SimpleIndefDpleSolver::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::SimpleIndefDpleSolver::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::SimpleIndefDpleSolver::output_struct "[INTERNAL]  Input/output structures of the function

";

%feature("docstring") casadi::SimpleIndefDpleSolver::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::SimpleIndefDpleSolver::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::SimpleIndefDpleSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::SimpleIndefDpleSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::SimpleIndefDpleSolver::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::SimpleIndefDpleSolver::spInit "[INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::SimpleIndefDpleSolver::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") casadi::SimpleIndefDpleSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::SimpleIndefDpleSolver::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::SimpleIndefDpleSolver::clone "

Clone.

";

%feature("docstring") casadi::SimpleIndefDpleSolver::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") casadi::SimpleIndefDpleSolver::weak "[INTERNAL]  Get
a weak reference to the object.

";

%feature("docstring") casadi::SimpleIndefDpleSolver::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::SimpleIndefDpleSolver::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::SimpleIndefDpleSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::SimpleIndefDpleSolver::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::SimpleIndefDpleSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::SimpleIndefDpleSolver::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::SimpleIndefDpleSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::SimpleIndefDpleSolver::getOption "

get an option value

";

%feature("docstring") casadi::SimpleIndefDpleSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::SimpleIndefDpleSolver::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::SimpleIndefDpleSolver::isInit "

Is initialized?

";

%feature("docstring") casadi::SimpleIndefDpleSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::SimpleIndefDpleSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::SimpleIndefDpleSolver::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::SimpleIndefDpleSolver::getOptionTypeName "

Get the type name of a certain option.

";


// File: classcasadi_1_1Simulator.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::Simulator::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::Simulator::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::Simulator::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::Simulator::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::Simulator::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::Simulator::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::Simulator::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::Simulator::isNull "

Is a null pointer?

";

%feature("docstring") casadi::Simulator::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::Simulator::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::Simulator::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::Simulator::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::Simulator::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::Simulator::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::Simulator::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::Simulator::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::Simulator::assignNode "[INTERNAL]  Assign the
node to a node class pointer (or null)

";

%feature("docstring") casadi::Simulator::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::Simulator::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::Simulator "

Integrator class.

An \"simulator\" integrates an IVP, stopping at a (fixed) number of grid
points and evaluates a set of output functions at these points. The internal
stepsizes of the integrator need not coincide with the gridpoints.

Simulator is an casadi::Function mapping from casadi::IntegratorInput to n.
\\\\

The output function needs to be a mapping from casadi::DAEInput to n. The
default output has n=1 and the output is the (vectorized) differential state
for each time step.

Joel Andersson

>Input scheme: casadi::IntegratorInput (INTEGRATOR_NUM_IN = 7) [integratorIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_X0          | x0                     | Differential state at  |
|                        |                        | the initial time .     |
+------------------------+------------------------+------------------------+
| INTEGRATOR_P           | p                      | Parameters .           |
+------------------------+------------------------+------------------------+
| INTEGRATOR_Z0          | z0                     | Initial guess for the  |
|                        |                        | algebraic variable .   |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RX0         | rx0                    | Backward differential  |
|                        |                        | state at the final     |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RP          | rp                     | Backward parameter     |
|                        |                        | vector .               |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZ0         | rz0                    | Initial guess for the  |
|                        |                        | backwards algebraic    |
|                        |                        | variable .             |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp | casadi::Simu |
|              |              |              | uts)  (initi | latorInterna |
|              |              |              | al|step)     | l            |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available monitors
+---------+---------------------------+
|   Id    |          Used in          |
+=========+===========================+
| initial | casadi::SimulatorInternal |
+---------+---------------------------+
| inputs  | casadi::FunctionInternal  |
+---------+---------------------------+
| outputs | casadi::FunctionInternal  |
+---------+---------------------------+
| step    | casadi::SimulatorInternal |
+---------+---------------------------+

Diagrams

C++ includes: simulator.hpp ";

%feature("docstring") casadi::Simulator::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::Simulator::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::Simulator::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::Simulator::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::Simulator::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::Simulator::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::Simulator::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::Simulator::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::Simulator::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::Simulator::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::Simulator::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::Simulator::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::Simulator::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::Simulator::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::Simulator::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::Simulator::spCanEvaluate "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::Simulator::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::Simulator::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::Simulator::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::Simulator::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::Simulator::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::Simulator::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") casadi::Simulator::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::Simulator::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::Simulator::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::Simulator::evaluate "

Evaluate.

";

%feature("docstring") casadi::Simulator::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::Simulator::hasOption "

check if there is an option str

";

%feature("docstring") casadi::Simulator::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::Simulator::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::Simulator::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::Simulator::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::Simulator::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::Simulator::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::Simulator::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::Simulator::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::Simulator::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::Simulator::getOption "

get an option value

";

%feature("docstring") casadi::Simulator::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::Simulator::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::Simulator::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::Simulator::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::Simulator::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::Simulator::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::Simulator::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::Simulator::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::Simulator::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::Simulator::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::Simulator::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::Simulator::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") casadi::Simulator::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::Simulator::Simulator "

>  casadi::Simulator::Simulator()
------------------------------------------------------------------------

Default constructor.

>  casadi::Simulator::Simulator(const Integrator &integrator, const Function &output_fcn, const std::vector< double > &grid)
------------------------------------------------------------------------

Constructor.

Parameters:
-----------

output_fcn:  output function which maps to n outputs.

>Input scheme: casadi::DAEInput (DAE_NUM_IN = 5) [daeIn]
+-----------+-------+----------------------------+
| Full name | Short |        Description         |
+===========+=======+============================+
| DAE_X     | x     | Differential state .       |
+-----------+-------+----------------------------+
| DAE_Z     | z     | Algebraic state .          |
+-----------+-------+----------------------------+
| DAE_P     | p     | Parameter .                |
+-----------+-------+----------------------------+
| DAE_T     | t     | Explicit time dependence . |
+-----------+-------+----------------------------+

>  casadi::Simulator::Simulator(const Integrator &integrator, const std::vector< double > &grid)
------------------------------------------------------------------------

Output function equal to the state.

";

%feature("docstring") casadi::Simulator::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::Simulator::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::Simulator::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::Simulator::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::Simulator::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::Simulator::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::Simulator::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::Simulator::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::Simulator::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::Simulator::isInit "

Is initialized?

";

%feature("docstring") casadi::Simulator::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::Simulator::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::Simulator::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::Simulator::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::Simulator::inputSchemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::Simulator::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::Simulator::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::Simulator::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::Simulator::print "[INTERNAL]  Print a
description of the object.

";


// File: classcasadi_1_1Slice.xml
%feature("docstring") casadi::Slice::getAll "

>  std::vector< int > casadi::Slice::getAll(int len) const 
------------------------------------------------------------------------

Get a vector of indices.

>  std::vector< int > casadi::Slice::getAll(const Slice &outer, int len) const 
------------------------------------------------------------------------

Get a vector of indices (nested slice)

";

%feature("docstring") casadi::Slice::print "[INTERNAL]  Print a
representation of the object to a stream.

";

%feature("docstring") casadi::Slice "

Class representing a Slice.

Note that Python or Octave do not need to use this class. They can just use
slicing utility from the host language ( M[0:6] in Python, M(1:7) )

C++ includes: slice.hpp ";

%feature("docstring") casadi::Slice::Slice "

>  casadi::Slice::Slice()
------------------------------------------------------------------------

Default constructor - all elements.

>  casadi::Slice::Slice(int i)
------------------------------------------------------------------------

A single element.

>  casadi::Slice::Slice(int start, int stop, int step=1)
------------------------------------------------------------------------

A slice.

>  casadi::Slice::Slice(const std::vector< int > &v)
------------------------------------------------------------------------

Construct from an index vector (requires isSlice(v) to be true)

>  casadi::Slice::Slice(const std::vector< int > &v, Slice &outer)
------------------------------------------------------------------------

Construct nested slices from an index vector (requires isSlice2(v) to be
true)

";

%feature("docstring") casadi::Slice::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::Slice::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::Slice::getRepresentation "

Return a string with a representation (for SWIG)

";


// File: structcasadi_1_1SmoothChecker.xml
%feature("docstring") casadi::SmoothChecker "[INTERNAL]  Smoothness (by
default true)

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1SmoothChecker_3_01OP__AND_01_4.xml
%feature("docstring") casadi::SmoothChecker< OP_AND > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1SmoothChecker_3_01OP__CEIL_01_4.xml
%feature("docstring") casadi::SmoothChecker< OP_CEIL > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1SmoothChecker_3_01OP__COPYSIGN_01_4.xml
%feature("docstring") casadi::SmoothChecker< OP_COPYSIGN > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1SmoothChecker_3_01OP__EQ_01_4.xml
%feature("docstring") casadi::SmoothChecker< OP_EQ > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1SmoothChecker_3_01OP__FLOOR_01_4.xml
%feature("docstring") casadi::SmoothChecker< OP_FLOOR > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1SmoothChecker_3_01OP__FMOD_01_4.xml
%feature("docstring") casadi::SmoothChecker< OP_FMOD > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1SmoothChecker_3_01OP__IF__ELSE__ZERO_01_4.xml
%feature("docstring") casadi::SmoothChecker< OP_IF_ELSE_ZERO > " [INTERNAL]
C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1SmoothChecker_3_01OP__LE_01_4.xml
%feature("docstring") casadi::SmoothChecker< OP_LE > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1SmoothChecker_3_01OP__LT_01_4.xml
%feature("docstring") casadi::SmoothChecker< OP_LT > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1SmoothChecker_3_01OP__NE_01_4.xml
%feature("docstring") casadi::SmoothChecker< OP_NE > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1SmoothChecker_3_01OP__NOT_01_4.xml
%feature("docstring") casadi::SmoothChecker< OP_NOT > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1SmoothChecker_3_01OP__OR_01_4.xml
%feature("docstring") casadi::SmoothChecker< OP_OR > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1SmoothChecker_3_01OP__SIGN_01_4.xml
%feature("docstring") casadi::SmoothChecker< OP_SIGN > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: classcasadi_1_1SnoptSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::SnoptSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::SnoptSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::SnoptSolver::setOptionsFromFile "

Read options from snopt parameter xml.

";

%feature("docstring") casadi::SnoptSolver::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") casadi::SnoptSolver::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::SnoptSolver::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::SnoptSolver::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::SnoptSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::SnoptSolver::isInit "

Is initialized?

";

%feature("docstring") casadi::SnoptSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::SnoptSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::SnoptSolver::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::SnoptSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::SnoptSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::SnoptSolver::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::SnoptSolver::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::SnoptSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::SnoptSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::SnoptSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::SnoptSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::SnoptSolver::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::SnoptSolver::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::SnoptSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::SnoptSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::SnoptSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::SnoptSolver::jacG "

Access the Jacobian of the constraint function.

>Input scheme: casadi::HessLagInput (HESSLAG_NUM_IN = 5) [hessLagIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| HESSLAG_X              | x                      | Decision variable .    |
+------------------------+------------------------+------------------------+
| HESSLAG_P              | p                      | Fixed parameter .      |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_F          | lam_f                  | Multiplier for f. Just |
|                        |                        | a scalar factor for    |
|                        |                        | the objective that the |
|                        |                        | NLP solver might use   |
|                        |                        | to scale the           |
|                        |                        | objective.             |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_G          | lam_g                  | Multiplier for g .     |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::HessLagOutput (HESSLAG_NUM_OUT = 6) [hessLagOut]
+----------------+--------+------------------------------------------------+
|   Full name    | Short  |                  Description                   |
+================+========+================================================+
| HESSLAG_HESS   | hess   | Hessian of the Lagrangian .                    |
+----------------+--------+------------------------------------------------+
| HESSLAG_F      | f      | Objective function .                           |
+----------------+--------+------------------------------------------------+
| HESSLAG_G      | g      | Constraint function .                          |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_X | grad_x | Gradient of the Lagrangian with respect to x . |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_P | grad_p | Gradient of the Lagrangian with respect to p . |
+----------------+--------+------------------------------------------------+

";

%feature("docstring") casadi::SnoptSolver::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::SnoptSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::SnoptSolver::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::SnoptSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::SnoptSolver::schemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SnoptSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::SnoptSolver::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") casadi::SnoptSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::SnoptSolver::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::SnoptSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::SnoptSolver::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SnoptSolver::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::SnoptSolver::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::SnoptSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::SnoptSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::SnoptSolver::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::SnoptSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::SnoptSolver::getReportConstraints "";

%feature("docstring") casadi::SnoptSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::SnoptSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::SnoptSolver::reportConstraints "

Prints out a human readable report about possible constraint violations,
after solving.

";

%feature("docstring") casadi::SnoptSolver::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::SnoptSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::SnoptSolver::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::SnoptSolver::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::SnoptSolver::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::SnoptSolver::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::SnoptSolver::spCanEvaluate "[INTERNAL]  Is
the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::SnoptSolver::gradF "

Access the objective gradient function>Input scheme: casadi::GradFInput
(GRADF_NUM_IN = 3) [gradFIn] +-----------+-------+---------------------+ |
Full name | Short |     Description     |
+===========+=======+=====================+ | GRADF_X   | x     | Decision
variable . | +-----------+-------+---------------------+ | GRADF_P   | p
| Fixed parameter .   | +-----------+-------+---------------------+

";

%feature("docstring") casadi::SnoptSolver::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::SnoptSolver::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SnoptSolver "

interface to SNOPT NLP solver

Solves the following parametric nonlinear program (NLP):min          F(x, p)
x  subject to             LBX <=   x    <= UBX LBG <= G(x, p) <= UBG
p  == P      nx: number of decision variables     ng: number of constraints
np: number of parameters

>Input scheme: casadi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| _iprint      | OT_INTEGER   | 0            |              | casadi::Snop |
|              |              |              |              | tInternal    |
+--------------+--------------+--------------+--------------+--------------+
| _isumm       | OT_INTEGER   | 6            |              | casadi::Snop |
|              |              |              |              | tInternal    |
+--------------+--------------+--------------+--------------+--------------+
| _start       | OT_STRING    | \"Cold\"       | (Cold|Warm)  | casadi::Snop |
|              |              |              |              | tInternal    |
+--------------+--------------+--------------+--------------+--------------+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| detect_linea | OT_BOOLEAN   | true         | Make an      | casadi::Snop |
| r            |              |              | effort to    | tInternal    |
|              |              |              | treat linear |              |
|              |              |              | constraints  |              |
|              |              |              | and linear   |              |
|              |              |              | variables    |              |
|              |              |              | specially.   |              |
+--------------+--------------+--------------+--------------+--------------+
| expand       | OT_BOOLEAN   | false        | Expand the   | casadi::NLPS |
|              |              |              | NLP function | olverInterna |
|              |              |              | in terms of  | l            |
|              |              |              | scalar       |              |
|              |              |              | operations,  |              |
|              |              |              | i.e. MX->SX  |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| grad_f       | OT_FUNCTION  | GenericType( | Function for | casadi::NLPS |
|              |              | )            | calculating  | olverInterna |
|              |              |              | the gradient | l            |
|              |              |              | of the       |              |
|              |              |              | objective    |              |
|              |              |              | (column, aut |              |
|              |              |              | ogenerated   |              |
|              |              |              | by default)  |              |
+--------------+--------------+--------------+--------------+--------------+
| grad_lag     | OT_FUNCTION  | GenericType( | Function for | casadi::NLPS |
|              |              | )            | calculating  | olverInterna |
|              |              |              | the gradient | l            |
|              |              |              | of the       |              |
|              |              |              | Lagrangian ( |              |
|              |              |              | autogenerate |              |
|              |              |              | d by         |              |
|              |              |              | default)     |              |
+--------------+--------------+--------------+--------------+--------------+
| hess_lag     | OT_FUNCTION  | GenericType( | Function for | casadi::NLPS |
|              |              | )            | calculating  | olverInterna |
|              |              |              | the Hessian  | l            |
|              |              |              | of the       |              |
|              |              |              | Lagrangian ( |              |
|              |              |              | autogenerate |              |
|              |              |              | d by         |              |
|              |              |              | default)     |              |
+--------------+--------------+--------------+--------------+--------------+
| ignore_check | OT_BOOLEAN   | false        | If set to    | casadi::NLPS |
| _vec         |              |              | true, the    | olverInterna |
|              |              |              | input shape  | l            |
|              |              |              | of F will    |              |
|              |              |              | not be       |              |
|              |              |              | checked.     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_CALLBACK  | GenericType( | A function   | casadi::NLPS |
| llback       |              | )            | that will be | olverInterna |
|              |              |              | called at    | l            |
|              |              |              | each         |              |
|              |              |              | iteration    |              |
|              |              |              | with the     |              |
|              |              |              | solver as    |              |
|              |              |              | input. Check |              |
|              |              |              | documentatio |              |
|              |              |              | n of         |              |
|              |              |              | Callback .   |              |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_BOOLEAN   | false        | If set to    | casadi::NLPS |
| llback_ignor |              |              | true, errors | olverInterna |
| e_errors     |              |              | thrown by it | l            |
|              |              |              | eration_call |              |
|              |              |              | back will be |              |
|              |              |              | ignored.     |              |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_INTEGER   | 1            | Only call    | casadi::NLPS |
| llback_step  |              |              | the callback | olverInterna |
|              |              |              | function     | l            |
|              |              |              | every few    |              |
|              |              |              | iterations.  |              |
+--------------+--------------+--------------+--------------+--------------+
| jac_f        | OT_FUNCTION  | GenericType( | Function for | casadi::NLPS |
|              |              | )            | calculating  | olverInterna |
|              |              |              | the jacobian | l            |
|              |              |              | of the       |              |
|              |              |              | objective    |              |
|              |              |              | (sparse row, |              |
|              |              |              | autogenerate |              |
|              |              |              | d by         |              |
|              |              |              | default)     |              |
+--------------+--------------+--------------+--------------+--------------+
| jac_g        | OT_FUNCTION  | GenericType( | Function for | casadi::NLPS |
|              |              | )            | calculating  | olverInterna |
|              |              |              | the Jacobian | l            |
|              |              |              | of the       |              |
|              |              |              | constraints  |              |
|              |              |              | (autogenerat |              |
|              |              |              | ed by        |              |
|              |              |              | default)     |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp | casadi::Snop |
|              |              |              | uts)  (eval_ | tInternal    |
|              |              |              | nlp|setup_nl |              |
|              |              |              | p)           |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| print_time   | OT_BOOLEAN   | true         | print        | casadi::Snop |
|              |              |              | information  | tInternal    |
|              |              |              | about        |              |
|              |              |              | execution    |              |
|              |              |              | time         |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+
| warn_initial | OT_BOOLEAN   | false        | Warn if the  | casadi::NLPS |
| _bounds      |              |              | initial      | olverInterna |
|              |              |              | guess does   | l            |
|              |              |              | not satisfy  |              |
|              |              |              | LBX and UBX  |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available monitors
+-----------+--------------------------+
|    Id     |         Used in          |
+===========+==========================+
| eval_nlp  | casadi::SnoptInternal    |
+-----------+--------------------------+
| inputs    | casadi::FunctionInternal |
+-----------+--------------------------+
| outputs   | casadi::FunctionInternal |
+-----------+--------------------------+
| setup_nlp | casadi::SnoptInternal    |
+-----------+--------------------------+

>List of available stats
+----------------+-----------------------+
|       Id       |        Used in        |
+================+=======================+
| n_callback_fun | casadi::SnoptInternal |
+----------------+-----------------------+
| n_eval_grad_f  | casadi::SnoptInternal |
+----------------+-----------------------+
| n_eval_jac_g   | casadi::SnoptInternal |
+----------------+-----------------------+
| return_status  | casadi::SnoptInternal |
+----------------+-----------------------+
| t_callback_fun | casadi::SnoptInternal |
+----------------+-----------------------+
| t_eval_grad_f  | casadi::SnoptInternal |
+----------------+-----------------------+
| t_eval_jac_g   | casadi::SnoptInternal |
+----------------+-----------------------+
| t_mainloop     | casadi::SnoptInternal |
+----------------+-----------------------+

Diagrams

C++ includes: snopt_solver.hpp ";

%feature("docstring") casadi::SnoptSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::SnoptSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::SnoptSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::SnoptSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::SnoptSolver::setQPOptions "

Set options that make the NLP solver more suitable for solving QPs.

";

%feature("docstring") casadi::SnoptSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::SnoptSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::SnoptSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::SnoptSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::SnoptSolver::evaluate "

Evaluate.

";

%feature("docstring") casadi::SnoptSolver::hessLag "

Access the Hessian of the Lagrangian function.

>Input scheme: casadi::JacGInput (JACG_NUM_IN = 3) [jacGIn]
+-----------+-------+---------------------+
| Full name | Short |     Description     |
+===========+=======+=====================+
| JACG_X    | x     | Decision variable . |
+-----------+-------+---------------------+
| JACG_P    | p     | Fixed parameter .   |
+-----------+-------+---------------------+

>Output scheme: casadi::JacGOutput (JACG_NUM_OUT = 4) [jacGOut]
+-----------+-------+-------------------------------+
| Full name | Short |          Description          |
+===========+=======+===============================+
| JACG_JAC  | jac   | Jacobian of the constraints . |
+-----------+-------+-------------------------------+
| JACG_F    | f     | Objective function .          |
+-----------+-------+-------------------------------+
| JACG_G    | g     | Constraint function .         |
+-----------+-------+-------------------------------+

";

%feature("docstring") casadi::SnoptSolver::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::SnoptSolver::checkInputs "[INTERNAL]  Check
if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::SnoptSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::SnoptSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::SnoptSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::SnoptSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::SnoptSolver::hasOption "

check if there is an option str

";

%feature("docstring") casadi::SnoptSolver::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::SnoptSolver::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::SnoptSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::SnoptSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::SnoptSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::SnoptSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::SnoptSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::SnoptSolver::nlp "

Access the NLP.

>Input scheme: casadi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::SnoptSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::SnoptSolver::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::SnoptSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::SnoptSolver::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::SnoptSolver::getOption "

get an option value

";

%feature("docstring") casadi::SnoptSolver::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") casadi::SnoptSolver::SnoptSolver "

>  casadi::SnoptSolver::SnoptSolver()
------------------------------------------------------------------------

Default constructor.

>  casadi::SnoptSolver::SnoptSolver(const Function &nlp)
------------------------------------------------------------------------

Create an NLP solver instance.

";

%feature("docstring") casadi::SnoptSolver::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::SnoptSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::SnoptSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::SnoptSolver::isNull "

Is a null pointer?

";

%feature("docstring") casadi::SnoptSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::SnoptSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::SnoptSolver::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::SnoptSolver::outputScheme "[INTERNAL]  Access
input/output scheme.

";


// File: classcasadi_1_1SOCPInputIOSchemeVector.xml
%feature("docstring") casadi::SOCPInputIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") casadi::SOCPInputIOSchemeVector "[INTERNAL]  Helper
function for 'SOCPInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::SOCPInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::SOCPInputIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::SOCPInputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring")
casadi::SOCPInputIOSchemeVector::SOCPInputIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::SOCPInputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::SOCPInputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::SOCPInputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";


// File: classcasadi_1_1SOCPOutputIOSchemeVector.xml
%feature("docstring") casadi::SOCPOutputIOSchemeVector "[INTERNAL]  Helper
function for 'SOCPOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::SOCPOutputIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::SOCPOutputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::SOCPOutputIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") casadi::SOCPOutputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring")
casadi::SOCPOutputIOSchemeVector::SOCPOutputIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::SOCPOutputIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::SOCPOutputIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") casadi::SOCPOutputIOSchemeVector::__getitem__ "[INTERNAL] ";


// File: classcasadi_1_1SOCPQCQPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::SOCPQCQPSolver::spInit " [INTERNAL]  Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::SOCPQCQPSolver "

SOCP QCQP Solver for quadratic programming.

Note: this implementation relies on Cholesky decomposition: Chol(H) = L -> H
= LL' with L lower triangular This requires Pi, H to be positive definite.
Positive semi-definite is not sufficient. Notably, H==0 will not work.

A better implementation would rely on matrix square root, but we need
singular value decomposition to implement that.

This implementation makes use of the epigraph reformulation:*  min f(x) *
x * *   min  t *    x, t  f(x) <= t *

This implementation makes use of the following identity:*  || Gx+h||_2 <=
e'x + f * *  x'(G'G - ee')x + (2 h'G - 2 f e') x + h'h - f <= 0 * where we
put e = [0 0 ... 1] for the quadratic constraint arising from the epigraph
reformulation and e==0 for all other quadratic constraints.

Solves the following strictly convex problem:

min          1/2 x' H x + g' x  x  subject to             1/2 x' Pi x +  qi'
x + ri  <= 0   for i=0..nq-1             LBA <= A x <= UBA LBX <= x   <= UBX
with :       H, Pi sparse (n x n) positive definite       g, qi dense  (n x
1)       ri scalar      n: number of decision variables (x)     nc: number
of linear constraints (A) nq: number of quadratic constraints

If H, Pi is not positive-definite, the solver should throw an error.

Joris Gillis

>Input scheme: casadi::QCQPSolverInput (QCQP_SOLVER_NUM_IN = 13) [qcqpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QCQP_SOLVER_H          | h                      | The square matrix H:   |
|                        |                        | sparse, (n x n). Only  |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical.     |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_G          | g                      | The vector g: dense,   |
|                        |                        | (n x 1) .              |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_P          | p                      | The horizontal stack   |
|                        |                        | of all Pi. Each Pi is  |
|                        |                        | sparse (n x n). Only   |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical.     |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_Q          | q                      | The vertical stack of  |
|                        |                        | all qi: dense, (nq n x |
|                        |                        | 1) .                   |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_R          | r                      | The vertical stack of  |
|                        |                        | all scalars ri (nq x   |
|                        |                        | 1) .                   |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_A          | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_LBA        | lba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_UBA        | uba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_LBX        | lbx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_UBX        | ubx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_X0         | x0                     | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_LAM_X0     | lam_x0                 | dense                  |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::QCQPSolverOutput (QCQP_SOLVER_NUM_OUT = 5) [qcqpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QCQP_SOLVER_X          | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_COST       | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_LAM_A      | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_LAM_X      | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| socp_solver  | OT_SOCPSOLVE | GenericType( | The          | casadi::SOCP |
|              | R            | )            | SOCPSolver   | QCQPInternal |
|              |              |              | used to      |              |
|              |              |              | solve the    |              |
|              |              |              | QCQPs.       |              |
+--------------+--------------+--------------+--------------+--------------+
| socp_solver_ | OT_DICTIONAR | GenericType( | Options to   | casadi::SOCP |
| options      | Y            | )            | be passed to | QCQPInternal |
|              |              |              | the          |              |
|              |              |              | SOCPSOlver   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available stats
+-------------------+--------------------------+
|        Id         |         Used in          |
+===================+==========================+
| socp_solver_stats | casadi::SOCPQCQPInternal |
+-------------------+--------------------------+

Diagrams

C++ includes: socp_qcqp_solver.hpp ";

%feature("docstring") casadi::SOCPQCQPSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::SOCPQCQPSolver::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::SOCPQCQPSolver::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::SOCPQCQPSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::SOCPQCQPSolver::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::SOCPQCQPSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::SOCPQCQPSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::SOCPQCQPSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::SOCPQCQPSolver::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::SOCPQCQPSolver::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SOCPQCQPSolver::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::SOCPQCQPSolver::spCanEvaluate "[INTERNAL]  Is
the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::SOCPQCQPSolver::isInit "

Is initialized?

";

%feature("docstring") casadi::SOCPQCQPSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::SOCPQCQPSolver::inputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::SOCPQCQPSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::SOCPQCQPSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::SOCPQCQPSolver::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::SOCPQCQPSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::SOCPQCQPSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::SOCPQCQPSolver::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::SOCPQCQPSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::SOCPQCQPSolver::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::SOCPQCQPSolver::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::SOCPQCQPSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::SOCPQCQPSolver::checkInputs "[INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::SOCPQCQPSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::SOCPQCQPSolver::printPtr "[INTERNAL]  Print
the pointer to the internal class

";

%feature("docstring") casadi::SOCPQCQPSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::SOCPQCQPSolver::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::SOCPQCQPSolver::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::SOCPQCQPSolver::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SOCPQCQPSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::SOCPQCQPSolver::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::SOCPQCQPSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::SOCPQCQPSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::SOCPQCQPSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::SOCPQCQPSolver::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::SOCPQCQPSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::SOCPQCQPSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::SOCPQCQPSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::SOCPQCQPSolver::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::SOCPQCQPSolver::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::SOCPQCQPSolver::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") casadi::SOCPQCQPSolver::hasOption "

check if there is an option str

";

%feature("docstring") casadi::SOCPQCQPSolver::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::SOCPQCQPSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::SOCPQCQPSolver::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::SOCPQCQPSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::SOCPQCQPSolver::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::SOCPQCQPSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::SOCPQCQPSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::SOCPQCQPSolver::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::SOCPQCQPSolver::schemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SOCPQCQPSolver::evaluate "

Evaluate.

";

%feature("docstring") casadi::SOCPQCQPSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::SOCPQCQPSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::SOCPQCQPSolver::getOption "

get an option value

";

%feature("docstring") casadi::SOCPQCQPSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::SOCPQCQPSolver::SOCPQCQPSolver "

>  casadi::SOCPQCQPSolver::SOCPQCQPSolver()
------------------------------------------------------------------------

Default constructor.

>  casadi::SOCPQCQPSolver::SOCPQCQPSolver(const QCQPStructure &st)
------------------------------------------------------------------------

Constructor.

Parameters:
-----------

st:  Problem structure

";

%feature("docstring") casadi::SOCPQCQPSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::SOCPQCQPSolver::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::SOCPQCQPSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::SOCPQCQPSolver::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::SOCPQCQPSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::SOCPQCQPSolver::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::SOCPQCQPSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::SOCPQCQPSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::SOCPQCQPSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::SOCPQCQPSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::SOCPQCQPSolver::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::SOCPQCQPSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::SOCPQCQPSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::SOCPQCQPSolver::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") casadi::SOCPQCQPSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::SOCPQCQPSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::SOCPQCQPSolver::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::SOCPQCQPSolver::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::SOCPQCQPSolver::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") casadi::SOCPQCQPSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::SOCPQCQPSolver::getSolver "

Access underlying SOCP solver.

";

%feature("docstring") casadi::SOCPQCQPSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::SOCPQCQPSolver::isNull "

Is a null pointer?

";

%feature("docstring") casadi::SOCPQCQPSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::SOCPQCQPSolver::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::SOCPQCQPSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::SOCPQCQPSolver::setQPOptions "

Set options that make the QP solver more suitable for solving LPs.

";

%feature("docstring") casadi::SOCPQCQPSolver::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") casadi::SOCPQCQPSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::SOCPQCQPSolver::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::SOCPQCQPSolver::setInputScheme "

Set input scheme.

";


// File: classcasadi_1_1SOCPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::SOCPSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::SOCPSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::SOCPSolver::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::SOCPSolver::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::SOCPSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::SOCPSolver::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::SOCPSolver::isNull "

Is a null pointer?

";

%feature("docstring") casadi::SOCPSolver::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::SOCPSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::SOCPSolver::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::SOCPSolver::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") casadi::SOCPSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::SOCPSolver::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::SOCPSolver::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::SOCPSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::SOCPSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::SOCPSolver::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::SOCPSolver::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") casadi::SOCPSolver::getOption "

get an option value

";

%feature("docstring") casadi::SOCPSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::SOCPSolver::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SOCPSolver::isInit "

Is initialized?

";

%feature("docstring") casadi::SOCPSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::SOCPSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::SOCPSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::SOCPSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::SOCPSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::SOCPSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::SOCPSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::SOCPSolver::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::SOCPSolver::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::SOCPSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::SOCPSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::SOCPSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::SOCPSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::SOCPSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::SOCPSolver::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::SOCPSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::SOCPSolver::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::SOCPSolver::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::SOCPSolver::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::SOCPSolver::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::SOCPSolver::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SOCPSolver::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::SOCPSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::SOCPSolver::SOCPSolver "

Default constructor.

";

%feature("docstring") casadi::SOCPSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::SOCPSolver::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::SOCPSolver::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SOCPSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::SOCPSolver::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::SOCPSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::SOCPSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::SOCPSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::SOCPSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::SOCPSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::SOCPSolver::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::SOCPSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::SOCPSolver::hasOption "

check if there is an option str

";

%feature("docstring") casadi::SOCPSolver::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::SOCPSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::SOCPSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::SOCPSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::SOCPSolver "

SOCPSolver.

Solves an Second Order Cone Programming (SOCP) problem in standard form.

Primal:

min          c' x  x subject to               || Gi' x + hi ||_2 <= ei' x +
fi  i = 1..m              LBA <= A x <= UBA             LBX <= x   <= UBX
with x ( n x 1)          c ( n x 1 )          Gi sparse (n x ni)          hi
dense (ni x 1)          ei  dense (n x 1) fi  dense (1 x 1)          N =
Sum_i^m ni          A sparse (nc x n) LBA, UBA dense vector (nc x 1)
LBX, UBX dense vector (n x 1)

Joris Gillis

>Input scheme: casadi::SOCPInput (SOCP_SOLVER_NUM_IN = 11) [socpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SOCP_SOLVER_G          | g                      | The horizontal stack   |
|                        |                        | of all matrices Gi: (  |
|                        |                        | n x N) .               |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_H          | h                      | The vertical stack of  |
|                        |                        | all vectors hi: ( N x  |
|                        |                        | 1) .                   |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_E          | e                      | The vertical stack of  |
|                        |                        | all vectors ei: ( nm x |
|                        |                        | 1) .                   |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_F          | f                      | The vertical stack of  |
|                        |                        | all scalars fi: ( m x  |
|                        |                        | 1) .                   |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_C          | c                      | The vector c: ( n x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_A          | a                      | The matrix A: ( nc x   |
|                        |                        | n) .                   |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_LBA        | lba                    | Lower bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_UBA        | uba                    | Upper bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_LBX        | lbx                    | Lower bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_UBX        | ubx                    | Upper bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::SOCPOutput (SOCP_SOLVER_NUM_OUT = 5) [socpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SOCP_SOLVER_X          | x                      | The primal solution (n |
|                        |                        | x 1) .                 |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_COST       | cost                   | The primal optimal     |
|                        |                        | cost (1 x 1) .         |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_LAM_A      | lam_a                  | The dual solution      |
|                        |                        | corresponding to the   |
|                        |                        | linear constraints (nc |
|                        |                        | x 1) .                 |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_LAM_X      | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds (n x 1)  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| ni           | OT_INTEGERVE | GenericType( | Provide the  | casadi::SOCP |
|              | CTOR         | )            | size of each | SolverIntern |
|              |              |              | SOC          | al           |
|              |              |              | constraint.  |              |
|              |              |              | Must sum up  |              |
|              |              |              | to N.        |              |
+--------------+--------------+--------------+--------------+--------------+
| print_proble | OT_BOOLEAN   | false        | Print out    | casadi::SOCP |
| m            |              |              | problem      | SolverIntern |
|              |              |              | statement    | al           |
|              |              |              | for          |              |
|              |              |              | debugging.   |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: socp_solver.hpp ";

%feature("docstring") casadi::SOCPSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::SOCPSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::SOCPSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::SOCPSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::SOCPSolver::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::SOCPSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::SOCPSolver::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::SOCPSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::SOCPSolver::evaluate "

Evaluate.

";

%feature("docstring") casadi::SOCPSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::SOCPSolver::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::SOCPSolver::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::SOCPSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::SOCPSolver::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::SOCPSolver::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::SOCPSolver::spCanEvaluate "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::SOCPSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::SOCPSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::SOCPSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::SOCPSolver::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::SOCPSolver::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::SOCPSolver::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::SOCPSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::SOCPSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::SOCPSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::SOCPSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::SOCPSolver::swap "[INTERNAL]  Swap content
with another instance.

";


// File: classcasadi_1_1SOCPStructIOSchemeVector.xml
%feature("docstring") casadi::SOCPStructIOSchemeVector::vector "[INTERNAL]
";

%feature("docstring") casadi::SOCPStructIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring")
casadi::SOCPStructIOSchemeVector::SOCPStructIOSchemeVector "[INTERNAL] ";

%feature("docstring") casadi::SOCPStructIOSchemeVector::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::SOCPStructIOSchemeVector::repr "[INTERNAL]
Print a representation of the object.

";

%feature("docstring") casadi::SOCPStructIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::SOCPStructIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::SOCPStructIOSchemeVector::getDescription "[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::SOCPStructIOSchemeVector "[INTERNAL]  Helper
function for 'SOCPStruct'

C++ includes: casadi_types.hpp ";


// File: classcasadi_1_1Solve.xml
%feature("docstring") casadi::Solve::sparsity "

>  const Sparsity& casadi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & casadi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") casadi::Solve::getFunctionInput "[INTERNAL]  Get
function input.

";

%feature("docstring") casadi::Solve::isOutputNode "[INTERNAL]  Check if
evaluation output.

";

%feature("docstring") casadi::Solve::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") casadi::Solve::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") casadi::Solve::getUnary "[INTERNAL]  Get a unary
operation.

";

%feature("docstring") casadi::Solve::setDependencies "

>  void casadi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void casadi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") casadi::Solve::getTranspose "[INTERNAL]   Transpose.

";

%feature("docstring") casadi::Solve::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") casadi::Solve::~Solve "[INTERNAL]  Destructor.

";

%feature("docstring") casadi::Solve::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") casadi::Solve::sameOpAndDeps "[INTERNAL]  Checks if
two nodes have the same operation and have equivalent dependencies up to a
given depth.

";

%feature("docstring") casadi::Solve::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::Solve::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") casadi::Solve::evaluateSX "[INTERNAL]  Evaluate the
function symbolically (SX)

";

%feature("docstring") casadi::Solve::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") casadi::Solve::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") casadi::Solve::Solve "[INTERNAL]  Constructor.

";

%feature("docstring") casadi::Solve::getBinary "[INTERNAL]  Get a binary
operation operation (matrix-matrix)

";

%feature("docstring") casadi::Solve::getBinarySwitch "[INTERNAL]  Get a
binary operation operation.

";

%feature("docstring") casadi::Solve::hasDep "[INTERNAL]  Does the node
depend on other nodes.

";

%feature("docstring") casadi::Solve::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") casadi::Solve::shape "[INTERNAL] ";

%feature("docstring") casadi::Solve::assign "

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") casadi::Solve::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") casadi::Solve::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") casadi::Solve::getAssertion "[INTERNAL]   Assertion.

";

%feature("docstring") casadi::Solve::getNumOutputs "[INTERNAL]  Number of
outputs.

";

%feature("docstring") casadi::Solve::clone "[INTERNAL]  Clone function.

";

%feature("docstring") casadi::Solve::isUnaryOp "[INTERNAL]  Check if unary
operation.

";

%feature("docstring") casadi::Solve::weak "[INTERNAL]  Get a weak reference
to the object.

";

%feature("docstring") casadi::Solve::getFunction "[INTERNAL]  Get function
reference.

";

%feature("docstring") casadi::Solve::getSetSparse "[INTERNAL]  Create set
sparse.

";

%feature("docstring") casadi::Solve::getNormInf "[INTERNAL]  Infinity norm.

";

%feature("docstring") casadi::Solve::getInverse "[INTERNAL]   Inverse.

";

%feature("docstring") casadi::Solve::getHorzsplit "[INTERNAL]  Create a
horizontal split node.

";

%feature("docstring") casadi::Solve::getReshape "[INTERNAL]   Reshape.

";

%feature("docstring") casadi::Solve::getVertsplit "[INTERNAL]  Create a
vertical split node (vectors only)

";

%feature("docstring") casadi::Solve::getSetNonzeros "[INTERNAL]  Assign the
nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::Solve::evaluateD "[INTERNAL]  Evaluate the
function numerically.

";

%feature("docstring") casadi::Solve::getAddNonzeros "[INTERNAL]  Add the
nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::Solve::size "[INTERNAL] ";

%feature("docstring") casadi::Solve::simplifyMe "[INTERNAL]  Simplify the
expression (ex is a reference to the node)

";

%feature("docstring") casadi::Solve::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") casadi::Solve::assertInit "[INTERNAL]  Assert that
the object has been initialized.

";

%feature("docstring") casadi::Solve::getName "[INTERNAL]  Get the name.

";

%feature("docstring") casadi::Solve::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") casadi::Solve::getMultiplication "[INTERNAL]   Matrix
multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") casadi::Solve::evaluateMX "

>  void casadi::Solve< Tr >::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void casadi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") casadi::Solve::isMultipleOutput "[INTERNAL]  Check if
a multiple output node.

";

%feature("docstring") casadi::Solve "[INTERNAL]  An MX atomic for linear
solver solution: x = r * A^-1 or x = r * A^-T.

Forward derivatives: x_dot = (r_dot - x * A_dot) * A^-1

Adjoint derivatives: r_bar = x_bar * A^-T A_bar = -x^T * r_bar

Joel Andersson

C++ includes: solve.hpp ";

%feature("docstring") casadi::Solve::numel "[INTERNAL]  Get shape.

";

%feature("docstring") casadi::Solve::size1 "[INTERNAL] ";

%feature("docstring") casadi::Solve::mapping "[INTERNAL]  Get an IMatrix
representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") casadi::Solve::print "

>  void casadi::Solve< Tr >::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

>  void casadi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

";

%feature("docstring") casadi::Solve::printPart "[INTERNAL]  Print a part of
the expression.

";

%feature("docstring") casadi::Solve::getMatrixValue "[INTERNAL]  Get the
value (only for constant nodes)

";

%feature("docstring") casadi::Solve::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") casadi::Solve::getOp "[INTERNAL]  Get the operation.

";

%feature("docstring") casadi::Solve::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") casadi::Solve::getValue "[INTERNAL]  Get the value
(only for scalar constant nodes)

";

%feature("docstring") casadi::Solve::getGetNonzeros "[INTERNAL]  Get the
nonzeros of matrix.

";

%feature("docstring") casadi::Solve::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::Solve::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") casadi::Solve::isNonLinear "[INTERNAL]  Is the node
nonlinear.

";

%feature("docstring") casadi::Solve::getNormF "[INTERNAL]  Frobenius norm.

";

%feature("docstring") casadi::Solve::getFunctionOutput "[INTERNAL]  Get
function output.

";

%feature("docstring") casadi::Solve::size2 "[INTERNAL] ";

%feature("docstring") casadi::Solve::deepCopyMembers "[INTERNAL]  Deep copy
data members.

";

%feature("docstring") casadi::Solve::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") casadi::Solve::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") casadi::Solve::getSubRef "[INTERNAL]  Get submatrix
reference.

";

%feature("docstring") casadi::Solve::dep "

>  const MX & casadi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & casadi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::Solve::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") casadi::Solve::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring") casadi::Solve::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") casadi::Solve::getNorm2 "[INTERNAL]  Spectral norm.

";

%feature("docstring") casadi::Solve::getSolve "[INTERNAL]   Solve a system
of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") casadi::Solve::getOutput "[INTERNAL]  Get an output.

";

%feature("docstring") casadi::Solve::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") casadi::Solve::propagateSparsity "

>  void casadi::Solve< Tr >::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity.

>  void casadi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity, no work.

";


// File: classcasadi_1_1SparseStorage.xml
%feature("docstring") casadi::SparseStorage::sanityCheck "

Check if the dimensions and colind, row vectors are compatible.

Parameters:
-----------

complete:  set to true to also check elementwise throws an error as possible
result

";

%feature("docstring") casadi::SparseStorage::end "[INTERNAL] ";

%feature("docstring") casadi::SparseStorage::sparsityRef "

Access the sparsity, make a copy if there are multiple references to it.

";

%feature("docstring") casadi::SparseStorage::front "

>  reference casadi::SparseStorage< DataType >::front()
------------------------------------------------------------------------
[INTERNAL] 
Get references to beginning and end.

>  const_reference casadi::SparseStorage< DataType >::front() const 
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::SparseStorage::sparsity "

Const access the sparsity - reference to data member.

";

%feature("docstring") casadi::SparseStorage::hasNZ "

Returns true if the matrix has a non-zero at location rr, cc.

";

%feature("docstring") casadi::SparseStorage::back "[INTERNAL] ";

%feature("docstring") casadi::SparseStorage::clear "";

%feature("docstring") casadi::SparseStorage::reserve "";

%feature("docstring") casadi::SparseStorage::getElement "

get an element, do not allocate

";

%feature("docstring") casadi::SparseStorage::rbegin "[INTERNAL] ";

%feature("docstring") casadi::SparseStorage::elem "

>  const DataType & casadi::SparseStorage< DataType >::elem(int rr, int cc=0) const 
------------------------------------------------------------------------
[INTERNAL] 
get an element

>  DataType & casadi::SparseStorage< DataType >::elem(int rr, int cc=0)
------------------------------------------------------------------------
[INTERNAL] 
get a reference to an element

";

%feature("docstring") casadi::SparseStorage::begin "

>  iterator casadi::SparseStorage< DataType >::begin()
------------------------------------------------------------------------
[INTERNAL] 
Get iterators to beginning and end.

>  const_iterator casadi::SparseStorage< DataType >::begin() const 
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::SparseStorage::colind "";

%feature("docstring") casadi::SparseStorage::toScalar "

Convert to scalar type.

";

%feature("docstring") casadi::SparseStorage "C++ includes:
sparse_storage.hpp ";

%feature("docstring") casadi::SparseStorage::data "

>  std::vector< DataType > & casadi::SparseStorage< DataType >::data()
------------------------------------------------------------------------

Access the non-zero elements.

>  const std::vector< DataType > & casadi::SparseStorage< DataType >::data() const 
------------------------------------------------------------------------

Const access the non-zero elements.

";

%feature("docstring") casadi::SparseStorage::SparseStorage "

>  casadi::SparseStorage< DataType >::SparseStorage(const Sparsity &sparsity, const DataType &val=DataType(0))
------------------------------------------------------------------------

Sparse matrix with a given sparsity

>  casadi::SparseStorage< DataType >::SparseStorage()
------------------------------------------------------------------------

constructors

empty 0-by-0 matrix constructor

>  casadi::SparseStorage< DataType >::SparseStorage(const SparseStorage< DataType > &m)
------------------------------------------------------------------------

Copy constructor.

>  casadi::SparseStorage< DataType >::SparseStorage(const std::vector< std::vector< DataType > > &m)
------------------------------------------------------------------------

Dense matrix constructor with data given as vector of vectors.

>  casadi::SparseStorage< DataType >::SparseStorage(const Sparsity &sparsity, const std::vector< DataType > &d)
------------------------------------------------------------------------

Sparse matrix with a given sparsity and non-zero elements.

>  casadi::SparseStorage< DataType >::SparseStorage(const std::vector< DataType > &x)
------------------------------------------------------------------------

Construct from a vector.

Thanks to implicit conversion, you can pretend that SparseStorage(const
SXElement& x); exists. Note: above remark applies only to C++, not python or
octave interfaces

>  casadi::SparseStorage< DataType >::SparseStorage(const std::vector< DataType > &x, int nrow, int ncol)
------------------------------------------------------------------------

Construct dense matrix from a vector with the elements in column major
ordering.

>  casadi::SparseStorage< DataType >::SparseStorage(const SparseStorage< A > &x)
------------------------------------------------------------------------

Create a matrix from a matrix with a different type of matrix entries
(assuming that the scalar conversion is valid)

>  casadi::SparseStorage< DataType >::SparseStorage(const std::vector< A > &x)
------------------------------------------------------------------------

Create an expression from an stl vector.

>  casadi::SparseStorage< DataType >::SparseStorage(const std::vector< A > &x, int nrow, int ncol)
------------------------------------------------------------------------

Create a non-vector expression from an stl vector.

";

%feature("docstring") casadi::SparseStorage::row "";

%feature("docstring") casadi::SparseStorage::resize "";

%feature("docstring") casadi::SparseStorage::rend "[INTERNAL] ";

%feature("docstring") casadi::SparseStorage::at "

>  const DataType& casadi::SparseStorage< DataType >::at(int k) const 
------------------------------------------------------------------------
[INTERNAL] 
Get a non-zero element.

>  DataType& casadi::SparseStorage< DataType >::at(int k)
------------------------------------------------------------------------
[INTERNAL] 
Access a non-zero element.

";


// File: classcasadi_1_1Sparsity.xml


/*  Check if two sparsity patterns are identical  */

/*  Size and element counting  */ %feature("docstring")
casadi::Sparsity::assertInit " [INTERNAL]  Assert that it is initialized

";

%feature("docstring") casadi::Sparsity::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::Sparsity::enlargeRows "

Enlarge the matrix along the first dimension (i.e. insert rows)

";

%feature("docstring") casadi::Sparsity "

General sparsity class.

The storage format is a compressed column storage (CCS) format.  In this
format, the structural non-zero elements are stored in column-major order,
starting from the upper left corner of the matrix and ending in the lower
right corner.

In addition to the dimension ( size1(), size2()), (i.e. the number of rows
and the number of columns respectively), there are also two vectors of
integers:

\"colind\" [length size2()+1], which contains the index to the first non-
zero element on or after the corresponding column. All the non-zero elements
of a particular i are thus the elements with index el that fulfills:
colind[i] <= el < colind[i+1].

\"row\" [same length as the number of non-zero elements, size()] The rows
for each of the structural non-zeros.

Note that with this format, it is cheap to loop over all the non-zero
elements of a particular column, at constant time per element, but expensive
to jump to access a location (i, j).

If the matrix is dense, i.e. length(row) == size1()*size2(), the format
reduces to standard dense column major format, which allows access to an
arbitrary element in constant time.

Since the object is reference counted (it inherits from SharedObject),
several matrices are allowed to share the same sparsity pattern.

The implementations of some methods of this class has been taken from the
CSparse package and modified to use C++ standard library and CasADi data
structures.

See:   Matrix

Joel Andersson

C++ includes: sparsity.hpp ";

%feature("docstring") casadi::Sparsity::reCache "[INTERNAL]  Check if there
is an identical copy of the sparsity pattern in the cache, and if so, make a
shallow copy of that one.

";

%feature("docstring") casadi::Sparsity::getDiag "

Get the diagonal of the matrix/create a diagonal matrix (mapping will
contain the nonzero mapping) When the input is square, the diagonal elements
are returned. If the input is vector-like, a diagonal matrix is constructed
with it.

";

%feature("docstring") casadi::Sparsity::getElements "

>  std::vector< int > casadi::Sparsity::getElements(bool col_major=true) const 
------------------------------------------------------------------------

Get the location of all non-zero elements as they would appear in a Dense
matrix A : DenseMatrix 4 x 3 B : SparseMatrix 4 x 3 , 5 structural non-
zeros.

k = A.getElements() A[k] will contain the elements of A that are non- zero
in B

>  void casadi::Sparsity::getElements(std::vector< int > &loc, bool col_major=true) const 
------------------------------------------------------------------------

Get the location of all nonzero elements (inplace version)

";

%feature("docstring") casadi::Sparsity::isSquare "

Is square?

";

%feature("docstring") casadi::Sparsity::rowsSequential "

Do the rows appear sequentially on each column.

Parameters:
-----------

strictly:  if true, then do not allow multiple entries

";

%feature("docstring") casadi::Sparsity::set "

>  void casadi::Sparsity::set(T *data, const T *val_data, const Sparsity &val_sp) const 
------------------------------------------------------------------------
[INTERNAL] 
Assign the nonzero entries of one sparsity pattern to the nonzero
entries of another sparsity pattern.

>  void casadi::Sparsity::set(DataType *data, const DataType *val_data, const Sparsity &val_sp) const 
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::Sparsity::isSymmetric "

Is symmetric?

";

%feature("docstring") casadi::Sparsity::reshape "

Reshape a sparsity, order of nonzeros remains the same.

";

%feature("docstring") casadi::Sparsity::patternProduct "

Sparsity pattern for a matrix-matrix product Returns the sparsity pattern
resulting from pre-multiplying the pattern with the transpose of x. Returns
the new sparsity pattern as well as a mapping with the same length as the
number of non-zero elements The mapping contains a vector of the index pairs
that makes up the scalar products for each non-zero.

";

%feature("docstring") casadi::Sparsity::enlargeColumns "

Enlarge the matrix along the second dimension (i.e. insert columns)

";

%feature("docstring") casadi::Sparsity::hash "";

%feature("docstring") casadi::Sparsity::resize "

Resize.

";

%feature("docstring") casadi::Sparsity::isTril "

Is lower triangular?

";

%feature("docstring") casadi::Sparsity::shape "[INTERNAL]  Get the shape.

";

%feature("docstring") casadi::Sparsity::getLowerNZ "

Get nonzeros in lower triangular part.

";

%feature("docstring") casadi::Sparsity::getUpperNZ "

Get nonzeros in upper triangular part.

";

%feature("docstring") casadi::Sparsity::swap "[INTERNAL]  Swap content with
another instance.

";

%feature("docstring") casadi::Sparsity::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::Sparsity::sanityCheck "

Check if the dimensions and colind, row vectors are compatible.

Parameters:
-----------

complete:  set to true to also check elementwise throws an error as possible
result

";

%feature("docstring") casadi::Sparsity::bor "

>  void casadi::Sparsity::bor(T *data, const T *val_data, const Sparsity &val_sp) const 
------------------------------------------------------------------------
[INTERNAL] 
Bitwise or of the nonzero entries of one sparsity pattern and the
nonzero entries of another sparsity pattern.

>  void casadi::Sparsity::bor(DataType *data, const DataType *val_data, const Sparsity &val_sp) const 
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::Sparsity::T "[INTERNAL]   Transpose the
matrix (shorthand)

";

%feature("docstring") casadi::Sparsity::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::Sparsity::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::Sparsity::Sparsity "

>  casadi::Sparsity::Sparsity(int dummy=0)
------------------------------------------------------------------------

Default constructor.

>  casadi::Sparsity::Sparsity(int nrow, int ncol, const std::vector< int > &colind, const std::vector< int > &row)
------------------------------------------------------------------------

Construct from sparsity pattern vectors given in compressed column storage
format.

";

%feature("docstring") casadi::Sparsity::isTranspose "

Check if the sparsity is the transpose of another.

";

%feature("docstring") casadi::Sparsity::isDense "

Is dense?

";

%feature("docstring") casadi::Sparsity::colind "

>  const std::vector< int > & casadi::Sparsity::colind() const 
------------------------------------------------------------------------

Get a reference to the colindex of all column element (see class
description)

>  int casadi::Sparsity::colind(int i) const 
------------------------------------------------------------------------

Get a reference to the colindex of col i (see class description)

";

%feature("docstring") casadi::Sparsity::stronglyConnectedComponents "

Find the strongly connected components of the bigraph defined by the
sparsity pattern of a square matrix.

See Direct Methods for Sparse Linear Systems by Davis (2006). Returns:
Number of components

Offset for each components (length: 1 + number of components)

Indices for each components, component i has indices index[offset[i]], ...,
index[offset[i+1]]

In the case that the matrix is symmetric, the result has a particular
interpretation: Given a symmetric matrix A and n =
A.stronglyConnectedComponents(p, r)

=> A[p, p] will appear block-diagonal with n blocks and with the indices of
the block boundaries to be found in r.

";

%feature("docstring") casadi::Sparsity::patternUnion "

Union of two sparsity patterns.

";

%feature("docstring") casadi::Sparsity::isInit "

Is initialized?

";

%feature("docstring") casadi::Sparsity::getCCS "

Get the sparsity in compressed column storage (CCS) format.

";

%feature("docstring") casadi::Sparsity::rowRef "[INTERNAL]  Get a reference
to the rows of all non-zero element (copy if not unique!)

";

%feature("docstring") casadi::Sparsity::numel "

The total number of elements, including structural zeros, i.e.
size2()*size1()

See:   size()

";

%feature("docstring") casadi::Sparsity::getCRS "

Get the sparsity in compressed row storage (CRS) format.

";

%feature("docstring") casadi::Sparsity::dulmageMendelsohn "

Compute the Dulmage-Mendelsohn decomposition See Direct Methods for Sparse
Linear Systems by Davis (2006).

Dulmage-Mendelsohn will try to bring your matrix into lower block-
triangular (LBT) form. It will not care about the distance of off- diagonal
elements to the diagonal: there is no guarantee you will get a block-
diagonal matrix if you supply a randomly permuted block- diagonal matrix.

If your matrix is symmetrical, this method is of limited use; permutation
can make it non-symmetric.

See:   stronglyConnectedComponents

";

%feature("docstring") casadi::Sparsity::sparse "

Create a sparse (empty) rectangular sparsity pattern.

";

%feature("docstring") casadi::Sparsity::isReshape "

Check if the sparsity is a reshape of another.

";

%feature("docstring") casadi::Sparsity::getTriplet "

Get the sparsity in sparse triplet format.

";

%feature("docstring") casadi::Sparsity::appendColumns "

Append another sparsity patten horizontally.

";

%feature("docstring") casadi::Sparsity::patternIntersection "

Intersection of two sparsity patterns Returns the new sparsity pattern as
well as a mapping with the same length as the number of non-zero elements
The value is 1 if the non-zero comes from the first (i.e. this) object, 2 if
it is from the second and 3 (i.e. 1 | 2) if from both.

";

%feature("docstring") casadi::Sparsity::unidirectionalColoring "

Perform a unidirectional coloring: A greedy distance-2 coloring algorithm
(Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN)

";

%feature("docstring") casadi::Sparsity::removeDuplicates "

Remove duplicate entries.

The same indices will be removed from the mapping vector, which must have
the same length as the number of nonzeros

";

%feature("docstring") casadi::Sparsity::getTriu "

Get upper triangular part.

";

%feature("docstring") casadi::Sparsity::getTril "

Get lower triangular part.

";

%feature("docstring") casadi::Sparsity::isDiagonal "

Is diagonal?

";

%feature("docstring") casadi::Sparsity::makeDense "

Make a patten dense.

";

%feature("docstring") casadi::Sparsity::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::Sparsity::dense "

Create a dense rectangular sparsity pattern.

";

%feature("docstring") casadi::Sparsity::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::Sparsity::printCompact "

Print a compact description of the sparsity pattern.

";

%feature("docstring") casadi::Sparsity::diag "

Create diagonal sparsity pattern.

";

%feature("docstring") casadi::Sparsity::sub "

Get a submatrix.

Returns the sparsity of the submatrix, with a mapping such that submatrix[k]
= originalmatrix[mapping[k]]

";

%feature("docstring") casadi::Sparsity::unit "

Create the sparsity pattern for a unit vector of length n and a nonzero on
position el.

";

%feature("docstring") casadi::Sparsity::append "

Append another sparsity patten vertically (NOTE: only efficient if vector)

";

%feature("docstring") casadi::Sparsity::isScalar "

Is scalar?

";

%feature("docstring") casadi::Sparsity::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::Sparsity::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::Sparsity::add "

>  void casadi::Sparsity::add(T *data, const T *val_data, const Sparsity &val_sp) const 
------------------------------------------------------------------------
[INTERNAL] 
Add the nonzero entries of one sparsity pattern to the nonzero entries
of another sparsity pattern.

>  void casadi::Sparsity::add(DataType *data, const DataType *val_data, const Sparsity &val_sp) const 
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::Sparsity::row "

>  const std::vector< int > & casadi::Sparsity::row() const 
------------------------------------------------------------------------

Get a reference to row-vector, containing rows for all non-zero elements
(see class description)

>  int casadi::Sparsity::row(int el) const 
------------------------------------------------------------------------

Get the row of a non-zero element.

";

%feature("docstring") casadi::Sparsity::spyMatlab "

Generate a script for Matlab or Octave which visualizes the sparsity using
the spy command.

";

%feature("docstring") casadi::Sparsity::starColoring "

Perform a star coloring of a symmetric matrix: A greedy distance-2 coloring
algorithm (Algorithm 4.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN) Ordering
options: None (0), largest first (1)

";

%feature("docstring") casadi::Sparsity::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::Sparsity::getNZInplace "

Get the nonzero index for a set of elements The index vector is used both
for input and outputs and must be sorted by increasing nonzero index, i.e.
column-wise. Elements not found in the sparsity pattern are set to -1.

";

%feature("docstring") casadi::Sparsity::largestFirstOrdering "

Order the cols by decreasing degree.

";

%feature("docstring") casadi::Sparsity::transpose "

>  Sparsity casadi::Sparsity::transpose() const 
------------------------------------------------------------------------

Transpose the matrix.

>  Sparsity casadi::Sparsity::transpose(std::vector< int > &mapping, bool invert_mapping=false) const 
------------------------------------------------------------------------

Transpose the matrix and get the reordering of the non-zero entries.

Parameters:
-----------

mapping:  the non-zeros of the original matrix for each non-zero of the new
matrix

";

%feature("docstring") casadi::Sparsity::isVector "

Is vector (i.e. size2()==1)

";

%feature("docstring") casadi::Sparsity::pmult "

Permute rows and/or columns Multiply the sparsity with a permutation matrix
from the left and/or from the right P * A * trans(P), A * trans(P) or A *
trans(P) with P defined by an index vector containing the row for each col.
As an alternative, P can be transposed (inverted).

";

%feature("docstring") casadi::Sparsity::starColoring2 "

Perform a star coloring of a symmetric matrix: A new greedy distance-2
coloring algorithm (Algorithm 4.1 in A. H. GEBREMEDHIN, A. TARAFDAR, F.
MANNE, A. POTHEN) Ordering options: None (0), largest first (1)

";

%feature("docstring") casadi::Sparsity::isSingular "

Check whether the sparsity-pattern indicates structural singularity.

";

%feature("docstring") casadi::Sparsity::patternCombine "

Combine two sparsity patterns Returns the new sparsity pattern as well as a
mapping with the same length as the number of non-zero elements The mapping
matrix contains the arguments for each nonzero, the first bit indicates if
the first argument is nonzero, the second bit indicates if the second
argument is nonzero (note that none of, one of or both of the arguments can
be nonzero)

";

%feature("docstring") casadi::Sparsity::dimString "

Get the dimension as a string.

";

%feature("docstring") casadi::Sparsity::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::Sparsity::isTriu "

Is upper triangular?

";

%feature("docstring") casadi::Sparsity::compressed "

>  Sparsity casadi::Sparsity::compressed(const std::vector< int > &v)
------------------------------------------------------------------------

Create from a single vector containing the pattern in compressed column
storage format: The format: The first two entries are the number of rows
(nrow) and columns (ncol) The next ncol+1 entries are the column offsets
(colind). Note that the last element, colind[ncol], gives the number of
nonzeros The last colind[ncol] entries are the row indices

>  Sparsity casadi::Sparsity::compressed(const int *v)
------------------------------------------------------------------------
[INTERNAL] 
Create from a single vector containing the pattern in compressed
column storage format: The format: The first two entries are the
number of rows (nrow) and columns (ncol) The next ncol+1 entries are
the column offsets (colind). Note that the last element, colind[ncol],
gives the number of nonzeros The last colind[ncol] entries are the row
indices

";

%feature("docstring") casadi::Sparsity::isEqual "";

%feature("docstring") casadi::Sparsity::isNull "

Is a null pointer?

";

%feature("docstring") casadi::Sparsity::enlarge "

Enlarge matrix Make the matrix larger by inserting empty rows and columns,
keeping the existing non-zeros.

For the matrices A to B A(m, n) length(jj)=m , length(ii)=n B(nrow, ncol)

A=enlarge(m, n, ii, jj) makes sure that

B[jj, ii] == A

";

%feature("docstring") casadi::Sparsity::sizeL "

Number of non-zeros in the lower triangular half, i.e. the number of
elements (i, j) with j<=i.

";

%feature("docstring") casadi::Sparsity::compress "

Compress a sparsity pattern.

";

%feature("docstring") casadi::Sparsity::colindRef "[INTERNAL]  Get a
reference to the colindex of all column element (copy if not unique!)

";

%feature("docstring") casadi::Sparsity::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::Sparsity::patternInverse "

Take the inverse of a sparsity pattern; flip zeros and non-zeros.

";

%feature("docstring") casadi::Sparsity::getNZ "

>  int casadi::Sparsity::getNZ(int rr, int cc)
------------------------------------------------------------------------

Get the index of a non-zero element Add the element if it does not exist and
copy object if it's not unique.

>  int casadi::Sparsity::getNZ(int rr, int cc) const 
------------------------------------------------------------------------

Get the index of an existing non-zero element return -1 if the element does
not exist.

>  std::vector< int > casadi::Sparsity::getNZ(const std::vector< int > &rr, const std::vector< int > &cc) const 
------------------------------------------------------------------------

Get a set of non-zero element return -1 if the element does not exist.

";

%feature("docstring") casadi::Sparsity::size2 "

Get the number of columns.

";

%feature("docstring") casadi::Sparsity::size1 "

Get the number of rows.

";

%feature("docstring") casadi::Sparsity::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::Sparsity::spy "

Print a textual representation of sparsity.

";

%feature("docstring") casadi::Sparsity::depthFirstSearch "

Depth-first search on the adjacency graph of the sparsity See Direct Methods
for Sparse Linear Systems by Davis (2006).

";

%feature("docstring") casadi::Sparsity::sizeD "

Number of non-zeros on the diagonal, i.e. the number of elements (i, j) with
j==i.

";

%feature("docstring") casadi::Sparsity::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::Sparsity::assignNode "[INTERNAL]  Assign the
node to a node class pointer (or null)

";

%feature("docstring") casadi::Sparsity::isEmpty "

Check if the sparsity is empty.

A sparsity is considered empty if one of the dimensions is zero (or
optionally both dimensions)

";

%feature("docstring") casadi::Sparsity::sizeU "

Number of non-zeros in the upper triangular half, i.e. the number of
elements (i, j) with j>=i.

";

%feature("docstring") casadi::Sparsity::size "

Get the number of (structural) non-zeros.

See:   numel()

";

%feature("docstring") casadi::Sparsity::hasNZ "

Returns true if the pattern has a non-zero at location rr, cc.

";

%feature("docstring") casadi::Sparsity::reserve "

Reserve space.

";

%feature("docstring") casadi::Sparsity::getCol "

Get the column for each non-zero entry Together with the row-vector, this
vector gives the sparsity of the matrix in sparse triplet format, i.e. the
column and row for each non-zero elements.

";

%feature("docstring") casadi::Sparsity::erase "

Erase rows and/or columns of a matrix.

";

%feature("docstring") casadi::Sparsity::eliminationTree "

Calculate the elimination tree See Direct Methods for Sparse Linear Systems
by Davis (2006). If the parameter ata is false, the algorithm is equivalent
to Matlab's etree(A), except that the indices are zero- based. If ata is
true, the algorithm is equivalent to Matlab's etree(A, 'row').

";

%feature("docstring") casadi::Sparsity::scalar "

Create a scalar sparsity pattern.

";


// File: classcasadi_1_1Split.xml
%feature("docstring") casadi::Split::getSetNonzeros "[INTERNAL]  Assign the
nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::Split::numel "[INTERNAL]  Get shape.

";

%feature("docstring") casadi::Split::getHorzsplit "[INTERNAL]  Create a
horizontal split node.

";

%feature("docstring") casadi::Split::getSolve "[INTERNAL]   Solve a system
of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") casadi::Split::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") casadi::Split::mapping "[INTERNAL]  Get an IMatrix
representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") casadi::Split::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") casadi::Split::propagateSparsity "[INTERNAL]
Propagate sparsity.

";

%feature("docstring") casadi::Split::getOutput "[INTERNAL]  Get an output.

";

%feature("docstring") casadi::Split::hasDep "[INTERNAL]  Does the node
depend on other nodes.

";

%feature("docstring") casadi::Split::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") casadi::Split::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") casadi::Split::getAddNonzeros "[INTERNAL]  Add the
nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::Split::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") casadi::Split::sparsity "

>  virtual const Sparsity& casadi::Split::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

>  const Sparsity& casadi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

";

%feature("docstring") casadi::Split::size "[INTERNAL] ";

%feature("docstring") casadi::Split::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::Split::printPart "[INTERNAL]  Print a part of
the expression.

";

%feature("docstring") casadi::Split::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") casadi::Split::getName "[INTERNAL]  Get the name.

";

%feature("docstring") casadi::Split::getMultiplication "[INTERNAL]   Matrix
multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") casadi::Split::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") casadi::Split::dep "

>  const MX & casadi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & casadi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::Split::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") casadi::Split::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") casadi::Split::getValue "[INTERNAL]  Get the value
(only for scalar constant nodes)

";

%feature("docstring") casadi::Split::getVertsplit "[INTERNAL]  Create a
vertical split node (vectors only)

";

%feature("docstring") casadi::Split::deepCopyMembers "[INTERNAL]  Deep copy
data members.

";

%feature("docstring") casadi::Split::evaluateD "[INTERNAL]  Evaluate the
function numerically.

";

%feature("docstring") casadi::Split::weak "[INTERNAL]  Get a weak reference
to the object.

";

%feature("docstring") casadi::Split::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") casadi::Split::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") casadi::Split::getNormInf "[INTERNAL]  Infinity norm.

";

%feature("docstring") casadi::Split::getNorm2 "[INTERNAL]  Spectral norm.

";

%feature("docstring") casadi::Split::assign "

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") casadi::Split::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") casadi::Split::evaluateMX "

>  void casadi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX)

>  void casadi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") casadi::Split::getAssertion "[INTERNAL]   Assertion.

";

%feature("docstring") casadi::Split::getFunctionInput "[INTERNAL]  Get
function input.

";

%feature("docstring") casadi::Split "[INTERNAL]   Split: Split into
multiple expressions splitting the nonzeros.

Joel Andersson

C++ includes: split.hpp ";

%feature("docstring") casadi::Split::isOutputNode "[INTERNAL]  Check if
evaluation output.

";

%feature("docstring") casadi::Split::getMatrixValue "[INTERNAL]  Get the
value (only for constant nodes)

";

%feature("docstring") casadi::Split::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::Split::getFunctionOutput "[INTERNAL]  Get
function output.

";

%feature("docstring") casadi::Split::getReshape "[INTERNAL]   Reshape.

";

%feature("docstring") casadi::Split::getNormF "[INTERNAL]  Frobenius norm.

";

%feature("docstring") casadi::Split::getBinarySwitch "[INTERNAL]  Get a
binary operation operation.

";

%feature("docstring") casadi::Split::getTranspose "[INTERNAL]   Transpose.

";

%feature("docstring") casadi::Split::getBinary "[INTERNAL]  Get a binary
operation operation (matrix-matrix)

";

%feature("docstring") casadi::Split::getUnary "[INTERNAL]  Get a unary
operation.

";

%feature("docstring") casadi::Split::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") casadi::Split::size1 "[INTERNAL] ";

%feature("docstring") casadi::Split::size2 "[INTERNAL] ";

%feature("docstring") casadi::Split::getOp "[INTERNAL]  Get the operation.

";

%feature("docstring") casadi::Split::getSubRef "[INTERNAL]  Get submatrix
reference.

";

%feature("docstring") casadi::Split::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") casadi::Split::evaluateGen "[INTERNAL]  Evaluate the
function (template)

";

%feature("docstring") casadi::Split::getGetNonzeros "[INTERNAL]  Get the
nonzeros of matrix.

";

%feature("docstring") casadi::Split::isUnaryOp "[INTERNAL]  Check if unary
operation.

";

%feature("docstring") casadi::Split::~Split "[INTERNAL]  Destructor.

";

%feature("docstring") casadi::Split::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring") casadi::Split::evaluateSX "[INTERNAL]  Evaluate the
function symbolically (SX)

";

%feature("docstring") casadi::Split::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") casadi::Split::print "

>  void casadi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void casadi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") casadi::Split::simplifyMe "[INTERNAL]  Simplify the
expression (ex is a reference to the node)

";

%feature("docstring") casadi::Split::getSetSparse "[INTERNAL]  Create set
sparse.

";

%feature("docstring") casadi::Split::clone "[INTERNAL]  Clone function.

";

%feature("docstring") casadi::Split::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") casadi::Split::Split "[INTERNAL]  Constructor.

";

%feature("docstring") casadi::Split::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") casadi::Split::isMultipleOutput "[INTERNAL]  Check if
a multiple output node.

";

%feature("docstring") casadi::Split::getInverse "[INTERNAL]   Inverse.

";

%feature("docstring") casadi::Split::sameOpAndDeps "[INTERNAL]  Checks if
two nodes have the same operation and have equivalent dependencies up to a
given depth.

";

%feature("docstring") casadi::Split::getNumOutputs "[INTERNAL]  Number of
outputs.

";

%feature("docstring") casadi::Split::assertInit "[INTERNAL]  Assert that
the object has been initialized.

";

%feature("docstring") casadi::Split::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") casadi::Split::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") casadi::Split::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") casadi::Split::setDependencies "

>  void casadi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void casadi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") casadi::Split::isNonLinear "[INTERNAL]  Is the node
nonlinear.

";

%feature("docstring") casadi::Split::shape "[INTERNAL] ";

%feature("docstring") casadi::Split::getFunction "[INTERNAL]  Get function
reference.

";


// File: classcasadi_1_1SQICSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::SQICSolver::hasOption "

check if there is an option str

";

%feature("docstring") casadi::SQICSolver::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::SQICSolver::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::SQICSolver::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SQICSolver::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::SQICSolver::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") casadi::SQICSolver::isInit "

Is initialized?

";

%feature("docstring") casadi::SQICSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::SQICSolver::isNull "

Is a null pointer?

";

%feature("docstring") casadi::SQICSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::SQICSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::SQICSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::SQICSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::SQICSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::SQICSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::SQICSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::SQICSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::SQICSolver::evaluate "

Evaluate.

";

%feature("docstring") casadi::SQICSolver::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::SQICSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::SQICSolver::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::SQICSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::SQICSolver::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::SQICSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::SQICSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::SQICSolver::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::SQICSolver::spCanEvaluate "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::SQICSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::SQICSolver::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::SQICSolver::SQICSolver "

>  casadi::SQICSolver::SQICSolver()
------------------------------------------------------------------------

Default constructor.

>  casadi::SQICSolver::SQICSolver(const QPStructure &st)
------------------------------------------------------------------------

Constructor.

Parameters:
-----------

st:  Problem structure

";

%feature("docstring") casadi::SQICSolver::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::SQICSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::SQICSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::SQICSolver::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::SQICSolver::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::SQICSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::SQICSolver::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") casadi::SQICSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::SQICSolver::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SQICSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::SQICSolver::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::SQICSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::SQICSolver::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::SQICSolver::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::SQICSolver::getOption "

get an option value

";

%feature("docstring") casadi::SQICSolver::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::SQICSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::SQICSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::SQICSolver::generateNativeCode "

Generate native code in the interfaced language for debugging

";

%feature("docstring") casadi::SQICSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::SQICSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::SQICSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::SQICSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::SQICSolver::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::SQICSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::SQICSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::SQICSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::SQICSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::SQICSolver::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::SQICSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::SQICSolver "

Interface to the SQIC solver for quadratic programming.

Solves the following strictly convex problem:

min          1/2 x' H x + g' x  x  subject to             LBA <= A x <= UBA
LBX <= x   <= UBX      with :       H sparse (n x n) positive definite
g dense  (n x 1)      n: number of decision variables (x)     nc: number of
constraints (A)

If H is not positive-definite, the solver should throw an error. Joris
Gillis

>Input scheme: casadi::QPSolverInput (QP_SOLVER_NUM_IN = 10) [qpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_H            | h                      | The square matrix H:   |
|                        |                        | sparse, (n x n). Only  |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical.     |
+------------------------+------------------------+------------------------+
| QP_SOLVER_G            | g                      | The vector g: dense,   |
|                        |                        | (n x 1) .              |
+------------------------+------------------------+------------------------+
| QP_SOLVER_A            | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LBA          | lba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_UBA          | uba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LBX          | lbx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_UBX          | ubx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_X0           | x0                     | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X0       | lam_x0                 | dense                  |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::QPSolverOutput (QP_SOLVER_NUM_OUT = 5) [qpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_X            | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| QP_SOLVER_COST         | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_A        | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X        | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: sqic_solver.hpp ";

%feature("docstring") casadi::SQICSolver::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::SQICSolver::setLPOptions "

Set options that make the QP solver more suitable for solving LPs.

";

%feature("docstring") casadi::SQICSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::SQICSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::SQICSolver::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SQICSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::SQICSolver::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::SQICSolver::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::SQICSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::SQICSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::SQICSolver::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") casadi::SQICSolver::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::SQICSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::SQICSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::SQICSolver::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::SQICSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::SQICSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::SQICSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::SQICSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::SQICSolver::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::SQICSolver::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::SQICSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::SQICSolver::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::SQICSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::SQICSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::SQICSolver::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::SQICSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::SQICSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::SQICSolver::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::SQICSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::SQICSolver::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::SQICSolver::print "[INTERNAL]  Print a
description of the object.

";


// File: classcasadi_1_1SQPMethod.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::SQPMethod::assignNode " [INTERNAL]  Assign the node to a node class
pointer (or null)

";

%feature("docstring") casadi::SQPMethod::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::SQPMethod::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::SQPMethod::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::SQPMethod::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::SQPMethod::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") casadi::SQPMethod::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::SQPMethod::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::SQPMethod::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::SQPMethod::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::SQPMethod::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::SQPMethod::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::SQPMethod::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::SQPMethod::jacG "

Access the Jacobian of the constraint function.

>Input scheme: casadi::HessLagInput (HESSLAG_NUM_IN = 5) [hessLagIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| HESSLAG_X              | x                      | Decision variable .    |
+------------------------+------------------------+------------------------+
| HESSLAG_P              | p                      | Fixed parameter .      |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_F          | lam_f                  | Multiplier for f. Just |
|                        |                        | a scalar factor for    |
|                        |                        | the objective that the |
|                        |                        | NLP solver might use   |
|                        |                        | to scale the           |
|                        |                        | objective.             |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_G          | lam_g                  | Multiplier for g .     |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::HessLagOutput (HESSLAG_NUM_OUT = 6) [hessLagOut]
+----------------+--------+------------------------------------------------+
|   Full name    | Short  |                  Description                   |
+================+========+================================================+
| HESSLAG_HESS   | hess   | Hessian of the Lagrangian .                    |
+----------------+--------+------------------------------------------------+
| HESSLAG_F      | f      | Objective function .                           |
+----------------+--------+------------------------------------------------+
| HESSLAG_G      | g      | Constraint function .                          |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_X | grad_x | Gradient of the Lagrangian with respect to x . |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_P | grad_p | Gradient of the Lagrangian with respect to p . |
+----------------+--------+------------------------------------------------+

";

%feature("docstring") casadi::SQPMethod::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::SQPMethod::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::SQPMethod::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::SQPMethod::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::SQPMethod::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::SQPMethod::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::SQPMethod::nlp "

Access the NLP.

>Input scheme: casadi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::SQPMethod::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::SQPMethod::getQPSolver "

Access the QPSolver used internally.

";

%feature("docstring") casadi::SQPMethod::hessLag "

Access the Hessian of the Lagrangian function.

>Input scheme: casadi::JacGInput (JACG_NUM_IN = 3) [jacGIn]
+-----------+-------+---------------------+
| Full name | Short |     Description     |
+===========+=======+=====================+
| JACG_X    | x     | Decision variable . |
+-----------+-------+---------------------+
| JACG_P    | p     | Fixed parameter .   |
+-----------+-------+---------------------+

>Output scheme: casadi::JacGOutput (JACG_NUM_OUT = 4) [jacGOut]
+-----------+-------+-------------------------------+
| Full name | Short |          Description          |
+===========+=======+===============================+
| JACG_JAC  | jac   | Jacobian of the constraints . |
+-----------+-------+-------------------------------+
| JACG_F    | f     | Objective function .          |
+-----------+-------+-------------------------------+
| JACG_G    | g     | Constraint function .         |
+-----------+-------+-------------------------------+

";

%feature("docstring") casadi::SQPMethod::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::SQPMethod::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::SQPMethod::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::SQPMethod::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::SQPMethod::setQPOptions "

Set options that make the NLP solver more suitable for solving QPs.

";

%feature("docstring") casadi::SQPMethod::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::SQPMethod::spCanEvaluate "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::SQPMethod::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::SQPMethod::inputSchemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SQPMethod::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::SQPMethod::isInit "

Is initialized?

";

%feature("docstring") casadi::SQPMethod::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::SQPMethod::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::SQPMethod::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::SQPMethod::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::SQPMethod::reportConstraints "

Prints out a human readable report about possible constraint violations,
after solving.

";

%feature("docstring") casadi::SQPMethod::getOption "

get an option value

";

%feature("docstring") casadi::SQPMethod::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::SQPMethod::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::SQPMethod::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::SQPMethod::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::SQPMethod::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::SQPMethod::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::SQPMethod::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::SQPMethod::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::SQPMethod::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::SQPMethod::hasOption "

check if there is an option str

";

%feature("docstring") casadi::SQPMethod::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::SQPMethod::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::SQPMethod::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::SQPMethod::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::SQPMethod::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::SQPMethod "

Sequential Quadratic Programming method.

The algorithm is a classical SQP method with either exact (may also be
provided) or damped BFGS Lagrange Hessian approximation. Two different line-
search algorithms are available. First, Armijo (Wolfe) condition with
backtracking (suffers from Maratos effect). Second, a line-search method
that checks if the merit function is lower than the last k values (no
Maratos effect). Both methods employ the L1 merit function.

The method solves the problems of form:min          F(x) x  subject to LBG
<= G(x) <= UBG LBX <=   x  <= UBX

Nonlinear equalities can be introduced by setting LBG and UBG equal at the
correct positions.

The method is still under development and should be used with care

Attila Kozma, Joel Andersson and Joris Gillis

>Input scheme: casadi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| beta         | OT_REAL      | 0.800        | Line-search  | casadi::SQPI |
|              |              |              | parameter,   | nternal      |
|              |              |              | restoration  |              |
|              |              |              | factor of    |              |
|              |              |              | stepsize     |              |
+--------------+--------------+--------------+--------------+--------------+
| c1           | OT_REAL      | 0.000        | Armijo       | casadi::SQPI |
|              |              |              | condition,   | nternal      |
|              |              |              | coefficient  |              |
|              |              |              | of decrease  |              |
|              |              |              | in merit     |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| expand       | OT_BOOLEAN   | false        | Expand the   | casadi::NLPS |
|              |              |              | NLP function | olverInterna |
|              |              |              | in terms of  | l            |
|              |              |              | scalar       |              |
|              |              |              | operations,  |              |
|              |              |              | i.e. MX->SX  |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| grad_f       | OT_FUNCTION  | GenericType( | Function for | casadi::NLPS |
|              |              | )            | calculating  | olverInterna |
|              |              |              | the gradient | l            |
|              |              |              | of the       |              |
|              |              |              | objective    |              |
|              |              |              | (column, aut |              |
|              |              |              | ogenerated   |              |
|              |              |              | by default)  |              |
+--------------+--------------+--------------+--------------+--------------+
| grad_lag     | OT_FUNCTION  | GenericType( | Function for | casadi::NLPS |
|              |              | )            | calculating  | olverInterna |
|              |              |              | the gradient | l            |
|              |              |              | of the       |              |
|              |              |              | Lagrangian ( |              |
|              |              |              | autogenerate |              |
|              |              |              | d by         |              |
|              |              |              | default)     |              |
+--------------+--------------+--------------+--------------+--------------+
| hess_lag     | OT_FUNCTION  | GenericType( | Function for | casadi::NLPS |
|              |              | )            | calculating  | olverInterna |
|              |              |              | the Hessian  | l            |
|              |              |              | of the       |              |
|              |              |              | Lagrangian ( |              |
|              |              |              | autogenerate |              |
|              |              |              | d by         |              |
|              |              |              | default)     |              |
+--------------+--------------+--------------+--------------+--------------+
| hessian_appr | OT_STRING    | \"exact\"      | limited-     | casadi::SQPI |
| oximation    |              |              | memory|exact | nternal      |
+--------------+--------------+--------------+--------------+--------------+
| ignore_check | OT_BOOLEAN   | false        | If set to    | casadi::NLPS |
| _vec         |              |              | true, the    | olverInterna |
|              |              |              | input shape  | l            |
|              |              |              | of F will    |              |
|              |              |              | not be       |              |
|              |              |              | checked.     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_CALLBACK  | GenericType( | A function   | casadi::NLPS |
| llback       |              | )            | that will be | olverInterna |
|              |              |              | called at    | l            |
|              |              |              | each         |              |
|              |              |              | iteration    |              |
|              |              |              | with the     |              |
|              |              |              | solver as    |              |
|              |              |              | input. Check |              |
|              |              |              | documentatio |              |
|              |              |              | n of         |              |
|              |              |              | Callback .   |              |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_BOOLEAN   | false        | If set to    | casadi::NLPS |
| llback_ignor |              |              | true, errors | olverInterna |
| e_errors     |              |              | thrown by it | l            |
|              |              |              | eration_call |              |
|              |              |              | back will be |              |
|              |              |              | ignored.     |              |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_INTEGER   | 1            | Only call    | casadi::NLPS |
| llback_step  |              |              | the callback | olverInterna |
|              |              |              | function     | l            |
|              |              |              | every few    |              |
|              |              |              | iterations.  |              |
+--------------+--------------+--------------+--------------+--------------+
| jac_f        | OT_FUNCTION  | GenericType( | Function for | casadi::NLPS |
|              |              | )            | calculating  | olverInterna |
|              |              |              | the jacobian | l            |
|              |              |              | of the       |              |
|              |              |              | objective    |              |
|              |              |              | (sparse row, |              |
|              |              |              | autogenerate |              |
|              |              |              | d by         |              |
|              |              |              | default)     |              |
+--------------+--------------+--------------+--------------+--------------+
| jac_g        | OT_FUNCTION  | GenericType( | Function for | casadi::NLPS |
|              |              | )            | calculating  | olverInterna |
|              |              |              | the Jacobian | l            |
|              |              |              | of the       |              |
|              |              |              | constraints  |              |
|              |              |              | (autogenerat |              |
|              |              |              | ed by        |              |
|              |              |              | default)     |              |
+--------------+--------------+--------------+--------------+--------------+
| lbfgs_memory | OT_INTEGER   | 10           | Size of      | casadi::SQPI |
|              |              |              | L-BFGS       | nternal      |
|              |              |              | memory.      |              |
+--------------+--------------+--------------+--------------+--------------+
| max_iter     | OT_INTEGER   | 50           | Maximum      | casadi::SQPI |
|              |              |              | number of    | nternal      |
|              |              |              | SQP          |              |
|              |              |              | iterations   |              |
+--------------+--------------+--------------+--------------+--------------+
| max_iter_ls  | OT_INTEGER   | 3            | Maximum      | casadi::SQPI |
|              |              |              | number of    | nternal      |
|              |              |              | linesearch   |              |
|              |              |              | iterations   |              |
+--------------+--------------+--------------+--------------+--------------+
| merit_memory | OT_INTEGER   | 4            | Size of      | casadi::SQPI |
|              |              |              | memory to    | nternal      |
|              |              |              | store        |              |
|              |              |              | history of   |              |
|              |              |              | merit        |              |
|              |              |              | function     |              |
|              |              |              | values       |              |
+--------------+--------------+--------------+--------------+--------------+
| min_step_siz | OT_REAL      | 0.000        | The size     | casadi::SQPI |
| e            |              |              | (inf-norm)   | nternal      |
|              |              |              | of the step  |              |
|              |              |              | size should  |              |
|              |              |              | not become   |              |
|              |              |              | smaller than |              |
|              |              |              | this.        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp | casadi::SQPI |
|              |              |              | uts)  (eval_ | nternal      |
|              |              |              | f|eval_g|eva |              |
|              |              |              | l_jac_g|eval |              |
|              |              |              | _grad_f|eval |              |
|              |              |              | _h|qp|dx)    |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| print_header | OT_BOOLEAN   | true         | Print the    | casadi::SQPI |
|              |              |              | header with  | nternal      |
|              |              |              | problem      |              |
|              |              |              | statistics   |              |
+--------------+--------------+--------------+--------------+--------------+
| print_time   | OT_BOOLEAN   | true         | Print        | casadi::SQPI |
|              |              |              | information  | nternal      |
|              |              |              | about        |              |
|              |              |              | execution    |              |
|              |              |              | time         |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_solver    | OT_QPSOLVER  | GenericType( | The QP       | casadi::SQPI |
|              |              | )            | solver to be | nternal      |
|              |              |              | used by the  |              |
|              |              |              | SQP method   |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_solver_op | OT_DICTIONAR | GenericType( | Options to   | casadi::SQPI |
| tions        | Y            | )            | be passed to | nternal      |
|              |              |              | the QP       |              |
|              |              |              | solver       |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| regularize   | OT_BOOLEAN   | false        | Automatic re | casadi::SQPI |
|              |              |              | gularization | nternal      |
|              |              |              | of Lagrange  |              |
|              |              |              | Hessian.     |              |
+--------------+--------------+--------------+--------------+--------------+
| tol_du       | OT_REAL      | 0.000        | Stopping     | casadi::SQPI |
|              |              |              | criterion    | nternal      |
|              |              |              | for dual inf |              |
|              |              |              | easability   |              |
+--------------+--------------+--------------+--------------+--------------+
| tol_pr       | OT_REAL      | 0.000        | Stopping     | casadi::SQPI |
|              |              |              | criterion    | nternal      |
|              |              |              | for primal i |              |
|              |              |              | nfeasibility |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+
| warn_initial | OT_BOOLEAN   | false        | Warn if the  | casadi::NLPS |
| _bounds      |              |              | initial      | olverInterna |
|              |              |              | guess does   | l            |
|              |              |              | not satisfy  |              |
|              |              |              | LBX and UBX  |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available monitors
+-------------+--------------------------+
|     Id      |         Used in          |
+=============+==========================+
| dx          | casadi::SQPInternal      |
+-------------+--------------------------+
| eval_f      | casadi::SQPInternal      |
+-------------+--------------------------+
| eval_g      | casadi::SQPInternal      |
+-------------+--------------------------+
| eval_grad_f | casadi::SQPInternal      |
+-------------+--------------------------+
| eval_h      | casadi::SQPInternal      |
+-------------+--------------------------+
| eval_jac_g  | casadi::SQPInternal      |
+-------------+--------------------------+
| inputs      | casadi::FunctionInternal |
+-------------+--------------------------+
| outputs     | casadi::FunctionInternal |
+-------------+--------------------------+
| qp          | casadi::SQPInternal      |
+-------------+--------------------------+

>List of available stats
+--------------------+---------------------+
|         Id         |       Used in       |
+====================+=====================+
| iter_count         | casadi::SQPInternal |
+--------------------+---------------------+
| iteration          | casadi::SQPInternal |
+--------------------+---------------------+
| iterations         | casadi::SQPInternal |
+--------------------+---------------------+
| n_eval_f           | casadi::SQPInternal |
+--------------------+---------------------+
| n_eval_g           | casadi::SQPInternal |
+--------------------+---------------------+
| n_eval_grad_f      | casadi::SQPInternal |
+--------------------+---------------------+
| n_eval_h           | casadi::SQPInternal |
+--------------------+---------------------+
| n_eval_jac_g       | casadi::SQPInternal |
+--------------------+---------------------+
| return_status      | casadi::SQPInternal |
+--------------------+---------------------+
| t_callback_fun     | casadi::SQPInternal |
+--------------------+---------------------+
| t_callback_prepare | casadi::SQPInternal |
+--------------------+---------------------+
| t_eval_f           | casadi::SQPInternal |
+--------------------+---------------------+
| t_eval_g           | casadi::SQPInternal |
+--------------------+---------------------+
| t_eval_grad_f      | casadi::SQPInternal |
+--------------------+---------------------+
| t_eval_h           | casadi::SQPInternal |
+--------------------+---------------------+
| t_eval_jac_g       | casadi::SQPInternal |
+--------------------+---------------------+
| t_mainloop         | casadi::SQPInternal |
+--------------------+---------------------+

Diagrams

C++ includes: sqp_method.hpp ";

%feature("docstring") casadi::SQPMethod::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::SQPMethod::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::SQPMethod::getReportConstraints "";

%feature("docstring") casadi::SQPMethod::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::SQPMethod::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::SQPMethod::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::SQPMethod::isNull "

Is a null pointer?

";

%feature("docstring") casadi::SQPMethod::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::SQPMethod::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::SQPMethod::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::SQPMethod::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::SQPMethod::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::SQPMethod::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::SQPMethod::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SQPMethod::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::SQPMethod::gradF "

Access the objective gradient function>Input scheme: casadi::GradFInput
(GRADF_NUM_IN = 3) [gradFIn] +-----------+-------+---------------------+ |
Full name | Short |     Description     |
+===========+=======+=====================+ | GRADF_X   | x     | Decision
variable . | +-----------+-------+---------------------+ | GRADF_P   | p
| Fixed parameter .   | +-----------+-------+---------------------+

";

%feature("docstring") casadi::SQPMethod::SQPMethod "

>  casadi::SQPMethod::SQPMethod()
------------------------------------------------------------------------

Default constructor.

>  casadi::SQPMethod::SQPMethod(const Function &nlp)
------------------------------------------------------------------------

Create an NLP solver instance.

";

%feature("docstring") casadi::SQPMethod::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::SQPMethod::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::SQPMethod::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::SQPMethod::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::SQPMethod::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::SQPMethod::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::SQPMethod::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::SQPMethod::evaluate "

Evaluate.

";

%feature("docstring") casadi::SQPMethod::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::SQPMethod::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::SQPMethod::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::SQPMethod::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::SQPMethod::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::SQPMethod::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::SQPMethod::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::SQPMethod::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::SQPMethod::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::SQPMethod::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") casadi::SQPMethod::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::SQPMethod::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SQPMethod::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::SQPMethod::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::SQPMethod::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::SQPMethod::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::SQPMethod::setNumOutputs "

Set the number of function outputs.

";


// File: classcasadi_1_1StabilizedQPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::StabilizedQPSolver "

StabilizedQPSolver.

Solves the following strictly convex problem:

min          1/2 x' H x + g' x  x  subject to             LBA <= A x <= UBA
LBX <= x   <= UBX      with :       H sparse (n x n) positive definite
g dense  (n x 1)      n: number of decision variables (x)     nc: number of
constraints (A)

If H is not positive-definite, the solver should throw an error.

Joel Andersson

>Input scheme: casadi::StabilizedQPSolverInput (STABILIZED_QP_SOLVER_NUM_IN = 13) [stabilizedQpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| STABILIZED_QP_SOLVER_H | h                      | The square matrix H:   |
|                        |                        | sparse, (n x n). Only  |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical.     |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_G | g                      | The vector g: dense,   |
|                        |                        | (n x 1) .              |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_A | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_L | lba                    | dense, (nc x 1)        |
| BA                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_U | uba                    | dense, (nc x 1)        |
| BA                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_L | lbx                    | dense, (n x 1)         |
| BX                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_U | ubx                    | dense, (n x 1)         |
| BX                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_X | x0                     | dense, (n x 1)         |
| 0                      |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_L | lam_x0                 | dense                  |
| AM_X0                  |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_M | muR                    | dense (1 x 1)          |
| UR                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_M | muE                    | dense (nc x 1)         |
| UE                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_M | mu                     | dense (nc x 1)         |
| U                      |                        |                        |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::QPSolverOutput (QP_SOLVER_NUM_OUT = 5) [qpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_X            | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| QP_SOLVER_COST         | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_A        | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X        | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: stabilized_qp_solver.hpp ";

%feature("docstring") casadi::StabilizedQPSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::StabilizedQPSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::StabilizedQPSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::StabilizedQPSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::StabilizedQPSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::StabilizedQPSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::StabilizedQPSolver::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::StabilizedQPSolver::inputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::StabilizedQPSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::StabilizedQPSolver::checkInputs "[INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::StabilizedQPSolver::inputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::StabilizedQPSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::StabilizedQPSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::StabilizedQPSolver::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::StabilizedQPSolver::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::StabilizedQPSolver::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::StabilizedQPSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::StabilizedQPSolver::spCanEvaluate "[INTERNAL]
Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::StabilizedQPSolver::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::StabilizedQPSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::StabilizedQPSolver::isNull "

Is a null pointer?

";

%feature("docstring") casadi::StabilizedQPSolver::outputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::StabilizedQPSolver::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::StabilizedQPSolver::callDerivative "[INTERNAL]  Evaluate the function symbolically or numerically with
directional derivatives The first two arguments are the nondifferentiated
inputs and results of the evaluation, the next two arguments are a set of
forward directional seeds and the resulting forward directional derivatives,
the length of the vector being the number of forward directions. The next
two arguments are a set of adjoint directional seeds and the resulting
adjoint directional derivatives, the length of the vector being the number
of adjoint directions.

";

%feature("docstring") casadi::StabilizedQPSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::StabilizedQPSolver::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::StabilizedQPSolver::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") casadi::StabilizedQPSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::StabilizedQPSolver::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::StabilizedQPSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::StabilizedQPSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::StabilizedQPSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::StabilizedQPSolver::hasOption "

check if there is an option str

";

%feature("docstring") casadi::StabilizedQPSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::StabilizedQPSolver::print "[INTERNAL]  Print
a description of the object.

";

%feature("docstring") casadi::StabilizedQPSolver::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") casadi::StabilizedQPSolver::spInit "[INTERNAL]  Reset
the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::StabilizedQPSolver::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::StabilizedQPSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::StabilizedQPSolver::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::StabilizedQPSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::StabilizedQPSolver::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::StabilizedQPSolver::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::StabilizedQPSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::StabilizedQPSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::StabilizedQPSolver::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::StabilizedQPSolver::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") casadi::StabilizedQPSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::StabilizedQPSolver::getCount "[INTERNAL]  Get
the reference count.

";

%feature("docstring") casadi::StabilizedQPSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::StabilizedQPSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::StabilizedQPSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::StabilizedQPSolver::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::StabilizedQPSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::StabilizedQPSolver::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::StabilizedQPSolver::generateNativeCode "

Generate native code in the interfaced language for debugging

";

%feature("docstring") casadi::StabilizedQPSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::StabilizedQPSolver::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::StabilizedQPSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::StabilizedQPSolver::StabilizedQPSolver "

Default constructor.

";

%feature("docstring") casadi::StabilizedQPSolver::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::StabilizedQPSolver::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::StabilizedQPSolver::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::StabilizedQPSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::StabilizedQPSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::StabilizedQPSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::StabilizedQPSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::StabilizedQPSolver::clone "[INTERNAL]  Deep
copy.

";

%feature("docstring") casadi::StabilizedQPSolver::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::StabilizedQPSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::StabilizedQPSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::StabilizedQPSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::StabilizedQPSolver::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") casadi::StabilizedQPSolver::assignNodeNoCount "[INTERNAL]  Assign the node to a node class pointer without reference
counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::StabilizedQPSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::StabilizedQPSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::StabilizedQPSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::StabilizedQPSolver::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::StabilizedQPSolver::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::StabilizedQPSolver::schemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::StabilizedQPSolver::setLPOptions "

Set options that make the QP solver more suitable for solving LPs.

";

%feature("docstring") casadi::StabilizedQPSolver::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::StabilizedQPSolver::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::StabilizedQPSolver::isInit "

Is initialized?

";

%feature("docstring") casadi::StabilizedQPSolver::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") casadi::StabilizedQPSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::StabilizedQPSolver::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::StabilizedQPSolver::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::StabilizedQPSolver::evaluate "

Evaluate.

";

%feature("docstring") casadi::StabilizedQPSolver::getOption "

get an option value

";

%feature("docstring") casadi::StabilizedQPSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::StabilizedQPSolver::printPtr "[INTERNAL]
Print the pointer to the internal class

";


// File: classcasadi_1_1StabilizedQPSolverInputIOSchemeVector.xml
%feature("docstring")
casadi::StabilizedQPSolverInputIOSchemeVector::getRepresentation "[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::StabilizedQPSolverInputIOSchemeVector::print "[INTERNAL]  Print a description of the object.

";

%feature("docstring") casadi::StabilizedQPSolverInputIOSchemeVector::vector
"[INTERNAL] ";

%feature("docstring") casadi::StabilizedQPSolverInputIOSchemeVector "[INTERNAL]  Helper function for 'StabilizedQPSolverInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring")
casadi::StabilizedQPSolverInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::StabilizedQPSolverInputIOSchemeVector::repr "[INTERNAL]  Print a representation of the object.

";

%feature("docstring")
casadi::StabilizedQPSolverInputIOSchemeVector::StabilizedQPSolverInputIOSchemeVector
"[INTERNAL] ";

%feature("docstring") casadi::StabilizedQPSolverInputIOSchemeVector::__len__
"[INTERNAL] ";

%feature("docstring")
casadi::StabilizedQPSolverInputIOSchemeVector::getDescription "[INTERNAL]
Return a string with a description (for SWIG)

";


// File: classcasadi_1_1StabilizedSQICSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::StabilizedSQICSolver "

>Input scheme: casadi::StabilizedQPSolverInput (STABILIZED_QP_SOLVER_NUM_IN = 13) [stabilizedQpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| STABILIZED_QP_SOLVER_H | h                      | The square matrix H:   |
|                        |                        | sparse, (n x n). Only  |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical.     |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_G | g                      | The vector g: dense,   |
|                        |                        | (n x 1) .              |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_A | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_L | lba                    | dense, (nc x 1)        |
| BA                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_U | uba                    | dense, (nc x 1)        |
| BA                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_L | lbx                    | dense, (n x 1)         |
| BX                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_U | ubx                    | dense, (n x 1)         |
| BX                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_X | x0                     | dense, (n x 1)         |
| 0                      |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_L | lam_x0                 | dense                  |
| AM_X0                  |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_M | muR                    | dense (1 x 1)          |
| UR                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_M | muE                    | dense (nc x 1)         |
| UE                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_M | mu                     | dense (nc x 1)         |
| U                      |                        |                        |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::QPSolverOutput (QP_SOLVER_NUM_OUT = 5) [qpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_X            | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| QP_SOLVER_COST         | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_A        | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X        | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: stabilized_sqic_solver.hpp ";

%feature("docstring") casadi::StabilizedSQICSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::StabilizedSQICSolver::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::StabilizedSQICSolver::assignNodeNoCount "[INTERNAL]  Assign the node to a node class pointer without reference
counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::StabilizedSQICSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::StabilizedSQICSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::StabilizedSQICSolver::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::StabilizedSQICSolver::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::StabilizedSQICSolver::hasOption "

check if there is an option str

";

%feature("docstring") casadi::StabilizedSQICSolver::evaluate "

Evaluate.

";

%feature("docstring") casadi::StabilizedSQICSolver::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::StabilizedSQICSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::StabilizedSQICSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::StabilizedSQICSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::StabilizedSQICSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::StabilizedSQICSolver::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::StabilizedSQICSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::StabilizedSQICSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::StabilizedSQICSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::StabilizedSQICSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::StabilizedSQICSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::StabilizedSQICSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::StabilizedSQICSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::StabilizedSQICSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::StabilizedSQICSolver::spInit "[INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::StabilizedSQICSolver::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::StabilizedSQICSolver::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::StabilizedSQICSolver::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::StabilizedSQICSolver::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::StabilizedSQICSolver::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::StabilizedSQICSolver::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") casadi::StabilizedSQICSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::StabilizedSQICSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::StabilizedSQICSolver::outputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::StabilizedSQICSolver::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::StabilizedSQICSolver::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") casadi::StabilizedSQICSolver::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") casadi::StabilizedSQICSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::StabilizedSQICSolver::outputScheme "[INTERNAL]  Access input/output scheme.

";

%feature("docstring") casadi::StabilizedSQICSolver::inputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::StabilizedSQICSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::StabilizedSQICSolver::checkInputs "[INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::StabilizedSQICSolver::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::StabilizedSQICSolver::output_struct "[INTERNAL]  Input/output structures of the function

";

%feature("docstring") casadi::StabilizedSQICSolver::setOptionByAllowedIndex
"[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::StabilizedSQICSolver::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::StabilizedSQICSolver::getOption "

get an option value

";

%feature("docstring") casadi::StabilizedSQICSolver::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::StabilizedSQICSolver::setLPOptions "

Set options that make the QP solver more suitable for solving LPs.

";

%feature("docstring") casadi::StabilizedSQICSolver::input_struct "[INTERNAL]  Input/output structures of the function

";

%feature("docstring") casadi::StabilizedSQICSolver::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::StabilizedSQICSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::StabilizedSQICSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::StabilizedSQICSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::StabilizedSQICSolver::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::StabilizedSQICSolver::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::StabilizedSQICSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::StabilizedSQICSolver::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::StabilizedSQICSolver::print "[INTERNAL]
Print a description of the object.

";

%feature("docstring") casadi::StabilizedSQICSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::StabilizedSQICSolver::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::StabilizedSQICSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::StabilizedSQICSolver::StabilizedSQICSolver "

>  casadi::StabilizedSQICSolver::StabilizedSQICSolver()
------------------------------------------------------------------------

Default constructor.

>  casadi::StabilizedSQICSolver::StabilizedSQICSolver(const QPStructure &st)
------------------------------------------------------------------------

Constructor.

Parameters:
-----------

st:  Problem structure

";

%feature("docstring") casadi::StabilizedSQICSolver::isInit "

Is initialized?

";

%feature("docstring") casadi::StabilizedSQICSolver::printPtr "[INTERNAL]
Print the pointer to the internal class

";

%feature("docstring") casadi::StabilizedSQICSolver::clone "[INTERNAL]  Deep
copy.

";

%feature("docstring") casadi::StabilizedSQICSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::StabilizedSQICSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::StabilizedSQICSolver::schemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::StabilizedSQICSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::StabilizedSQICSolver::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") casadi::StabilizedSQICSolver::generateNativeCode "

Generate native code in the interfaced language for debugging

";

%feature("docstring") casadi::StabilizedSQICSolver::spCanEvaluate "[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::StabilizedSQICSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::StabilizedSQICSolver::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") casadi::StabilizedSQICSolver::getCount "[INTERNAL]
Get the reference count.

";

%feature("docstring") casadi::StabilizedSQICSolver::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::StabilizedSQICSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::StabilizedSQICSolver::callDerivative "[INTERNAL]  Evaluate the function symbolically or numerically with
directional derivatives The first two arguments are the nondifferentiated
inputs and results of the evaluation, the next two arguments are a set of
forward directional seeds and the resulting forward directional derivatives,
the length of the vector being the number of forward directions. The next
two arguments are a set of adjoint directional seeds and the resulting
adjoint directional derivatives, the length of the vector being the number
of adjoint directions.

";

%feature("docstring") casadi::StabilizedSQICSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::StabilizedSQICSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::StabilizedSQICSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::StabilizedSQICSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::StabilizedSQICSolver::inputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::StabilizedSQICSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::StabilizedSQICSolver::repr "[INTERNAL]  Print
a representation of the object.

";

%feature("docstring") casadi::StabilizedSQICSolver::isNull "

Is a null pointer?

";

%feature("docstring") casadi::StabilizedSQICSolver::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::StabilizedSQICSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::StabilizedSQICSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::StabilizedSQICSolver::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::StabilizedSQICSolver::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::StabilizedSQICSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";


// File: classcasadi_1_1StabilizedSQPMethod.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::StabilizedSQPMethod::getOption "

get an option value

";

%feature("docstring") casadi::StabilizedSQPMethod::reportConstraints "

Prints out a human readable report about possible constraint violations,
after solving.

";

%feature("docstring") casadi::StabilizedSQPMethod::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::StabilizedSQPMethod::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::StabilizedSQPMethod::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::StabilizedSQPMethod::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::StabilizedSQPMethod::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::StabilizedSQPMethod::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::StabilizedSQPMethod::spCanEvaluate "[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::StabilizedSQPMethod::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::StabilizedSQPMethod::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::StabilizedSQPMethod::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::StabilizedSQPMethod::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::StabilizedSQPMethod::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::StabilizedSQPMethod::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::StabilizedSQPMethod::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::StabilizedSQPMethod::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::StabilizedSQPMethod::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::StabilizedSQPMethod::jacG "

Access the Jacobian of the constraint function.

>Input scheme: casadi::HessLagInput (HESSLAG_NUM_IN = 5) [hessLagIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| HESSLAG_X              | x                      | Decision variable .    |
+------------------------+------------------------+------------------------+
| HESSLAG_P              | p                      | Fixed parameter .      |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_F          | lam_f                  | Multiplier for f. Just |
|                        |                        | a scalar factor for    |
|                        |                        | the objective that the |
|                        |                        | NLP solver might use   |
|                        |                        | to scale the           |
|                        |                        | objective.             |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_G          | lam_g                  | Multiplier for g .     |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::HessLagOutput (HESSLAG_NUM_OUT = 6) [hessLagOut]
+----------------+--------+------------------------------------------------+
|   Full name    | Short  |                  Description                   |
+================+========+================================================+
| HESSLAG_HESS   | hess   | Hessian of the Lagrangian .                    |
+----------------+--------+------------------------------------------------+
| HESSLAG_F      | f      | Objective function .                           |
+----------------+--------+------------------------------------------------+
| HESSLAG_G      | g      | Constraint function .                          |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_X | grad_x | Gradient of the Lagrangian with respect to x . |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_P | grad_p | Gradient of the Lagrangian with respect to p . |
+----------------+--------+------------------------------------------------+

";

%feature("docstring") casadi::StabilizedSQPMethod::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::StabilizedSQPMethod::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") casadi::StabilizedSQPMethod::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::StabilizedSQPMethod::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::StabilizedSQPMethod::getCount "[INTERNAL]
Get the reference count.

";

%feature("docstring") casadi::StabilizedSQPMethod::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") casadi::StabilizedSQPMethod::output_struct "[INTERNAL]  Input/output structures of the function

";

%feature("docstring") casadi::StabilizedSQPMethod::repr "[INTERNAL]  Print
a representation of the object.

";

%feature("docstring") casadi::StabilizedSQPMethod::outputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::StabilizedSQPMethod::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::StabilizedSQPMethod::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::StabilizedSQPMethod::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::StabilizedSQPMethod::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::StabilizedSQPMethod::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::StabilizedSQPMethod::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::StabilizedSQPMethod::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::StabilizedSQPMethod::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::StabilizedSQPMethod::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::StabilizedSQPMethod::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::StabilizedSQPMethod::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::StabilizedSQPMethod::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::StabilizedSQPMethod::inputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::StabilizedSQPMethod::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::StabilizedSQPMethod::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::StabilizedSQPMethod::schemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::StabilizedSQPMethod::print "[INTERNAL]  Print
a description of the object.

";

%feature("docstring") casadi::StabilizedSQPMethod::hasOption "

check if there is an option str

";

%feature("docstring") casadi::StabilizedSQPMethod::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::StabilizedSQPMethod::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::StabilizedSQPMethod::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::StabilizedSQPMethod::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::StabilizedSQPMethod::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::StabilizedSQPMethod::clone "[INTERNAL]  Deep
copy.

";

%feature("docstring") casadi::StabilizedSQPMethod::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::StabilizedSQPMethod::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::StabilizedSQPMethod::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::StabilizedSQPMethod::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::StabilizedSQPMethod::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::StabilizedSQPMethod::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::StabilizedSQPMethod::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::StabilizedSQPMethod::getReportConstraints "";

%feature("docstring") casadi::StabilizedSQPMethod::callDerivative "[INTERNAL]  Evaluate the function symbolically or numerically with
directional derivatives The first two arguments are the nondifferentiated
inputs and results of the evaluation, the next two arguments are a set of
forward directional seeds and the resulting forward directional derivatives,
the length of the vector being the number of forward directions. The next
two arguments are a set of adjoint directional seeds and the resulting
adjoint directional derivatives, the length of the vector being the number
of adjoint directions.

";

%feature("docstring") casadi::StabilizedSQPMethod::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") casadi::StabilizedSQPMethod::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::StabilizedSQPMethod::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::StabilizedSQPMethod::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::StabilizedSQPMethod::printPtr "[INTERNAL]
Print the pointer to the internal class

";

%feature("docstring") casadi::StabilizedSQPMethod::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::StabilizedSQPMethod::weak "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring") casadi::StabilizedSQPMethod::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::StabilizedSQPMethod::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::StabilizedSQPMethod::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::StabilizedSQPMethod "

Stabilized Sequential Quadratic Programming method.

Slava Kung

>Input scheme: casadi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| TReta1       | OT_REAL      | 0.800        | Required     | casadi::Stab |
|              |              |              | predicted /  | ilizedSQPInt |
|              |              |              | actual       | ernal        |
|              |              |              | decrease for |              |
|              |              |              | TR increase  |              |
+--------------+--------------+--------------+--------------+--------------+
| TReta2       | OT_REAL      | 0.200        | Required     | casadi::Stab |
|              |              |              | predicted /  | ilizedSQPInt |
|              |              |              | actual       | ernal        |
|              |              |              | decrease for |              |
|              |              |              | TR decrease  |              |
+--------------+--------------+--------------+--------------+--------------+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| alphaMin     | OT_REAL      | 0.001        | Used to      | casadi::Stab |
|              |              |              | check        | ilizedSQPInt |
|              |              |              | whether to   | ernal        |
|              |              |              | increase     |              |
|              |              |              | rho.         |              |
+--------------+--------------+--------------+--------------+--------------+
| beta         | OT_REAL      | 0.500        | Line-search  | casadi::Stab |
|              |              |              | parameter,   | ilizedSQPInt |
|              |              |              | restoration  | ernal        |
|              |              |              | factor of    |              |
|              |              |              | stepsize     |              |
+--------------+--------------+--------------+--------------+--------------+
| c1           | OT_REAL      | 0.001        | Armijo       | casadi::Stab |
|              |              |              | condition,   | ilizedSQPInt |
|              |              |              | coefficient  | ernal        |
|              |              |              | of decrease  |              |
|              |              |              | in merit     |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| dvMax0       | OT_REAL      | 100          | Parameter    | casadi::Stab |
|              |              |              | used to      | ilizedSQPInt |
|              |              |              | defined the  | ernal        |
|              |              |              | max step     |              |
|              |              |              | length.      |              |
+--------------+--------------+--------------+--------------+--------------+
| eps_active   | OT_REAL      | 0.000        | Threshold    | casadi::Stab |
|              |              |              | for the      | ilizedSQPInt |
|              |              |              | epsilon-     | ernal        |
|              |              |              | active set.  |              |
+--------------+--------------+--------------+--------------+--------------+
| expand       | OT_BOOLEAN   | false        | Expand the   | casadi::NLPS |
|              |              |              | NLP function | olverInterna |
|              |              |              | in terms of  | l            |
|              |              |              | scalar       |              |
|              |              |              | operations,  |              |
|              |              |              | i.e. MX->SX  |              |
+--------------+--------------+--------------+--------------+--------------+
| gamma1       | OT_REAL      | 2            | Trust region | casadi::Stab |
|              |              |              | increase     | ilizedSQPInt |
|              |              |              | parameter    | ernal        |
+--------------+--------------+--------------+--------------+--------------+
| gamma2       | OT_REAL      | 1            | Trust region | casadi::Stab |
|              |              |              | update       | ilizedSQPInt |
|              |              |              | parameter    | ernal        |
+--------------+--------------+--------------+--------------+--------------+
| gamma3       | OT_REAL      | 1            | Trust region | casadi::Stab |
|              |              |              | decrease     | ilizedSQPInt |
|              |              |              | parameter    | ernal        |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| grad_f       | OT_FUNCTION  | GenericType( | Function for | casadi::NLPS |
|              |              | )            | calculating  | olverInterna |
|              |              |              | the gradient | l            |
|              |              |              | of the       |              |
|              |              |              | objective    |              |
|              |              |              | (column, aut |              |
|              |              |              | ogenerated   |              |
|              |              |              | by default)  |              |
+--------------+--------------+--------------+--------------+--------------+
| grad_lag     | OT_FUNCTION  | GenericType( | Function for | casadi::NLPS |
|              |              | )            | calculating  | olverInterna |
|              |              |              | the gradient | l            |
|              |              |              | of the       |              |
|              |              |              | Lagrangian ( |              |
|              |              |              | autogenerate |              |
|              |              |              | d by         |              |
|              |              |              | default)     |              |
+--------------+--------------+--------------+--------------+--------------+
| hess_lag     | OT_FUNCTION  | GenericType( | Function for | casadi::NLPS |
|              |              | )            | calculating  | olverInterna |
|              |              |              | the Hessian  | l            |
|              |              |              | of the       |              |
|              |              |              | Lagrangian ( |              |
|              |              |              | autogenerate |              |
|              |              |              | d by         |              |
|              |              |              | default)     |              |
+--------------+--------------+--------------+--------------+--------------+
| hessian_appr | OT_STRING    | \"exact\"      | limited-     | casadi::Stab |
| oximation    |              |              | memory|exact | ilizedSQPInt |
|              |              |              |              | ernal        |
+--------------+--------------+--------------+--------------+--------------+
| ignore_check | OT_BOOLEAN   | false        | If set to    | casadi::NLPS |
| _vec         |              |              | true, the    | olverInterna |
|              |              |              | input shape  | l            |
|              |              |              | of F will    |              |
|              |              |              | not be       |              |
|              |              |              | checked.     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_CALLBACK  | GenericType( | A function   | casadi::NLPS |
| llback       |              | )            | that will be | olverInterna |
|              |              |              | called at    | l            |
|              |              |              | each         |              |
|              |              |              | iteration    |              |
|              |              |              | with the     |              |
|              |              |              | solver as    |              |
|              |              |              | input. Check |              |
|              |              |              | documentatio |              |
|              |              |              | n of         |              |
|              |              |              | Callback .   |              |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_BOOLEAN   | false        | If set to    | casadi::NLPS |
| llback_ignor |              |              | true, errors | olverInterna |
| e_errors     |              |              | thrown by it | l            |
|              |              |              | eration_call |              |
|              |              |              | back will be |              |
|              |              |              | ignored.     |              |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_INTEGER   | 1            | Only call    | casadi::NLPS |
| llback_step  |              |              | the callback | olverInterna |
|              |              |              | function     | l            |
|              |              |              | every few    |              |
|              |              |              | iterations.  |              |
+--------------+--------------+--------------+--------------+--------------+
| jac_f        | OT_FUNCTION  | GenericType( | Function for | casadi::NLPS |
|              |              | )            | calculating  | olverInterna |
|              |              |              | the jacobian | l            |
|              |              |              | of the       |              |
|              |              |              | objective    |              |
|              |              |              | (sparse row, |              |
|              |              |              | autogenerate |              |
|              |              |              | d by         |              |
|              |              |              | default)     |              |
+--------------+--------------+--------------+--------------+--------------+
| jac_g        | OT_FUNCTION  | GenericType( | Function for | casadi::NLPS |
|              |              | )            | calculating  | olverInterna |
|              |              |              | the Jacobian | l            |
|              |              |              | of the       |              |
|              |              |              | constraints  |              |
|              |              |              | (autogenerat |              |
|              |              |              | ed by        |              |
|              |              |              | default)     |              |
+--------------+--------------+--------------+--------------+--------------+
| lbfgs_memory | OT_INTEGER   | 10           | Size of      | casadi::Stab |
|              |              |              | L-BFGS       | ilizedSQPInt |
|              |              |              | memory.      | ernal        |
+--------------+--------------+--------------+--------------+--------------+
| max_iter     | OT_INTEGER   | 100          | Maximum      | casadi::Stab |
|              |              |              | number of    | ilizedSQPInt |
|              |              |              | SQP          | ernal        |
|              |              |              | iterations   |              |
+--------------+--------------+--------------+--------------+--------------+
| max_iter_ls  | OT_INTEGER   | 20           | Maximum      | casadi::Stab |
|              |              |              | number of    | ilizedSQPInt |
|              |              |              | linesearch   | ernal        |
|              |              |              | iterations   |              |
+--------------+--------------+--------------+--------------+--------------+
| max_time     | OT_REAL      | 1.000e+12    | Timeout      | casadi::Stab |
|              |              |              |              | ilizedSQPInt |
|              |              |              |              | ernal        |
+--------------+--------------+--------------+--------------+--------------+
| merit_memory | OT_INTEGER   | 4            | Size of      | casadi::Stab |
|              |              |              | memory to    | ilizedSQPInt |
|              |              |              | store        | ernal        |
|              |              |              | history of   |              |
|              |              |              | merit        |              |
|              |              |              | function     |              |
|              |              |              | values       |              |
+--------------+--------------+--------------+--------------+--------------+
| min_step_siz | OT_REAL      | 0.000        | The size     | casadi::Stab |
| e            |              |              | (inf-norm)   | ilizedSQPInt |
|              |              |              | of the step  | ernal        |
|              |              |              | size should  |              |
|              |              |              | not become   |              |
|              |              |              | smaller than |              |
|              |              |              | this.        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp | casadi::Stab |
|              |              |              | uts)  (eval_ | ilizedSQPInt |
|              |              |              | f|eval_g|eva | ernal        |
|              |              |              | l_jac_g|eval |              |
|              |              |              | _grad_f|eval |              |
|              |              |              | _h|qp|dx)    |              |
+--------------+--------------+--------------+--------------+--------------+
| muR0         | OT_REAL      | 0.000        | Initial      | casadi::Stab |
|              |              |              | choice of re | ilizedSQPInt |
|              |              |              | gularization | ernal        |
|              |              |              | parameter    |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| nu           | OT_REAL      | 1            | Parameter    | casadi::Stab |
|              |              |              | for primal-  | ilizedSQPInt |
|              |              |              | dual         | ernal        |
|              |              |              | augmented    |              |
|              |              |              | Lagrangian.  |              |
+--------------+--------------+--------------+--------------+--------------+
| phiWeight    | OT_REAL      | 0.000        | Weight used  | casadi::Stab |
|              |              |              | in pseudo-   | ilizedSQPInt |
|              |              |              | filter.      | ernal        |
+--------------+--------------+--------------+--------------+--------------+
| print_header | OT_BOOLEAN   | true         | Print the    | casadi::Stab |
|              |              |              | header with  | ilizedSQPInt |
|              |              |              | problem      | ernal        |
|              |              |              | statistics   |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| regularize   | OT_BOOLEAN   | false        | Automatic re | casadi::Stab |
|              |              |              | gularization | ilizedSQPInt |
|              |              |              | of Lagrange  | ernal        |
|              |              |              | Hessian.     |              |
+--------------+--------------+--------------+--------------+--------------+
| stabilized_q | OT_STABILIZE | GenericType( | The          | casadi::Stab |
| p_solver     | DQPSOLVER    | )            | Stabilized   | ilizedSQPInt |
|              |              |              | QP solver to | ernal        |
|              |              |              | be used by   |              |
|              |              |              | the SQP      |              |
|              |              |              | method       |              |
+--------------+--------------+--------------+--------------+--------------+
| stabilized_q | OT_DICTIONAR | GenericType( | Options to   | casadi::Stab |
| p_solver_opt | Y            | )            | be passed to | ilizedSQPInt |
| ions         |              |              | the          | ernal        |
|              |              |              | Stabilized   |              |
|              |              |              | QP solver    |              |
+--------------+--------------+--------------+--------------+--------------+
| tau0         | OT_REAL      | 0.010        | Initial      | casadi::Stab |
|              |              |              | parameter    | ilizedSQPInt |
|              |              |              | for the      | ernal        |
|              |              |              | merit        |              |
|              |              |              | function     |              |
|              |              |              | optimality   |              |
|              |              |              | threshold.   |              |
+--------------+--------------+--------------+--------------+--------------+
| tol_du       | OT_REAL      | 0.000        | Stopping     | casadi::Stab |
|              |              |              | criterion    | ilizedSQPInt |
|              |              |              | for dual inf | ernal        |
|              |              |              | easability   |              |
+--------------+--------------+--------------+--------------+--------------+
| tol_pr       | OT_REAL      | 0.000        | Stopping     | casadi::Stab |
|              |              |              | criterion    | ilizedSQPInt |
|              |              |              | for primal i | ernal        |
|              |              |              | nfeasibility |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+
| warn_initial | OT_BOOLEAN   | false        | Warn if the  | casadi::NLPS |
| _bounds      |              |              | initial      | olverInterna |
|              |              |              | guess does   | l            |
|              |              |              | not satisfy  |              |
|              |              |              | LBX and UBX  |              |
+--------------+--------------+--------------+--------------+--------------+
| yEinitial    | OT_STRING    | \"simple\"     | Initial      | casadi::Stab |
|              |              |              | multiplier.  | ilizedSQPInt |
|              |              |              | Simple (all  | ernal        |
|              |              |              | zero) or     |              |
|              |              |              | least (LSQ). |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available monitors
+-------------+-------------------------------+
|     Id      |            Used in            |
+=============+===============================+
| dx          | casadi::StabilizedSQPInternal |
+-------------+-------------------------------+
| eval_f      | casadi::StabilizedSQPInternal |
+-------------+-------------------------------+
| eval_g      | casadi::StabilizedSQPInternal |
+-------------+-------------------------------+
| eval_grad_f | casadi::StabilizedSQPInternal |
+-------------+-------------------------------+
| eval_h      | casadi::StabilizedSQPInternal |
+-------------+-------------------------------+
| eval_jac_g  | casadi::StabilizedSQPInternal |
+-------------+-------------------------------+
| inputs      | casadi::FunctionInternal      |
+-------------+-------------------------------+
| outputs     | casadi::FunctionInternal      |
+-------------+-------------------------------+
| qp          | casadi::StabilizedSQPInternal |
+-------------+-------------------------------+

>List of available stats
+---------------+-------------------------------+
|      Id       |            Used in            |
+===============+===============================+
| iter_count    | casadi::StabilizedSQPInternal |
+---------------+-------------------------------+
| return_status | casadi::StabilizedSQPInternal |
+---------------+-------------------------------+

Diagrams

C++ includes: stabilized_sqp_method.hpp ";

%feature("docstring") casadi::StabilizedSQPMethod::gradF "

Access the objective gradient function>Input scheme: casadi::GradFInput
(GRADF_NUM_IN = 3) [gradFIn] +-----------+-------+---------------------+ |
Full name | Short |     Description     |
+===========+=======+=====================+ | GRADF_X   | x     | Decision
variable . | +-----------+-------+---------------------+ | GRADF_P   | p
| Fixed parameter .   | +-----------+-------+---------------------+

";

%feature("docstring") casadi::StabilizedSQPMethod::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::StabilizedSQPMethod::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::StabilizedSQPMethod::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::StabilizedSQPMethod::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::StabilizedSQPMethod::setQPOptions "

Set options that make the NLP solver more suitable for solving QPs.

";

%feature("docstring") casadi::StabilizedSQPMethod::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::StabilizedSQPMethod::isInit "

Is initialized?

";

%feature("docstring") casadi::StabilizedSQPMethod::nlp "

Access the NLP.

>Input scheme: casadi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::StabilizedSQPMethod::getStabilizedQPSolver "

Access the StabilizedQPSolver used internally.

";

%feature("docstring") casadi::StabilizedSQPMethod::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::StabilizedSQPMethod::checkInputs "[INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::StabilizedSQPMethod::isNull "

Is a null pointer?

";

%feature("docstring") casadi::StabilizedSQPMethod::inputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::StabilizedSQPMethod::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") casadi::StabilizedSQPMethod::spInit "[INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::StabilizedSQPMethod::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::StabilizedSQPMethod::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::StabilizedSQPMethod::assignNodeNoCount "[INTERNAL]  Assign the node to a node class pointer without reference
counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::StabilizedSQPMethod::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::StabilizedSQPMethod::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::StabilizedSQPMethod::hessLag "

Access the Hessian of the Lagrangian function.

>Input scheme: casadi::JacGInput (JACG_NUM_IN = 3) [jacGIn]
+-----------+-------+---------------------+
| Full name | Short |     Description     |
+===========+=======+=====================+
| JACG_X    | x     | Decision variable . |
+-----------+-------+---------------------+
| JACG_P    | p     | Fixed parameter .   |
+-----------+-------+---------------------+

>Output scheme: casadi::JacGOutput (JACG_NUM_OUT = 4) [jacGOut]
+-----------+-------+-------------------------------+
| Full name | Short |          Description          |
+===========+=======+===============================+
| JACG_JAC  | jac   | Jacobian of the constraints . |
+-----------+-------+-------------------------------+
| JACG_F    | f     | Objective function .          |
+-----------+-------+-------------------------------+
| JACG_G    | g     | Constraint function .         |
+-----------+-------+-------------------------------+

";

%feature("docstring") casadi::StabilizedSQPMethod::evaluate "

Evaluate.

";

%feature("docstring") casadi::StabilizedSQPMethod::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::StabilizedSQPMethod::StabilizedSQPMethod "

>  casadi::StabilizedSQPMethod::StabilizedSQPMethod()
------------------------------------------------------------------------

Default constructor.

>  casadi::StabilizedSQPMethod::StabilizedSQPMethod(const Function &nlp)
------------------------------------------------------------------------

Create an NLP solver instance.

";

%feature("docstring") casadi::StabilizedSQPMethod::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::StabilizedSQPMethod::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";


// File: classcasadi_1_1SubAssign.xml
%feature("docstring") casadi::SubAssign::clone "[INTERNAL]  Clone function.

";

%feature("docstring") casadi::SubAssign::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") casadi::SubAssign::sparsity "

>  const Sparsity& casadi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & casadi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") casadi::SubAssign::getSetSparse "[INTERNAL]  Create
set sparse.

";

%feature("docstring") casadi::SubAssign::dep "

>  const MX & casadi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & casadi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::SubAssign::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") casadi::SubAssign::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") casadi::SubAssign::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::SubAssign::getSolve "[INTERNAL]   Solve a
system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") casadi::SubAssign::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::SubAssign::getVertsplit "[INTERNAL]  Create a
vertical split node (vectors only)

";

%feature("docstring") casadi::SubAssign::evaluateSX "[INTERNAL]  Evaluate
the function symbolically (SX)

";

%feature("docstring") casadi::SubAssign::evaluateGen "[INTERNAL]  Evaluate
the function (template)

";

%feature("docstring") casadi::SubAssign::evaluateMX "

>  void casadi::SubAssign::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void casadi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") casadi::SubAssign::isNonLinear "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring") casadi::SubAssign::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") casadi::SubAssign::getAddNonzeros "[INTERNAL]  Add
the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::SubAssign::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") casadi::SubAssign::getInverse "[INTERNAL]   Inverse.

";

%feature("docstring") casadi::SubAssign::getBinary "[INTERNAL]  Get a
binary operation operation (matrix-matrix)

";

%feature("docstring") casadi::SubAssign::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") casadi::SubAssign::isOutputNode "[INTERNAL]  Check if
evaluation output.

";

%feature("docstring") casadi::SubAssign "[INTERNAL]  Reference to a
submatrix.

Joel Andersson

C++ includes: subassign.hpp ";

%feature("docstring") casadi::SubAssign::getSetNonzeros "[INTERNAL]  Assign
the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::SubAssign::propagateSparsity "[INTERNAL]
Propagate sparsity.

";

%feature("docstring") casadi::SubAssign::SubAssign "[INTERNAL]
Constructor.

";

%feature("docstring") casadi::SubAssign::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") casadi::SubAssign::getHorzsplit "[INTERNAL]  Create a
horizontal split node.

";

%feature("docstring") casadi::SubAssign::getNormInf "[INTERNAL]  Infinity
norm.

";

%feature("docstring") casadi::SubAssign::getValue "[INTERNAL]  Get the
value (only for scalar constant nodes)

";

%feature("docstring") casadi::SubAssign::getSubRef "[INTERNAL]  Get
submatrix reference.

";

%feature("docstring") casadi::SubAssign::getGetNonzeros "[INTERNAL]  Get
the nonzeros of matrix.

";

%feature("docstring") casadi::SubAssign::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") casadi::SubAssign::getFunction "[INTERNAL]  Get
function reference.

";

%feature("docstring") casadi::SubAssign::size2 "[INTERNAL] ";

%feature("docstring") casadi::SubAssign::size1 "[INTERNAL] ";

%feature("docstring") casadi::SubAssign::simplifyMe "[INTERNAL]  Simplify
the expression (ex is a reference to the node)

";

%feature("docstring") casadi::SubAssign::hasDep "[INTERNAL]  Does the node
depend on other nodes.

";

%feature("docstring") casadi::SubAssign::getNormF "[INTERNAL]  Frobenius
norm.

";

%feature("docstring") casadi::SubAssign::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") casadi::SubAssign::printPart "[INTERNAL]  Print a
part of the expression */.

";

%feature("docstring") casadi::SubAssign::getOutput "[INTERNAL]  Get an
output.

";

%feature("docstring") casadi::SubAssign::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") casadi::SubAssign::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") casadi::SubAssign::getFunctionInput "[INTERNAL]  Get
function input.

";

%feature("docstring") casadi::SubAssign::getMatrixValue "[INTERNAL]  Get
the value (only for constant nodes)

";

%feature("docstring") casadi::SubAssign::getUnary "[INTERNAL]  Get a unary
operation.

";

%feature("docstring") casadi::SubAssign::isUnaryOp "[INTERNAL]  Check if
unary operation.

";

%feature("docstring") casadi::SubAssign::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") casadi::SubAssign::getNorm2 "[INTERNAL]  Spectral
norm.

";

%feature("docstring") casadi::SubAssign::getMultiplication "[INTERNAL]
Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") casadi::SubAssign::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") casadi::SubAssign::getName "[INTERNAL]  Get the name.

";

%feature("docstring") casadi::SubAssign::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") casadi::SubAssign::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring") casadi::SubAssign::~SubAssign "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::SubAssign::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") casadi::SubAssign::sameOpAndDeps "[INTERNAL]  Checks
if two nodes have the same operation and have equivalent dependencies up to
a given depth.

";

%feature("docstring") casadi::SubAssign::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") casadi::SubAssign::numel "[INTERNAL]  Get shape.

";

%feature("docstring") casadi::SubAssign::getNumOutputs "[INTERNAL]  Number
of outputs.

";

%feature("docstring") casadi::SubAssign::shape "[INTERNAL] ";

%feature("docstring") casadi::SubAssign::size "[INTERNAL] ";

%feature("docstring") casadi::SubAssign::setDependencies "

>  void casadi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void casadi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") casadi::SubAssign::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") casadi::SubAssign::evaluateD "[INTERNAL]  Evaluate
the function numerically.

";

%feature("docstring") casadi::SubAssign::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") casadi::SubAssign::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") casadi::SubAssign::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::SubAssign::print "

>  void casadi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void casadi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") casadi::SubAssign::assertInit "[INTERNAL]  Assert
that the object has been initialized.

";

%feature("docstring") casadi::SubAssign::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") casadi::SubAssign::assign "

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") casadi::SubAssign::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") casadi::SubAssign::deepCopyMembers "[INTERNAL]  Deep
copy data members.

";

%feature("docstring") casadi::SubAssign::getFunctionOutput "[INTERNAL]  Get
function output.

";

%feature("docstring") casadi::SubAssign::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") casadi::SubAssign::mapping "[INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") casadi::SubAssign::getBinarySwitch "[INTERNAL]  Get a
binary operation operation.

";

%feature("docstring") casadi::SubAssign::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") casadi::SubAssign::getReshape "[INTERNAL]   Reshape.

";

%feature("docstring") casadi::SubAssign::isMultipleOutput "[INTERNAL]
Check if a multiple output node.

";


// File: classcasadi_1_1SubMatrix.xml
%feature("docstring") casadi::SubMatrix "

submatrix

SubMatrix class for Matrix SubMatrix is the return type for operator() of
the Matrix class, it allows access to the value as well as changing the
parent object Joel Andersson

C++ includes: submatrix.hpp ";

%feature("docstring") casadi::SubMatrix::SubMatrix "

Constructor.

";


// File: classcasadi_1_1SubRef.xml
%feature("docstring") casadi::SubRef::isNonLinear "[INTERNAL]  Is the node
nonlinear.

";

%feature("docstring") casadi::SubRef::sameOpAndDeps "[INTERNAL]  Checks if
two nodes have the same operation and have equivalent dependencies up to a
given depth.

";

%feature("docstring") casadi::SubRef::getSubRef "[INTERNAL]  Get submatrix
reference.

";

%feature("docstring") casadi::SubRef::assign "

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") casadi::SubRef::evaluateGen "[INTERNAL]  Evaluate the
function (template)

";

%feature("docstring") casadi::SubRef::size "[INTERNAL] ";

%feature("docstring") casadi::SubRef::setDependencies "

>  void casadi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void casadi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") casadi::SubRef::isUnaryOp "[INTERNAL]  Check if unary
operation.

";

%feature("docstring") casadi::SubRef::getValue "[INTERNAL]  Get the value
(only for scalar constant nodes)

";

%feature("docstring") casadi::SubRef::print "

>  void casadi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void casadi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") casadi::SubRef::getUnary "[INTERNAL]  Get a unary
operation.

";

%feature("docstring") casadi::SubRef::getInverse "[INTERNAL]   Inverse.

";

%feature("docstring") casadi::SubRef::simplifyMe "[INTERNAL]  Simplify the
expression (ex is a reference to the node)

";

%feature("docstring") casadi::SubRef::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") casadi::SubRef::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") casadi::SubRef::getNormInf "[INTERNAL]  Infinity
norm.

";

%feature("docstring") casadi::SubRef::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") casadi::SubRef::assertInit "[INTERNAL]  Assert that
the object has been initialized.

";

%feature("docstring") casadi::SubRef::getFunctionOutput "[INTERNAL]  Get
function output.

";

%feature("docstring") casadi::SubRef::evaluateMX "

>  void casadi::SubRef::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void casadi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") casadi::SubRef::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") casadi::SubRef::isMultipleOutput "[INTERNAL]  Check
if a multiple output node.

";

%feature("docstring") casadi::SubRef::getAssertion "[INTERNAL]   Assertion.

";

%feature("docstring") casadi::SubRef::getTranspose "[INTERNAL]   Transpose.

";

%feature("docstring") casadi::SubRef::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") casadi::SubRef::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") casadi::SubRef::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring") casadi::SubRef "[INTERNAL]  Reference to a submatrix.

Joel Andersson

C++ includes: subref.hpp ";

%feature("docstring") casadi::SubRef::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") casadi::SubRef::getMultiplication "[INTERNAL]
Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") casadi::SubRef::propagateSparsity "[INTERNAL]
Propagate sparsity.

";

%feature("docstring") casadi::SubRef::getNormF "[INTERNAL]  Frobenius norm.

";

%feature("docstring") casadi::SubRef::getHorzsplit "[INTERNAL]  Create a
horizontal split node.

";

%feature("docstring") casadi::SubRef::shape "[INTERNAL] ";

%feature("docstring") casadi::SubRef::getSolve "[INTERNAL]   Solve a system
of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") casadi::SubRef::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::SubRef::sparsity "

>  const Sparsity& casadi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & casadi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") casadi::SubRef::getFunctionInput "[INTERNAL]  Get
function input.

";

%feature("docstring") casadi::SubRef::dep "

>  const MX & casadi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & casadi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::SubRef::getName "[INTERNAL]  Get the name.

";

%feature("docstring") casadi::SubRef::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") casadi::SubRef::getOp "[INTERNAL]  Get the operation.

";

%feature("docstring") casadi::SubRef::deepCopyMembers "[INTERNAL]  Deep
copy data members.

";

%feature("docstring") casadi::SubRef::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") casadi::SubRef::getGetNonzeros "[INTERNAL]  Get the
nonzeros of matrix.

";

%feature("docstring") casadi::SubRef::getOutput "[INTERNAL]  Get an output.

";

%feature("docstring") casadi::SubRef::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") casadi::SubRef::hasDep "[INTERNAL]  Does the node
depend on other nodes.

";

%feature("docstring") casadi::SubRef::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::SubRef::getFunction "[INTERNAL]  Get function
reference.

";

%feature("docstring") casadi::SubRef::getSetSparse "[INTERNAL]  Create set
sparse.

";

%feature("docstring") casadi::SubRef::getAddNonzeros "[INTERNAL]  Add the
nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::SubRef::clone "[INTERNAL]  Clone function.

";

%feature("docstring") casadi::SubRef::getVertsplit "[INTERNAL]  Create a
vertical split node (vectors only)

";

%feature("docstring") casadi::SubRef::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") casadi::SubRef::mapping "[INTERNAL]  Get an IMatrix
representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") casadi::SubRef::getNumOutputs "[INTERNAL]  Number of
outputs.

";

%feature("docstring") casadi::SubRef::~SubRef "[INTERNAL]  Destructor.

";

%feature("docstring") casadi::SubRef::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::SubRef::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") casadi::SubRef::getSetNonzeros "[INTERNAL]  Assign
the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::SubRef::size1 "[INTERNAL] ";

%feature("docstring") casadi::SubRef::size2 "[INTERNAL] ";

%feature("docstring") casadi::SubRef::getBinarySwitch "[INTERNAL]  Get a
binary operation operation.

";

%feature("docstring") casadi::SubRef::evaluateD "[INTERNAL]  Evaluate the
function numerically.

";

%feature("docstring") casadi::SubRef::getNorm2 "[INTERNAL]  Spectral norm.

";

%feature("docstring") casadi::SubRef::getReshape "[INTERNAL]   Reshape.

";

%feature("docstring") casadi::SubRef::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") casadi::SubRef::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") casadi::SubRef::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") casadi::SubRef::getBinary "[INTERNAL]  Get a binary
operation operation (matrix-matrix)

";

%feature("docstring") casadi::SubRef::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") casadi::SubRef::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") casadi::SubRef::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") casadi::SubRef::SubRef "[INTERNAL]  Constructor.

";

%feature("docstring") casadi::SubRef::getMatrixValue "[INTERNAL]  Get the
value (only for constant nodes)

";

%feature("docstring") casadi::SubRef::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") casadi::SubRef::evaluateSX "[INTERNAL]  Evaluate the
function symbolically (SX)

";

%feature("docstring") casadi::SubRef::isOutputNode "[INTERNAL]  Check if
evaluation output.

";

%feature("docstring") casadi::SubRef::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") casadi::SubRef::numel "[INTERNAL]  Get shape.

";

%feature("docstring") casadi::SubRef::printPart "[INTERNAL]  Print a part
of the expression */.

";


// File: classcasadi_1_1SundialsIntegrator.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::SundialsIntegrator::weak " [INTERNAL]  Get a weak reference to the
object.

";

%feature("docstring") casadi::SundialsIntegrator::SundialsIntegrator "

Default constructor.

";

%feature("docstring") casadi::SundialsIntegrator::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::SundialsIntegrator::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::SundialsIntegrator::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::SundialsIntegrator::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::SundialsIntegrator::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::SundialsIntegrator::integrate "

Integrate forward until a specified time point.

";

%feature("docstring") casadi::SundialsIntegrator::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::SundialsIntegrator::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::SundialsIntegrator::isInit "

Is initialized?

";

%feature("docstring") casadi::SundialsIntegrator::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::SundialsIntegrator::assertInit "[INTERNAL]
Assert that it is initialized

";

%feature("docstring") casadi::SundialsIntegrator::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::SundialsIntegrator::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::SundialsIntegrator::inputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SundialsIntegrator::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::SundialsIntegrator::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::SundialsIntegrator::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::SundialsIntegrator::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::SundialsIntegrator::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::SundialsIntegrator::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::SundialsIntegrator::print "[INTERNAL]  Print
a description of the object.

";

%feature("docstring") casadi::SundialsIntegrator::spCanEvaluate "[INTERNAL]
Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::SundialsIntegrator::setStopTime "

Set a stop time for the forward integration.

";

%feature("docstring") casadi::SundialsIntegrator::swap "[INTERNAL]  Swap
content with another instance.

";

%feature("docstring") casadi::SundialsIntegrator::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::SundialsIntegrator::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::SundialsIntegrator::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::SundialsIntegrator::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::SundialsIntegrator::spInit "[INTERNAL]  Reset
the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::SundialsIntegrator::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::SundialsIntegrator::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::SundialsIntegrator::getOptionEnumValue "[INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::SundialsIntegrator::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::SundialsIntegrator::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::SundialsIntegrator::getOption "

get an option value

";

%feature("docstring") casadi::SundialsIntegrator::isNull "

Is a null pointer?

";

%feature("docstring") casadi::SundialsIntegrator::checkInputs "[INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::SundialsIntegrator::printPtr "[INTERNAL]
Print the pointer to the internal class

";

%feature("docstring") casadi::SundialsIntegrator::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::SundialsIntegrator::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::SundialsIntegrator::reset "

Reset the forward problem Time will be set to t0 and state to
input(INTEGRATOR_X0)

";

%feature("docstring") casadi::SundialsIntegrator::printStats "

Print solver statistics.

";

%feature("docstring") casadi::SundialsIntegrator::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::SundialsIntegrator::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::SundialsIntegrator::resetB "

Reset the backward problem.

Time will be set to tf and backward state to input(INTEGRATOR_RX0)

";

%feature("docstring") casadi::SundialsIntegrator::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::SundialsIntegrator::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::SundialsIntegrator::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::SundialsIntegrator::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::SundialsIntegrator::evaluate "

Evaluate.

";

%feature("docstring") casadi::SundialsIntegrator::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::SundialsIntegrator::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::SundialsIntegrator::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::SundialsIntegrator::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::SundialsIntegrator::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::SundialsIntegrator "

Interface to the Sundials integrators.

Base class for integrators. Solves an initial value problem (IVP) coupled to
a terminal value problem with differential equation given as an implicit ODE
coupled to an algebraic equation and a set of quadratures: Initial
conditions at t=t0  x(t0)  = x0  q(t0)  = 0   Forward integration from t=t0
to t=tf  der(x) = function(x, z, p, t) Forward ODE  0 = fz(x, z, p, t)
Forward algebraic equations  der(q) = fq(x, z, p, t)
Forward quadratures   Terminal conditions at t=tf  rx(tf)  = rx0  rq(tf)  =
0 Backward integration from t=tf to t=t0  der(rx) = gx(rx, rz, rp, x, z, p,
t)        Backward ODE  0 = gz(rx, rz, rp, x, z, p, t) Backward algebraic
equations  der(rq) = gq(rx, rz, rp, x, z, p, t) Backward quadratures   where
we assume that both the forward and backwards integrations are index-1
(i.e. dfz/dz, dgz/drz are invertible) and furthermore that  gx, gz and gq
have a linear dependency on rx, rz and rp.

>Input scheme: casadi::IntegratorInput (INTEGRATOR_NUM_IN = 7) [integratorIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_X0          | x0                     | Differential state at  |
|                        |                        | the initial time .     |
+------------------------+------------------------+------------------------+
| INTEGRATOR_P           | p                      | Parameters .           |
+------------------------+------------------------+------------------------+
| INTEGRATOR_Z0          | z0                     | Initial guess for the  |
|                        |                        | algebraic variable .   |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RX0         | rx0                    | Backward differential  |
|                        |                        | state at the final     |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RP          | rp                     | Backward parameter     |
|                        |                        | vector .               |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZ0         | rz0                    | Initial guess for the  |
|                        |                        | backwards algebraic    |
|                        |                        | variable .             |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::IntegratorOutput (INTEGRATOR_NUM_OUT = 7) [integratorOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_XF          | xf                     | Differential state at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_QF          | qf                     | Quadrature state at    |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_ZF          | zf                     | Algebraic variable at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RXF         | rxf                    | Backward differential  |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RQF         | rqf                    | Backward quadrature    |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZF         | rzf                    | Backward algebraic     |
|                        |                        | variable at the        |
|                        |                        | initial time .         |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| abstol       | OT_REAL      | 0.000        | Absolute     | casadi::Sund |
|              |              |              | tolerence    | ialsInternal |
|              |              |              | for the IVP  |              |
|              |              |              | solution     |              |
+--------------+--------------+--------------+--------------+--------------+
| abstolB      | OT_REAL      | GenericType( | Absolute     | casadi::Sund |
|              |              | )            | tolerence    | ialsInternal |
|              |              |              | for the      |              |
|              |              |              | adjoint      |              |
|              |              |              | sensitivity  |              |
|              |              |              | solution     |              |
|              |              |              | [default:    |              |
|              |              |              | equal to     |              |
|              |              |              | abstol]      |              |
+--------------+--------------+--------------+--------------+--------------+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| augmented_op | OT_DICTIONAR | GenericType( | Options to   | casadi::Inte |
| tions        | Y            | )            | be passed    | gratorIntern |
|              |              |              | down to the  | al           |
|              |              |              | augmented    |              |
|              |              |              | integrator,  |              |
|              |              |              | if one is    |              |
|              |              |              | constructed. |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| exact_jacobi | OT_BOOLEAN   | true         | Use exact    | casadi::Sund |
| an           |              |              | Jacobian     | ialsInternal |
|              |              |              | information  |              |
|              |              |              | for the      |              |
|              |              |              | forward      |              |
|              |              |              | integration  |              |
+--------------+--------------+--------------+--------------+--------------+
| exact_jacobi | OT_BOOLEAN   | GenericType( | Use exact    | casadi::Sund |
| anB          |              | )            | Jacobian     | ialsInternal |
|              |              |              | information  |              |
|              |              |              | for the      |              |
|              |              |              | backward     |              |
|              |              |              | integration  |              |
|              |              |              | [default:    |              |
|              |              |              | equal to exa |              |
|              |              |              | ct_jacobian] |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_augme | OT_BOOLEAN   | true         | If DAE       | casadi::Inte |
| nted         |              |              | callback     | gratorIntern |
|              |              |              | functions    | al           |
|              |              |              | are          |              |
|              |              |              | SXFunction , |              |
|              |              |              | have         |              |
|              |              |              | augmented    |              |
|              |              |              | DAE callback |              |
|              |              |              | function     |              |
|              |              |              | also be      |              |
|              |              |              | SXFunction . |              |
+--------------+--------------+--------------+--------------+--------------+
| finite_diffe | OT_BOOLEAN   | false        | Use finite   | casadi::Sund |
| rence_fsens  |              |              | differences  | ialsInternal |
|              |              |              | to           |              |
|              |              |              | approximate  |              |
|              |              |              | the forward  |              |
|              |              |              | sensitivity  |              |
|              |              |              | equations    |              |
|              |              |              | (if AD is    |              |
|              |              |              | not          |              |
|              |              |              | available)   |              |
+--------------+--------------+--------------+--------------+--------------+
| fsens_abstol | OT_REAL      | GenericType( | Absolute     | casadi::Sund |
|              |              | )            | tolerence    | ialsInternal |
|              |              |              | for the      |              |
|              |              |              | forward      |              |
|              |              |              | sensitivity  |              |
|              |              |              | solution     |              |
|              |              |              | [default:    |              |
|              |              |              | equal to     |              |
|              |              |              | abstol]      |              |
+--------------+--------------+--------------+--------------+--------------+
| fsens_err_co | OT_BOOLEAN   | true         | include the  | casadi::Sund |
| n            |              |              | forward sens | ialsInternal |
|              |              |              | itivities in |              |
|              |              |              | all error    |              |
|              |              |              | controls     |              |
+--------------+--------------+--------------+--------------+--------------+
| fsens_reltol | OT_REAL      | GenericType( | Relative     | casadi::Sund |
|              |              | )            | tolerence    | ialsInternal |
|              |              |              | for the      |              |
|              |              |              | forward      |              |
|              |              |              | sensitivity  |              |
|              |              |              | solution     |              |
|              |              |              | [default:    |              |
|              |              |              | equal to     |              |
|              |              |              | reltol]      |              |
+--------------+--------------+--------------+--------------+--------------+
| fsens_scalin | OT_REALVECTO | GenericType( | Scaling      | casadi::Sund |
| g_factors    | R            | )            | factor for   | ialsInternal |
|              |              |              | the          |              |
|              |              |              | components   |              |
|              |              |              | if finite    |              |
|              |              |              | differences  |              |
|              |              |              | is used      |              |
+--------------+--------------+--------------+--------------+--------------+
| fsens_sensit | OT_INTEGERVE | GenericType( | Specifies    | casadi::Sund |
| iviy_paramet | CTOR         | )            | which        | ialsInternal |
| ers          |              |              | components   |              |
|              |              |              | will be used |              |
|              |              |              | when         |              |
|              |              |              | estimating   |              |
|              |              |              | the          |              |
|              |              |              | sensitivity  |              |
|              |              |              | equations    |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| interpolatio | OT_STRING    | \"hermite\"    | Type of inte | casadi::Sund |
| n_type       |              |              | rpolation    | ialsInternal |
|              |              |              | for the      |              |
|              |              |              | adjoint sens |              |
|              |              |              | itivities (h |              |
|              |              |              | ermite|polyn |              |
|              |              |              | omial)       |              |
+--------------+--------------+--------------+--------------+--------------+
| iterative_so | OT_STRING    | \"gmres\"      | (gmres|bcgst | casadi::Sund |
| lver         |              |              | ab|tfqmr)    | ialsInternal |
+--------------+--------------+--------------+--------------+--------------+
| iterative_so | OT_STRING    | GenericType( | (gmres|bcgst | casadi::Sund |
| lverB        |              | )            | ab|tfqmr)    | ialsInternal |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_LINEARSOL | GenericType( | A custom     | casadi::Sund |
| r            | VER          | )            | linear       | ialsInternal |
|              |              |              | solver       |              |
|              |              |              | creator      |              |
|              |              |              | function     |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_LINEARSOL | GenericType( | A custom     | casadi::Sund |
| rB           | VER          | )            | linear       | ialsInternal |
|              |              |              | solver       |              |
|              |              |              | creator      |              |
|              |              |              | function for |              |
|              |              |              | backwards    |              |
|              |              |              | integration  |              |
|              |              |              | [default:    |              |
|              |              |              | equal to lin |              |
|              |              |              | ear_solver]  |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_DICTIONAR | GenericType( | Options to   | casadi::Sund |
| r_options    | Y            | )            | be passed to | ialsInternal |
|              |              |              | the linear   |              |
|              |              |              | solver       |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_DICTIONAR | GenericType( | Options to   | casadi::Sund |
| r_optionsB   | Y            | )            | be passed to | ialsInternal |
|              |              |              | the linear   |              |
|              |              |              | solver for   |              |
|              |              |              | backwards    |              |
|              |              |              | integration  |              |
|              |              |              | [default:    |              |
|              |              |              | equal to lin |              |
|              |              |              | ear_solver_o |              |
|              |              |              | ptions]      |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_STRING    | \"dense\"      | (user_define | casadi::Sund |
| r_type       |              |              | d|dense|band | ialsInternal |
|              |              |              | ed|iterative |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_STRING    | GenericType( | (user_define | casadi::Sund |
| r_typeB      |              | )            | d|dense|band | ialsInternal |
|              |              |              | ed|iterative |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| lower_bandwi | OT_INTEGER   | GenericType( | Lower band-  | casadi::Sund |
| dth          |              | )            | width of     | ialsInternal |
|              |              |              | banded       |              |
|              |              |              | Jacobian (es |              |
|              |              |              | timations)   |              |
+--------------+--------------+--------------+--------------+--------------+
| lower_bandwi | OT_INTEGER   | GenericType( | lower band-  | casadi::Sund |
| dthB         |              | )            | width of     | ialsInternal |
|              |              |              | banded       |              |
|              |              |              | jacobians    |              |
|              |              |              | for backward |              |
|              |              |              | integration  |              |
|              |              |              | [default:    |              |
|              |              |              | equal to low |              |
|              |              |              | er_bandwidth |              |
|              |              |              | ]            |              |
+--------------+--------------+--------------+--------------+--------------+
| max_krylov   | OT_INTEGER   | 10           | Maximum      | casadi::Sund |
|              |              |              | Krylov       | ialsInternal |
|              |              |              | subspace     |              |
|              |              |              | size         |              |
+--------------+--------------+--------------+--------------+--------------+
| max_krylovB  | OT_INTEGER   | GenericType( | Maximum      | casadi::Sund |
|              |              | )            | krylov       | ialsInternal |
|              |              |              | subspace     |              |
|              |              |              | size         |              |
+--------------+--------------+--------------+--------------+--------------+
| max_multiste | OT_INTEGER   | 5            |              | casadi::Sund |
| p_order      |              |              |              | ialsInternal |
+--------------+--------------+--------------+--------------+--------------+
| max_num_step | OT_INTEGER   | 10000        | Maximum      | casadi::Sund |
| s            |              |              | number of    | ialsInternal |
|              |              |              | integrator   |              |
|              |              |              | steps        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| pretype      | OT_STRING    | \"none\"       | (none|left|r | casadi::Sund |
|              |              |              | ight|both)   | ialsInternal |
+--------------+--------------+--------------+--------------+--------------+
| pretypeB     | OT_STRING    | GenericType( | (none|left|r | casadi::Sund |
|              |              | )            | ight|both)   | ialsInternal |
+--------------+--------------+--------------+--------------+--------------+
| print_stats  | OT_BOOLEAN   | false        | Print out    | casadi::Inte |
|              |              |              | statistics   | gratorIntern |
|              |              |              | after        | al           |
|              |              |              | integration  |              |
+--------------+--------------+--------------+--------------+--------------+
| quad_err_con | OT_BOOLEAN   | false        | Should the   | casadi::Sund |
|              |              |              | quadratures  | ialsInternal |
|              |              |              | affect the   |              |
|              |              |              | step size    |              |
|              |              |              | control      |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| reltol       | OT_REAL      | 0.000        | Relative     | casadi::Sund |
|              |              |              | tolerence    | ialsInternal |
|              |              |              | for the IVP  |              |
|              |              |              | solution     |              |
+--------------+--------------+--------------+--------------+--------------+
| reltolB      | OT_REAL      | GenericType( | Relative     | casadi::Sund |
|              |              | )            | tolerence    | ialsInternal |
|              |              |              | for the      |              |
|              |              |              | adjoint      |              |
|              |              |              | sensitivity  |              |
|              |              |              | solution     |              |
|              |              |              | [default:    |              |
|              |              |              | equal to     |              |
|              |              |              | reltol]      |              |
+--------------+--------------+--------------+--------------+--------------+
| sensitivity_ | OT_STRING    | \"simultaneou | (simultaneou | casadi::Sund |
| method       |              | s\"           | s|staggered) | ialsInternal |
+--------------+--------------+--------------+--------------+--------------+
| steps_per_ch | OT_INTEGER   | 20           | Number of    | casadi::Sund |
| eckpoint     |              |              | steps        | ialsInternal |
|              |              |              | between two  |              |
|              |              |              | consecutive  |              |
|              |              |              | checkpoints  |              |
+--------------+--------------+--------------+--------------+--------------+
| stop_at_end  | OT_BOOLEAN   | true         | Stop the     | casadi::Sund |
|              |              |              | integrator   | ialsInternal |
|              |              |              | at the end   |              |
|              |              |              | of the       |              |
|              |              |              | interval     |              |
+--------------+--------------+--------------+--------------+--------------+
| t0           | OT_REAL      | 0            | Beginning of | casadi::Inte |
|              |              |              | the time     | gratorIntern |
|              |              |              | horizon      | al           |
+--------------+--------------+--------------+--------------+--------------+
| tf           | OT_REAL      | 1            | End of the   | casadi::Inte |
|              |              |              | time horizon | gratorIntern |
|              |              |              |              | al           |
+--------------+--------------+--------------+--------------+--------------+
| upper_bandwi | OT_INTEGER   | GenericType( | Upper band-  | casadi::Sund |
| dth          |              | )            | width of     | ialsInternal |
|              |              |              | banded       |              |
|              |              |              | Jacobian (es |              |
|              |              |              | timations)   |              |
+--------------+--------------+--------------+--------------+--------------+
| upper_bandwi | OT_INTEGER   | GenericType( | Upper band-  | casadi::Sund |
| dthB         |              | )            | width of     | ialsInternal |
|              |              |              | banded       |              |
|              |              |              | jacobians    |              |
|              |              |              | for backward |              |
|              |              |              | integration  |              |
|              |              |              | [default:    |              |
|              |              |              | equal to upp |              |
|              |              |              | er_bandwidth |              |
|              |              |              | ]            |              |
+--------------+--------------+--------------+--------------+--------------+
| use_precondi | OT_BOOLEAN   | false        | Precondition | casadi::Sund |
| tioner       |              |              | an iterative | ialsInternal |
|              |              |              | solver       |              |
+--------------+--------------+--------------+--------------+--------------+
| use_precondi | OT_BOOLEAN   | GenericType( | Precondition | casadi::Sund |
| tionerB      |              | )            | an iterative | ialsInternal |
|              |              |              | solver for   |              |
|              |              |              | the          |              |
|              |              |              | backwards    |              |
|              |              |              | problem      |              |
|              |              |              | [default:    |              |
|              |              |              | equal to use |              |
|              |              |              | _preconditio |              |
|              |              |              | ner]         |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: sundials_integrator.hpp ";

%feature("docstring") casadi::SundialsIntegrator::assignNode "[INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring") casadi::SundialsIntegrator::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::SundialsIntegrator::outputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::SundialsIntegrator::clone "

Clone.

";

%feature("docstring") casadi::SundialsIntegrator::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::SundialsIntegrator::assignNodeNoCount "[INTERNAL]  Assign the node to a node class pointer without reference
counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::SundialsIntegrator::setOptionByEnumValue "[INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") casadi::SundialsIntegrator::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::SundialsIntegrator::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::SundialsIntegrator::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::SundialsIntegrator::getAugmented "

Generate a augmented DAE system with nfwd forward sensitivities and nadj
adjoint sensitivities.

";

%feature("docstring") casadi::SundialsIntegrator::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::SundialsIntegrator::callDerivative "[INTERNAL]  Evaluate the function symbolically or numerically with
directional derivatives The first two arguments are the nondifferentiated
inputs and results of the evaluation, the next two arguments are a set of
forward directional seeds and the resulting forward directional derivatives,
the length of the vector being the number of forward directions. The next
two arguments are a set of adjoint directional seeds and the resulting
adjoint directional derivatives, the length of the vector being the number
of adjoint directions.

";

%feature("docstring") casadi::SundialsIntegrator::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::SundialsIntegrator::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::SundialsIntegrator::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::SundialsIntegrator::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::SundialsIntegrator::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::SundialsIntegrator::inputScheme "[INTERNAL]
Access input/output scheme.

";

%feature("docstring") casadi::SundialsIntegrator::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::SundialsIntegrator::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::SundialsIntegrator::getDAE "

Get the DAE.

";

%feature("docstring") casadi::SundialsIntegrator::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::SundialsIntegrator::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::SundialsIntegrator::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::SundialsIntegrator::outputSchemeEntry "[INTERNAL]  Find the index for a string describing a particular entry of an
output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SundialsIntegrator::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::SundialsIntegrator::schemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SundialsIntegrator::integrateB "

Integrate backward until a specified time point.

";

%feature("docstring") casadi::SundialsIntegrator::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::SundialsIntegrator::getCount "[INTERNAL]  Get
the reference count.

";

%feature("docstring") casadi::SundialsIntegrator::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::SundialsIntegrator::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::SundialsIntegrator::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::SundialsIntegrator::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::SundialsIntegrator::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::SundialsIntegrator::hasOption "

check if there is an option str

";

%feature("docstring") casadi::SundialsIntegrator::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::SundialsIntegrator::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::SundialsIntegrator::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::SundialsIntegrator::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";


// File: classcasadi_1_1SXElement.xml


/*  Operations from the left  */

/* For Python

*/ %feature("docstring") casadi::SXElement::logic_not " ";

%feature("docstring") casadi::SXElement::~SXElement "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::SXElement::__mrdivide__ "";

%feature("docstring") casadi::SXElement::__mldivide__ "

Matrix division from left.

";

%feature("docstring") casadi::SXElement::isMinusInf "";

%feature("docstring") casadi::SXElement::isNonNegative "

Check if a value is always nonnegative (false negatives are allowed)

";

%feature("docstring") casadi::SXElement::__div__ "";

%feature("docstring") casadi::SXElement::__rne__ "";

%feature("docstring") casadi::SXElement::__radd__ "";

%feature("docstring") casadi::SXElement::tanh "";

%feature("docstring") casadi::SXElement::fabs "";

%feature("docstring") casadi::SXElement::cos "";

%feature("docstring") casadi::SXElement::__rdiv__ "";

%feature("docstring") casadi::SXElement::isZero "";

%feature("docstring") casadi::SXElement::arccos "";

%feature("docstring") casadi::SXElement::isOne "";

%feature("docstring") casadi::SXElement::getOp "";

%feature("docstring") casadi::SXElement::trans "";

%feature("docstring") casadi::SXElement::assignNoDelete "[INTERNAL]  Assign
the node to something, without invoking the deletion of the node, if the
count reaches 0.

";

%feature("docstring") casadi::SXElement::getValue "";

%feature("docstring") casadi::SXElement::log "";

%feature("docstring") casadi::SXElement::__nonzero__ "

Check the truth value of this node Introduced to catch bool(x) situations in
python.

";

%feature("docstring") casadi::SXElement::getNdeps "

Get the number of dependencies of a binary SXElement.

";

%feature("docstring") casadi::SXElement::logic_and "";

%feature("docstring") casadi::SXElement::isAlmostZero "";

%feature("docstring") casadi::SXElement::isLeaf "

check if this SXElement is a leaf of the SX graph

An SXElement qualifies as leaf when it has no dependencies.

";

%feature("docstring") casadi::SXElement::getName "";

%feature("docstring") casadi::SXElement::sin "";

%feature("docstring") casadi::SXElement::isInteger "";

%feature("docstring") casadi::SXElement::mul "";

%feature("docstring") casadi::SXElement::tan "";

%feature("docstring") casadi::SXElement::fmod "";

%feature("docstring") casadi::SXElement::isNull "

SXElement nodes are not allowed to be null.

";

%feature("docstring") casadi::SXElement::inv "";

%feature("docstring") casadi::SXElement::ceil "";

%feature("docstring") casadi::SXElement::mark "[INTERNAL]  Mark by flipping
the sign of the temporary and decreasing by one.

";

%feature("docstring") casadi::SXElement::erfinv "";

%feature("docstring") casadi::SXElement::arcsin "";

%feature("docstring") casadi::SXElement::assignIfDuplicate "[INTERNAL]
Assign to another expression, if a duplicate. Check for equality up to a
given depth.

";

%feature("docstring") casadi::SXElement::getDep "";

%feature("docstring") casadi::SXElement::isInf "";

%feature("docstring") casadi::SXElement::cosh "";

%feature("docstring") casadi::SXElement::sqrt "";

%feature("docstring") casadi::SXElement::getIntValue "";

%feature("docstring") casadi::SXElement::getTemp "[INTERNAL]  Get the
temporary variable

";

%feature("docstring") casadi::SXElement::print "[INTERNAL]  print to
stream, limited

";

%feature("docstring") casadi::SXElement::isConstant "";

%feature("docstring") casadi::SXElement::floor "";

%feature("docstring") casadi::SXElement::__copysign__ "";

%feature("docstring") casadi::SXElement::constpow "";

%feature("docstring") casadi::SXElement::isMinusOne "";

%feature("docstring") casadi::SXElement::__mul__ "";

%feature("docstring") casadi::SXElement::__req__ "";

%feature("docstring") casadi::SXElement::__pow__ "";

%feature("docstring") casadi::SXElement::fmax "";

%feature("docstring") casadi::SXElement::log10 "";

%feature("docstring") casadi::SXElement "

The basic scalar symbolic class of CasADi.

Joel Andersson

C++ includes: sx_element.hpp ";

%feature("docstring") casadi::SXElement::isOp "";

%feature("docstring") casadi::SXElement::__lt__ "";

%feature("docstring") casadi::SXElement::isEqual "

Check if two nodes are equivalent up to a given depth. Depth=0 checks if the
expressions are identical, i.e. points to the same node.

a = x*x b = x*x

a.isEqual(b, 0) will return false, but a.isEqual(b, 1) will return true

";

%feature("docstring") casadi::SXElement::__rge__ "";

%feature("docstring") casadi::SXElement::isDoubled "

Check if the node is the sum of two equal expressions.

";

%feature("docstring") casadi::SXElement::arctan "";

%feature("docstring") casadi::SXElement::sinh "";

%feature("docstring") casadi::SXElement::erf "";

%feature("docstring") casadi::SXElement::__gt__ "

No need to have both < and >

";

%feature("docstring") casadi::SXElement::arctan2 "";

%feature("docstring") casadi::SXElement::__ne__ "";

%feature("docstring") casadi::SXElement::marked "[INTERNAL]  Check if
marked (i.e. temporary is negative)

";

%feature("docstring") casadi::SXElement::isCommutative "

Check whether a binary SXElement is commutative.

";

%feature("docstring") casadi::SXElement::isSymbolic "";

%feature("docstring") casadi::SXElement::__eq__ "";

%feature("docstring") casadi::SXElement::__constpow__ "";

%feature("docstring") casadi::SXElement::arccosh "";

%feature("docstring") casadi::SXElement::__add__ "";

%feature("docstring") casadi::SXElement::isNan "";

%feature("docstring") casadi::SXElement::__rsub__ "";

%feature("docstring") casadi::SXElement::isRegular "

Checks if expression does not contain NaN or Inf.

";

%feature("docstring") casadi::SXElement::printme "";

%feature("docstring") casadi::SXElement::exp "";

%feature("docstring") casadi::SXElement::__ge__ "

No need to have both <= and >=.

";

%feature("docstring") casadi::SXElement::__rtruediv__ "";

%feature("docstring") casadi::SXElement::__rle__ "";

%feature("docstring") casadi::SXElement::__hash__ "

Returns a number that is unique for a given SXNode. If the SXElement does
not point to any node, 0 is returned.

";

%feature("docstring") casadi::SXElement::sq "";

%feature("docstring") casadi::SXElement::get "[INTERNAL]  Get a pointer to
the node.

";

%feature("docstring") casadi::SXElement::__mpower__ "";

%feature("docstring") casadi::SXElement::toString "[INTERNAL]  string
representation (SWIG workaround)

";

%feature("docstring") casadi::SXElement::logic_or "";

%feature("docstring") casadi::SXElement::__truediv__ "";

%feature("docstring") casadi::SXElement::SXElement "

>  casadi::SXElement::SXElement()
------------------------------------------------------------------------

Default constructor (not-a-number) Object is initialized as not-a-number.

>  casadi::SXElement::SXElement(double val)
------------------------------------------------------------------------

Numerical constant constructor.

Parameters:
-----------

val:  Numerical value

>  casadi::SXElement::SXElement(SXNode *node, bool dummy)
------------------------------------------------------------------------
[INTERNAL] 
Create an expression from a node: extra dummy argument to avoid
ambiguity for 0/NULL

>  casadi::SXElement::SXElement(const SXElement &scalar)
------------------------------------------------------------------------
[INTERNAL] 
Copy constructor.

";

%feature("docstring") casadi::SXElement::__sub__ "";

%feature("docstring") casadi::SXElement::arcsinh "";

%feature("docstring") casadi::SXElement::arctanh "";

%feature("docstring") casadi::SXElement::__le__ "";

%feature("docstring") casadi::SXElement::__rgt__ "";

%feature("docstring") casadi::SXElement::setTemp "[INTERNAL]  Set the
temporary variable.

";

%feature("docstring") casadi::SXElement::__rmul__ "";

%feature("docstring") casadi::SXElement::sign "";

%feature("docstring") casadi::SXElement::if_else_zero "";

%feature("docstring") casadi::SXElement::hasDep "";

%feature("docstring") casadi::SXElement::__rlt__ "";

%feature("docstring") casadi::SXElement::fmin "";


// File: classcasadi_1_1SXFunction.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::SXFunction::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::SXFunction::outputExpr "

>  const SX & casadi::SXFunction::outputExpr(int oind) const 
------------------------------------------------------------------------

Get function output.

>  const std::vector< SX > & casadi::SXFunction::outputExpr() const 
------------------------------------------------------------------------

Get all function outputs.

";

%feature("docstring") casadi::SXFunction::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") casadi::SXFunction::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::SXFunction::getAtomicInput "

Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::SXFunction::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::SXFunction::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::SXFunction::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::SXFunction::getFree "

Get all the free variables of the function.

";

%feature("docstring") casadi::SXFunction::getWorkSize "

Get the length of the work vector.

";

%feature("docstring") casadi::SXFunction::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::SXFunction::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::SXFunction::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::SXFunction::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::SXFunction::getAtomicInputReal "

Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::SXFunction::getAlgorithmSize "

Get the number of atomic operations.

";

%feature("docstring") casadi::SXFunction::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::SXFunction::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::SXFunction::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::SXFunction::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::SXFunction::getAtomicOutput "

Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::SXFunction::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::SXFunction::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::SXFunction::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::SXFunction::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::SXFunction::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::SXFunction::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::SXFunction::algorithm "[INTERNAL]  Access the
algorithm directly.

";

%feature("docstring") casadi::SXFunction::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::SXFunction::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::SXFunction::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::SXFunction::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::SXFunction::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::SXFunction::getOption "

get an option value

";

%feature("docstring") casadi::SXFunction::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::SXFunction::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::SXFunction::countNodes "

Number of nodes in the algorithm.

";

%feature("docstring") casadi::SXFunction::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::SXFunction::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::SXFunction::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SXFunction::tang "

Tangent via source code transformation

";

%feature("docstring") casadi::SXFunction::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::SXFunction::grad "

Gradient via source code transformation

";

%feature("docstring") casadi::SXFunction::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::SXFunction::clearSymbolic "

Clear the function from its symbolic representation, to free up memory, no
symbolic evaluations are possible after this.

";

%feature("docstring") casadi::SXFunction::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::SXFunction::hasOption "

check if there is an option str

";

%feature("docstring") casadi::SXFunction::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::SXFunction::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::SXFunction::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::SXFunction::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::SXFunction::isInit "

Is initialized?

";

%feature("docstring") casadi::SXFunction::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::SXFunction::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::SXFunction::inputExpr "

>  const SX & casadi::SXFunction::inputExpr(int iind) const 
------------------------------------------------------------------------

Get function input.

>  const std::vector< SX > & casadi::SXFunction::inputExpr() const 
------------------------------------------------------------------------

Get all function inputs.

";

%feature("docstring") casadi::SXFunction::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::SXFunction::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::SXFunction::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::SXFunction::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SXFunction::evaluate "

Evaluate.

";

%feature("docstring") casadi::SXFunction::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::SXFunction::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::SXFunction::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::SXFunction::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::SXFunction::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::SXFunction::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::SXFunction::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SXFunction::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::SXFunction::spCanEvaluate "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::SXFunction::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::SXFunction::hess "

Hessian (forward over adjoint) via source code transformation

";

%feature("docstring") casadi::SXFunction::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::SXFunction::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::SXFunction::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::SXFunction::SXFunction "

>  casadi::SXFunction::SXFunction()
------------------------------------------------------------------------

Default constructor.

>  casadi::SXFunction::SXFunction(const MXFunction &f)
------------------------------------------------------------------------

Expand an MXFunction.

>  casadi::SXFunction::SXFunction(const Function &f)
------------------------------------------------------------------------

Expand an Function.

>  casadi::SXFunction::SXFunction(const std::vector< SX > &arg, const std::vector< SX > &res)

>  casadi::SXFunction::SXFunction(const std::vector< SX > &arg, const IOSchemeVector< SX > &res)

>  casadi::SXFunction::SXFunction(const IOSchemeVector< SX > &arg, const std::vector< SX > &res)

>  casadi::SXFunction::SXFunction(const IOSchemeVector< SX > &arg, const IOSchemeVector< SX > &res)
------------------------------------------------------------------------

Multiple (matrix valued) input, multiple (matrix valued) output.

>  casadi::SXFunction::SXFunction(const std::vector< std::vector< SXElement > > &arg, const std::vector< std::vector< SXElement > > &res)
------------------------------------------------------------------------
[INTERNAL] 
Multiple (vector valued) input, multiple (vector valued) output.

>  casadi::SXFunction::SXFunction(const SX &arg, const SX &res)
------------------------------------------------------------------------
[INTERNAL] 
Single (scalar/matrix/vector valued) input, single
(scalar/matrix/vector valued) output.

>  casadi::SXFunction::SXFunction(const std::vector< std::vector< SXElement > > &arg, const SX &res)
------------------------------------------------------------------------
[INTERNAL] 
Multiple (vector valued) input, single (scalar/vector/matrix valued)
output.

>  casadi::SXFunction::SXFunction(const std::vector< SX > &arg, const SX &res)
------------------------------------------------------------------------
[INTERNAL] 
Multiple (matrix valued) input, single (scalar/vector/matrix valued)
output.

>  casadi::SXFunction::SXFunction(const SX &arg, const std::vector< std::vector< SXElement > > &res)
------------------------------------------------------------------------
[INTERNAL] 
Single (scalar/vector/matrix valued) input, multiple (vector valued)
output.

>  casadi::SXFunction::SXFunction(const SX &arg, const std::vector< SX > &res)
------------------------------------------------------------------------
[INTERNAL] 
Single (scalar/vector/matrix valued) input, multiple (matrix valued)
output.

";

%feature("docstring") casadi::SXFunction::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::SXFunction::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::SXFunction::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::SXFunction::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::SXFunction::jac "

Jacobian via source code transformation.

See:  casadi::Jacobian for an AD approach

";

%feature("docstring") casadi::SXFunction::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::SXFunction::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::SXFunction::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::SXFunction::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::SXFunction::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") casadi::SXFunction::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::SXFunction::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::SXFunction::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::SXFunction::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::SXFunction::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::SXFunction::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::SXFunction::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::SXFunction "

Dynamically created function that can be expanded into a series of scalar
operations.

Joel Andersson

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| just_in_time | OT_BOOLEAN   | false        | Just-in-time | casadi::SXFu |
| _opencl      |              |              | compilation  | nctionIntern |
|              |              |              | for numeric  | al           |
|              |              |              | evaluation   |              |
|              |              |              | using OpenCL |              |
|              |              |              | (experimenta |              |
|              |              |              | l)           |              |
+--------------+--------------+--------------+--------------+--------------+
| just_in_time | OT_BOOLEAN   | false        | Propagate    | casadi::SXFu |
| _sparsity    |              |              | sparsity     | nctionIntern |
|              |              |              | patterns     | al           |
|              |              |              | using just-  |              |
|              |              |              | in-time      |              |
|              |              |              | compilation  |              |
|              |              |              | to a CPU or  |              |
|              |              |              | GPU using    |              |
|              |              |              | OpenCL       |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: sx_function.hpp ";

%feature("docstring") casadi::SXFunction::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::SXFunction::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::SXFunction::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::SXFunction::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::SXFunction::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::SXFunction::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::SXFunction::isNull "

Is a null pointer?

";

%feature("docstring") casadi::SXFunction::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::SXFunction::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") casadi::SXFunction::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::SXFunction::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::SXFunction::getAtomicOperation "

Get an atomic operation operator index.

";

%feature("docstring") casadi::SXFunction::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::SXFunction::getOutputScheme "

Get output scheme.

";


// File: classcasadi_1_1SXNode.xml
%feature("docstring") casadi::SXNode::isNan "[INTERNAL]  check properties
of a node

";

%feature("docstring") casadi::SXNode::getValue "[INTERNAL]  Get value of a
constant node.

";

%feature("docstring") casadi::SXNode::print "[INTERNAL]  print

";

%feature("docstring") casadi::SXNode::marked "[INTERNAL] ";

%feature("docstring") casadi::SXNode::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") casadi::SXNode::~SXNode "[INTERNAL]  destructor

";

%feature("docstring") casadi::SXNode::getIntValue "[INTERNAL]  Get value of
a constant node.

";

%feature("docstring") casadi::SXNode::isSmooth "[INTERNAL]  Check if
smooth.

";

%feature("docstring") casadi::SXNode::isSymbolic "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::SXNode::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") casadi::SXNode::getName "[INTERNAL] ";

%feature("docstring") casadi::SXNode::isInteger "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::SXNode::dep "[INTERNAL]  get the reference of
a child

";

%feature("docstring") casadi::SXNode::init "[INTERNAL]  Initialize the node
(currently used only to give a similar interface to MXNode)

";

%feature("docstring") casadi::SXNode::hasDep "[INTERNAL]  check properties
of a node

";

%feature("docstring") casadi::SXNode::mark "[INTERNAL] ";

%feature("docstring") casadi::SXNode::isZero "[INTERNAL]  check properties
of a node

";

%feature("docstring") casadi::SXNode::isOne "[INTERNAL]  check properties
of a node

";

%feature("docstring") casadi::SXNode::getOp "[INTERNAL]  get the operation

";

%feature("docstring") casadi::SXNode::SXNode "[INTERNAL]  constructor

";

%feature("docstring") casadi::SXNode::isInf "[INTERNAL]  check properties
of a node

";

%feature("docstring") casadi::SXNode::isMinusOne "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::SXNode "[INTERNAL]  Internal node class for
SX.

Joel Andersson

C++ includes: sx_node.hpp ";

%feature("docstring") casadi::SXNode::isAlmostZero "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::SXNode::isConstant "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::SXNode::isMinusInf "[INTERNAL]  check
properties of a node

";


// File: classcasadi_1_1SymbolicMX.xml
%feature("docstring") casadi::SymbolicMX::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::SymbolicMX::size "[INTERNAL] ";

%feature("docstring") casadi::SymbolicMX::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") casadi::SymbolicMX::clone "[INTERNAL]  Clone
function.

";

%feature("docstring") casadi::SymbolicMX::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") casadi::SymbolicMX::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") casadi::SymbolicMX::mapping "[INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") casadi::SymbolicMX::getFunction "[INTERNAL]  Get
function reference.

";

%feature("docstring") casadi::SymbolicMX::deepCopyMembers "[INTERNAL]  Deep
copy data members.

";

%feature("docstring") casadi::SymbolicMX::getNumOutputs "[INTERNAL]  Number
of outputs.

";

%feature("docstring") casadi::SymbolicMX::print "

>  void casadi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void casadi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") casadi::SymbolicMX::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") casadi::SymbolicMX "[INTERNAL]  Represents a symbolic
MX.

Joel Andersson

C++ includes: symbolic_mx.hpp ";

%feature("docstring") casadi::SymbolicMX::getGetNonzeros "[INTERNAL]  Get
the nonzeros of matrix.

";

%feature("docstring") casadi::SymbolicMX::getFunctionOutput "[INTERNAL]
Get function output.

";

%feature("docstring") casadi::SymbolicMX::getBinarySwitch "[INTERNAL]  Get
a binary operation operation.

";

%feature("docstring") casadi::SymbolicMX::__nonzero__ "[INTERNAL]  Check
the truth value of this node.

";

%feature("docstring") casadi::SymbolicMX::getMultiplication "[INTERNAL]
Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") casadi::SymbolicMX::getName "[INTERNAL]  Get the
name.

";

%feature("docstring") casadi::SymbolicMX::getReshape "[INTERNAL]   Reshape.

";

%feature("docstring") casadi::SymbolicMX::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") casadi::SymbolicMX::getNormF "[INTERNAL]  Frobenius
norm.

";

%feature("docstring") casadi::SymbolicMX::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") casadi::SymbolicMX::size2 "[INTERNAL] ";

%feature("docstring") casadi::SymbolicMX::evaluateMX "

>  void casadi::SymbolicMX::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void casadi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") casadi::SymbolicMX::size1 "[INTERNAL] ";

%feature("docstring") casadi::SymbolicMX::isMultipleOutput "[INTERNAL]
Check if a multiple output node.

";

%feature("docstring") casadi::SymbolicMX::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") casadi::SymbolicMX::getSolve "[INTERNAL]   Solve a
system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") casadi::SymbolicMX::~SymbolicMX "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::SymbolicMX::getUnary "[INTERNAL]  Get a unary
operation.

";

%feature("docstring") casadi::SymbolicMX::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") casadi::SymbolicMX::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") casadi::SymbolicMX::getSetNonzeros "[INTERNAL]
Assign the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::SymbolicMX::evaluateSX "[INTERNAL]  Evaluate
the function symbolically (SX)

";

%feature("docstring") casadi::SymbolicMX::getInverse "[INTERNAL]   Inverse.

";

%feature("docstring") casadi::SymbolicMX::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::SymbolicMX::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") casadi::SymbolicMX::getAddNonzeros "[INTERNAL]  Add
the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::SymbolicMX::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") casadi::SymbolicMX::shape "[INTERNAL] ";

%feature("docstring") casadi::SymbolicMX::getSetSparse "[INTERNAL]  Create
set sparse.

";

%feature("docstring") casadi::SymbolicMX::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") casadi::SymbolicMX::getNormInf "[INTERNAL]  Infinity
norm.

";

%feature("docstring") casadi::SymbolicMX::getBinary "[INTERNAL]  Get a
binary operation operation (matrix-matrix)

";

%feature("docstring") casadi::SymbolicMX::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") casadi::SymbolicMX::assign "

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") casadi::SymbolicMX::getFunctionInput "[INTERNAL]  Get
function input.

";

%feature("docstring") casadi::SymbolicMX::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") casadi::SymbolicMX::hasDep "[INTERNAL]  Does the node
depend on other nodes.

";

%feature("docstring") casadi::SymbolicMX::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") casadi::SymbolicMX::getMatrixValue "[INTERNAL]  Get
the value (only for constant nodes)

";

%feature("docstring") casadi::SymbolicMX::isUnaryOp "[INTERNAL]  Check if
unary operation.

";

%feature("docstring") casadi::SymbolicMX::getOutput "[INTERNAL]  Get an
output.

";

%feature("docstring") casadi::SymbolicMX::printPart "[INTERNAL]  Print a
part of the expression.

";

%feature("docstring") casadi::SymbolicMX::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") casadi::SymbolicMX::getSubRef "[INTERNAL]  Get
submatrix reference.

";

%feature("docstring") casadi::SymbolicMX::evaluateD "[INTERNAL]  Evaluate
the function numerically.

";

%feature("docstring") casadi::SymbolicMX::simplifyMe "[INTERNAL]  Simplify
the expression (ex is a reference to the node)

";

%feature("docstring") casadi::SymbolicMX::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") casadi::SymbolicMX::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") casadi::SymbolicMX::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") casadi::SymbolicMX::assertInit "[INTERNAL]  Assert
that the object has been initialized.

";

%feature("docstring") casadi::SymbolicMX::dep "

>  const MX & casadi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & casadi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::SymbolicMX::sameOpAndDeps "[INTERNAL]  Checks
if two nodes have the same operation and have equivalent dependencies up to
a given depth.

";

%feature("docstring") casadi::SymbolicMX::isOutputNode "[INTERNAL]  Check
if evaluation output.

";

%feature("docstring") casadi::SymbolicMX::setDependencies "

>  void casadi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void casadi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") casadi::SymbolicMX::SymbolicMX "[INTERNAL]
Constructors.

";

%feature("docstring") casadi::SymbolicMX::numel "[INTERNAL]  Get shape.

";

%feature("docstring") casadi::SymbolicMX::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") casadi::SymbolicMX::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") casadi::SymbolicMX::getNorm2 "[INTERNAL]  Spectral
norm.

";

%feature("docstring") casadi::SymbolicMX::isNonLinear "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring") casadi::SymbolicMX::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") casadi::SymbolicMX::propagateSparsity "[INTERNAL]
Propagate sparsity.

";

%feature("docstring") casadi::SymbolicMX::getValue "[INTERNAL]  Get the
value (only for scalar constant nodes)

";

%feature("docstring") casadi::SymbolicMX::getHorzsplit "[INTERNAL]  Create
a horizontal split node.

";

%feature("docstring") casadi::SymbolicMX::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::SymbolicMX::getVertsplit "[INTERNAL]  Create
a vertical split node (vectors only)

";

%feature("docstring") casadi::SymbolicMX::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") casadi::SymbolicMX::sparsity "

>  const Sparsity& casadi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & casadi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";


// File: classcasadi_1_1SymbolicNLP.xml


/*  Symbolic representation of the NLP  */

/* Data members

*/ %feature("docstring") casadi::SymbolicNLP::parseNL "

Parse an AMPL och PyOmo NL-file.

";

%feature("docstring") casadi::SymbolicNLP::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::SymbolicNLP::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::SymbolicNLP "

A symbolic NLP representation.

Joel Andersson

C++ includes: symbolic_nlp.hpp ";

%feature("docstring") casadi::SymbolicNLP::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::SymbolicNLP::repr "[INTERNAL]  Print a
representation of the object.

";


// File: classcasadi_1_1SymbolicOCP.xml


/*  Variables and equations  */

/* Public data members

*/

/*  Objective function terms  */

/* Terms in the objective function.

*/

/*  Manipulation  */

/* Reformulate the dynamic optimization problem.

*/ %feature("docstring") casadi::SymbolicOCP::setMax "

>  void casadi::SymbolicOCP::setMax(const std::string &name, const SX &val)
------------------------------------------------------------------------

Set the upper bound by name.

>  void casadi::SymbolicOCP::setMax(const SX &var, const SX &val)
------------------------------------------------------------------------

Set the upper bound(s) by expression.

";

%feature("docstring") casadi::SymbolicOCP::sortOutputs "

Sort the outputs.

";

%feature("docstring") casadi::SymbolicOCP::SymbolicOCP "

Default constructor.

";

%feature("docstring") casadi::SymbolicOCP::sortDependentParameters "

Sort the dependent parameters.

";

%feature("docstring")
casadi::SymbolicOCP::eliminateDependentParameterInterdependencies "

Eliminate interdependencies amongst the dependent parameters.

";

%feature("docstring") casadi::SymbolicOCP::setBeq "

>  void casadi::SymbolicOCP::setBeq(const std::string &name, const SX &val)
------------------------------------------------------------------------

Set a binding equation by name.

>  void casadi::SymbolicOCP::setBeq(const SX &var, const SX &val)
------------------------------------------------------------------------

Set an binding expression by non-differentiated expression.

";

%feature("docstring") casadi::SymbolicOCP::scaleVariables "

Scale the variables.

";

%feature("docstring") casadi::SymbolicOCP::eliminateAlgebraic "

Eliminate algebraic variables, transforming them into outputs.

";

%feature("docstring") casadi::SymbolicOCP::generateMuscodDatFile "

Generate a MUSCOD-II compatible DAT file.

";

%feature("docstring") casadi::SymbolicOCP::ode "

>  SX casadi::SymbolicOCP::ode(const std::string &name) const 
------------------------------------------------------------------------

Get a derivative binding equation (i.e. ordinary differential equation, ODE)
by name.

Returns variable expression if unknown.

>  SX casadi::SymbolicOCP::ode(const SX &var) const 
------------------------------------------------------------------------

Get a derivative binding expression (i.e. ordinary differential equation,
ODE) by non-differentiated expression.

Returns derivative expression if unknown.

";

%feature("docstring") casadi::SymbolicOCP::scaleEquations "

Scale the implicit equations.

";

%feature("docstring") casadi::SymbolicOCP::derivativeStart "

>  double casadi::SymbolicOCP::derivativeStart(const std::string &name, bool normalized=false) const 
------------------------------------------------------------------------

Get the (optionally normalized) derivative value at time 0 by name.

>  std::vector< double > casadi::SymbolicOCP::derivativeStart(const SX &var, bool normalized=false) const 
------------------------------------------------------------------------

Get the (optionally normalized) derivative value(s) at time 0 by expression.

";

%feature("docstring") casadi::SymbolicOCP::print "[INTERNAL]  Print
description.

";

%feature("docstring") casadi::SymbolicOCP::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::SymbolicOCP::nominal "

>  double casadi::SymbolicOCP::nominal(const std::string &name) const 
------------------------------------------------------------------------

Get the nominal value by name.

>  std::vector< double > casadi::SymbolicOCP::nominal(const SX &var) const 
------------------------------------------------------------------------

Get the nominal value(s) by expression.

";

%feature("docstring") casadi::SymbolicOCP::setInitialGuess "

>  void casadi::SymbolicOCP::setInitialGuess(const std::string &name, const SX &val)
------------------------------------------------------------------------

Set the initial guess by name.

>  void casadi::SymbolicOCP::setInitialGuess(const SX &var, const SX &val)
------------------------------------------------------------------------

Set the initial guess(es) by expression.

";

%feature("docstring") casadi::SymbolicOCP::eliminateDependentParameters "

Eliminate dependent parameters.

";

%feature("docstring") casadi::SymbolicOCP::makeExplicit "

Transform the implicit DAE or semi-explicit DAE into an explicit ODE.

";

%feature("docstring") casadi::SymbolicOCP::variable "

Access a variable by name

";

%feature("docstring") casadi::SymbolicOCP::sortDAE "

Sort the DAE and implicitly defined states.

";

%feature("docstring") casadi::SymbolicOCP::atTime "

>  SX casadi::SymbolicOCP::atTime(const std::string &name, double t, bool allocate=false) const 
------------------------------------------------------------------------

Timed variable (never allocate)

>  SX casadi::SymbolicOCP::atTime(const std::string &name, double t, bool allocate=false)
------------------------------------------------------------------------

Timed variable (allocate if necessary)

";

%feature("docstring") casadi::SymbolicOCP::setDerivativeStart "

>  void casadi::SymbolicOCP::setDerivativeStart(const std::string &name, double val, bool normalized=false)
------------------------------------------------------------------------

Set the (optionally normalized) derivative value at time 0 by name.

>  void casadi::SymbolicOCP::setDerivativeStart(const SX &var, const std::vector< double > &val, bool normalized=false)
------------------------------------------------------------------------

Set the (optionally normalized) derivative value(s) at time 0 by expression.

";

%feature("docstring") casadi::SymbolicOCP::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::SymbolicOCP::beq "

>  SX casadi::SymbolicOCP::beq(const std::string &name) const 
------------------------------------------------------------------------

Get a binding equation by name.

>  SX casadi::SymbolicOCP::beq(const SX &var) const 
------------------------------------------------------------------------

Get a binding equation by non-differentiated expression.

";

%feature("docstring") casadi::SymbolicOCP::makeSemiExplicit "

Transform the implicit DAE to a semi-explicit DAE.

";

%feature("docstring") casadi::SymbolicOCP::max "

>  SX casadi::SymbolicOCP::max(const std::string &name) const 
------------------------------------------------------------------------

Get the upper bound by name.

>  SX casadi::SymbolicOCP::max(const SX &var) const 
------------------------------------------------------------------------

Get the upper bound(s) by expression.

";

%feature("docstring") casadi::SymbolicOCP::eliminateIndependentParameters "

Eliminate independent parameters.

";

%feature("docstring") casadi::SymbolicOCP::min "

>  SX casadi::SymbolicOCP::min(const std::string &name) const 
------------------------------------------------------------------------

Get the lower bound by name.

>  SX casadi::SymbolicOCP::min(const SX &var) const 
------------------------------------------------------------------------

Get the lower bound(s) by expression.

";

%feature("docstring") casadi::SymbolicOCP::setMin "

>  void casadi::SymbolicOCP::setMin(const std::string &name, const SX &val)
------------------------------------------------------------------------

Set the lower bound by name.

>  void casadi::SymbolicOCP::setMin(const SX &var, const SX &val)
------------------------------------------------------------------------

Set the lower bound(s) by expression.

";

%feature("docstring") casadi::SymbolicOCP::setNominal "

>  void casadi::SymbolicOCP::setNominal(const std::string &name, double val)
------------------------------------------------------------------------

Set the nominal value by name.

>  void casadi::SymbolicOCP::setNominal(const SX &var, const std::vector< double > &val)
------------------------------------------------------------------------

Set the nominal value(s) by expression.

";

%feature("docstring") casadi::SymbolicOCP::setUnit "

Set the unit for a component.

";

%feature("docstring") casadi::SymbolicOCP::setOde "

>  void casadi::SymbolicOCP::setOde(const std::string &name, const SX &val)
------------------------------------------------------------------------

Set a derivative binding equation by name.

>  void casadi::SymbolicOCP::setOde(const SX &var, const SX &val)
------------------------------------------------------------------------

Set an derivative binding expression by non-differentiated expression.

";

%feature("docstring") casadi::SymbolicOCP::eliminateLagrangeTerms "

Eliminate Lagrange terms from the objective function and make them
quadrature states.

";

%feature("docstring") casadi::SymbolicOCP::der "

>  SX casadi::SymbolicOCP::der(const std::string &name) const 
------------------------------------------------------------------------

Get a derivative expression by name.

>  SX casadi::SymbolicOCP::der(const SX &var) const 
------------------------------------------------------------------------

Get a derivative expression by non-differentiated expression.

";

%feature("docstring") casadi::SymbolicOCP::repr "[INTERNAL]  Print
representation.

";

%feature("docstring") casadi::SymbolicOCP::eliminateOutputs "

Eliminate outputs.

";

%feature("docstring") casadi::SymbolicOCP::eliminateQuadratureStates "

Eliminate quadrature states and turn them into ODE states.

";

%feature("docstring") casadi::SymbolicOCP::sortALG "

Sort the algebraic equations and algebraic states.

";

%feature("docstring") casadi::SymbolicOCP::eliminateOutputInterdependencies
"

Eliminate interdependencies amongst the outputs.

";

%feature("docstring") casadi::SymbolicOCP "

A flat OCP representation coupled to an XML file.

Variables:

x:      differential states z:      algebraic states p : independent
parameters t :     time u :     control signals q : quadrature states y :
dependent variables

Equations:

explicit or implicit ODE: \\\\dot {x} = ode(t, x, z, u, p_free, pi, pd) or
0 = ode(t, x, z,\\\\dot {x}, u, p_free, pi, pd) algebraic equations:
0 = alg(t, x, z, u, p_free, pi, pd) quadratures:              \\\\dot {q} =
quad(t, x, z, u, p_free, pi, pd) dependent equations:            y = dep(t,
x, z, u, p_free, pi, pd) initial equations:              0 = initial(t, x,
z, u, p_free, pi, pd)

Objective function terms:

Mayer terms:          \\\\sum {mterm_k} Lagrange terms:       \\\\sum
{\\\\integral{mterm}}

Note that when parsed, all dynamic equations end up in the implicit category
\"dae\". At a later state, the DAE can be reformulated, for example in semi-
explicit form, possibly in addition to a set of quadrature states.

Usage skeleton:

Call default constructor  SymbolicOCP ocp;

Parse an FMI conformant XML file ocp.parseFMI(xml_file_name)

Modify/add variables, equations, optimization ...

When the optimal control problem is in a suitable form, it is possible to
either generate functions for numeric/symbolic evaluation or exporting the
OCP formulation into a new FMI conformant XML file. The latter functionality
is not yet available.

Joel Andersson

C++ includes: symbolic_ocp.hpp ";

%feature("docstring") casadi::SymbolicOCP::parseFMI "

Parse from XML to C++ format.

";

%feature("docstring") casadi::SymbolicOCP::setStart "

>  void casadi::SymbolicOCP::setStart(const std::string &name, double val, bool normalized=false)
------------------------------------------------------------------------

Set the (optionally normalized) value at time 0 by name.

>  void casadi::SymbolicOCP::setStart(const SX &var, const std::vector< double > &val, bool normalized=false)
------------------------------------------------------------------------

Set the (optionally normalized) value(s) at time 0 by expression.

";

%feature("docstring") casadi::SymbolicOCP::addVariable "

Add a variable.

";

%feature("docstring") casadi::SymbolicOCP::start "

>  double casadi::SymbolicOCP::start(const std::string &name, bool normalized=false) const 
------------------------------------------------------------------------

Get the (optionally normalized) value at time 0 by name.

>  std::vector< double > casadi::SymbolicOCP::start(const SX &var, bool normalized=false) const 
------------------------------------------------------------------------

Get the (optionally normalized) value(s) at time 0 by expression.

";

%feature("docstring") casadi::SymbolicOCP::initialGuess "

>  SX casadi::SymbolicOCP::initialGuess(const std::string &name) const 
------------------------------------------------------------------------

Get the initial guess by name.

>  SX casadi::SymbolicOCP::initialGuess(const SX &var) const 
------------------------------------------------------------------------

Get the initial guess(es) by expression.

";

%feature("docstring") casadi::SymbolicOCP::separateAlgebraic "

Identify and separate the algebraic variables and equations in the DAE.

";

%feature("docstring") casadi::SymbolicOCP::unit "

>  std::string casadi::SymbolicOCP::unit(const std::string &name) const 
------------------------------------------------------------------------

Get the unit for a component.

>  std::string casadi::SymbolicOCP::unit(const SX &var) const 
------------------------------------------------------------------------

Get the unit given a vector of symbolic variables (all units must be
identical)

";


// File: classcasadi_1_1SymbolicQR.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::SymbolicQR::inputSchemeEntry " [INTERNAL]  Find the index for a
string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SymbolicQR::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::SymbolicQR::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::SymbolicQR::getOptionAllowedIndex "[INTERNAL]
Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::SymbolicQR::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::SymbolicQR::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::SymbolicQR::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::SymbolicQR::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::SymbolicQR::spEvaluate "[INTERNAL]  Propagate
the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::SymbolicQR::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::SymbolicQR::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::SymbolicQR::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::SymbolicQR::getOption "

get an option value

";

%feature("docstring") casadi::SymbolicQR::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::SymbolicQR::schemeEntry "[INTERNAL]  Find the
index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SymbolicQR::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::SymbolicQR::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SymbolicQR::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::SymbolicQR::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::SymbolicQR::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::SymbolicQR::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::SymbolicQR::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::SymbolicQR::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::SymbolicQR::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::SymbolicQR::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::SymbolicQR::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::SymbolicQR::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::SymbolicQR::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::SymbolicQR::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::SymbolicQR::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::SymbolicQR::spSolve "[INTERNAL]  Propagate
sparsity through a linear solve

";

%feature("docstring") casadi::SymbolicQR::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::SymbolicQR::solve "

>  void casadi::LinearSolver::solve(bool transpose=false)
------------------------------------------------------------------------

Solve the system of equations, internal vector.

>  void casadi::LinearSolver::solve(double *x, int nrhs=1, bool transpose=false)
------------------------------------------------------------------------
[INTERNAL] 
 Solve the factorized system of equations.

>  MX casadi::LinearSolver::solve(const MX &A, const MX &B, bool transpose=false)
------------------------------------------------------------------------

Create a solve node.

";

%feature("docstring") casadi::SymbolicQR::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::SymbolicQR::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::SymbolicQR::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::SymbolicQR::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::SymbolicQR::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::SymbolicQR::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::SymbolicQR::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::SymbolicQR::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::SymbolicQR::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") casadi::SymbolicQR::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::SymbolicQR::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::SymbolicQR::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::SymbolicQR::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::SymbolicQR::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::SymbolicQR::isNull "

Is a null pointer?

";

%feature("docstring") casadi::SymbolicQR::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::SymbolicQR::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::SymbolicQR::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::SymbolicQR::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::SymbolicQR::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") casadi::SymbolicQR::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::SymbolicQR::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::SymbolicQR::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::SymbolicQR::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::SymbolicQR::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::SymbolicQR::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::SymbolicQR::prepared "

Check if prepared.

";

%feature("docstring") casadi::SymbolicQR::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::SymbolicQR::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::SymbolicQR::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::SymbolicQR::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::SymbolicQR::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::SymbolicQR::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::SymbolicQR::SymbolicQR "

>  casadi::SymbolicQR::SymbolicQR()
------------------------------------------------------------------------

Default (empty) constructor.

>  casadi::SymbolicQR::SymbolicQR(const Sparsity &sp, int nrhs=1)
------------------------------------------------------------------------

Create a linear solver given a sparsity pattern.

";

%feature("docstring") casadi::SymbolicQR::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::SymbolicQR::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::SymbolicQR::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::SymbolicQR::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";

%feature("docstring") casadi::SymbolicQR::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::SymbolicQR::isInit "

Is initialized?

";

%feature("docstring") casadi::SymbolicQR::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::SymbolicQR::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::SymbolicQR::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::SymbolicQR::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::SymbolicQR::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::SymbolicQR::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::SymbolicQR::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::SymbolicQR::evaluate "

Evaluate.

";

%feature("docstring") casadi::SymbolicQR "

LinearSolver based on QR factorization with sparsity pattern based
reordering without partial pivoting.

Solves the linear system A*X = B or A^T*X = B for X with A square and non-
singular

If A is structurally singular, an error will be thrown during init. If A is
numerically singular, the prepare step will fail. Joel Andersson

>Input scheme: casadi::LinsolInput (LINSOL_NUM_IN = 3) [linsolIn]
+-----------+-------+------------------------------------------------+
| Full name | Short |                  Description                   |
+===========+=======+================================================+
| LINSOL_A  | A     | The square matrix A: sparse, (n x n). .        |
+-----------+-------+------------------------------------------------+
| LINSOL_B  | B     | The right-hand-side matrix b: dense, (n x m) . |
+-----------+-------+------------------------------------------------+

>Output scheme: casadi::LinsolOutput (LINSOL_NUM_OUT = 2) [linsolOut]
+-----------+-------+----------------------------------------------+
| Full name | Short |                 Description                  |
+===========+=======+==============================================+
| LINSOL_X  | X     | Solution to the linear system of equations . |
+-----------+-------+----------------------------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| codegen      | OT_BOOLEAN   | false        | C-code       | casadi::Symb |
|              |              |              | generation   | olicQRIntern |
|              |              |              |              | al           |
+--------------+--------------+--------------+--------------+--------------+
| compiler     | OT_STRING    | \"gcc -fPIC   | Compiler     | casadi::Symb |
|              |              | -O2\"         | command to   | olicQRIntern |
|              |              |              | be used for  | al           |
|              |              |              | compiling    |              |
|              |              |              | generated    |              |
|              |              |              | code         |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp |              |
|              |              |              | uts)         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: symbolic_qr.hpp ";

%feature("docstring") casadi::SymbolicQR::checkInputs "[INTERNAL]  Check if
the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::SymbolicQR::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::SymbolicQR::hasOption "

check if there is an option str

";

%feature("docstring") casadi::SymbolicQR::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::SymbolicQR::prepare "

Factorize the matrix.

";

%feature("docstring") casadi::SymbolicQR::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::SymbolicQR::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::SymbolicQR::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::SymbolicQR::spCanEvaluate "[INTERNAL]  Is the
class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::SymbolicQR::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::SymbolicQR::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::SymbolicQR::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::SymbolicQR::getOutputScheme "

Get output scheme.

";


// File: classcasadi_1_1SymbolicSX.xml
%feature("docstring") casadi::SymbolicSX "[INTERNAL]  Represents a scalar
symbolic expression.

Joel Andersson

C++ includes: symbolic_sx.hpp ";

%feature("docstring") casadi::SymbolicSX::~SymbolicSX "[INTERNAL] ";

%feature("docstring") casadi::SymbolicSX::isZero "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::SymbolicSX::isInteger "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::SymbolicSX::isNan "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::SymbolicSX::getIntValue "[INTERNAL]  Get
value of a constant node.

";

%feature("docstring") casadi::SymbolicSX::marked "[INTERNAL] ";

%feature("docstring") casadi::SymbolicSX::isOne "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::SymbolicSX::isSymbolic "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::SymbolicSX::hasDep "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::SymbolicSX::init "[INTERNAL]  Initialize the
node (currently used only to give a similar interface to MXNode)

";

%feature("docstring") casadi::SymbolicSX::isInf "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::SymbolicSX::getName "[INTERNAL] ";

%feature("docstring") casadi::SymbolicSX::isSmooth "[INTERNAL]  Check if
smooth.

";

%feature("docstring") casadi::SymbolicSX::isConstant "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::SymbolicSX::mark "[INTERNAL] ";

%feature("docstring") casadi::SymbolicSX::dep "[INTERNAL]  get the
reference of a child

";

%feature("docstring") casadi::SymbolicSX::isAlmostZero "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::SymbolicSX::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") casadi::SymbolicSX::isMinusOne "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::SymbolicSX::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") casadi::SymbolicSX::isMinusInf "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::SymbolicSX::SymbolicSX "[INTERNAL] ";

%feature("docstring") casadi::SymbolicSX::print "[INTERNAL]  print

";

%feature("docstring") casadi::SymbolicSX::getValue "[INTERNAL]  Get value
of a constant node.

";

%feature("docstring") casadi::SymbolicSX::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";


// File: classcasadi_1_1Transpose.xml
%feature("docstring") casadi::Transpose::getFunctionOutput "[INTERNAL]  Get
function output.

";

%feature("docstring") casadi::Transpose::getSubRef "[INTERNAL]  Get
submatrix reference.

";

%feature("docstring") casadi::Transpose::getMultiplication "[INTERNAL]
Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") casadi::Transpose::getNorm2 "[INTERNAL]  Spectral
norm.

";

%feature("docstring") casadi::Transpose::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") casadi::Transpose::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::Transpose::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") casadi::Transpose::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring") casadi::Transpose::getFunction "[INTERNAL]  Get
function reference.

";

%feature("docstring") casadi::Transpose::size2 "[INTERNAL] ";

%feature("docstring") casadi::Transpose::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") casadi::Transpose::evaluateMX "

>  void casadi::Transpose::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void casadi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") casadi::Transpose::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") casadi::Transpose::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") casadi::Transpose::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") casadi::Transpose::getReshape "[INTERNAL]   Reshape.

";

%feature("docstring") casadi::Transpose::getVertsplit "[INTERNAL]  Create a
vertical split node (vectors only)

";

%feature("docstring") casadi::Transpose::propagateSparsity "

>  void casadi::Transpose::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity.

>  void casadi::MXNode::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, bool fwd)
------------------------------------------------------------------------
[INTERNAL] 
Propagate sparsity, no work.

";

%feature("docstring") casadi::Transpose::getFunctionInput "[INTERNAL]  Get
function input.

";

%feature("docstring") casadi::Transpose::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") casadi::Transpose::mapping "[INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") casadi::Transpose::setDependencies "

>  void casadi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void casadi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") casadi::Transpose::simplifyMe "[INTERNAL]  Simplify
the expression (ex is a reference to the node)

";

%feature("docstring") casadi::Transpose::numel "[INTERNAL]  Get shape.

";

%feature("docstring") casadi::Transpose::isOutputNode "[INTERNAL]  Check if
evaluation output.

";

%feature("docstring") casadi::Transpose::getNormF "[INTERNAL]  Frobenius
norm.

";

%feature("docstring") casadi::Transpose::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") casadi::Transpose::getName "[INTERNAL]  Get the name.

";

%feature("docstring") casadi::Transpose::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") casadi::Transpose::sparsity "

>  const Sparsity& casadi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & casadi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") casadi::Transpose::evaluateD "[INTERNAL]  Evaluate
the function numerically.

";

%feature("docstring") casadi::Transpose::getBinarySwitch "[INTERNAL]  Get a
binary operation operation.

";

%feature("docstring") casadi::Transpose::printPart "[INTERNAL]  Print a
part of the expression */.

";

%feature("docstring") casadi::Transpose::evaluateSX "[INTERNAL]  Evaluate
the function symbolically (SX)

";

%feature("docstring") casadi::Transpose::getNormInf "[INTERNAL]  Infinity
norm.

";

%feature("docstring") casadi::Transpose::getHorzsplit "[INTERNAL]  Create a
horizontal split node.

";

%feature("docstring") casadi::Transpose::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") casadi::Transpose::Transpose "[INTERNAL]
Constructor.

";

%feature("docstring") casadi::Transpose::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::Transpose::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") casadi::Transpose::deepCopyMembers "[INTERNAL]  Deep
copy data members.

";

%feature("docstring") casadi::Transpose::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") casadi::Transpose::getSetNonzeros "[INTERNAL]  Assign
the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::Transpose::isUnaryOp "[INTERNAL]  Check if
unary operation.

";

%feature("docstring") casadi::Transpose::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") casadi::Transpose::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") casadi::Transpose::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") casadi::Transpose::clone "[INTERNAL]  Clone function.

";

%feature("docstring") casadi::Transpose::getAddNonzeros "[INTERNAL]  Add
the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::Transpose::getBinary "[INTERNAL]  Get a
binary operation operation (matrix-matrix)

";

%feature("docstring") casadi::Transpose::getMatrixValue "[INTERNAL]  Get
the value (only for constant nodes)

";

%feature("docstring") casadi::Transpose::getSetSparse "[INTERNAL]  Create
set sparse.

";

%feature("docstring") casadi::Transpose::~Transpose "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::Transpose::sameOpAndDeps "[INTERNAL]  Checks
if two nodes have the same operation and have equivalent dependencies up to
a given depth.

";

%feature("docstring") casadi::Transpose::getInverse "[INTERNAL]   Inverse.

";

%feature("docstring") casadi::Transpose::getSolve "[INTERNAL]   Solve a
system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") casadi::Transpose::size1 "[INTERNAL] ";

%feature("docstring") casadi::Transpose::isMultipleOutput "[INTERNAL]
Check if a multiple output node.

";

%feature("docstring") casadi::Transpose::size "[INTERNAL] ";

%feature("docstring") casadi::Transpose::dep "

>  const MX & casadi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & casadi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::Transpose::getOutput "[INTERNAL]  Get an
output.

";

%feature("docstring") casadi::Transpose::getGetNonzeros "[INTERNAL]  Get
the nonzeros of matrix.

";

%feature("docstring") casadi::Transpose::isEqual "[INTERNAL]   Solve for
square linear system.

Check if two nodes are equivalent up to a given depth

";

%feature("docstring") casadi::Transpose::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") casadi::Transpose::getValue "[INTERNAL]  Get the
value (only for scalar constant nodes)

";

%feature("docstring") casadi::Transpose::print "

>  void casadi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void casadi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") casadi::Transpose::getUnary "[INTERNAL]  Get a unary
operation.

";

%feature("docstring") casadi::Transpose::evaluateGen "[INTERNAL]  Evaluate
the function (template)

";

%feature("docstring") casadi::Transpose::assertInit "[INTERNAL]  Assert
that the object has been initialized.

";

%feature("docstring") casadi::Transpose::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") casadi::Transpose::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") casadi::Transpose::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") casadi::Transpose::shape "[INTERNAL] ";

%feature("docstring") casadi::Transpose::hasDep "[INTERNAL]  Does the node
depend on other nodes.

";

%feature("docstring") casadi::Transpose::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") casadi::Transpose::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") casadi::Transpose "[INTERNAL]   Matrix transpose.

Joel Andersson

C++ includes: transpose.hpp ";

%feature("docstring") casadi::Transpose::getNumOutputs "[INTERNAL]  Number
of outputs.

";

%feature("docstring") casadi::Transpose::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") casadi::Transpose::assign "

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") casadi::Transpose::isNonLinear "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring") casadi::Transpose::weak "[INTERNAL]  Get a weak
reference to the object.

";


// File: classcasadi_1_1UnaryMX.xml
%feature("docstring") casadi::UnaryMX::getSetSparse "[INTERNAL]  Create set
sparse.

";

%feature("docstring") casadi::UnaryMX::hasDep "[INTERNAL]  Does the node
depend on other nodes.

";

%feature("docstring") casadi::UnaryMX::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") casadi::UnaryMX::getBinary "[INTERNAL]  Get a binary
operation operation.

";

%feature("docstring") casadi::UnaryMX::evaluateMX "

>  void casadi::UnaryMX::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void casadi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") casadi::UnaryMX::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::UnaryMX::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") casadi::UnaryMX::getNormInf "[INTERNAL]  Infinity
norm.

";

%feature("docstring") casadi::UnaryMX::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::UnaryMX::getValue "[INTERNAL]  Get the value
(only for scalar constant nodes)

";

%feature("docstring") casadi::UnaryMX::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") casadi::UnaryMX::getFunction "[INTERNAL]  Get
function reference.

";

%feature("docstring") casadi::UnaryMX::getSetNonzeros "[INTERNAL]  Assign
the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::UnaryMX::size1 "[INTERNAL] ";

%feature("docstring") casadi::UnaryMX::size2 "[INTERNAL] ";

%feature("docstring") casadi::UnaryMX::dep "

>  const MX & casadi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & casadi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::UnaryMX::sparsity "

>  const Sparsity& casadi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & casadi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") casadi::UnaryMX::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") casadi::UnaryMX::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") casadi::UnaryMX::getBinarySwitch "[INTERNAL]  Get a
binary operation operation.

";

%feature("docstring") casadi::UnaryMX::getReshape "[INTERNAL]   Reshape.

";

%feature("docstring") casadi::UnaryMX::UnaryMX "[INTERNAL]  Constructor is
private, use \"create\" below.

";

%feature("docstring") casadi::UnaryMX::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") casadi::UnaryMX::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") casadi::UnaryMX::isMultipleOutput "[INTERNAL]  Check
if a multiple output node.

";

%feature("docstring") casadi::UnaryMX::deepCopyMembers "[INTERNAL]  Deep
copy data members.

";

%feature("docstring") casadi::UnaryMX::getOutput "[INTERNAL]  Get an
output.

";

%feature("docstring") casadi::UnaryMX::getAddNonzeros "[INTERNAL]  Add the
nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::UnaryMX::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") casadi::UnaryMX::getNormF "[INTERNAL]  Frobenius
norm.

";

%feature("docstring") casadi::UnaryMX::getName "[INTERNAL]  Get the name.

";

%feature("docstring") casadi::UnaryMX::getVertsplit "[INTERNAL]  Create a
vertical split node (vectors only)

";

%feature("docstring") casadi::UnaryMX::printPart "[INTERNAL]  Print a part
of the expression.

";

%feature("docstring") casadi::UnaryMX::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring") casadi::UnaryMX::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::UnaryMX::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") casadi::UnaryMX::getGetNonzeros "[INTERNAL]  Get the
nonzeros of matrix.

";

%feature("docstring") casadi::UnaryMX::getSolve "[INTERNAL]   Solve a
system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") casadi::UnaryMX::shape "[INTERNAL] ";

%feature("docstring") casadi::UnaryMX::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") casadi::UnaryMX::mapping "[INTERNAL]  Get an IMatrix
representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") casadi::UnaryMX::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") casadi::UnaryMX::isNonLinear "[INTERNAL]  Is the node
nonlinear.

";

%feature("docstring") casadi::UnaryMX::evaluateD "[INTERNAL]  Evaluate the
function numerically.

";

%feature("docstring") casadi::UnaryMX::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") casadi::UnaryMX::getFunctionInput "[INTERNAL]  Get
function input.

";

%feature("docstring") casadi::UnaryMX "[INTERNAL]  Represents a general
unary operation on an MX.

Joel Andersson

C++ includes: unary_mx.hpp ";

%feature("docstring") casadi::UnaryMX::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") casadi::UnaryMX::print "

>  void casadi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void casadi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") casadi::UnaryMX::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") casadi::UnaryMX::getSubRef "[INTERNAL]  Get submatrix
reference.

";

%feature("docstring") casadi::UnaryMX::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") casadi::UnaryMX::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") casadi::UnaryMX::evaluateSX "[INTERNAL]  Evaluate the
function symbolically (SX)

";

%feature("docstring") casadi::UnaryMX::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") casadi::UnaryMX::propagateSparsity "[INTERNAL]
Propagate sparsity.

";

%feature("docstring") casadi::UnaryMX::getNumOutputs "[INTERNAL]  Number of
outputs.

";

%feature("docstring") casadi::UnaryMX::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") casadi::UnaryMX::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") casadi::UnaryMX::~UnaryMX "[INTERNAL]  Destructor.

";

%feature("docstring") casadi::UnaryMX::isUnaryOp "[INTERNAL]  Check if
unary operation.

";

%feature("docstring") casadi::UnaryMX::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") casadi::UnaryMX::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") casadi::UnaryMX::getInverse "[INTERNAL]   Inverse.

";

%feature("docstring") casadi::UnaryMX::setDependencies "

>  void casadi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void casadi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") casadi::UnaryMX::assign "

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") casadi::UnaryMX::assertInit "[INTERNAL]  Assert that
the object has been initialized.

";

%feature("docstring") casadi::UnaryMX::clone "[INTERNAL]  Clone function.

";

%feature("docstring") casadi::UnaryMX::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") casadi::UnaryMX::getMatrixValue "[INTERNAL]  Get the
value (only for constant nodes)

";

%feature("docstring") casadi::UnaryMX::getUnary "[INTERNAL]  Get a unary
operation.

";

%feature("docstring") casadi::UnaryMX::size "[INTERNAL] ";

%feature("docstring") casadi::UnaryMX::numel "[INTERNAL]  Get shape.

";

%feature("docstring") casadi::UnaryMX::getHorzsplit "[INTERNAL]  Create a
horizontal split node.

";

%feature("docstring") casadi::UnaryMX::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") casadi::UnaryMX::simplifyMe "[INTERNAL]  Simplify the
expression (ex is a reference to the node)

";

%feature("docstring") casadi::UnaryMX::getFunctionOutput "[INTERNAL]  Get
function output.

";

%feature("docstring") casadi::UnaryMX::getMultiplication "[INTERNAL]
Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") casadi::UnaryMX::getNorm2 "[INTERNAL]  Spectral norm.

";

%feature("docstring") casadi::UnaryMX::sameOpAndDeps "[INTERNAL]  Checks if
two nodes have the same operation and have equivalent dependencies up to a
given depth.

";

%feature("docstring") casadi::UnaryMX::isOutputNode "[INTERNAL]  Check if
evaluation output.

";


// File: structcasadi_1_1UnaryOperation.xml
%feature("docstring") casadi::UnaryOperation "[INTERNAL] C++ includes:
casadi_calculus.hpp ";


// File: structcasadi_1_1UnaryOperation_3_01OP__ACOS_01_4.xml
%feature("docstring") casadi::UnaryOperation< OP_ACOS > " [INTERNAL]  Arcus
cosine.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1UnaryOperation_3_01OP__ACOSH_01_4.xml
%feature("docstring") casadi::UnaryOperation< OP_ACOSH > " [INTERNAL]
Inverse hyperbolic cosine.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1UnaryOperation_3_01OP__ASIN_01_4.xml
%feature("docstring") casadi::UnaryOperation< OP_ASIN > " [INTERNAL]  Arcus
sine.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1UnaryOperation_3_01OP__ASINH_01_4.xml
%feature("docstring") casadi::UnaryOperation< OP_ASINH > " [INTERNAL]
Inverse hyperbolic sine.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1UnaryOperation_3_01OP__ASSIGN_01_4.xml
%feature("docstring") casadi::UnaryOperation< OP_ASSIGN > " [INTERNAL]
Simple assignment.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1UnaryOperation_3_01OP__ATAN_01_4.xml
%feature("docstring") casadi::UnaryOperation< OP_ATAN > " [INTERNAL]  Arcus
tangent.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1UnaryOperation_3_01OP__ATANH_01_4.xml
%feature("docstring") casadi::UnaryOperation< OP_ATANH > " [INTERNAL]
Inverse hyperbolic tangent.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1UnaryOperation_3_01OP__CEIL_01_4.xml
%feature("docstring") casadi::UnaryOperation< OP_CEIL > " [INTERNAL]  Ceil
function.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1UnaryOperation_3_01OP__COS_01_4.xml
%feature("docstring") casadi::UnaryOperation< OP_COS > " [INTERNAL]  Cosine.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1UnaryOperation_3_01OP__COSH_01_4.xml
%feature("docstring") casadi::UnaryOperation< OP_COSH > " [INTERNAL]
Hyperbolic cosine.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1UnaryOperation_3_01OP__ERF_01_4.xml
%feature("docstring") casadi::UnaryOperation< OP_ERF > " [INTERNAL]  Error
function.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1UnaryOperation_3_01OP__ERFINV_01_4.xml
%feature("docstring") casadi::UnaryOperation< OP_ERFINV > " [INTERNAL]
Inverse of error function.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1UnaryOperation_3_01OP__EXP_01_4.xml
%feature("docstring") casadi::UnaryOperation< OP_EXP > " [INTERNAL]  Natural
exponent.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1UnaryOperation_3_01OP__FABS_01_4.xml
%feature("docstring") casadi::UnaryOperation< OP_FABS > " [INTERNAL]
Absolute value.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1UnaryOperation_3_01OP__FLOOR_01_4.xml
%feature("docstring") casadi::UnaryOperation< OP_FLOOR > " [INTERNAL]  Floor
function.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1UnaryOperation_3_01OP__INV_01_4.xml
%feature("docstring") casadi::UnaryOperation< OP_INV > " [INTERNAL]
Elementwise inverse.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1UnaryOperation_3_01OP__LOG_01_4.xml
%feature("docstring") casadi::UnaryOperation< OP_LOG > " [INTERNAL]  Natural
logarithm.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1UnaryOperation_3_01OP__NEG_01_4.xml
%feature("docstring") casadi::UnaryOperation< OP_NEG > " [INTERNAL]
Negation.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1UnaryOperation_3_01OP__NOT_01_4.xml
%feature("docstring") casadi::UnaryOperation< OP_NOT > " [INTERNAL]  Logical
not.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1UnaryOperation_3_01OP__SIGN_01_4.xml
%feature("docstring") casadi::UnaryOperation< OP_SIGN > " [INTERNAL]  Sign.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1UnaryOperation_3_01OP__SIN_01_4.xml
%feature("docstring") casadi::UnaryOperation< OP_SIN > " [INTERNAL]  Sine.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1UnaryOperation_3_01OP__SINH_01_4.xml
%feature("docstring") casadi::UnaryOperation< OP_SINH > " [INTERNAL]
Hyperbolic sine.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1UnaryOperation_3_01OP__SQ_01_4.xml
%feature("docstring") casadi::UnaryOperation< OP_SQ > " [INTERNAL]  Square.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1UnaryOperation_3_01OP__SQRT_01_4.xml
%feature("docstring") casadi::UnaryOperation< OP_SQRT > " [INTERNAL]  Square
root.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1UnaryOperation_3_01OP__TAN_01_4.xml
%feature("docstring") casadi::UnaryOperation< OP_TAN > " [INTERNAL]
Tangent.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1UnaryOperation_3_01OP__TANH_01_4.xml
%feature("docstring") casadi::UnaryOperation< OP_TANH > " [INTERNAL]
Hyperbolic tangent.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1UnaryOperation_3_01OP__TWICE_01_4.xml
%feature("docstring") casadi::UnaryOperation< OP_TWICE > " [INTERNAL]  Times
two.

C++ includes: casadi_calculus.hpp ";


// File: classcasadi_1_1UnarySX.xml
%feature("docstring") casadi::UnarySX::isSymbolic "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::UnarySX::init "[INTERNAL]  Initialize the
node (currently used only to give a similar interface to MXNode)

";

%feature("docstring") casadi::UnarySX::isOne "[INTERNAL]  check properties
of a node

";

%feature("docstring") casadi::UnarySX::getName "[INTERNAL] ";

%feature("docstring") casadi::UnarySX::dep "

>  virtual const SXElement& casadi::UnarySX::dep(int i) const 
------------------------------------------------------------------------
[INTERNAL] 
get the reference of a dependency

>  virtual SXElement& casadi::UnarySX::dep(int i)
------------------------------------------------------------------------
[INTERNAL] 
get the reference of a child

";

%feature("docstring") casadi::UnarySX::hasDep "[INTERNAL]  check properties
of a node

";

%feature("docstring") casadi::UnarySX::isMinusInf "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::UnarySX::isConstant "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::UnarySX::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") casadi::UnarySX::isInf "[INTERNAL]  check properties
of a node

";

%feature("docstring") casadi::UnarySX::~UnarySX "[INTERNAL]  Destructor.

";

%feature("docstring") casadi::UnarySX::isSmooth "[INTERNAL]  Check if
smooth.

";

%feature("docstring") casadi::UnarySX::getValue "[INTERNAL]  Get value of a
constant node.

";

%feature("docstring") casadi::UnarySX::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") casadi::UnarySX::isMinusOne "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::UnarySX::mark "[INTERNAL] ";

%feature("docstring") casadi::UnarySX::isNan "[INTERNAL]  check properties
of a node

";

%feature("docstring") casadi::UnarySX::print "

>  virtual void casadi::UnarySX::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print the expression (recursively with a maximum number of levels)

>  void casadi::SXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
print

";

%feature("docstring") casadi::UnarySX::getIntValue "[INTERNAL]  Get value
of a constant node.

";

%feature("docstring") casadi::UnarySX::isAlmostZero "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::UnarySX "[INTERNAL]  Represents a basic unary
operation on an SXElement node.

Joel Andersson

C++ includes: unary_sx.hpp ";

%feature("docstring") casadi::UnarySX::isInteger "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::UnarySX::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") casadi::UnarySX::marked "[INTERNAL] ";

%feature("docstring") casadi::UnarySX::isZero "[INTERNAL]  check properties
of a node

";


// File: structcasadi_1_1Variable.xml
%feature("docstring") casadi::Variable "

Holds expressions and meta-data corresponding to a physical quantity
evolving in time.

Joel Andersson

C++ includes: variable.hpp ";

%feature("docstring") casadi::Variable::setName "

Set the variable name (and corresponding expressions)

";

%feature("docstring") casadi::Variable::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::Variable::name "

Variable name.

";

%feature("docstring") casadi::Variable::Variable "

Default constructor.

";

%feature("docstring") casadi::Variable::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::Variable::atTime "

>  SXElement casadi::Variable::atTime(double t, bool allocate=false) const 
------------------------------------------------------------------------

Timed variable (never allocate)

>  SXElement casadi::Variable::atTime(double t, bool allocate=false)
------------------------------------------------------------------------

Timed variable (allocate if necessary)

";


// File: classcasadi_1_1Vertcat.xml
%feature("docstring") casadi::Vertcat::printPart "[INTERNAL]  Print a part
of the expression */.

";

%feature("docstring") casadi::Vertcat::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") casadi::Vertcat::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") casadi::Vertcat::getMultiplication "[INTERNAL]
Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") casadi::Vertcat::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") casadi::Vertcat::sameOpAndDeps "[INTERNAL]  Checks if
two nodes have the same operation and have equivalent dependencies up to a
given depth.

";

%feature("docstring") casadi::Vertcat::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") casadi::Vertcat::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring") casadi::Vertcat::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") casadi::Vertcat::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") casadi::Vertcat::isNonLinear "[INTERNAL]  Is the node
nonlinear.

";

%feature("docstring") casadi::Vertcat::dep "

>  const MX & casadi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & casadi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::Vertcat::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::Vertcat::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") casadi::Vertcat::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") casadi::Vertcat::getNumOutputs "[INTERNAL]  Number of
outputs.

";

%feature("docstring") casadi::Vertcat::sparsity "

>  const Sparsity& casadi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & casadi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") casadi::Vertcat::assign "

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") casadi::Vertcat::Vertcat "[INTERNAL]  Constructor.

";

%feature("docstring") casadi::Vertcat::getHorzsplit "[INTERNAL]  Create a
horizontal split node.

";

%feature("docstring") casadi::Vertcat::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") casadi::Vertcat::deepCopyMembers "[INTERNAL]  Deep
copy data members.

";

%feature("docstring") casadi::Vertcat::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") casadi::Vertcat::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") casadi::Vertcat::getInverse "[INTERNAL]   Inverse.

";

%feature("docstring") casadi::Vertcat::getAddNonzeros "[INTERNAL]  Add the
nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::Vertcat::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") casadi::Vertcat::evaluateSX "[INTERNAL]  Evaluate the
function symbolically (SX)

";

%feature("docstring") casadi::Vertcat::getNormF "[INTERNAL]  Frobenius
norm.

";

%feature("docstring") casadi::Vertcat::mapping "[INTERNAL]  Get an IMatrix
representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") casadi::Vertcat::getMatrixValue "[INTERNAL]  Get the
value (only for constant nodes)

";

%feature("docstring") casadi::Vertcat::getFunctionInput "[INTERNAL]  Get
function input.

";

%feature("docstring") casadi::Vertcat::propagateSparsity "[INTERNAL]
Propagate sparsity.

";

%feature("docstring") casadi::Vertcat::getName "[INTERNAL]  Get the name.

";

%feature("docstring") casadi::Vertcat::getSetSparse "[INTERNAL]  Create set
sparse.

";

%feature("docstring") casadi::Vertcat::isMultipleOutput "[INTERNAL]  Check
if a multiple output node.

";

%feature("docstring") casadi::Vertcat::getGetNonzeros "[INTERNAL]  Get the
nonzeros of matrix.

";

%feature("docstring") casadi::Vertcat::simplifyMe "[INTERNAL]  Simplify the
expression (ex is a reference to the node)

";

%feature("docstring") casadi::Vertcat::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") casadi::Vertcat::shape "[INTERNAL] ";

%feature("docstring") casadi::Vertcat::getNormInf "[INTERNAL]  Infinity
norm.

";

%feature("docstring") casadi::Vertcat::~Vertcat "[INTERNAL]  Destructor.

";

%feature("docstring") casadi::Vertcat::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") casadi::Vertcat::assertInit "[INTERNAL]  Assert that
the object has been initialized.

";

%feature("docstring") casadi::Vertcat::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::Vertcat::isOutputNode "[INTERNAL]  Check if
evaluation output.

";

%feature("docstring") casadi::Vertcat::getValue "[INTERNAL]  Get the value
(only for scalar constant nodes)

";

%feature("docstring") casadi::Vertcat::size2 "[INTERNAL] ";

%feature("docstring") casadi::Vertcat::getFunction "[INTERNAL]  Get
function reference.

";

%feature("docstring") casadi::Vertcat::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::Vertcat::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") casadi::Vertcat::size "[INTERNAL] ";

%feature("docstring") casadi::Vertcat::getBinarySwitch "[INTERNAL]  Get a
binary operation operation.

";

%feature("docstring") casadi::Vertcat::isUnaryOp "[INTERNAL]  Check if
unary operation.

";

%feature("docstring") casadi::Vertcat::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") casadi::Vertcat::getSolve "[INTERNAL]   Solve a
system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") casadi::Vertcat::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") casadi::Vertcat::getSubRef "[INTERNAL]  Get submatrix
reference.

";

%feature("docstring") casadi::Vertcat::clone "[INTERNAL]  Clone function.

";

%feature("docstring") casadi::Vertcat::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") casadi::Vertcat::print "

>  void casadi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void casadi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") casadi::Vertcat::numel "[INTERNAL]  Get shape.

";

%feature("docstring") casadi::Vertcat::getVertsplit "[INTERNAL]  Create a
vertical split node (vectors only)

";

%feature("docstring") casadi::Vertcat::getReshape "[INTERNAL]   Reshape.

";

%feature("docstring") casadi::Vertcat::getSetNonzeros "[INTERNAL]  Assign
the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::Vertcat::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") casadi::Vertcat::getFunctionOutput "[INTERNAL]  Get
function output.

";

%feature("docstring") casadi::Vertcat::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") casadi::Vertcat::getUnary "[INTERNAL]  Get a unary
operation.

";

%feature("docstring") casadi::Vertcat::getBinary "[INTERNAL]  Get a binary
operation operation (matrix-matrix)

";

%feature("docstring") casadi::Vertcat::evaluateMX "

>  void casadi::Vertcat::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void casadi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") casadi::Vertcat::setDependencies "

>  void casadi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void casadi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") casadi::Vertcat::getOutput "[INTERNAL]  Get an
output.

";

%feature("docstring") casadi::Vertcat::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") casadi::Vertcat "[INTERNAL]  Vertical concatenation
of vectors.

Joel Andersson

C++ includes: concat.hpp ";

%feature("docstring") casadi::Vertcat::hasDep "[INTERNAL]  Does the node
depend on other nodes.

";

%feature("docstring") casadi::Vertcat::evaluateD "[INTERNAL]  Evaluate the
function numerically.

";

%feature("docstring") casadi::Vertcat::size1 "[INTERNAL] ";

%feature("docstring") casadi::Vertcat::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") casadi::Vertcat::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") casadi::Vertcat::evaluateGen "[INTERNAL]  Evaluate
the function (template)

";

%feature("docstring") casadi::Vertcat::getNorm2 "[INTERNAL]  Spectral norm.

";


// File: classcasadi_1_1Vertsplit.xml
%feature("docstring") casadi::Vertsplit::size1 "[INTERNAL] ";

%feature("docstring") casadi::Vertsplit::getUnary "[INTERNAL]  Get a unary
operation.

";

%feature("docstring") casadi::Vertsplit::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") casadi::Vertsplit::size2 "[INTERNAL] ";

%feature("docstring") casadi::Vertsplit::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") casadi::Vertsplit::deepCopyMembers "[INTERNAL]  Deep
copy data members.

";

%feature("docstring") casadi::Vertsplit::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::Vertsplit::printPart "[INTERNAL]  Print a
part of the expression */.

";

%feature("docstring") casadi::Vertsplit::getMatrixValue "[INTERNAL]  Get
the value (only for constant nodes)

";

%feature("docstring") casadi::Vertsplit::evaluateSX "[INTERNAL]  Evaluate
the function symbolically (SX)

";

%feature("docstring") casadi::Vertsplit::getSolve "[INTERNAL]   Solve a
system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") casadi::Vertsplit::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") casadi::Vertsplit::isMultipleOutput "[INTERNAL]
Check if a multiple output node.

";

%feature("docstring") casadi::Vertsplit::evaluateD "[INTERNAL]  Evaluate
the function numerically.

";

%feature("docstring") casadi::Vertsplit::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") casadi::Vertsplit::dep "

>  const MX & casadi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & casadi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::Vertsplit::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") casadi::Vertsplit::Vertsplit "[INTERNAL]
Constructor.

";

%feature("docstring") casadi::Vertsplit::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") casadi::Vertsplit::sparsity "

>  virtual const Sparsity& casadi::Split::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

>  const Sparsity& casadi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

";

%feature("docstring") casadi::Vertsplit::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") casadi::Vertsplit::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") casadi::Vertsplit::getReshape "[INTERNAL]   Reshape.

";

%feature("docstring") casadi::Vertsplit::getOutput "[INTERNAL]  Get an
output.

";

%feature("docstring") casadi::Vertsplit::numel "[INTERNAL]  Get shape.

";

%feature("docstring") casadi::Vertsplit::getValue "[INTERNAL]  Get the
value (only for scalar constant nodes)

";

%feature("docstring") casadi::Vertsplit::getBinarySwitch "[INTERNAL]  Get a
binary operation operation.

";

%feature("docstring") casadi::Vertsplit::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring") casadi::Vertsplit::assertInit "[INTERNAL]  Assert
that the object has been initialized.

";

%feature("docstring") casadi::Vertsplit::getGetNonzeros "[INTERNAL]  Get
the nonzeros of matrix.

";

%feature("docstring") casadi::Vertsplit::clone "[INTERNAL]  Clone function.

";

%feature("docstring") casadi::Vertsplit::getVertsplit "[INTERNAL]  Create a
vertical split node (vectors only)

";

%feature("docstring") casadi::Vertsplit::hasDep "[INTERNAL]  Does the node
depend on other nodes.

";

%feature("docstring") casadi::Vertsplit::getSetNonzeros "[INTERNAL]  Assign
the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::Vertsplit::~Vertsplit "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::Vertsplit::getNormInf "[INTERNAL]  Infinity
norm.

";

%feature("docstring") casadi::Vertsplit::getAssertion "[INTERNAL]
Assertion.

";

%feature("docstring") casadi::Vertsplit::size "[INTERNAL] ";

%feature("docstring") casadi::Vertsplit::getFunction "[INTERNAL]  Get
function reference.

";

%feature("docstring") casadi::Vertsplit::getFunctionOutput "[INTERNAL]  Get
function output.

";

%feature("docstring") casadi::Vertsplit::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") casadi::Vertsplit::getName "[INTERNAL]  Get the name.

";

%feature("docstring") casadi::Vertsplit::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") casadi::Vertsplit::sameOpAndDeps "[INTERNAL]  Checks
if two nodes have the same operation and have equivalent dependencies up to
a given depth.

";

%feature("docstring") casadi::Vertsplit::getInverse "[INTERNAL]   Inverse.

";

%feature("docstring") casadi::Vertsplit::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") casadi::Vertsplit::shape "[INTERNAL] ";

%feature("docstring") casadi::Vertsplit::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") casadi::Vertsplit::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::Vertsplit::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") casadi::Vertsplit::getFunctionInput "[INTERNAL]  Get
function input.

";

%feature("docstring") casadi::Vertsplit::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::Vertsplit::print "

>  void casadi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void casadi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") casadi::Vertsplit::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") casadi::Vertsplit::getSubRef "[INTERNAL]  Get
submatrix reference.

";

%feature("docstring") casadi::Vertsplit::getNorm2 "[INTERNAL]  Spectral
norm.

";

%feature("docstring") casadi::Vertsplit::evaluateMX "

>  void casadi::Vertsplit::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void casadi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") casadi::Vertsplit::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") casadi::Vertsplit::getNumOutputs "[INTERNAL]  Number
of outputs.

";

%feature("docstring") casadi::Vertsplit::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") casadi::Vertsplit::getHorzsplit "[INTERNAL]  Create a
horizontal split node.

";

%feature("docstring") casadi::Vertsplit::getInnerProd "[INTERNAL]  Inner
product.

";

%feature("docstring") casadi::Vertsplit::setDependencies "

>  void casadi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void casadi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") casadi::Vertsplit::simplifyMe "[INTERNAL]  Simplify
the expression (ex is a reference to the node)

";

%feature("docstring") casadi::Vertsplit::getSetSparse "[INTERNAL]  Create
set sparse.

";

%feature("docstring") casadi::Vertsplit::propagateSparsity "[INTERNAL]
Propagate sparsity.

";

%feature("docstring") casadi::Vertsplit "[INTERNAL]  Vertical split of
vectors, x -> x0, x1, ...

Joel Andersson

C++ includes: split.hpp ";

%feature("docstring") casadi::Vertsplit::isOutputNode "[INTERNAL]  Check if
evaluation output.

";

%feature("docstring") casadi::Vertsplit::getBinary "[INTERNAL]  Get a
binary operation operation (matrix-matrix)

";

%feature("docstring") casadi::Vertsplit::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") casadi::Vertsplit::mapping "[INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") casadi::Vertsplit::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") casadi::Vertsplit::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") casadi::Vertsplit::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") casadi::Vertsplit::evaluateGen "[INTERNAL]  Evaluate
the function (template)

";

%feature("docstring") casadi::Vertsplit::getMultiplication "[INTERNAL]
Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") casadi::Vertsplit::getNormF "[INTERNAL]  Frobenius
norm.

";

%feature("docstring") casadi::Vertsplit::isNonLinear "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring") casadi::Vertsplit::assign "

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") casadi::Vertsplit::isUnaryOp "[INTERNAL]  Check if
unary operation.

";

%feature("docstring") casadi::Vertsplit::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") casadi::Vertsplit::getAddNonzeros "[INTERNAL]  Add
the nonzeros of a matrix to another matrix.

";


// File: classcasadi_1_1WeakRef.xml
%feature("docstring") casadi::WeakRef::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::WeakRef::getDescription "[INTERNAL]  Return a
string with a description (for SWIG)

";

%feature("docstring") casadi::WeakRef::assertInit "[INTERNAL]  Assert that
it is initialized

";

%feature("docstring") casadi::WeakRef::swap "[INTERNAL]  Swap content with
another instance.

";

%feature("docstring") casadi::WeakRef::shared "[INTERNAL]  Get a shared
(owning) reference.

";

%feature("docstring") casadi::WeakRef::init "[INTERNAL]  Initialize or re-
initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::WeakRef::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::WeakRef::alive "[INTERNAL]  Check if alive.

";

%feature("docstring") casadi::WeakRef::assignNode "[INTERNAL]  Assign the
node to a node class pointer (or null)

";

%feature("docstring") casadi::WeakRef::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::WeakRef::checkNode "[INTERNAL]  Assert that
the node is pointing to the right type of object

";

%feature("docstring") casadi::WeakRef::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::WeakRef::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::WeakRef "[INTERNAL]  Weak reference type A
weak reference to a SharedObject.

Joel Andersson

C++ includes: weak_ref.hpp ";

%feature("docstring") casadi::WeakRef::isInit "[INTERNAL]  Is initialized?

";

%feature("docstring") casadi::WeakRef::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::WeakRef::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::WeakRef::isNull "[INTERNAL]  Is a null
pointer?

";

%feature("docstring") casadi::WeakRef::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::WeakRef::getRepresentation "[INTERNAL]
Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::WeakRef::WeakRef "

>  casadi::WeakRef::WeakRef(int dummy=0)
------------------------------------------------------------------------
[INTERNAL] 
Default constructor.

>  casadi::WeakRef::WeakRef(SharedObject shared)
------------------------------------------------------------------------
[INTERNAL] 
Construct from a shared object (also implicit type conversion)

";

%feature("docstring") casadi::WeakRef::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";


// File: classcasadi_1_1WorhpSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::WorhpSolver::getOptionNames "

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::WorhpSolver::setOptionByAllowedIndex "[INTERNAL]  Set a certain option by giving its index into the allowed
values.

";

%feature("docstring") casadi::WorhpSolver::hasOption "

check if there is an option str

";

%feature("docstring") casadi::WorhpSolver::repr "[INTERNAL]  Print a
representation of the object.

";

%feature("docstring") casadi::WorhpSolver::hessLag "

Access the Hessian of the Lagrangian function.

>Input scheme: casadi::JacGInput (JACG_NUM_IN = 3) [jacGIn]
+-----------+-------+---------------------+
| Full name | Short |     Description     |
+===========+=======+=====================+
| JACG_X    | x     | Decision variable . |
+-----------+-------+---------------------+
| JACG_P    | p     | Fixed parameter .   |
+-----------+-------+---------------------+

>Output scheme: casadi::JacGOutput (JACG_NUM_OUT = 4) [jacGOut]
+-----------+-------+-------------------------------+
| Full name | Short |          Description          |
+===========+=======+===============================+
| JACG_JAC  | jac   | Jacobian of the constraints . |
+-----------+-------+-------------------------------+
| JACG_F    | f     | Objective function .          |
+-----------+-------+-------------------------------+
| JACG_G    | g     | Constraint function .         |
+-----------+-------+-------------------------------+

";

%feature("docstring") casadi::WorhpSolver::input_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::WorhpSolver::spCanEvaluate "[INTERNAL]  Is
the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::WorhpSolver "

interface to WORHP NLP solver

Solves the following parametric nonlinear program (NLP):min          F(x, p)
x  subject to             LBX <=   x    <= UBX LBG <= G(x, p) <= UBG
p  == P      nx: number of decision variables     ng: number of constraints
np: number of parameters

>Input scheme: casadi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| AcceptTolFea | OT_REAL      | 0.001        | Tolerance    | casadi::Worh |
| s            |              |              | for          | pInternal    |
|              |              |              | acceptable   |              |
|              |              |              | feasibility  |              |
+--------------+--------------+--------------+--------------+--------------+
| AcceptTolOpt | OT_REAL      | 0.001        | Tolerance    | casadi::Worh |
| i            |              |              | for          | pInternal    |
|              |              |              | acceptable   |              |
|              |              |              | optimality   |              |
+--------------+--------------+--------------+--------------+--------------+
| AlphaMinCons | OT_BOOLEAN   | False        | Use a        | casadi::Worh |
| t            |              |              | constant     | pInternal    |
|              |              |              | lower bound  |              |
|              |              |              | on Armijo    |              |
|              |              |              | stepsize in  |              |
|              |              |              | Filter       |              |
+--------------+--------------+--------------+--------------+--------------+
| Ares         | OT_INTEGERVE | [42, 41, 42, | Armijo       | casadi::Worh |
|              | CTOR         | 43, 44, 41,  | recovery     | pInternal    |
|              |              | 50]          | strategies.  |              |
|              |              |              | Vector of    |              |
|              |              |              | size 7       |              |
+--------------+--------------+--------------+--------------+--------------+
| ArmijoBeta   | OT_REAL      | 0.712        | Trial        | casadi::Worh |
|              |              |              | stepsize     | pInternal    |
|              |              |              | decrease     |              |
|              |              |              | factor for   |              |
|              |              |              | Armijo rule  |              |
+--------------+--------------+--------------+--------------+--------------+
| ArmijoMaxAlp | OT_REAL      | 1            | Initial      | casadi::Worh |
| ha           |              |              | alpha for    | pInternal    |
|              |              |              | Armijo rule  |              |
+--------------+--------------+--------------+--------------+--------------+
| ArmijoMinAlp | OT_REAL      | 0.000        | Lower bound  | casadi::Worh |
| ha           |              |              | on alpha for | pInternal    |
|              |              |              | Armijo rule  |              |
+--------------+--------------+--------------+--------------+--------------+
| ArmijoMinAlp | OT_REAL      | 0.000        | Lower bound  | casadi::Worh |
| haRec        |              |              | on alpha for | pInternal    |
|              |              |              | Armijo rule  |              |
|              |              |              | during       |              |
|              |              |              | recovery     |              |
+--------------+--------------+--------------+--------------+--------------+
| ArmijoSigma  | OT_REAL      | 0.005        | Scale factor | casadi::Worh |
|              |              |              | for          | pInternal    |
|              |              |              | linearised   |              |
|              |              |              | descent      |              |
|              |              |              | check in     |              |
|              |              |              | Armijo rule  |              |
+--------------+--------------+--------------+--------------+--------------+
| AutoQPRecove | OT_BOOLEAN   | True         | Enable       | casadi::Worh |
| ry           |              |              | automatic QP | pInternal    |
|              |              |              | recovery     |              |
+--------------+--------------+--------------+--------------+--------------+
| BFGSmaxblock | OT_INTEGER   | 300          | Block size   | casadi::Worh |
| Size         |              |              | parameter    | pInternal    |
|              |              |              | used by      |              |
|              |              |              | certain BFGS |              |
|              |              |              | methods      |              |
+--------------+--------------+--------------+--------------+--------------+
| BFGSmethod   | OT_INTEGER   | 0            | Choose BFGS  | casadi::Worh |
|              |              |              | method (0:   | pInternal    |
|              |              |              | dense, 1-3:  |              |
|              |              |              | block, 100+: |              |
|              |              |              | sparse)      |              |
+--------------+--------------+--------------+--------------+--------------+
| BFGSminblock | OT_INTEGER   | 300          | Block size   | casadi::Worh |
| Size         |              |              | parameter    | pInternal    |
|              |              |              | used by      |              |
|              |              |              | certain BFGS |              |
|              |              |              | methods      |              |
+--------------+--------------+--------------+--------------+--------------+
| BFGSrestart  | OT_INTEGER   | 50           | Restart BFGS | casadi::Worh |
|              |              |              | update after | pInternal    |
|              |              |              | this many    |              |
|              |              |              | iterations   |              |
+--------------+--------------+--------------+--------------+--------------+
| BettsFactor  | OT_REAL      | 2.100        | Update       | casadi::Worh |
|              |              |              | factor for   | pInternal    |
|              |              |              | Betts'       |              |
|              |              |              | Hessian regu |              |
|              |              |              | larisation   |              |
+--------------+--------------+--------------+--------------+--------------+
| BettsPoint   | OT_REAL      | 1            | Smallest     | casadi::Worh |
|              |              |              | eigenvalue   | pInternal    |
|              |              |              | of the       |              |
|              |              |              | regularised  |              |
|              |              |              | Hessian      |              |
+--------------+--------------+--------------+--------------+--------------+
| BoundTolFac  | OT_REAL      | 1000         | Factor in    | casadi::Worh |
|              |              |              | determining  | pInternal    |
|              |              |              | active       |              |
|              |              |              | constraints  |              |
|              |              |              | by KKT       |              |
+--------------+--------------+--------------+--------------+--------------+
| CheckFJ      | OT_REAL      | 1.000e+12    | Upper bound  | casadi::Worh |
|              |              |              | used by      | pInternal    |
|              |              |              | Fritz-John   |              |
|              |              |              | heuristic    |              |
+--------------+--------------+--------------+--------------+--------------+
| CheckStructu | OT_BOOLEAN   | True         | Enable       | casadi::Worh |
| reDF         |              |              | structural   | pInternal    |
|              |              |              | checking of  |              |
|              |              |              | DF           |              |
+--------------+--------------+--------------+--------------+--------------+
| CheckStructu | OT_BOOLEAN   | True         | Enable       | casadi::Worh |
| reDG         |              |              | structural   | pInternal    |
|              |              |              | checking of  |              |
|              |              |              | DG           |              |
+--------------+--------------+--------------+--------------+--------------+
| CheckStructu | OT_BOOLEAN   | True         | Enable       | casadi::Worh |
| reHM         |              |              | structural   | pInternal    |
|              |              |              | checking of  |              |
|              |              |              | HM           |              |
+--------------+--------------+--------------+--------------+--------------+
| CorStepBetts | OT_REAL      | 0.500        | (experimenta | casadi::Worh |
| Sum          |              |              | l)           | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| CorStepConSt | OT_REAL      | 0.000        | (experimenta | casadi::Worh |
| op           |              |              | l)           | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| CorStepConvi | OT_REAL      | 1            | (experimenta | casadi::Worh |
| o            |              |              | l)           | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| CorStepMaxIt | OT_INTEGER   | 50           | (experimenta | casadi::Worh |
| er           |              |              | l)           | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| CorStepMetho | OT_INTEGER   | 0            | (experimenta | casadi::Worh |
| d            |              |              | l)           | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| CorStepMode  | OT_INTEGER   | 1            | (experimenta | casadi::Worh |
|              |              |              | l)           | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| CorStepPFact | OT_REAL      | 1            | (experimenta | casadi::Worh |
| or           |              |              | l)           | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| CorStepPMax  | OT_REAL      | 1000000      | (experimenta | casadi::Worh |
|              |              |              | l)           | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| CorStepRecov | OT_BOOLEAN   | False        | (experimenta | casadi::Worh |
| eryDX        |              |              | l)           | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| CurvBCond    | OT_REAL      | 0.020        | Block BFGS   | casadi::Worh |
|              |              |              | curvature    | pInternal    |
|              |              |              | condition    |              |
|              |              |              | bound        |              |
+--------------+--------------+--------------+--------------+--------------+
| CurvBFac     | OT_REAL      | 0.300        | Block BFGS   | casadi::Worh |
|              |              |              | curvature    | pInternal    |
|              |              |              | condition re |              |
|              |              |              | gularisation |              |
|              |              |              | factor       |              |
+--------------+--------------+--------------+--------------+--------------+
| CurvCond     | OT_REAL      | 0.020        | BFGS         | casadi::Worh |
|              |              |              | Curvature    | pInternal    |
|              |              |              | condition    |              |
|              |              |              | bound        |              |
+--------------+--------------+--------------+--------------+--------------+
| CurvFac      | OT_REAL      | 0.300        | BFGS         | casadi::Worh |
|              |              |              | curvature    | pInternal    |
|              |              |              | condition re |              |
|              |              |              | gularisation |              |
|              |              |              | factor       |              |
+--------------+--------------+--------------+--------------+--------------+
| DebugMarker0 | OT_INTEGER   | 42           | Debug        | casadi::Worh |
| 5            |              |              | marker. Used | pInternal    |
|              |              |              | to find      |              |
|              |              |              | memory align |              |
|              |              |              | ment/padding |              |
|              |              |              | issues       |              |
+--------------+--------------+--------------+--------------+--------------+
| DebugMarker0 | OT_INTEGER   | 42           | Debug        | casadi::Worh |
| 6            |              |              | marker. Used | pInternal    |
|              |              |              | to find      |              |
|              |              |              | memory align |              |
|              |              |              | ment/padding |              |
|              |              |              | issues       |              |
+--------------+--------------+--------------+--------------+--------------+
| FGtogether   | OT_BOOLEAN   | False        | F and G      | casadi::Worh |
|              |              |              | cannot be    | pInternal    |
|              |              |              | evaluated    |              |
|              |              |              | separately   |              |
+--------------+--------------+--------------+--------------+--------------+
| FJandND      | OT_BOOLEAN   | False        | Enable       | casadi::Worh |
|              |              |              | Fritz-John   | pInternal    |
|              |              |              | and non-diff |              |
|              |              |              | erentiable   |              |
|              |              |              | check        |              |
|              |              |              | heuristics   |              |
+--------------+--------------+--------------+--------------+--------------+
| FeasibleDual | OT_BOOLEAN   | False        | Activate     | casadi::Worh |
|              |              |              | dual         | pInternal    |
|              |              |              | feasibility  |              |
|              |              |              | mode         |              |
+--------------+--------------+--------------+--------------+--------------+
| FeasibleInit | OT_BOOLEAN   | False        | Activate     | casadi::Worh |
|              |              |              | initial      | pInternal    |
|              |              |              | feasibility  |              |
|              |              |              | mode         |              |
+--------------+--------------+--------------+--------------+--------------+
| FeasibleInit | OT_REAL      | 0.001        | Feasibility  | casadi::Worh |
| Tol          |              |              | tolerance    | pInternal    |
|              |              |              | for no-      |              |
|              |              |              | objective    |              |
|              |              |              | feasible     |              |
|              |              |              | mode         |              |
+--------------+--------------+--------------+--------------+--------------+
| FeasibleOnly | OT_BOOLEAN   | False        | Activate     | casadi::Worh |
|              |              |              | feasible-    | pInternal    |
|              |              |              | only mode    |              |
+--------------+--------------+--------------+--------------+--------------+
| FidifEps     | OT_REAL      | 0.000        | Finite       | casadi::Worh |
|              |              |              | difference   | pInternal    |
|              |              |              | perturbation |              |
+--------------+--------------+--------------+--------------+--------------+
| FidifHM      | OT_BOOLEAN   | False        | Approximate  | casadi::Worh |
|              |              |              | Hessian by   | pInternal    |
|              |              |              | finite       |              |
|              |              |              | differences  |              |
|              |              |              | (otherwise   |              |
|              |              |              | BFGS)        |              |
+--------------+--------------+--------------+--------------+--------------+
| FilterBisecA | OT_BOOLEAN   | True         | Filter       | casadi::Worh |
| lpha         |              |              | heuristic to | pInternal    |
|              |              |              | save Armijo  |              |
|              |              |              | iterations   |              |
+--------------+--------------+--------------+--------------+--------------+
| FilterGammaC | OT_REAL      | 0.000        | Constraint   | casadi::Worh |
| V            |              |              | violation    | pInternal    |
|              |              |              | decrease     |              |
|              |              |              | factor in    |              |
|              |              |              | Filter       |              |
|              |              |              | acceptance   |              |
|              |              |              | check        |              |
+--------------+--------------+--------------+--------------+--------------+
| FilterGammaF | OT_REAL      | 0.000        | Objective    | casadi::Worh |
|              |              |              | decrease     | pInternal    |
|              |              |              | factor in    |              |
|              |              |              | Filter       |              |
|              |              |              | acceptance   |              |
|              |              |              | check        |              |
+--------------+--------------+--------------+--------------+--------------+
| FilterInters | OT_BOOLEAN   | True         | Filter       | casadi::Worh |
| ecAlpha      |              |              | heuristic to | pInternal    |
|              |              |              | save Armijo  |              |
|              |              |              | iterations   |              |
+--------------+--------------+--------------+--------------+--------------+
| FirstDifCent | OT_BOOLEAN   | True         | Use central  | casadi::Worh |
| ral          |              |              | finite       | pInternal    |
|              |              |              | difference   |              |
|              |              |              | quotient for |              |
|              |              |              | first        |              |
|              |              |              | derivatives  |              |
+--------------+--------------+--------------+--------------+--------------+
| FocusOnFeas  | OT_BOOLEAN   | True         | Enable       | casadi::Worh |
|              |              |              | Focus-on-    | pInternal    |
|              |              |              | Feasibility  |              |
|              |              |              | mode         |              |
+--------------+--------------+--------------+--------------+--------------+
| FocusOnFeasF | OT_REAL      | 1.360        | Factor in    | casadi::Worh |
| actor        |              |              | Focus-on-    | pInternal    |
|              |              |              | Feasibility  |              |
|              |              |              | mode         |              |
+--------------+--------------+--------------+--------------+--------------+
| GammaAlpha   | OT_REAL      | 0.050        | Safety       | casadi::Worh |
|              |              |              | factor for   | pInternal    |
|              |              |              | alphamin     |              |
|              |              |              | calculation  |              |
|              |              |              | by Filter    |              |
+--------------+--------------+--------------+--------------+--------------+
| GroupMethod  | OT_INTEGER   | 1            | Select       | casadi::Worh |
|              |              |              | method to    | pInternal    |
|              |              |              | determine    |              |
|              |              |              | graph        |              |
|              |              |              | colouring    |              |
|              |              |              | groups       |              |
+--------------+--------------+--------------+--------------+--------------+
| IgnoreFilter | OT_BOOLEAN   | False        | Activate     | casadi::Worh |
| Crit         |              |              | accelerating | pInternal    |
|              |              |              | heuristics   |              |
|              |              |              | for Filter   |              |
+--------------+--------------+--------------+--------------+--------------+
| IncBettsTau  | OT_REAL      | 2            | Increase     | casadi::Worh |
|              |              |              | factor for   | pInternal    |
|              |              |              | Betts'       |              |
|              |              |              | update       |              |
|              |              |              | dampening    |              |
|              |              |              | term         |              |
+--------------+--------------+--------------+--------------+--------------+
| IncBettsTauM | OT_REAL      | 100          | Larger       | casadi::Worh |
| ore          |              |              | increase     | pInternal    |
|              |              |              | factor for   |              |
|              |              |              | Betts'       |              |
|              |              |              | update       |              |
|              |              |              | dampening    |              |
|              |              |              | term         |              |
+--------------+--------------+--------------+--------------+--------------+
| IncreaseIWS  | OT_REAL      | 1            | Increase     | casadi::Worh |
|              |              |              | factor for   | pInternal    |
|              |              |              | estimated    |              |
|              |              |              | integer      |              |
|              |              |              | workspace    |              |
|              |              |              | requirement  |              |
+--------------+--------------+--------------+--------------+--------------+
| IncreaseRWS  | OT_REAL      | 1            | Increase     | casadi::Worh |
|              |              |              | factor for   | pInternal    |
|              |              |              | estimated    |              |
|              |              |              | real         |              |
|              |              |              | workspace    |              |
|              |              |              | requirement  |              |
+--------------+--------------+--------------+--------------+--------------+
| Infty        | OT_REAL      | 1.000e+20    | Upper bound  | casadi::Worh |
|              |              |              | for numbers  | pInternal    |
|              |              |              | to be        |              |
|              |              |              | regarded as  |              |
|              |              |              | finite       |              |
+--------------+--------------+--------------+--------------+--------------+
| InftyUnbound | OT_REAL      | 1.000e+20    | Tolerance    | casadi::Worh |
| ed           |              |              | for unbounde | pInternal    |
|              |              |              | dness        |              |
|              |              |              | detection    |              |
|              |              |              | heuristic    |              |
+--------------+--------------+--------------+--------------+--------------+
| InitialLMest | OT_BOOLEAN   | True         | Enable       | casadi::Worh |
|              |              |              | initial      | pInternal    |
|              |              |              | Lagrange     |              |
|              |              |              | multiplier   |              |
|              |              |              | estimate     |              |
+--------------+--------------+--------------+--------------+--------------+
| KeepAcceptab | OT_BOOLEAN   | True         | Save         | casadi::Worh |
| leSol        |              |              | acceptable   | pInternal    |
|              |              |              | solutions as |              |
|              |              |              | fallback     |              |
+--------------+--------------+--------------+--------------+--------------+
| LMestQPipCom | OT_REAL      | 0.003        | IP complemen | casadi::Worh |
| Tol          |              |              | tarity       | pInternal    |
|              |              |              | tolerance in |              |
|              |              |              | initial      |              |
|              |              |              | multiplier   |              |
|              |              |              | estimate     |              |
+--------------+--------------+--------------+--------------+--------------+
| LMestQPipRes | OT_REAL      | 1            | IP residual  | casadi::Worh |
| Tol          |              |              | tolerance in | pInternal    |
|              |              |              | initial      |              |
|              |              |              | multiplier   |              |
|              |              |              | estimate     |              |
+--------------+--------------+--------------+--------------+--------------+
| LinMult      | OT_BOOLEAN   | False        | Control      | casadi::Worh |
|              |              |              | Lagrange     | pInternal    |
|              |              |              | multiplier   |              |
|              |              |              | update       |              |
+--------------+--------------+--------------+--------------+--------------+
| LogLevel     | OT_INTEGER   | 0            | Enable XML   | casadi::Worh |
|              |              |              | logfiles and | pInternal    |
|              |              |              | writing      |              |
|              |              |              | interval     |              |
+--------------+--------------+--------------+--------------+--------------+
| LogResult    | OT_INTEGER   | 0            | Enable XML   | casadi::Worh |
|              |              |              | result       | pInternal    |
|              |              |              | logging and  |              |
|              |              |              | detail level |              |
+--------------+--------------+--------------+--------------+--------------+
| LowPassAlpha | OT_REAL      | 0.950        | Lowpass-     | casadi::Worh |
| F            |              |              | filter       | pInternal    |
|              |              |              | update       |              |
|              |              |              | factor for   |              |
|              |              |              | objective    |              |
|              |              |              | values       |              |
+--------------+--------------+--------------+--------------+--------------+
| LowPassAlpha | OT_REAL      | 0.950        | Lowpass-     | casadi::Worh |
| G            |              |              | filter       | pInternal    |
|              |              |              | update       |              |
|              |              |              | factor for   |              |
|              |              |              | constraint   |              |
|              |              |              | values       |              |
+--------------+--------------+--------------+--------------+--------------+
| LowPassAlpha | OT_REAL      | 0.100        | Lowpass-     | casadi::Worh |
| Merit        |              |              | filter       | pInternal    |
|              |              |              | update       |              |
|              |              |              | factor for   |              |
|              |              |              | merit        |              |
|              |              |              | function     |              |
|              |              |              | values       |              |
+--------------+--------------+--------------+--------------+--------------+
| LowPassFilte | OT_BOOLEAN   | True         | Enable       | casadi::Worh |
| r            |              |              | lowpass-     | pInternal    |
|              |              |              | filter       |              |
|              |              |              | termination  |              |
|              |              |              | criterion    |              |
+--------------+--------------+--------------+--------------+--------------+
| MAPivotThres | OT_REAL      | 0.000        | Pivoting     | casadi::Worh |
| hold         |              |              | tolerance    | pInternal    |
|              |              |              | for MA       |              |
|              |              |              | solvers      |              |
+--------------+--------------+--------------+--------------+--------------+
| MatrixCC     | OT_BOOLEAN   | False        | Not to be    | casadi::Worh |
|              |              |              | included     | pInternal    |
|              |              |              | into a       |              |
|              |              |              | parameter    |              |
|              |              |              | file!        |              |
+--------------+--------------+--------------+--------------+--------------+
| MaxCalls     | OT_INTEGER   | 2.147e+09    | Upper bound  | casadi::Worh |
|              |              |              | to Reverse C | pInternal    |
|              |              |              | ommunication |              |
|              |              |              | calls        |              |
+--------------+--------------+--------------+--------------+--------------+
| MaxForce     | OT_INTEGER   | 1000         | Maximum      | casadi::Worh |
|              |              |              | number of    | pInternal    |
|              |              |              | Force        |              |
|              |              |              | recovery     |              |
|              |              |              | strategy     |              |
|              |              |              | steps        |              |
+--------------+--------------+--------------+--------------+--------------+
| MaxGPart     | OT_INTEGER   | 1            | (experimenta | casadi::Worh |
|              |              |              | l)           | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| MaxIter      | OT_INTEGER   | 500          | Upper bound  | casadi::Worh |
|              |              |              | on major     | pInternal    |
|              |              |              | iterations   |              |
+--------------+--------------+--------------+--------------+--------------+
| MaxLScounter | OT_INTEGER   | 3            | Control      | casadi::Worh |
|              |              |              | activation   | pInternal    |
|              |              |              | of Filter    |              |
|              |              |              | acceleration |              |
|              |              |              | heuristics   |              |
+--------------+--------------+--------------+--------------+--------------+
| MaxNorm      | OT_BOOLEAN   | True         | Select max-  | casadi::Worh |
|              |              |              | norm instead | pInternal    |
|              |              |              | of 1-norm in |              |
|              |              |              | Filter       |              |
+--------------+--------------+--------------+--------------+--------------+
| MeritFunctio | OT_INTEGER   | 4            | Select merit | casadi::Worh |
| n            |              |              | function and | pInternal    |
|              |              |              | penalty      |              |
|              |              |              | update [0,   |              |
|              |              |              | 3..5]        |              |
+--------------+--------------+--------------+--------------+--------------+
| MeritGradTol | OT_REAL      | 0.000        | Threshold of | casadi::Worh |
|              |              |              | meritfunctio | pInternal    |
|              |              |              | n gradient   |              |
|              |              |              | for          |              |
|              |              |              | increasing   |              |
|              |              |              | Hessian regu |              |
|              |              |              | larisation   |              |
+--------------+--------------+--------------+--------------+--------------+
| MinBettsTau  | OT_REAL      | 0.000        | Lower bound  | casadi::Worh |
|              |              |              | for Betts'   | pInternal    |
|              |              |              | update       |              |
|              |              |              | dampening    |              |
|              |              |              | term         |              |
+--------------+--------------+--------------+--------------+--------------+
| MoreRelax    | OT_BOOLEAN   | False        | Introduce    | casadi::Worh |
|              |              |              | one          | pInternal    |
|              |              |              | relaxation   |              |
|              |              |              | variable for |              |
|              |              |              | every        |              |
|              |              |              | constraint   |              |
+--------------+--------------+--------------+--------------+--------------+
| NLPmethod    | OT_INTEGER   | 1            | Select (1) M | casadi::Worh |
|              |              |              | eritfunction | pInternal    |
|              |              |              | or (3)       |              |
|              |              |              | Filter globa |              |
|              |              |              | lisation     |              |
+--------------+--------------+--------------+--------------+--------------+
| NLPprint     | OT_INTEGER   | 2            | NLP print    | casadi::Worh |
|              |              |              | level        | pInternal    |
|              |              |              | [-1..4]      |              |
+--------------+--------------+--------------+--------------+--------------+
| PairMethod   | OT_INTEGER   | 1            | Select       | casadi::Worh |
|              |              |              | method to    | pInternal    |
|              |              |              | determine    |              |
|              |              |              | graph        |              |
|              |              |              | colouring    |              |
|              |              |              | pairgroups   |              |
+--------------+--------------+--------------+--------------+--------------+
| PenUpdEpsBar | OT_REAL      | 0.900        | Penalty      | casadi::Worh |
|              |              |              | update       | pInternal    |
|              |              |              | parameter    |              |
|              |              |              | factor for M |              |
|              |              |              | eritFunction |              |
|              |              |              | = 3          |              |
+--------------+--------------+--------------+--------------+--------------+
| PenUpdEpsKFa | OT_REAL      | 2            | Penalty      | casadi::Worh |
| c            |              |              | update       | pInternal    |
|              |              |              | parameter    |              |
|              |              |              | factor for M |              |
|              |              |              | eritFunction |              |
|              |              |              | = 4          |              |
+--------------+--------------+--------------+--------------+--------------+
| PenUpdEpsKSe | OT_INTEGER   | 2            | Penalty      | casadi::Worh |
| quence       |              |              | update       | pInternal    |
|              |              |              | parameter    |              |
+--------------+--------------+--------------+--------------+--------------+
| PenUpdMaxDel | OT_REAL      | 11           | Max penalty  | casadi::Worh |
| taK          |              |              | for MeritFun | pInternal    |
|              |              |              | ction = 4    |              |
+--------------+--------------+--------------+--------------+--------------+
| PenUpdMaxFac | OT_REAL      | 100000000    | Max factor   | casadi::Worh |
|              |              |              | for          | pInternal    |
|              |              |              | increasing   |              |
|              |              |              | penalty for  |              |
|              |              |              | MeritFunctio |              |
|              |              |              | n = 4        |              |
+--------------+--------------+--------------+--------------+--------------+
| PenUpdRBar   | OT_REAL      | 2            | Penalty      | casadi::Worh |
|              |              |              | update       | pInternal    |
|              |              |              | parameter    |              |
|              |              |              | for MeritFun |              |
|              |              |              | ction = 3    |              |
+--------------+--------------+--------------+--------------+--------------+
| PrecisionF   | OT_REAL      | 0.000        | (currently   | casadi::Worh |
|              |              |              | unused)      | pInternal    |
|              |              |              | Relative     |              |
|              |              |              | precision of |              |
|              |              |              | objective    |              |
+--------------+--------------+--------------+--------------+--------------+
| PrecisionG   | OT_REAL      | 0.000        | (currently   | casadi::Worh |
|              |              |              | unused)      | pInternal    |
|              |              |              | Relative     |              |
|              |              |              | precision of |              |
|              |              |              | constraints  |              |
+--------------+--------------+--------------+--------------+--------------+
| QPscaleParam | OT_REAL      | 0            | (currently   | casadi::Worh |
|              |              |              | unused)      | pInternal    |
|              |              |              | Scaling      |              |
|              |              |              | factor for   |              |
|              |              |              | QP           |              |
+--------------+--------------+--------------+--------------+--------------+
| QuadraticPro | OT_BOOLEAN   | False        | Not to be    | casadi::Worh |
| blem         |              |              | included     | pInternal    |
|              |              |              | into a       |              |
|              |              |              | parameter    |              |
|              |              |              | file!        |              |
+--------------+--------------+--------------+--------------+--------------+
| ReduceBettsT | OT_REAL      | 0.300        | Decrease     | casadi::Worh |
| au           |              |              | factor for   | pInternal    |
|              |              |              | Betts'       |              |
|              |              |              | update       |              |
|              |              |              | dampening    |              |
|              |              |              | term         |              |
+--------------+--------------+--------------+--------------+--------------+
| RegStrategy  | OT_INTEGER   | 1            | Select       | casadi::Worh |
|              |              |              | Hessian regu | pInternal    |
|              |              |              | larisation   |              |
|              |              |              | strategy in  |              |
|              |              |              | Filter       |              |
+--------------+--------------+--------------+--------------+--------------+
| ReinitFilter | OT_BOOLEAN   | False        | Enables      | casadi::Worh |
|              |              |              | Filter-reini | pInternal    |
|              |              |              | tialisation  |              |
|              |              |              | accelerating |              |
|              |              |              | heuristic    |              |
+--------------+--------------+--------------+--------------+--------------+
| RelaxMaxDelt | OT_REAL      | 0.920        | Upper bound  | casadi::Worh |
| a            |              |              | for          | pInternal    |
|              |              |              | accepting    |              |
|              |              |              | the          |              |
|              |              |              | constraint   |              |
|              |              |              | relaxation   |              |
|              |              |              | variable     |              |
+--------------+--------------+--------------+--------------+--------------+
| RelaxMaxPen  | OT_REAL      | 50000000     | Upper bound  | casadi::Worh |
|              |              |              | on the       | pInternal    |
|              |              |              | constraint   |              |
|              |              |              | relaxation   |              |
|              |              |              | penalty      |              |
+--------------+--------------+--------------+--------------+--------------+
| RelaxRho     | OT_REAL      | 6            | Update       | casadi::Worh |
|              |              |              | factor for   | pInternal    |
|              |              |              | the          |              |
|              |              |              | constraint   |              |
|              |              |              | relaxation   |              |
|              |              |              | penalty      |              |
+--------------+--------------+--------------+--------------+--------------+
| RelaxStart   | OT_REAL      | 1            | Initial      | casadi::Worh |
|              |              |              | value of the | pInternal    |
|              |              |              | constraint   |              |
|              |              |              | relaxation   |              |
|              |              |              | penalty      |              |
+--------------+--------------+--------------+--------------+--------------+
| RestUntilFea | OT_BOOLEAN   | False        | Do           | casadi::Worh |
| s            |              |              | restoration  | pInternal    |
|              |              |              | until a      |              |
|              |              |              | feasible     |              |
|              |              |              | solution is  |              |
|              |              |              | found        |              |
+--------------+--------------+--------------+--------------+--------------+
| ScaleConIter | OT_BOOLEAN   | False        | Scale        | casadi::Worh |
|              |              |              | constraints  | pInternal    |
|              |              |              | in every     |              |
|              |              |              | iteration    |              |
+--------------+--------------+--------------+--------------+--------------+
| ScaleFacObj  | OT_REAL      | 10           | Value to     | casadi::Worh |
|              |              |              | scale large  | pInternal    |
|              |              |              | objective    |              |
|              |              |              | functions to |              |
+--------------+--------------+--------------+--------------+--------------+
| ScaleFacQP   | OT_REAL      | 10           | Upper bound  | casadi::Worh |
|              |              |              | on resulting | pInternal    |
|              |              |              | matrix norm  |              |
|              |              |              | for QP       |              |
|              |              |              | scaling      |              |
+--------------+--------------+--------------+--------------+--------------+
| ScaledFD     | OT_BOOLEAN   | True         | Use a scaled | casadi::Worh |
|              |              |              | perturbation | pInternal    |
|              |              |              | for finite   |              |
|              |              |              | differences  |              |
+--------------+--------------+--------------+--------------+--------------+
| ScaledKKT    | OT_BOOLEAN   | True         | Scale KKT    | casadi::Worh |
|              |              |              | conditions   | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| ScaledObj    | OT_BOOLEAN   | True         | Scale the    | casadi::Worh |
|              |              |              | objective    | pInternal    |
|              |              |              | function     |              |
+--------------+--------------+--------------+--------------+--------------+
| ScaledQP     | OT_BOOLEAN   | True         | Scale some   | casadi::Worh |
|              |              |              | matrices     | pInternal    |
|              |              |              | handed to    |              |
|              |              |              | the QP       |              |
+--------------+--------------+--------------+--------------+--------------+
| StartBettsTa | OT_REAL      | 0.100        | Initial      | casadi::Worh |
| u            |              |              | value for    | pInternal    |
|              |              |              | Betts'       |              |
|              |              |              | update       |              |
|              |              |              | dampening    |              |
|              |              |              | term         |              |
+--------------+--------------+--------------+--------------+--------------+
| SwitchingDel | OT_REAL      | 0.010        | Filter       | casadi::Worh |
| ta           |              |              | switching    | pInternal    |
|              |              |              | condition    |              |
|              |              |              | parameter    |              |
+--------------+--------------+--------------+--------------+--------------+
| SwitchingSCV | OT_REAL      | 1.100        | Filter       | casadi::Worh |
|              |              |              | switching    | pInternal    |
|              |              |              | condition    |              |
|              |              |              | parameter    |              |
+--------------+--------------+--------------+--------------+--------------+
| SwitchingSF  | OT_REAL      | 2.300        | Filter       | casadi::Worh |
|              |              |              | switching    | pInternal    |
|              |              |              | condition    |              |
|              |              |              | parameter    |              |
+--------------+--------------+--------------+--------------+--------------+
| TakeQPSol    | OT_BOOLEAN   | False        | Evaluate QP  | casadi::Worh |
|              |              |              | search       | pInternal    |
|              |              |              | direction    |              |
|              |              |              | regardless   |              |
|              |              |              | of           |              |
|              |              |              | convergence  |              |
+--------------+--------------+--------------+--------------+--------------+
| Timeout      | OT_REAL      | 300          | Timeout in   | casadi::Worh |
|              |              |              | seconds      | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| TolComp      | OT_REAL      | 0.001        | Complementar | casadi::Worh |
|              |              |              | ity          | pInternal    |
|              |              |              | tolerance    |              |
+--------------+--------------+--------------+--------------+--------------+
| TolFeas      | OT_REAL      | 0.000        | Feasibility  | casadi::Worh |
|              |              |              | tolerance    | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| TolOpti      | OT_REAL      | 0.000        | Optimality   | casadi::Worh |
|              |              |              | tolerance    | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| TolWeakActiv | OT_REAL      | 1            | (experimenta | casadi::Worh |
| e            |              |              | l)           | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| TooBig       | OT_BOOLEAN   | True         | Enable too-  | casadi::Worh |
|              |              |              | big          | pInternal    |
|              |              |              | termination  |              |
|              |              |              | heuristics   |              |
+--------------+--------------+--------------+--------------+--------------+
| TooBigCV     | OT_REAL      | 1.000e+25    | Upper bound  | casadi::Worh |
|              |              |              | on           | pInternal    |
|              |              |              | constraint   |              |
|              |              |              | violation    |              |
|              |              |              | for too-big  |              |
|              |              |              | heuristic    |              |
+--------------+--------------+--------------+--------------+--------------+
| TooBigKKT    | OT_REAL      | 1.000e+30    | Upper bound  | casadi::Worh |
|              |              |              | on KKT       | pInternal    |
|              |              |              | values for   |              |
|              |              |              | too-big      |              |
|              |              |              | heuristic    |              |
+--------------+--------------+--------------+--------------+--------------+
| UserDF       | OT_BOOLEAN   | True         | Objective    | casadi::Worh |
|              |              |              | gradient     | pInternal    |
|              |              |              | values       |              |
|              |              |              | supplied by  |              |
|              |              |              | caller       |              |
+--------------+--------------+--------------+--------------+--------------+
| UserDG       | OT_BOOLEAN   | True         | Jacobian     | casadi::Worh |
|              |              |              | values       | pInternal    |
|              |              |              | supplied by  |              |
|              |              |              | caller       |              |
+--------------+--------------+--------------+--------------+--------------+
| UserHM       | OT_BOOLEAN   | True         | Hessian      | casadi::Worh |
|              |              |              | values       | pInternal    |
|              |              |              | supplied by  |              |
|              |              |              | caller       |              |
+--------------+--------------+--------------+--------------+--------------+
| UserHMstruct | OT_INTEGER   | 2            | Enable       | casadi::Worh |
| ure          |              |              | automatic    | pInternal    |
|              |              |              | Hessian      |              |
|              |              |              | structure    |              |
|              |              |              | generation   |              |
|              |              |              | or checking  |              |
+--------------+--------------+--------------+--------------+--------------+
| WeakActiveSe | OT_BOOLEAN   | False        | (experimenta | casadi::Worh |
| t            |              |              | l)           | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| ad_mode      | OT_STRING    | \"automatic\"  | How to       | casadi::Func |
|              |              |              | calculate    | tionInternal |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (forward:    |              |
|              |              |              | only forward |              |
|              |              |              | mode|reverse |              |
|              |              |              | : only       |              |
|              |              |              | adjoint mode |              |
|              |              |              | |automatic:  |              |
|              |              |              | a heuristic  |              |
|              |              |              | decides      |              |
|              |              |              | which is     |              |
|              |              |              | more         |              |
|              |              |              | appropriate) |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | Function     | casadi::Func |
| enerator     | EGENERATOR   | )            | that returns | tionInternal |
|              |              |              | a derivative |              |
|              |              |              | function     |              |
|              |              |              | given a      |              |
|              |              |              | number of    |              |
|              |              |              | forward and  |              |
|              |              |              | reverse      |              |
|              |              |              | directional  |              |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| eps          | OT_REAL      | 0.000        | Machine      | casadi::Worh |
|              |              |              | epsilon      | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| expand       | OT_BOOLEAN   | false        | Expand the   | casadi::NLPS |
|              |              |              | NLP function | olverInterna |
|              |              |              | in terms of  | l            |
|              |              |              | scalar       |              |
|              |              |              | operations,  |              |
|              |              |              | i.e. MX->SX  |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | false        | Flag to      | casadi::Func |
|              |              |              | indicate     | tionInternal |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| grad_f       | OT_FUNCTION  | GenericType( | Function for | casadi::NLPS |
|              |              | )            | calculating  | olverInterna |
|              |              |              | the gradient | l            |
|              |              |              | of the       |              |
|              |              |              | objective    |              |
|              |              |              | (column, aut |              |
|              |              |              | ogenerated   |              |
|              |              |              | by default)  |              |
+--------------+--------------+--------------+--------------+--------------+
| grad_lag     | OT_FUNCTION  | GenericType( | Function for | casadi::NLPS |
|              |              | )            | calculating  | olverInterna |
|              |              |              | the gradient | l            |
|              |              |              | of the       |              |
|              |              |              | Lagrangian ( |              |
|              |              |              | autogenerate |              |
|              |              |              | d by         |              |
|              |              |              | default)     |              |
+--------------+--------------+--------------+--------------+--------------+
| hess_lag     | OT_FUNCTION  | GenericType( | Function for | casadi::NLPS |
|              |              | )            | calculating  | olverInterna |
|              |              |              | the Hessian  | l            |
|              |              |              | of the       |              |
|              |              |              | Lagrangian ( |              |
|              |              |              | autogenerate |              |
|              |              |              | d by         |              |
|              |              |              | default)     |              |
+--------------+--------------+--------------+--------------+--------------+
| ignore_check | OT_BOOLEAN   | false        | If set to    | casadi::NLPS |
| _vec         |              |              | true, the    | olverInterna |
|              |              |              | input shape  | l            |
|              |              |              | of F will    |              |
|              |              |              | not be       |              |
|              |              |              | checked.     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | true         | Throw        | casadi::Func |
|              |              |              | exceptions   | tionInternal |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| internalParC | OT_INTEGER   | 0            | Counter for  | casadi::Worh |
| hanged       |              |              | changed      | pInternal    |
|              |              |              | parameters.  |              |
|              |              |              | Internal use |              |
|              |              |              | only.        |              |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_CALLBACK  | GenericType( | A function   | casadi::NLPS |
| llback       |              | )            | that will be | olverInterna |
|              |              |              | called at    | l            |
|              |              |              | each         |              |
|              |              |              | iteration    |              |
|              |              |              | with the     |              |
|              |              |              | solver as    |              |
|              |              |              | input. Check |              |
|              |              |              | documentatio |              |
|              |              |              | n of         |              |
|              |              |              | Callback .   |              |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_BOOLEAN   | false        | If set to    | casadi::NLPS |
| llback_ignor |              |              | true, errors | olverInterna |
| e_errors     |              |              | thrown by it | l            |
|              |              |              | eration_call |              |
|              |              |              | back will be |              |
|              |              |              | ignored.     |              |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_INTEGER   | 1            | Only call    | casadi::NLPS |
| llback_step  |              |              | the callback | olverInterna |
|              |              |              | function     | l            |
|              |              |              | every few    |              |
|              |              |              | iterations.  |              |
+--------------+--------------+--------------+--------------+--------------+
| jac_f        | OT_FUNCTION  | GenericType( | Function for | casadi::NLPS |
|              |              | )            | calculating  | olverInterna |
|              |              |              | the jacobian | l            |
|              |              |              | of the       |              |
|              |              |              | objective    |              |
|              |              |              | (sparse row, |              |
|              |              |              | autogenerate |              |
|              |              |              | d by         |              |
|              |              |              | default)     |              |
+--------------+--------------+--------------+--------------+--------------+
| jac_g        | OT_FUNCTION  | GenericType( | Function for | casadi::NLPS |
|              |              | )            | calculating  | olverInterna |
|              |              |              | the Jacobian | l            |
|              |              |              | of the       |              |
|              |              |              | constraints  |              |
|              |              |              | (autogenerat |              |
|              |              |              | ed by        |              |
|              |              |              | default)     |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | Monitors to  | casadi::Func |
|              | TOR          | )            | be activated | tionInternal |
|              |              |              | (inputs|outp | casadi::Worh |
|              |              |              | uts)         | pInternal    |
|              |              |              | Monitor      |              |
|              |              |              | functions (e |              |
|              |              |              | val_f|eval_g |              |
|              |              |              | |eval_jac_g| |              |
|              |              |              | eval_grad_f| |              |
|              |              |              | eval_h)      |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| print_time   | OT_BOOLEAN   | True         | Print        | casadi::Worh |
|              |              |              | information  | pInternal    |
|              |              |              | about        |              |
|              |              |              | execution    |              |
|              |              |              | time         |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_ipBarrier | OT_REAL      | 7.800        | IP barrier   | casadi::Worh |
|              |              |              | parameter.   | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| qp_ipComTol  | OT_REAL      | 0.000        | IP complemen | casadi::Worh |
|              |              |              | tarity       | pInternal    |
|              |              |              | tolerance.   |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_ipFracBou | OT_REAL      | 0.880        | IP fraction- | casadi::Worh |
| nd           |              |              | to-the-      | pInternal    |
|              |              |              | boundary     |              |
|              |              |              | parameter.   |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_ipLsMetho | OT_STRING    | None         | Select the   | casadi::Worh |
| d            |              |              | direct       | pInternal    |
|              |              |              | linear       |              |
|              |              |              | solver used  |              |
|              |              |              | by the IP    |              |
|              |              |              | method.      |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_ipMinAlph | OT_REAL      | 0.000        | IP line      | casadi::Worh |
| a            |              |              | search       | pInternal    |
|              |              |              | minimum step |              |
|              |              |              | size.        |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_ipRelaxDi | OT_REAL      | 2            | The          | casadi::Worh |
| v            |              |              | relaxation   | pInternal    |
|              |              |              | term is      |              |
|              |              |              | divided by   |              |
|              |              |              | this value   |              |
|              |              |              | if           |              |
|              |              |              | successful.  |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_ipRelaxMa | OT_REAL      | 0.000        | Maximum      | casadi::Worh |
| x            |              |              | relaxation   | pInternal    |
|              |              |              | value.       |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_ipRelaxMi | OT_REAL      | 0.000        | Mimimum      | casadi::Worh |
| n            |              |              | relaxation   | pInternal    |
|              |              |              | value.       |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_ipRelaxMu | OT_REAL      | 10           | The          | casadi::Worh |
| lt           |              |              | relaxation   | pInternal    |
|              |              |              | term is      |              |
|              |              |              | multiplied   |              |
|              |              |              | by this      |              |
|              |              |              | value if uns |              |
|              |              |              | uccessful.   |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_ipResTol  | OT_REAL      | 0.000        | IP residuals | casadi::Worh |
|              |              |              | tolerance.   | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| qp_ipTryRela | OT_BOOLEAN   | True         | Enable       | casadi::Worh |
| x            |              |              | relaxation   | pInternal    |
|              |              |              | strategy     |              |
|              |              |              | when         |              |
|              |              |              | encountering |              |
|              |              |              | an error.    |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_lsItMaxIt | OT_INTEGER   | 1000         | Maximum      | casadi::Worh |
| er           |              |              | number of    | pInternal    |
|              |              |              | iterations   |              |
|              |              |              | of the       |              |
|              |              |              | iterative    |              |
|              |              |              | linear       |              |
|              |              |              | solvers.     |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_lsItMetho | OT_STRING    | None         | Select the   | casadi::Worh |
| d            |              |              | iterative    | pInternal    |
|              |              |              | linear       |              |
|              |              |              | solver.      |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_lsItPreco | OT_STRING    | None         | Select preco | casadi::Worh |
| ndMethod     |              |              | nditioner    | pInternal    |
|              |              |              | for the      |              |
|              |              |              | iterative    |              |
|              |              |              | linear       |              |
|              |              |              | solver.      |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_lsRefineM | OT_INTEGER   | 10           | Maximum      | casadi::Worh |
| axIter       |              |              | number of    | pInternal    |
|              |              |              | iterative    |              |
|              |              |              | refinement   |              |
|              |              |              | steps of the |              |
|              |              |              | direct       |              |
|              |              |              | linear       |              |
|              |              |              | solvers.     |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_lsScale   | OT_BOOLEAN   | True         | Enables      | casadi::Worh |
|              |              |              | scaling on   | pInternal    |
|              |              |              | linear       |              |
|              |              |              | solver       |              |
|              |              |              | level.       |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_lsTol     | OT_REAL      | 0.000        | Tolerance    | casadi::Worh |
|              |              |              | for the      | pInternal    |
|              |              |              | linear       |              |
|              |              |              | solver.      |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_lsTrySimp | OT_BOOLEAN   | False        | Some         | casadi::Worh |
| le           |              |              | matrices can | pInternal    |
|              |              |              | be solved    |              |
|              |              |              | without      |              |
|              |              |              | calling a    |              |
|              |              |              | linear       |              |
|              |              |              | equation sol |              |
|              |              |              | ver.Currentl |              |
|              |              |              | y only       |              |
|              |              |              | diagonal     |              |
|              |              |              | matrices are |              |
|              |              |              | supported    |              |
|              |              |              | .Non-        |              |
|              |              |              | diagonal     |              |
|              |              |              | matrices     |              |
|              |              |              | will         |              |
|              |              |              | besolved     |              |
|              |              |              | with the     |              |
|              |              |              | chosen       |              |
|              |              |              | linear       |              |
|              |              |              | equation     |              |
|              |              |              | solver.      |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_maxIter   | OT_INTEGER   | 80           | Imposes an   | casadi::Worh |
|              |              |              | upper limit  | pInternal    |
|              |              |              | on the       |              |
|              |              |              | number of    |              |
|              |              |              | minor solver |              |
|              |              |              | iterations,  |              |
|              |              |              | i.e. for the |              |
|              |              |              | quadratic    |              |
|              |              |              | subproblem   |              |
|              |              |              | solver.If    |              |
|              |              |              | the limit is |              |
|              |              |              | reached      |              |
|              |              |              | before       |              |
|              |              |              | convergence, |              |
|              |              |              | WORHP will   |              |
|              |              |              | activate QP  |              |
|              |              |              | recovery     |              |
|              |              |              | strategies   |              |
|              |              |              | to prevent a |              |
|              |              |              | solver       |              |
|              |              |              | breakdown.   |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_method    | OT_STRING    | None         | Select the   | casadi::Worh |
|              |              |              | solution     | pInternal    |
|              |              |              | method used  |              |
|              |              |              | by the QP    |              |
|              |              |              | solver.      |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_nsnBeta   | OT_REAL      | 0.900        | NSN stepsize | casadi::Worh |
|              |              |              | decrease     | pInternal    |
|              |              |              | factor.      |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_nsnGradSt | OT_BOOLEAN   | True         | Enable       | casadi::Worh |
| ep           |              |              | gradient     | pInternal    |
|              |              |              | steps in the |              |
|              |              |              | NSN method.  |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_nsnKKT    | OT_REAL      | 0.000        | NSN KKT      | casadi::Worh |
|              |              |              | tolerance.   | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| qp_nsnLsMeth | OT_STRING    | None         | Select the   | casadi::Worh |
| od           |              |              | direct       | pInternal    |
|              |              |              | linear       |              |
|              |              |              | solver used  |              |
|              |              |              | by the NSN   |              |
|              |              |              | method.      |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_nsnMinAlp | OT_REAL      | 0.000        | NSN line     | casadi::Worh |
| ha           |              |              | search       | pInternal    |
|              |              |              | minimum step |              |
|              |              |              | size.        |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_nsnSigma  | OT_REAL      | 0.010        | NSN line     | casadi::Worh |
|              |              |              | search slope | pInternal    |
|              |              |              | parameter.   |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_printLeve | OT_STRING    | None         | Controls the | casadi::Worh |
| l            |              |              | amount of QP | pInternal    |
|              |              |              | solver       |              |
|              |              |              | output.      |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | False        | Enable       | casadi::Worh |
| rn           |              |              | scaling on   | pInternal    |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_strict    | OT_BOOLEAN   | True         | Use strict   | casadi::Worh |
|              |              |              | termination  | pInternal    |
|              |              |              | criteria in  |              |
|              |              |              | IP method.   |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | true         | Throw        | casadi::Func |
| heck         |              |              | exceptions   | tionInternal |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | A user-      | casadi::Func |
|              |              | )            | defined      | tionInternal |
|              |              |              | field that   |              |
|              |              |              | can be used  |              |
|              |              |              | to identify  |              |
|              |              |              | the function |              |
|              |              |              | or pass      |              |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | false        | Verbose      | casadi::Func |
|              |              |              | evaluation   | tionInternal |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+
| warn_initial | OT_BOOLEAN   | false        | Warn if the  | casadi::NLPS |
| _bounds      |              |              | initial      | olverInterna |
|              |              |              | guess does   | l            |
|              |              |              | not satisfy  |              |
|              |              |              | LBX and UBX  |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available monitors
+-------------+--------------------------+
|     Id      |         Used in          |
+=============+==========================+
| eval_f      | casadi::WorhpInternal    |
+-------------+--------------------------+
| eval_g      | casadi::WorhpInternal    |
+-------------+--------------------------+
| eval_grad_f | casadi::WorhpInternal    |
+-------------+--------------------------+
| eval_h      | casadi::WorhpInternal    |
+-------------+--------------------------+
| eval_jac_g  | casadi::WorhpInternal    |
+-------------+--------------------------+
| inputs      | casadi::FunctionInternal |
+-------------+--------------------------+
| outputs     | casadi::FunctionInternal |
+-------------+--------------------------+

>List of available stats
+--------------------+-----------------------+
|         Id         |        Used in        |
+====================+=======================+
| iter_count         | casadi::WorhpInternal |
+--------------------+-----------------------+
| iteration          | casadi::WorhpInternal |
+--------------------+-----------------------+
| iterations         | casadi::WorhpInternal |
+--------------------+-----------------------+
| n_eval_f           | casadi::WorhpInternal |
+--------------------+-----------------------+
| n_eval_g           | casadi::WorhpInternal |
+--------------------+-----------------------+
| n_eval_grad_f      | casadi::WorhpInternal |
+--------------------+-----------------------+
| n_eval_h           | casadi::WorhpInternal |
+--------------------+-----------------------+
| n_eval_jac_g       | casadi::WorhpInternal |
+--------------------+-----------------------+
| return_code        | casadi::WorhpInternal |
+--------------------+-----------------------+
| return_status      | casadi::WorhpInternal |
+--------------------+-----------------------+
| t_callback_fun     | casadi::WorhpInternal |
+--------------------+-----------------------+
| t_callback_prepare | casadi::WorhpInternal |
+--------------------+-----------------------+
| t_eval_f           | casadi::WorhpInternal |
+--------------------+-----------------------+
| t_eval_g           | casadi::WorhpInternal |
+--------------------+-----------------------+
| t_eval_grad_f      | casadi::WorhpInternal |
+--------------------+-----------------------+
| t_eval_h           | casadi::WorhpInternal |
+--------------------+-----------------------+
| t_eval_jac_g       | casadi::WorhpInternal |
+--------------------+-----------------------+
| t_mainloop         | casadi::WorhpInternal |
+--------------------+-----------------------+

Diagrams

C++ includes: worhp_solver.hpp ";

%feature("docstring") casadi::WorhpSolver::jacobian "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::WorhpSolver::setOutput "

>  void casadi::IOInterface< Function  >::setOutput(T val, int oind=0)
------------------------------------------------------------------------

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::setOutput(T val, const std::string &oname)
------------------------------------------------------------------------

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::WorhpSolver::assertInit "[INTERNAL]  Assert
that it is initialized

";

%feature("docstring") casadi::WorhpSolver::getOutput "

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(int oind=0) const
------------------------------------------------------------------------

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getOutput(const std::string &oname) const
------------------------------------------------------------------------

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

>  void casadi::IOInterface< Function  >::getOutput(T val, int oind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

>  void casadi::IOInterface< Function  >::getOutput(T val, const std::string &oname)
------------------------------------------------------------------------
[INTERNAL] 
Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::WorhpSolver::jacG "

Access the Jacobian of the constraint function.

>Input scheme: casadi::HessLagInput (HESSLAG_NUM_IN = 5) [hessLagIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| HESSLAG_X              | x                      | Decision variable .    |
+------------------------+------------------------+------------------------+
| HESSLAG_P              | p                      | Fixed parameter .      |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_F          | lam_f                  | Multiplier for f. Just |
|                        |                        | a scalar factor for    |
|                        |                        | the objective that the |
|                        |                        | NLP solver might use   |
|                        |                        | to scale the           |
|                        |                        | objective.             |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_G          | lam_g                  | Multiplier for g .     |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::HessLagOutput (HESSLAG_NUM_OUT = 6) [hessLagOut]
+----------------+--------+------------------------------------------------+
|   Full name    | Short  |                  Description                   |
+================+========+================================================+
| HESSLAG_HESS   | hess   | Hessian of the Lagrangian .                    |
+----------------+--------+------------------------------------------------+
| HESSLAG_F      | f      | Objective function .                           |
+----------------+--------+------------------------------------------------+
| HESSLAG_G      | g      | Constraint function .                          |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_X | grad_x | Gradient of the Lagrangian with respect to x . |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_P | grad_p | Gradient of the Lagrangian with respect to p . |
+----------------+--------+------------------------------------------------+

";

%feature("docstring") casadi::WorhpSolver::makeUnique "

>  void casadi::SharedObject::makeUnique(bool clone_members=true)
------------------------------------------------------------------------

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

>  void casadi::SharedObject::makeUnique(std::map< SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
------------------------------------------------------------------------
[INTERNAL] 
SWIGINTERNAL

";

%feature("docstring") casadi::WorhpSolver::getOptionDefault "

INTERNAL.

Get the default of a certain option

";

%feature("docstring") casadi::WorhpSolver::callDerivative "[INTERNAL]
Evaluate the function symbolically or numerically with directional
derivatives The first two arguments are the nondifferentiated inputs and
results of the evaluation, the next two arguments are a set of forward
directional seeds and the resulting forward directional derivatives, the
length of the vector being the number of forward directions. The next two
arguments are a set of adjoint directional seeds and the resulting adjoint
directional derivatives, the length of the vector being the number of
adjoint directions.

";

%feature("docstring") casadi::WorhpSolver::addMonitor "

Add modules to be monitored.

";

%feature("docstring") casadi::WorhpSolver::output_struct "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::WorhpSolver::setInputScheme "

Set input scheme.

";

%feature("docstring") casadi::WorhpSolver::inputS "

>  DMatrix& casadi::IOInterface< Function  >::inputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an input.

>  const DMatrix& casadi::IOInterface< Function  >::inputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an input.

";

%feature("docstring") casadi::WorhpSolver::gradient "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::WorhpSolver::reportConstraints "

Prints out a human readable report about possible constraint violations,
after solving.

";

%feature("docstring") casadi::WorhpSolver::getNumInputs "

Get the number of function inputs.

";

%feature("docstring") casadi::WorhpSolver::outputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::WorhpSolver::getNumInputNonzeros "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::WorhpSolver::getStats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::WorhpSolver::clone "[INTERNAL]  Deep copy.

";

%feature("docstring") casadi::WorhpSolver::setFullJacobian "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::WorhpSolver::callParallel "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring") casadi::WorhpSolver::schemeEntry "[INTERNAL]  Find
the index for a string describing a particular entry of a scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::WorhpSolver::checkInputs "[INTERNAL]  Check
if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::WorhpSolver::gradF "

Access the objective gradient function>Input scheme: casadi::GradFInput
(GRADF_NUM_IN = 3) [gradFIn] +-----------+-------+---------------------+ |
Full name | Short |     Description     |
+===========+=======+=====================+ | GRADF_X   | x     | Decision
variable . | +-----------+-------+---------------------+ | GRADF_P   | p
| Fixed parameter .   | +-----------+-------+---------------------+

";

%feature("docstring") casadi::WorhpSolver::setOptionsFromFile "

Read options from worhp parameter xml.

";

%feature("docstring") casadi::WorhpSolver::setJacobian "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring") casadi::WorhpSolver::getOptionAllowedIndex "[INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::WorhpSolver::getOptionEnumValue "[INTERNAL]
Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::WorhpSolver::getOutputScheme "

Get output scheme.

";

%feature("docstring") casadi::WorhpSolver::isInit "

Is initialized?

";

%feature("docstring") casadi::WorhpSolver::getOptionAllowed "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::WorhpSolver::inputSchemeEntry "[INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::WorhpSolver::getNumOutputNonzeros "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::WorhpSolver::outputS "

>  DMatrix& casadi::IOInterface< Function  >::outputS(int i)
------------------------------------------------------------------------
[INTERNAL] 
Access an output.

>  const DMatrix& casadi::IOInterface< Function  >::outputS(int i) const
------------------------------------------------------------------------
[INTERNAL] 
Const access an output.

";

%feature("docstring") casadi::WorhpSolver::setOptionByEnumValue "[INTERNAL]
Set a certain option by giving an enum value.

";

%feature("docstring") casadi::WorhpSolver::WorhpSolver "

>  casadi::WorhpSolver::WorhpSolver()
------------------------------------------------------------------------

Default constructor.

>  casadi::WorhpSolver::WorhpSolver(const Function &nlp)
------------------------------------------------------------------------

Create an NLP solver instance.

";

%feature("docstring") casadi::WorhpSolver::getOptionDescription "

Get the description of a certain option.

";

%feature("docstring") casadi::WorhpSolver::dictionary "

Get the dictionary.

";

%feature("docstring") casadi::WorhpSolver::nlp "

Access the NLP.

>Input scheme: casadi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::WorhpSolver::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::WorhpSolver::isNull "

Is a null pointer?

";

%feature("docstring") casadi::WorhpSolver::fullJacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::WorhpSolver::printPtr "[INTERNAL]  Print the
pointer to the internal class

";

%feature("docstring") casadi::WorhpSolver::setDerivative "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring") casadi::WorhpSolver::getStat "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::WorhpSolver::getSanitizedName "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::WorhpSolver::spInit "[INTERNAL]  Reset the
sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::WorhpSolver::getNumOutputElements "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::WorhpSolver::setNumInputs "

Set the number of function inputs.

";

%feature("docstring") casadi::WorhpSolver::setJacSparsity "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::WorhpSolver::setQPOptions "

Set options that make the NLP solver more suitable for solving QPs.

";

%feature("docstring") casadi::WorhpSolver::getNumInputElements "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring") casadi::WorhpSolver::jacSparsity "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::WorhpSolver::symbolicInputSX "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::WorhpSolver::output "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::WorhpSolver::hessian "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::WorhpSolver::print "[INTERNAL]  Print a
description of the object.

";

%feature("docstring") casadi::WorhpSolver::evaluate "

Evaluate.

";

%feature("docstring") casadi::WorhpSolver::swap "[INTERNAL]  Swap content
with another instance.

";

%feature("docstring") casadi::WorhpSolver::symbolicInput "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring") casadi::WorhpSolver::printOptions "

Print options to a stream.

";

%feature("docstring") casadi::WorhpSolver::getOptionType "

Get the type of a certain option.

";

%feature("docstring") casadi::WorhpSolver::hasSetOption "

check if the user has there is an option str

";

%feature("docstring") casadi::WorhpSolver::getInputScheme "

Get input scheme.

";

%feature("docstring") casadi::WorhpSolver::copyOptions "

Copy all options from another object.

";

%feature("docstring") casadi::WorhpSolver::setNumOutputs "

Set the number of function outputs.

";

%feature("docstring") casadi::WorhpSolver::getInput "

>  Matrix<double> casadi::IOInterface< Function  >::getInput(int iind=0) const
------------------------------------------------------------------------

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

>  Matrix<double> casadi::IOInterface< Function  >::getInput(const std::string &iname) const
------------------------------------------------------------------------

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

>  void casadi::IOInterface< Function  >::getInput(T val, int iind=0)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::getInput(T val, const std::string &iname)
------------------------------------------------------------------------
[INTERNAL] 
Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::WorhpSolver::setOption "

>  void casadi::OptionsFunctionality::setOption(const std::string &str, const GenericType &val)
------------------------------------------------------------------------

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

>  void casadi::OptionsFunctionality::setOption(const Dictionary &dict, bool skipUnknown=false)
------------------------------------------------------------------------

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring") casadi::WorhpSolver::outputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::WorhpSolver::getReportConstraints "";

%feature("docstring") casadi::WorhpSolver::checkNode "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::WorhpSolver::spEvaluate "[INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::WorhpSolver::get "

>  const SharedObjectNode * casadi::SharedObject::get() const 
------------------------------------------------------------------------
[INTERNAL] 
Get a const pointer to the node.

>  SharedObjectNode * casadi::SharedObject::get()
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the node.

";

%feature("docstring") casadi::WorhpSolver::setOutputScheme "

Set output scheme.

";

%feature("docstring") casadi::WorhpSolver::init "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::WorhpSolver::derivative "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::WorhpSolver::getDescription "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::WorhpSolver::input "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::WorhpSolver::tangent "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::WorhpSolver::getNumOutputs "

Get the number of function outputs.

";

%feature("docstring") casadi::WorhpSolver::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::WorhpSolver::removeMonitor "

Remove modules to be monitored.

";

%feature("docstring") casadi::WorhpSolver::generateCode "

>  void casadi::Function::generateCode(const std::string &filename)
------------------------------------------------------------------------

Export / Generate C code for the function.

>  std::string casadi::Function::generateCode()

>  void casadi::Function::generateCode(std::ostream &filename)
------------------------------------------------------------------------

Generate C code for the function.

";

%feature("docstring") casadi::WorhpSolver::inputScheme "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::WorhpSolver::getOptionTypeName "

Get the type name of a certain option.

";

%feature("docstring") casadi::WorhpSolver::getOption "

get an option value

";

%feature("docstring") casadi::WorhpSolver::getRepresentation "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::WorhpSolver::call "

Evaluate the function symbolically or numerically.

";

%feature("docstring") casadi::WorhpSolver::setInput "

>  void casadi::IOInterface< Function  >::setInput(T val, int iind=0)
------------------------------------------------------------------------

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

>  void casadi::IOInterface< Function  >::setInput(T val, const std::string &iname)
------------------------------------------------------------------------

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::WorhpSolver::assignNodeNoCount "[INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::WorhpSolver::assignNode "[INTERNAL]  Assign
the node to a node class pointer (or null)

";


// File: classcasadi_1_1XMLNode.xml
%feature("docstring") casadi::XMLNode::dump "[INTERNAL] ";

%feature("docstring") casadi::XMLNode "[INTERNAL] C++ includes:
xml_node.hpp ";

%feature("docstring") casadi::XMLNode::getName "[INTERNAL]  Get the name of
the node.

";

%feature("docstring") casadi::XMLNode::checkName "[INTERNAL]  check if the
name is equal to something

";

%feature("docstring") casadi::XMLNode::getText "

>  std::string casadi::XMLNode::getText() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the text field.

>  void casadi::XMLNode::getText(T &val) const 
------------------------------------------------------------------------
[INTERNAL] 
Get value of text field.

";

%feature("docstring") casadi::XMLNode::addNode "[INTERNAL]  Read node from
parsed XML file.

";

%feature("docstring") casadi::XMLNode::hasAttribute "[INTERNAL]  Check if
an attribute is present.

";

%feature("docstring") casadi::XMLNode::setName "[INTERNAL]  Set the name of
the node.

";

%feature("docstring") casadi::XMLNode::readAttribute "[INTERNAL]  Read the
value of an attribute.

";

%feature("docstring") casadi::XMLNode::XMLNode "[INTERNAL] ";

%feature("docstring") casadi::XMLNode::~XMLNode "[INTERNAL] ";

%feature("docstring") casadi::XMLNode::setAttribute "[INTERNAL]  Add an
attribute.

";

%feature("docstring") casadi::XMLNode::size "[INTERNAL]  Get the number of
children.

";

%feature("docstring") casadi::XMLNode::getAttribute "[INTERNAL]  Get an
attribute by its name.

";

%feature("docstring") casadi::XMLNode::hasChild "[INTERNAL]  Check if a
child is present.

";


// File: classcasadi_1_1ZeroByZero.xml
%feature("docstring") casadi::ZeroByZero::isMultipleOutput "[INTERNAL]
Check if a multiple output node.

";

%feature("docstring") casadi::ZeroByZero::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") casadi::ZeroByZero::size "[INTERNAL] ";

%feature("docstring") casadi::ZeroByZero::getReshape "[INTERNAL]   Reshape.

";

%feature("docstring") casadi::ZeroByZero::generateOperation "[INTERNAL]
Generate code for the operation.

";

%feature("docstring") casadi::ZeroByZero::getInnerProd "[INTERNAL]   Matrix
multiplication.

Inner product

";

%feature("docstring") casadi::ZeroByZero::nTmp "[INTERNAL]  Get number of
temporary variables needed.

";

%feature("docstring") casadi::ZeroByZero::getInverse "[INTERNAL]   Inverse.

";

%feature("docstring") casadi::ZeroByZero::getName "[INTERNAL]  Get the
name.

";

%feature("docstring") casadi::ZeroByZero::print "

>  void casadi::MXNode::print(std::ostream &stream) const 
------------------------------------------------------------------------
[INTERNAL] 
Print a description.

>  void casadi::MXNode::print(std::ostream &stream, long &remaining_calls) const 
------------------------------------------------------------------------
[INTERNAL] 
Print expression (make sure number of calls is not exceeded)

";

%feature("docstring") casadi::ZeroByZero::getGetNonzeros "[INTERNAL]  Get
the nonzeros of matrix.

";

%feature("docstring") casadi::ZeroByZero::clone "[INTERNAL]  Clone
function.

";

%feature("docstring") casadi::ZeroByZero::__nonzero__ "[INTERNAL]  Return
truth value of an MX.

";

%feature("docstring") casadi::ZeroByZero::sparsity "

>  const Sparsity& casadi::MXNode::sparsity() const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity.

>  const Sparsity & casadi::MXNode::sparsity(int oind) const 
------------------------------------------------------------------------
[INTERNAL] 
Get the sparsity of output oind.

";

%feature("docstring") casadi::ZeroByZero::addDependency "[INTERNAL]  Add a
dependency.

";

%feature("docstring") casadi::ZeroByZero::evaluateMX "

>  void casadi::ConstantMX::evaluateMX(const MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate the function symbolically ( MX)

>  void casadi::MXNode::evaluateMX(const MXPtrV &input, MXPtrV &output)
------------------------------------------------------------------------
[INTERNAL] 
Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") casadi::ZeroByZero::getCount "[INTERNAL]  Get the
reference count.

";

%feature("docstring") casadi::ZeroByZero::getSetSparse "[INTERNAL]  Get
densification.

";

%feature("docstring") casadi::ZeroByZero::hasDep "[INTERNAL]  Does the node
depend on other nodes.

";

%feature("docstring") casadi::ZeroByZero "[INTERNAL]  A zero-by-zero
matrix.

C++ includes: constant_mx.hpp ";

%feature("docstring") casadi::ZeroByZero::~ZeroByZero "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::ZeroByZero::evaluateD "[INTERNAL]  Evaluate
the function numerically.

";

%feature("docstring") casadi::ZeroByZero::getFunctionInput "[INTERNAL]  Get
function input.

";

%feature("docstring") casadi::ZeroByZero::repr "[INTERNAL]  Print a
representation.

";

%feature("docstring") casadi::ZeroByZero::getNorm1 "[INTERNAL]  1-norm

";

%feature("docstring") casadi::ZeroByZero::isInit "[INTERNAL]  Check if the
object has been initialized.

";

%feature("docstring") casadi::ZeroByZero::getDeterminant "[INTERNAL]
Determinant.

";

%feature("docstring") casadi::ZeroByZero::init "[INTERNAL]  Initialize the
object.

";

%feature("docstring") casadi::ZeroByZero::isZero "[INTERNAL]  Check if
identically zero.

";

%feature("docstring") casadi::ZeroByZero::isUnaryOp "[INTERNAL]  Check if
unary operation.

";

%feature("docstring") casadi::ZeroByZero::getValue "[INTERNAL]  Get the
value (only for scalar constant nodes)

";

%feature("docstring") casadi::ZeroByZero::getHorzsplit "[INTERNAL]  Create
a horizontal split node.

";

%feature("docstring") casadi::ZeroByZero::getSolve "[INTERNAL]   Solve a
system of linear equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") casadi::ZeroByZero::getVertcat "[INTERNAL]  Create a
vertical concatenation node (vectors only)

";

%feature("docstring") casadi::ZeroByZero::size2 "[INTERNAL] ";

%feature("docstring") casadi::ZeroByZero::setDependencies "

>  void casadi::MXNode::setDependencies(const MX &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set unary dependency.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2)
------------------------------------------------------------------------
[INTERNAL] 
Set binary dependencies.

>  void casadi::MXNode::setDependencies(const MX &dep1, const MX &dep2, const MX &dep3)
------------------------------------------------------------------------
[INTERNAL] 
Set ternary dependencies.

>  void casadi::MXNode::setDependencies(const std::vector< MX > &dep)
------------------------------------------------------------------------
[INTERNAL] 
Set multiple dependencies.

";

%feature("docstring") casadi::ZeroByZero::isOne "[INTERNAL]  Check if
identically one.

";

%feature("docstring") casadi::ZeroByZero::setSparsity "[INTERNAL]  Set the
sparsity.

";

%feature("docstring") casadi::ZeroByZero::sameOpAndDeps "[INTERNAL]  Checks
if two nodes have the same operation and have equivalent dependencies up to
a given depth.

";

%feature("docstring") casadi::ZeroByZero::evaluateSX "[INTERNAL]  Evaluate
the function symbolically (SX)

";

%feature("docstring") casadi::ZeroByZero::printPart "[INTERNAL]  Print a
part of the expression.

";

%feature("docstring") casadi::ZeroByZero::getNormInf "[INTERNAL]  Infinity
norm.

";

%feature("docstring") casadi::ZeroByZero::isIdentity "[INTERNAL]  Check if
identity matrix.

";

%feature("docstring") casadi::ZeroByZero::propagateSparsity "[INTERNAL]
Propagate sparsity.

";

%feature("docstring") casadi::ZeroByZero::getOp "[INTERNAL]  Get the
operation.

";

%feature("docstring") casadi::ZeroByZero::deepCopyMembers "[INTERNAL]  Deep
copy data members.

";

%feature("docstring") casadi::ZeroByZero::isBinaryOp "[INTERNAL]  Check if
binary operation.

";

%feature("docstring") casadi::ZeroByZero::getUnary "[INTERNAL]  Get a unary
operation.

";

%feature("docstring") casadi::ZeroByZero::numel "[INTERNAL]  Get shape.

";

%feature("docstring") casadi::ZeroByZero::weak "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::ZeroByZero::getVertsplit "[INTERNAL]  Create
a vertical split node (vectors only)

";

%feature("docstring") casadi::ZeroByZero::isValue "[INTERNAL]  Check if a
certain value.

";

%feature("docstring") casadi::ZeroByZero::isNonLinear "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring") casadi::ZeroByZero::getBinary "[INTERNAL]  Get a
binary operation operation.

";

%feature("docstring") casadi::ZeroByZero::getAddNonzeros "[INTERNAL]  Add
the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::ZeroByZero::simplifyMe "[INTERNAL]  Simplify
the expression (ex is a reference to the node)

";

%feature("docstring") casadi::ZeroByZero::getHorzcat "[INTERNAL]  Create a
horizontal concatenation node.

";

%feature("docstring") casadi::ZeroByZero::getBinarySwitch "[INTERNAL]  Get
a binary operation operation.

";

%feature("docstring") casadi::ZeroByZero::getTranspose "[INTERNAL]
Transpose.

";

%feature("docstring") casadi::ZeroByZero::getNormF "[INTERNAL]  Frobenius
norm.

";

%feature("docstring") casadi::ZeroByZero::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") casadi::ZeroByZero::getNorm2 "[INTERNAL]  Spectral
norm.

";

%feature("docstring") casadi::ZeroByZero::isOutputNode "[INTERNAL]  Check
if evaluation output.

";

%feature("docstring") casadi::ZeroByZero::getMatrixValue "[INTERNAL]  Get
the value (only for constant nodes)

";

%feature("docstring") casadi::ZeroByZero::getSubAssign "[INTERNAL]  Get
submatrix assignment.

";

%feature("docstring") casadi::ZeroByZero::getOutput "[INTERNAL]  Get an
output.

";

%feature("docstring") casadi::ZeroByZero::getSubRef "[INTERNAL]  Get
submatrix reference.

";

%feature("docstring") casadi::ZeroByZero::numInplace "[INTERNAL]  Can the
operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") casadi::ZeroByZero::assign "

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, const std::vector< int > &onz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix)

>  void casadi::MXNode::assign(const MX &d, const std::vector< int > &inz, bool add=false)
------------------------------------------------------------------------
[INTERNAL] 
Assign nonzeros (mapping matrix), output indices sequential.

";

%feature("docstring") casadi::ZeroByZero::getFunctionOutput "[INTERNAL]
Get function output.

";

%feature("docstring") casadi::ZeroByZero::mapping "[INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") casadi::ZeroByZero::assertInit "[INTERNAL]  Assert
that the object has been initialized.

";

%feature("docstring") casadi::ZeroByZero::getNumOutputs "[INTERNAL]  Number
of outputs.

";

%feature("docstring") casadi::ZeroByZero::shape "[INTERNAL] ";

%feature("docstring") casadi::ZeroByZero::getMultiplication "[INTERNAL]
Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring") casadi::ZeroByZero::getSetNonzeros "[INTERNAL]
Assign the nonzeros of a matrix to another matrix.

";

%feature("docstring") casadi::ZeroByZero::size1 "[INTERNAL] ";

%feature("docstring") casadi::ZeroByZero::getFunction "[INTERNAL]  Get
function reference.

";

%feature("docstring") casadi::ZeroByZero::dep "

>  const MX & casadi::MXNode::dep(int ind=0) const 
------------------------------------------------------------------------
[INTERNAL] 
dependencies - functions that have to be evaluated before this one

>  MX & casadi::MXNode::dep(int ind=0)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::ZeroByZero::getAssertion "[INTERNAL]
Assertion.

";


// File: classcasadi_1_1ZeroSX.xml
%feature("docstring") casadi::ZeroSX::mark "[INTERNAL] ";

%feature("docstring") casadi::ZeroSX::isMinusInf "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::ZeroSX "[INTERNAL]  Represents a zero SX.

Joel Andersson

C++ includes: constant_sx.hpp ";

%feature("docstring") casadi::ZeroSX::ZeroSX "[INTERNAL] ";

%feature("docstring") casadi::ZeroSX::print "[INTERNAL]  print

";

%feature("docstring") casadi::ZeroSX::ndep "[INTERNAL]  Number of
dependencies.

";

%feature("docstring") casadi::ZeroSX::isNan "[INTERNAL]  check properties
of a node

";

%feature("docstring") casadi::ZeroSX::getOp "[INTERNAL]  Get the operation.

";

%feature("docstring") casadi::ZeroSX::isSmooth "[INTERNAL]  Check if
smooth.

";

%feature("docstring") casadi::ZeroSX::isMinusOne "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::ZeroSX::marked "[INTERNAL] ";

%feature("docstring") casadi::ZeroSX::isInteger "[INTERNAL]  Properties.

";

%feature("docstring") casadi::ZeroSX::init "[INTERNAL]  Initialize the node
(currently used only to give a similar interface to MXNode)

";

%feature("docstring") casadi::ZeroSX::isConstant "[INTERNAL]  Properties.

";

%feature("docstring") casadi::ZeroSX::getName "[INTERNAL] ";

%feature("docstring") casadi::ZeroSX::isInf "[INTERNAL]  check properties
of a node

";

%feature("docstring") casadi::ZeroSX::isOne "[INTERNAL]  check properties
of a node

";

%feature("docstring") casadi::ZeroSX::hasDep "[INTERNAL]  check properties
of a node

";

%feature("docstring") casadi::ZeroSX::isSymbolic "[INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::ZeroSX::~ZeroSX "[INTERNAL] ";

%feature("docstring") casadi::ZeroSX::isAlmostZero "[INTERNAL]  Properties.

";

%feature("docstring") casadi::ZeroSX::dep "[INTERNAL]  get the reference of
a child

";

%feature("docstring") casadi::ZeroSX::isEqual "[INTERNAL]  Check if two
nodes are equivalent up to a given depth.

";

%feature("docstring") casadi::ZeroSX::isZero "[INTERNAL]  Properties.

";

%feature("docstring") casadi::ZeroSX::getValue "[INTERNAL]  Get the value.

";

%feature("docstring") casadi::ZeroSX::getIntValue "[INTERNAL]  Get the
value.

";


// File: namespacecasadi.xml
%feature("docstring") casadi::matrixName< double > "
Get typename.

";

%feature("docstring") casadi::complement "

Returns the list of all i in [0, size[ not found in supplied list.

The supplied vector may contain duplicates and may be non-monotonous The
supplied vector will be checked for bounds The result vector is guaranteed
to be monotonously increasing

";

%feature("docstring") casadi::vertsplit "

>  std::vector< Sparsity > casadi::vertsplit(const Sparsity &sp, const std::vector< int > &output_offset)
------------------------------------------------------------------------

Split up a sparsity pattern vertically.

>  std::vector< MX > casadi::vertsplit(const MX &x, const std::vector< int > &output_offset)

>  std::vector< Matrix< DataType > > casadi::vertsplit(const Matrix< DataType > &v, const std::vector< int > &offset)
------------------------------------------------------------------------

split horizontally, retaining groups of rows

Parameters:
-----------

output_offset:  List of all start rows for each group the last row group
will run to the end.

vertcat(vertsplit(x, ...)) = x

>  std::vector< MX > casadi::vertsplit(const MX &x, int incr=1)

>  std::vector< Matrix< DataType > > casadi::vertsplit(const Matrix< DataType > &v, int incr=1)
------------------------------------------------------------------------

split horizontally, retaining fixed-sized groups of rows

Parameters:
-----------

incr:  Size of each group of rows

vertcat(vertsplit(x, ...)) = x

";

%feature("docstring") casadi::ProfilingType< ProfilingData_TIMELINE > "
[INTERNAL] ";

%feature("docstring") casadi::describeOutput "";

%feature("docstring") casadi::blockcat "

>  MX casadi::blockcat(const std::vector< std::vector< MX > > &v)
------------------------------------------------------------------------

Construct a matrix from a list of list of blocks.

blockcat(blocksplit(x,..., ...)) = x

>  MX casadi::blockcat(const MX &A, const MX &B, const MX &C, const MX &D)
------------------------------------------------------------------------
[INTERNAL] 
Construct a matrix from a list of list of blocks.

>  Matrix< DataType > casadi::blockcat(const std::vector< std::vector< Matrix< DataType > > > &v)
------------------------------------------------------------------------

Construct a matrix from a list of list of blocks.

>  Matrix< DataType > casadi::blockcat(const Matrix< DataType > &A, const Matrix< DataType > &B, const Matrix< DataType > &C, const Matrix< DataType > &D)
------------------------------------------------------------------------
[INTERNAL] 
Construct a matrix from 4 blocks.

";

%feature("docstring") casadi::pw_lin "

t a scalar variable (e.g. time)

Create a piecewise linear function Create a piecewise linear function:

Inputs: tval vector with the the discrete values of t (monotonically
increasing) val vector with the corresponding function values (same length
as tval)

";

%feature("docstring") casadi::makeSemiExplicit "";

%feature("docstring") casadi::getSchemeSize "";

%feature("docstring") casadi::erfinv "

>  T casadi::erfinv(const T &x)
------------------------------------------------------------------------
[INTERNAL] 
 Inverse of the error function.

>  double casadi::erfinv(double x)
------------------------------------------------------------------------
[INTERNAL]  throw ()
CasADi additions.

";

%feature("docstring") casadi::all "";

%feature("docstring") casadi::dense_mul_tn "[INTERNAL] ";

%feature("docstring") casadi::dlaqge_ "[INTERNAL]  Equilibrate the system.

";

%feature("docstring") casadi::unite "

Unite two matrices no overlapping sparsity.

";

%feature("docstring") casadi::getPtr "

>  DataType * casadi::getPtr(Matrix< DataType > &v)
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the data contained in the vector

>  const DataType * casadi::getPtr(const Matrix< DataType > &v)

>  T * casadi::getPtr(std::vector< T > &v)

>  const T * casadi::getPtr(const std::vector< T > &v)
------------------------------------------------------------------------
[INTERNAL] 
Get a pointer to the data contained in the vector.

";

%feature("docstring") casadi::profileWriteEntry "[INTERNAL] ";

%feature("docstring") casadi::polyval "

Evaluate a polynomial with coefficients p in x.

";

%feature("docstring") casadi::eig_symbolic "

Attempts to find the eigenvalues of a symbolic matrix This will only work
for up to 3x3 matrices.

Bring m in block diagonal form, calculating eigenvalues of each block
seperately ";

%feature("docstring") casadi::ProfilingType< ProfilingData_SOURCE > "
[INTERNAL] ";

%feature("docstring") casadi::fmod "[INTERNAL]  Pre-C99 elementary
functions from the 'math.h' ('cmath') header.

";

%feature("docstring") casadi::daeIn "

>  DAEInputIOSchemeVector<M> casadi::daeIn(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="", const M &arg_m3=M())
------------------------------------------------------------------------

Input arguments of an ODE/DAE function

>Input scheme: casadi::DAEInput (DAE_NUM_IN = 5) [daeIn]
+-----------+-------+----------------------------+
| Full name | Short |        Description         |
+===========+=======+============================+
| DAE_X     | x     | Differential state .       |
+-----------+-------+----------------------------+
| DAE_Z     | z     | Algebraic state .          |
+-----------+-------+----------------------------+
| DAE_P     | p     | Parameter .                |
+-----------+-------+----------------------------+
| DAE_T     | t     | Explicit time dependence . |
+-----------+-------+----------------------------+

";

%feature("docstring") casadi::sdpOut "

>  SDPOutputIOSchemeVector<M> casadi::sdpOut(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="", const M &arg_m3=M(), const std::string &arg_s4="", const M &arg_m4=M(), const std::string &arg_s5="", const M &arg_m5=M(), const std::string &arg_s6="", const M &arg_m6=M())
------------------------------------------------------------------------

Output arguments of an SDP Solver

>Output scheme: casadi::SDPOutput (SDP_SOLVER_NUM_OUT = 8) [sdpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SDP_SOLVER_X           | x                      | The primal solution (n |
|                        |                        | x 1) - may be used as  |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_P           | p                      | The solution P (m x m) |
|                        |                        | - may be used as       |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_DUAL        | dual                   | The dual solution (m x |
|                        |                        | m) - may be used as    |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_COST        | cost                   | The primal optimal     |
|                        |                        | cost (1 x 1) .         |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_DUAL_COST   | dual_cost              | The dual optimal cost  |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_LAM_A       | lam_a                  | The dual solution      |
|                        |                        | corresponding to the   |
|                        |                        | linear constraints (nc |
|                        |                        | x 1) .                 |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_LAM_X       | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds (n x 1)  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::integratorIn "

>  IntegratorInputIOSchemeVector<M> casadi::integratorIn(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="", const M &arg_m3=M(), const std::string &arg_s4="", const M &arg_m4=M(), const std::string &arg_s5="", const M &arg_m5=M())
------------------------------------------------------------------------

Input arguments of an integrator

>Input scheme: casadi::IntegratorInput (INTEGRATOR_NUM_IN = 7) [integratorIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_X0          | x0                     | Differential state at  |
|                        |                        | the initial time .     |
+------------------------+------------------------+------------------------+
| INTEGRATOR_P           | p                      | Parameters .           |
+------------------------+------------------------+------------------------+
| INTEGRATOR_Z0          | z0                     | Initial guess for the  |
|                        |                        | algebraic variable .   |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RX0         | rx0                    | Backward differential  |
|                        |                        | state at the final     |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RP          | rp                     | Backward parameter     |
|                        |                        | vector .               |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZ0         | rz0                    | Initial guess for the  |
|                        |                        | backwards algebraic    |
|                        |                        | variable .             |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::expand "

Expand the expression as a weighted sum (with constant weights)

";

%feature("docstring") casadi::profileWriteSourceLine "[INTERNAL] ";

%feature("docstring") casadi::createParent "

>  MX casadi::createParent(std::vector< MX > &deps)
------------------------------------------------------------------------

Create a parent MX on which all given MX's will depend.

In some sense, this function is the inverse of

Parameters:
-----------

deps:  Must all be symbolic matrices.

>  MX casadi::createParent(const std::vector< Sparsity > &deps, std::vector< MX > &output_children)

>  MX casadi::createParent(const std::vector< MX > &deps, std::vector< MX > &output_children)
------------------------------------------------------------------------

Create a parent MX on which a bunch of MX's (sizes given as argument) will
depend.

";

%feature("docstring") casadi::cos "[INTERNAL]  Pre-C99 elementary functions
from the 'math.h' ('cmath') header.

";

%feature("docstring") casadi::dgetrf_ "[INTERNAL]  LU-Factorize dense
matrix (lapack)

";

%feature("docstring") casadi::ProfilingType< ProfilingData_NAME > "
[INTERNAL] ";

%feature("docstring") casadi::tanh "[INTERNAL]  Pre-C99 elementary
functions from the 'math.h' ('cmath') header.

";

%feature("docstring") casadi::isDecreasing "

Check if the vector is strictly decreasing.

";

%feature("docstring") casadi::range "

>  std::vector< int > casadi::range(int start, int stop, int step, int len)
------------------------------------------------------------------------
[INTERNAL] 
Range function

Parameters:
-----------

start:

stop:

step:

len:  Consider a infinitely long list [start, start+step, start+2*step, ...]
Elements larger than or equal to stop are chopped off.

>  std::vector< int > casadi::range(int stop)
------------------------------------------------------------------------
[INTERNAL] 
Range function

Parameters:
-----------

stop:

list [0, 1, 2...stop-1]

";

%feature("docstring") casadi::collocationInterpolators "[INTERNAL]  Obtain
collocation interpolating matrices.

Parameters:
-----------

tau_root:  location of collocation points, as obtained from
collocationPoints

C:  interpolating coefficients to obtain derivatives Length: order+1, order
+ 1

dX/dt (j) ~ Sum_i C[j][i]*X(i)

Parameters:
-----------

D:  interpolating coefficients to obtain end state Length: order+1

";

%feature("docstring") casadi::constpow "[INTERNAL]  CasADi additions.

";

%feature("docstring") casadi::tril2symm "

Convert a lower triangular matrix to a symmetric one.

";

%feature("docstring") casadi::asinh "

>  T casadi::asinh(const T &x)
------------------------------------------------------------------------
[INTERNAL] 
Pre-C99 elementary functions from the 'math.h' ('cmath') header.

>  double casadi::asinh(double x)
------------------------------------------------------------------------
[INTERNAL]  throw ()
Pre-C99 elementary functions from the 'math.h' ('cmath') header.

";

%feature("docstring") casadi::jacGIn "

>  JacGInputIOSchemeVector<M> casadi::jacGIn(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M())
------------------------------------------------------------------------

Input arguments of an NLP Jacobian function

>Input scheme: casadi::JacGInput (JACG_NUM_IN = 3) [jacGIn]
+-----------+-------+---------------------+
| Full name | Short |     Description     |
+===========+=======+=====================+
| JACG_X    | x     | Decision variable . |
+-----------+-------+---------------------+
| JACG_P    | p     | Fixed parameter .   |
+-----------+-------+---------------------+

";

%feature("docstring") casadi::profileWriteName "[INTERNAL] ";

%feature("docstring") casadi::bvec_clear "[INTERNAL] ";

%feature("docstring") casadi::reshape "

>  Sparsity casadi::reshape(const Sparsity &a, int nrow, int ncol)
------------------------------------------------------------------------

Reshape the sparsity pattern keeping the relative location of the nonzeros.

>  MX casadi::reshape(const MX &x, std::pair< int, int > rc)
------------------------------------------------------------------------

Returns a reshaped version of the MX, dimensions as a vector.

>  MX casadi::reshape(const MX &x, int nrow, int ncol)
------------------------------------------------------------------------
[INTERNAL] 
Returns a reshaped version of the MX.

>  MX casadi::reshape(const MX &x, const Sparsity &sp)
------------------------------------------------------------------------

Reshape the MX.

";

%feature("docstring") casadi::slicot_periodic_schur "

>  void casadi::slicot_periodic_schur(int n, int K, const std::vector< double > &a, std::vector< double > &t, std::vector< double > &z, std::vector< double > &eig_real, std::vector< double > &eig_imag)

>  void casadi::slicot_periodic_schur(int n, int K, const std::vector< double > &a, std::vector< double > &t, std::vector< double > &z, std::vector< double > &dwork, std::vector< double > &eig_real, std::vector< double > &eig_imag)
------------------------------------------------------------------------
[INTERNAL]

>  void casadi::slicot_periodic_schur(const std::vector< Matrix< double > > &A, std::vector< Matrix< double > > &output_T, std::vector< Matrix< double > > &output_Z, std::vector< double > &output_eig_real, std::vector< double > &output_eig_imag)
------------------------------------------------------------------------

Obtain Periodic Schur Form of a set of matrices.

Finds Z_i such that

Z_1' * A_1 * Z_2 = T_1,           Z_2' * A_2 * Z_3 = T_2, ...           Z_K'
* A_K * Z_1 = T_K,

with T_1 in Hessenberg form (upper triangular + one band below the diagonal)
and T_2..T_K upper diagonal

with Z_k Z_k' = eye(n) = Z_k' Z_k

";

%feature("docstring") casadi::ProfilingType< ProfilingData_EXIT > "
[INTERNAL] ";

%feature("docstring") casadi::blocksplit "

>  std::vector< std::vector< MX > > casadi::blocksplit(const MX &x, const std::vector< int > &vert_offset, const std::vector< int > &horz_offset)
------------------------------------------------------------------------

chop up into blocks

vert_offset Defines the boundaries of the block cols horz_offset Defines the
boundaries of the block rows

blockcat(blocksplit(x,..., ...)) = x

>  std::vector< std::vector< MX > > casadi::blocksplit(const MX &x, int vert_incr=1, int horz_incr=1)
------------------------------------------------------------------------

chop up into blocks

vert_incr Defines the increment for block boundaries in col dimension
horz_incr Defines the increment for block boundaries in row dimension

blockcat(blocksplit(x,..., ...)) = x

>  std::vector< std::vector< Matrix< DataType > > > casadi::blocksplit(const Matrix< DataType > &x, const std::vector< int > &vert_offset, const std::vector< int > &horz_offset)
------------------------------------------------------------------------

chop up into blocks

vert_offset Defines the boundaries of the block rows horz_offset Defines the
boundaries of the block columns

blockcat(blocksplit(x,..., ...)) = x

>  std::vector< std::vector< Matrix< DataType > > > casadi::blocksplit(const Matrix< DataType > &x, int vert_incr=1, int horz_incr=1)
------------------------------------------------------------------------

chop up into blocks

vert_incr Defines the increment for block boundaries in row dimension
horz_incr Defines the increment for block boundaries in column dimension

blockcat(blocksplit(x,..., ...)) = x

";

%feature("docstring") casadi::jacobianTimesVector "

Calculate the Jacobian and multiply by a vector from the left This is
equivalent to mul(jacobian(ex, arg), v) or mul(jacobian(ex, arg).T, v) for
transpose_jacobian set to false and true respectively. If contrast to these
expressions, it will use directional derivatives which is typically (but not
necessarily) more efficient if the complete Jacobian is not needed and v has
few rows.

";

%feature("docstring") casadi::casadi_scal "[INTERNAL]  SCAL: x <- alpha*x.

";

%feature("docstring") casadi::mayerIn "

>  MayerInputIOSchemeVector<M> casadi::mayerIn(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M())
------------------------------------------------------------------------

Input arguments of a Mayer Term nx: Number of states: from
ffcn.input(INTEGRATOR_X0).size() np: Number of parameters: from option
number_of_parameters>Input scheme: casadi::MayerInput (MAYER_NUM_IN = 3)
[mayerIn]
+-----------+-------+---------------------------------------------+ | Full
name | Short |                 Description                 |
+===========+=======+=============================================+ |
MAYER_X   | x     | States at the end of integration (nx x 1) . |
+-----------+-------+---------------------------------------------+ |
MAYER_P   | p     | Problem parameters (np x 1) .               |
+-----------+-------+---------------------------------------------+

";

%feature("docstring") casadi::ProfilingType< ProfilingData_ENTRY > "
[INTERNAL] ";

%feature("docstring") casadi::logic_not "

Logical not, returns (an expression evaluating to) 1 if expression is zero
and 0 otherwise.

";

%feature("docstring") casadi::socpIn "

>  SOCPInputIOSchemeVector<M> casadi::socpIn(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="", const M &arg_m3=M(), const std::string &arg_s4="", const M &arg_m4=M(), const std::string &arg_s5="", const M &arg_m5=M(), const std::string &arg_s6="", const M &arg_m6=M(), const std::string &arg_s7="", const M &arg_m7=M(), const std::string &arg_s8="", const M &arg_m8=M(), const std::string &arg_s9="", const M &arg_m9=M())
------------------------------------------------------------------------

Input arguments of a SOCP problem

>Input scheme: casadi::SOCPInput (SOCP_SOLVER_NUM_IN = 11) [socpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SOCP_SOLVER_G          | g                      | The horizontal stack   |
|                        |                        | of all matrices Gi: (  |
|                        |                        | n x N) .               |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_H          | h                      | The vertical stack of  |
|                        |                        | all vectors hi: ( N x  |
|                        |                        | 1) .                   |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_E          | e                      | The vertical stack of  |
|                        |                        | all vectors ei: ( nm x |
|                        |                        | 1) .                   |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_F          | f                      | The vertical stack of  |
|                        |                        | all scalars fi: ( m x  |
|                        |                        | 1) .                   |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_C          | c                      | The vector c: ( n x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_A          | a                      | The matrix A: ( nc x   |
|                        |                        | n) .                   |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_LBA        | lba                    | Lower bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_UBA        | uba                    | Upper bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_LBX        | lbx                    | Lower bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_UBX        | ubx                    | Upper bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::repr "

>  void casadi::repr(const std::vector< T > &v, std::ostream &stream=std::cout)
------------------------------------------------------------------------
[INTERNAL] 
Print representation.

";

%feature("docstring") casadi::hash_value "[INTERNAL]  Hash value of an
integer.

";

%feature("docstring") casadi::ramp "

ramp function

\\\\[ \\\\begin {cases} R(x) = 0 & x <= 1 \\\\\\\\ R(x) = x & x > 1 \\\\\\\\
\\\\end {cases} \\\\]

Also called: slope function

";

%feature("docstring") casadi::tangent "

>  MX casadi::tangent(const MX &ex, const MX &arg)
------------------------------------------------------------------------

split vertically, retaining groups of cols

Parameters:
-----------

output_offset:  List of all start cols for each group the last col group
will run to the end.

horzcat(horzsplit(x, ...)) = x

>  SX casadi::tangent(const SX &ex, const SX &arg)
------------------------------------------------------------------------

Integrate f from a to b using Gaussian quadrature with n points.

";

%feature("docstring") casadi::ceil "[INTERNAL]  Pre-C99 elementary
functions from the 'math.h' ('cmath') header.

";

%feature("docstring") casadi::jacobian "

>  MX casadi::jacobian(const MX &ex, const MX &arg)
------------------------------------------------------------------------

Calculate jacobian via source code transformation.

Uses casadi::MXFunction::jac

>  SX casadi::jacobian(const SX &ex, const SX &arg)
------------------------------------------------------------------------

Calculate jacobian via source code transformation.

Uses casadi::SXFunction::jac

";

%feature("docstring") casadi::hash_combine "[INTERNAL]  Generate a hash
value incrementally (function taken from boost)

";

%feature("docstring") casadi::inBounds "

>  bool casadi::inBounds(const std::vector< T > &v, int upper)
------------------------------------------------------------------------

Check if for each element of v holds: v_i < upper.

>  bool casadi::inBounds(const std::vector< T > &v, int lower, int upper)
------------------------------------------------------------------------

Check if for each element of v holds: lower <= v_i < upper.

";

%feature("docstring") casadi::casadi_swap "[INTERNAL]  SWAP: x <-> y.

";

%feature("docstring") casadi::sumRows "

Return a row-wise summation of elements.

";

%feature("docstring") casadi::project "

Create a new matrix with a given sparsity pattern but with the nonzeros
taken from an existing matrix.

";

%feature("docstring") casadi::spy "

Get the sparsity pattern of a matrix.

";

%feature("docstring") casadi::substitute "

>  MX casadi::substitute(const MX &ex, const MX &v, const MX &vdef)

>  SX casadi::substitute(const SX &ex, const SX &v, const SX &vdef)
------------------------------------------------------------------------

Substitute variable v with expression vdef in an expression ex.

>  std::vector< MX > casadi::substitute(const std::vector< MX > &ex, const std::vector< MX > &v, const std::vector< MX > &vdef)

>  std::vector< SX > casadi::substitute(const std::vector< SX > &ex, const std::vector< SX > &v, const std::vector< SX > &vdef)
------------------------------------------------------------------------

Substitute variable var with expression expr in multiple expressions.

";

%feature("docstring") casadi::abs "[INTERNAL]  Pre-C99 elementary functions
from the 'math.h' ('cmath') header.

";

%feature("docstring") casadi::cross "

Matlab's cross command.

";

%feature("docstring") casadi::acos "[INTERNAL]  Pre-C99 elementary
functions from the 'math.h' ('cmath') header.

";

%feature("docstring") casadi::rdaeIn "

>  RDAEInputIOSchemeVector<M> casadi::rdaeIn(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="", const M &arg_m3=M(), const std::string &arg_s4="", const M &arg_m4=M(), const std::string &arg_s5="", const M &arg_m5=M(), const std::string &arg_s6="", const M &arg_m6=M())
------------------------------------------------------------------------

Input arguments of an ODE/DAE backward integration function

>Input scheme: casadi::RDAEInput (RDAE_NUM_IN = 8) [rdaeIn]
+-----------+-------+-------------------------------+
| Full name | Short |          Description          |
+===========+=======+===============================+
| RDAE_RX   | rx    | Backward differential state . |
+-----------+-------+-------------------------------+
| RDAE_RZ   | rz    | Backward algebraic state .    |
+-----------+-------+-------------------------------+
| RDAE_RP   | rp    | Backward parameter vector .   |
+-----------+-------+-------------------------------+
| RDAE_X    | x     | Forward differential state .  |
+-----------+-------+-------------------------------+
| RDAE_Z    | z     | Forward algebraic state .     |
+-----------+-------+-------------------------------+
| RDAE_P    | p     | Parameter vector .            |
+-----------+-------+-------------------------------+
| RDAE_T    | t     | Explicit time dependence .    |
+-----------+-------+-------------------------------+

";

%feature("docstring") casadi::dependsOn "

>  bool casadi::dependsOn(const SX &f, const SX &arg)
------------------------------------------------------------------------

Check if expression depends on the argument The argument must be symbolic.

>  bool casadi::dependsOn(const MX &ex, const std::vector< MX > &arg)
------------------------------------------------------------------------

Check if expression depends on any of the arguments The arguments must be
symbolic.

";

%feature("docstring") casadi::profileWriteExit "[INTERNAL] ";

%feature("docstring") casadi::sdqpIn "

>  SDQPInputIOSchemeVector<M> casadi::sdqpIn(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="", const M &arg_m3=M(), const std::string &arg_s4="", const M &arg_m4=M(), const std::string &arg_s5="", const M &arg_m5=M(), const std::string &arg_s6="", const M &arg_m6=M(), const std::string &arg_s7="", const M &arg_m7=M(), const std::string &arg_s8="", const M &arg_m8=M())
------------------------------------------------------------------------

Input arguments of a SDQP problem

>Input scheme: casadi::SDQPInput (SDQP_SOLVER_NUM_IN = 10) [sdqpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SDQP_SOLVER_H          | h                      | The matrix H: sparse ( |
|                        |                        | n x n) .               |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_C          | c                      | The vector c: ( n x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_F          | f                      | The horizontal stack   |
|                        |                        | of all matrices F_i: ( |
|                        |                        | m x nm) .              |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_G          | g                      | The matrix G: ( m x m) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_A          | a                      | The matrix A: ( nc x   |
|                        |                        | n) .                   |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_LBA        | lba                    | Lower bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_UBA        | uba                    | Upper bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_LBX        | lbx                    | Lower bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_UBX        | ubx                    | Upper bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::triangle "

triangle function

\\\\[ \\\\begin {cases} \\\\Lambda(x) = 0 & |x| >= 1 \\\\\\\\ \\\\Lambda(x)
= 1-|x| & |x| < 1 \\\\end {cases} \\\\]

";

%feature("docstring") casadi::graph_substitute "

>  MX casadi::graph_substitute(const MX &ex, const std::vector< MX > &v, const std::vector< MX > &vdef)
------------------------------------------------------------------------

Substitute variable v with expression vdef in an expression ex, preserving
nodes.

>  std::vector< MX > casadi::graph_substitute(const std::vector< MX > &ex, const std::vector< MX > &v, const std::vector< MX > &vdef)
------------------------------------------------------------------------

Substitute variable var with expression expr in multiple expressions,
preserving nodes.

";

%feature("docstring") casadi::read_matlab "

>  void casadi::read_matlab(std::istream &stream, std::vector< T > &v)
------------------------------------------------------------------------

Read vector, matlab style.

>  void casadi::read_matlab(std::ifstream &file, std::vector< std::vector< T > > &v)
------------------------------------------------------------------------

Read matrix, matlab style.

";

%feature("docstring") casadi::nullspace "

Computes the nullspace of a matrix A.

Finds Z m-by-(m-n) such that AZ = 0 with A n-by-m with m > n

Assumes A is full rank

Inspired by Numerical Methods in Scientific Computing by Ake Bjorck

";

%feature("docstring") casadi::casadi_iamax "[INTERNAL]  IAMAX: index
corresponding to the entry with the largest absolute value.

";

%feature("docstring") casadi::write_matlab "

>  void casadi::write_matlab(std::ostream &stream, const std::vector< T > &v)
------------------------------------------------------------------------

Print vector, matlab style.

>  void casadi::write_matlab(std::ostream &stream, const std::vector< std::vector< T > > &v)
------------------------------------------------------------------------

Print matrix, matlab style.

";

%feature("docstring") casadi::isinf "[INTERNAL]  throw () C99 elementary
functions from the 'math.h' header.

";

%feature("docstring") casadi::hash_sparsity "[INTERNAL]  Hash a sparsity
pattern.

";

%feature("docstring") casadi::ocpOut "

>  OCPOutputIOSchemeVector<M> casadi::ocpOut(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="", const M &arg_m3=M())
------------------------------------------------------------------------

Output arguments of an OCP Solver

>Output scheme: casadi::OCPOutput (OCP_NUM_OUT = 5) [ocpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| OCP_X_OPT              | x_opt                  | Optimal state          |
|                        |                        | trajectory .           |
+------------------------+------------------------+------------------------+
| OCP_U_OPT              | u_opt                  | Optimal control        |
|                        |                        | trajectory .           |
+------------------------+------------------------+------------------------+
| OCP_P_OPT              | p_opt                  | Optimal parameters .   |
+------------------------+------------------------+------------------------+
| OCP_COST               | cost                   | Objective/cost         |
|                        |                        | function for optimal   |
|                        |                        | solution (1 x 1) .     |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::ocpIn "

>  OCPInputIOSchemeVector<M> casadi::ocpIn(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="", const M &arg_m3=M(), const std::string &arg_s4="", const M &arg_m4=M(), const std::string &arg_s5="", const M &arg_m5=M(), const std::string &arg_s6="", const M &arg_m6=M(), const std::string &arg_s7="", const M &arg_m7=M(), const std::string &arg_s8="", const M &arg_m8=M(), const std::string &arg_s9="", const M &arg_m9=M(), const std::string &arg_s10="", const M &arg_m10=M(), const std::string &arg_s11="", const M &arg_m11=M(), const std::string &arg_s12="", const M &arg_m12=M())
------------------------------------------------------------------------

Input arguments of an OCP Solver ns: Number of shooting nodes: from option
number_of_grid_points nx: Number of states: from
ffcn.input(INTEGRATOR_X0).size() nc: Number of constants during integration:
ffcn.input(INTEGRATOR_P).size() nu: Number of controls: from nc - np np:
Number of parameters: from option number_of_parameters nh: Number of point
constraints: from cfcn.input(0).size()

>Input scheme: casadi::OCPInput (OCP_NUM_IN = 14) [ocpIn]
+------------+--------+----------------------------------------------+
| Full name  | Short  |                 Description                  |
+============+========+==============================================+
| OCP_LBX    | lbx    | States lower bounds (nx x (ns+1)) .          |
+------------+--------+----------------------------------------------+
| OCP_UBX    | ubx    | States upper bounds (nx x (ns+1)) .          |
+------------+--------+----------------------------------------------+
| OCP_X_INIT | x_init | States initial guess (nx x (ns+1)) .         |
+------------+--------+----------------------------------------------+
| OCP_LBU    | lbu    | Controls lower bounds (nu x ns) .            |
+------------+--------+----------------------------------------------+
| OCP_UBU    | ubu    | Controls upper bounds (nu x ns) .            |
+------------+--------+----------------------------------------------+
| OCP_U_INIT | u_init | Controls initial guess (nu x ns) .           |
+------------+--------+----------------------------------------------+
| OCP_LBP    | lbp    | Parameters lower bounds (np x 1) .           |
+------------+--------+----------------------------------------------+
| OCP_UBP    | ubp    | Parameters upper bounds (np x 1) .           |
+------------+--------+----------------------------------------------+
| OCP_P_INIT | p_init | Parameters initial guess (np x 1) .          |
+------------+--------+----------------------------------------------+
| OCP_LBH    | lbh    | Point constraint lower bound (nh x (ns+1)) . |
+------------+--------+----------------------------------------------+
| OCP_UBH    | ubh    | Point constraint upper bound (nh x (ns+1)) . |
+------------+--------+----------------------------------------------+
| OCP_LBG    | lbg    | Lower bound for the coupling constraints .   |
+------------+--------+----------------------------------------------+
| OCP_UBG    | ubg    | Upper bound for the coupling constraints .   |
+------------+--------+----------------------------------------------+

";

%feature("docstring") casadi::addMultiple "

same as: res += mul(A, v)

";

%feature("docstring") casadi::isStrictlyMonotone "

Check if the vector is strictly monotone.

";

%feature("docstring") casadi::casadi_asum "[INTERNAL]  ASUM: ||x||_1 ->
return.

";

%feature("docstring") casadi::vecNZ "

>  MX casadi::vecNZ(const MX &x)
------------------------------------------------------------------------

Returns a vectorized version of the MX, preserving only nonzeros.

>  Matrix< DataType > casadi::vecNZ(const Matrix< DataType > &a)
------------------------------------------------------------------------

Returns a flattened version of the Matrix, preserving only nonzeros.

";

%feature("docstring") casadi::vecNZcat "

>  MX casadi::vecNZcat(const std::vector< MX > &comp)
------------------------------------------------------------------------

concatenate vertically while vecing all arguments with vecNZ

>  Matrix< DataType > casadi::vecNZcat(const std::vector< Matrix< DataType > > &comp)
------------------------------------------------------------------------

concatenate vertically while vectorizing all arguments with vecNZ

";

%feature("docstring") casadi::casadi_dot "[INTERNAL]  DOT: inner_prod(x, y)
-> return.

";

%feature("docstring") casadi::dormqr_ "[INTERNAL]  Multiply right hand side
with Q-transpose (lapack)

";

%feature("docstring") casadi::sign "[INTERNAL]  Sign function, note that
sign(nan) == nan.

";

%feature("docstring") casadi::isRegular "

Checks if vector does not contain NaN or Inf.

";

%feature("docstring") casadi::log10 "[INTERNAL]  Pre-C99 elementary
functions from the 'math.h' ('cmath') header.

";

%feature("docstring") casadi::sdpIn "

>  SDPInputIOSchemeVector<M> casadi::sdpIn(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="", const M &arg_m3=M(), const std::string &arg_s4="", const M &arg_m4=M(), const std::string &arg_s5="", const M &arg_m5=M(), const std::string &arg_s6="", const M &arg_m6=M(), const std::string &arg_s7="", const M &arg_m7=M())
------------------------------------------------------------------------

Input arguments of a SDP problem

>Input scheme: casadi::SDPInput (SDP_SOLVER_NUM_IN = 9) [sdpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SDP_SOLVER_F           | f                      | The horizontal stack   |
|                        |                        | of all matrices F_i: ( |
|                        |                        | m x nm) .              |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_C           | c                      | The vector c: ( n x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_G           | g                      | The matrix G: ( m x m) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_A           | a                      | The matrix A: ( nc x   |
|                        |                        | n) .                   |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_LBA         | lba                    | Lower bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_UBA         | uba                    | Upper bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_LBX         | lbx                    | Lower bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_UBX         | ubx                    | Upper bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::casadi_copy_sparse "[INTERNAL]  COPY sparse:
y <- x.

";

%feature("docstring") casadi::printme "[INTERNAL]  CasADi additions.

";

%feature("docstring") casadi::rdaeOut "

>  RDAEOutputIOSchemeVector<M> casadi::rdaeOut(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M())
------------------------------------------------------------------------

Output arguments of an ODE/DAE backward integration function

>Output scheme: casadi::RDAEOutput (RDAE_NUM_OUT = 4) [rdaeOut]
+-----------+-------+-------------------------------------------+
| Full name | Short |                Description                |
+===========+=======+===========================================+
| RDAE_ODE  | ode   | Right hand side of ODE. .                 |
+-----------+-------+-------------------------------------------+
| RDAE_ALG  | alg   | Right hand side of algebraic equations. . |
+-----------+-------+-------------------------------------------+
| RDAE_QUAD | quad  | Right hand side of quadratures. .         |
+-----------+-------+-------------------------------------------+

";

%feature("docstring") casadi::tril "

>  MatType casadi::tril(const GenericMatrix< MatType > &a)
------------------------------------------------------------------------

Get the lower triangular part of a matrix.

>  Sparsity casadi::tril(const Sparsity &sp, bool includeDiagonal=true)
------------------------------------------------------------------------

Get lower triangular part.

";

%feature("docstring") casadi::dgeequ_ "[INTERNAL]  Calculate col and row
scaling.

";

%feature("docstring") casadi::lookupvector "

Returns a vector for quickly looking up entries of supplied list.

lookupvector[i]!=-1 <=> v contains i v[lookupvector[i]] == i <=> v contains
i

Duplicates are treated by looking up last occurrence

";

%feature("docstring") casadi::ProfilingType< ProfilingData_IO > " [INTERNAL]
";

%feature("docstring") casadi::mtaylor "

>  SX casadi::mtaylor(const SX &ex, const SX &x, const SX &a, int order=1)
------------------------------------------------------------------------

multivariate Taylor series expansion

Do Taylor expansions until the aggregated order of a term is equal to
'order'. The aggregated order of $x^n y^m$ equals $n+m$.

>  SX casadi::mtaylor(const SX &ex, const SX &x, const SX &a, int order, const std::vector< int > &order_contributions)
------------------------------------------------------------------------

multivariate Taylor series expansion

Do Taylor expansions until the aggregated order of a term is equal to
'order'. The aggregated order of $x^n y^m$ equals $n+m$.

The argument order_contributions can denote how match each variable
contributes to the aggregated order. If x=[x, y] and order_contributions=[1,
2], then the aggregated order of $x^n y^m$ equals $1n+2m$.

Example usage

$ \\\\sin(b+a)+\\\\cos(b+a)(x-a)+\\\\cos(b+a)(y-b) $ $ y+x-(x^3+3y x^2+3 y^2
x+y^3)/6 $ $ (-3 x^2 y-x^3)/6+y+x $

";

%feature("docstring") casadi::getRealTime "[INTERNAL]  Returns the real
time, in seconds, or -1.0 if an error occurred.

Time is measured since an arbitrary and OS-dependent start time. The
returned real time is only useful for computing an elapsed time between two
calls to this function.

";

%feature("docstring") casadi::integratorOut "

>  IntegratorOutputIOSchemeVector<M> casadi::integratorOut(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="", const M &arg_m3=M(), const std::string &arg_s4="", const M &arg_m4=M(), const std::string &arg_s5="", const M &arg_m5=M())
------------------------------------------------------------------------

Output arguments of an integrator

>Output scheme: casadi::IntegratorOutput (INTEGRATOR_NUM_OUT = 7) [integratorOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_XF          | xf                     | Differential state at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_QF          | qf                     | Quadrature state at    |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_ZF          | zf                     | Algebraic variable at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RXF         | rxf                    | Backward differential  |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RQF         | rqf                    | Backward quadrature    |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZF         | rzf                    | Backward algebraic     |
|                        |                        | variable at the        |
|                        |                        | initial time .         |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::outer_prod "

>  MX casadi::outer_prod(const MX &x, const MX &y)
------------------------------------------------------------------------

Take the outer product of two vectors Equals.

with x and y vectors

>  Matrix< DataType > casadi::outer_prod(const Matrix< DataType > &x, const Matrix< DataType > &y)
------------------------------------------------------------------------

Outer product of two vectors Equals.

with x and y vectors

";

%feature("docstring") casadi::operation_checker "[INTERNAL] ";

%feature("docstring") casadi::horzcat "

>  Sparsity casadi::horzcat(const std::vector< Sparsity > &v)
------------------------------------------------------------------------

Concatenate a list of sparsities horizontally Alternative terminology:
horizontal stack, hstack, horizontal append, [a b].

>  Sparsity casadi::horzcat(const Sparsity &a, const Sparsity &b)
------------------------------------------------------------------------
[INTERNAL] 
 Reshape the sparsity pattern keeping the relative location of the nonzeros.

>  MX casadi::horzcat(const MX &a, const MX &b)
------------------------------------------------------------------------
[INTERNAL] 
concatenate vertically, two matrices

>  MX casadi::horzcat(const std::vector< MX > &x)
------------------------------------------------------------------------

concatenate vertically

horzcat(horzsplit(x, ...)) = x

>  Matrix< DataType > casadi::horzcat(const std::vector< Matrix< DataType > > &v)
------------------------------------------------------------------------

Concatenate a list of matrices vertically Alternative terminology: vertical
stack, vstack, vertical append, [a;b].

horzcat(horzsplit(x, ...)) = x

>  Matrix< DataType > casadi::horzcat(const Matrix< DataType > &x, const Matrix< DataType > &y)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::controldaeIn "

>  ControlledDAEInputIOSchemeVector<M> casadi::controldaeIn(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="", const M &arg_m3=M(), const std::string &arg_s4="", const M &arg_m4=M(), const std::string &arg_s5="", const M &arg_m5=M(), const std::string &arg_s6="", const M &arg_m6=M(), const std::string &arg_s7="", const M &arg_m7=M(), const std::string &arg_s8="", const M &arg_m8=M())
------------------------------------------------------------------------

Input arguments of an ODE/DAE function

>Input scheme: casadi::ControlledDAEInput (CONTROL_DAE_NUM_IN = 10) [controldaeIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| CONTROL_DAE_T          | t                      | Global physical time.  |
|                        |                        | (1-by-1) .             |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_X          | x                      | State vector           |
|                        |                        | (dimension nx-by-1).   |
|                        |                        | Should have the same   |
|                        |                        | amount of non-zeros as |
|                        |                        | DAEOutput:DAE_RES      |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_Z          | z                      | Algebraic state vector |
|                        |                        | (dimension np-by-1). . |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_P          | p                      | Parameter vector       |
|                        |                        | (dimension np-by-1). . |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_U          | u                      | Control vector         |
|                        |                        | (dimension nu-by-1). . |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_U_INTERP   | u_interp               | Control vector,        |
|                        |                        | linearly interpolated  |
|                        |                        | (dimension nu-by-1). . |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_X_MAJOR    | x_major                | State vector           |
|                        |                        | (dimension nx-by-1) at |
|                        |                        | the last major time-   |
|                        |                        | step .                 |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_T0         | t0                     | Time at start of       |
|                        |                        | control interval       |
|                        |                        | (1-by-1) .             |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_TF         | tf                     | Time at end of control |
|                        |                        | interval (1-by-1) .    |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::sprank "

Obtain the structural rank of a sparsity-pattern.

";

%feature("docstring") casadi::triu "

>  MatType casadi::triu(const GenericMatrix< MatType > &a)
------------------------------------------------------------------------

Get the upper triangular part of a matrix.

>  Sparsity casadi::triu(const Sparsity &sp, bool includeDiagonal=true)
------------------------------------------------------------------------

Get upper triangular part.

";

%feature("docstring") casadi::toVector "[INTERNAL] ";

%feature("docstring") casadi::hessLagOut "

>  HessLagOutputIOSchemeVector<M> casadi::hessLagOut(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="", const M &arg_m3=M(), const std::string &arg_s4="", const M &arg_m4=M())
------------------------------------------------------------------------

Output arguments of an NLP Hessian function

>Output scheme: casadi::HessLagOutput (HESSLAG_NUM_OUT = 6) [hessLagOut]
+----------------+--------+------------------------------------------------+
|   Full name    | Short  |                  Description                   |
+================+========+================================================+
| HESSLAG_HESS   | hess   | Hessian of the Lagrangian .                    |
+----------------+--------+------------------------------------------------+
| HESSLAG_F      | f      | Objective function .                           |
+----------------+--------+------------------------------------------------+
| HESSLAG_G      | g      | Constraint function .                          |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_X | grad_x | Gradient of the Lagrangian with respect to x . |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_P | grad_p | Gradient of the Lagrangian with respect to p . |
+----------------+--------+------------------------------------------------+

";

%feature("docstring") casadi::heaviside "

Heaviside function.

\\\\[ \\\\begin {cases} H(x) = 0 & x<0 \\\\\\\\ H(x) = 1/2 & x=0 \\\\\\\\
H(x) = 1 & x>0 \\\\\\\\ \\\\end {cases} \\\\]

";

%feature("docstring") casadi::twice "[INTERNAL] ";

%feature("docstring") casadi::getcopy "[INTERNAL]  Make a deep copy of an
object (Note: default is a shallow copy!)

";

%feature("docstring") casadi::getSchemeEntryEnum "";

%feature("docstring") casadi::bvec_toggle "[INTERNAL] ";

%feature("docstring") casadi::shared_cast "

>  B casadi::shared_cast(SharedObject &A)
------------------------------------------------------------------------
[INTERNAL] 
Typecast a shared object to a base class to a shared object to a
derived class, cf. dynamic_cast.

Get a pointer to the node

Create a return object

Assign node of B and return

Null pointer if not pointing towards the right type of object

>  const B casadi::shared_cast(const SharedObject &A)
------------------------------------------------------------------------
[INTERNAL] 
Typecast a shared object to a base class to a shared object to a
derived class, cf. dynamic_cast (const)

";

%feature("docstring") casadi::qcqpOut "

>  QCQPSolverOutputIOSchemeVector<M> casadi::qcqpOut(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="", const M &arg_m3=M())
------------------------------------------------------------------------

Output arguments of an QP Solver

>Output scheme: casadi::QCQPSolverOutput (QCQP_SOLVER_NUM_OUT = 5) [qcqpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QCQP_SOLVER_X          | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_COST       | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_LAM_A      | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_LAM_X      | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::profileWriteTime "[INTERNAL] ";

%feature("docstring") casadi::trim_empty "";

%feature("docstring") casadi::deepcopy "[INTERNAL]  Make a deep copy of an
object (Note: default is a shallow copy!)

";

%feature("docstring") casadi::inv "

>  MX casadi::inv(const MX &A)
------------------------------------------------------------------------

Matrix inverse (experimental)

";

%feature("docstring") casadi::if_else "

>  MX casadi::if_else(const MX &cond, const MX &if_true, const MX &if_false)
------------------------------------------------------------------------

Branching on MX nodes Ternary operator, \"cond ? if_true : if_false\".

>  SX casadi::if_else(const SX &cond, const SX &if_true, const SX &if_false)
------------------------------------------------------------------------

Integrate f from a to b using Gaussian quadrature with n points.

>  T casadi::if_else(const SXElement &cond, const T &if_true, const T &if_false)

>  SX casadi::if_else(const SXElement &cond, const T &if_true, const T &if_false)
------------------------------------------------------------------------
[INTERNAL] 
Expand the expression as a weighted sum (with constant weights)

>  SXElement casadi::if_else(const SXElement &cond, const SXElement &if_true, const SXElement &if_false)
------------------------------------------------------------------------

replaces the ternary conditional operator \"?:\", which cannot be overloaded

";

%feature("docstring") casadi::sumCols "

Return a col-wise summation of elements.

";

%feature("docstring") casadi::kron "

Kronecker tensor product.

Creates a block matrix in which each element (i, j) is a_ij*b

";

%feature("docstring") casadi::sin "[INTERNAL]  Pre-C99 elementary functions
from the 'math.h' ('cmath') header.

";

%feature("docstring") casadi::hnlpIn "

>  HNLPInputIOSchemeVector<M> casadi::hnlpIn(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M())
------------------------------------------------------------------------

Input arguments of an Homotopy NLP function

>Input scheme: casadi::HNLPInput (HNL_NUM_IN = 4) [hnlpIn]
+-----------+-------+----------------------+
| Full name | Short |     Description      |
+===========+=======+======================+
| HNL_X     | x     | Decision variable .  |
+-----------+-------+----------------------+
| HNL_P     | p     | Fixed parameter .    |
+-----------+-------+----------------------+
| HNL_TAU   | tau   | Homotopy parameter . |
+-----------+-------+----------------------+

";

%feature("docstring") casadi::casadi_mm_tn_sparse "[INTERNAL]  Sparse
matrix-matrix multiplication, the first argument is transposed: z <- z +
x'*y.

";

%feature("docstring") casadi::dense_mul_nn "[INTERNAL] ";

%feature("docstring") casadi::if_else_zero "[INTERNAL]  Conditional
assignment.

";

%feature("docstring") casadi::simplify "

>  void casadi::simplify(MX &ex)

>  void casadi::simplify(SX &ex)
------------------------------------------------------------------------

Simplify an expression.

>  void casadi::simplify(SXElement &ex)
------------------------------------------------------------------------
[INTERNAL] 
Simplify the expression: formulates the expression as and eliminates
terms.

";

%feature("docstring") casadi::hessian "

Integrate f from a to b using Gaussian quadrature with n points.

";

%feature("docstring") casadi::is_a "[INTERNAL]  Check if a shared object is
of a certain type.

";

%feature("docstring") casadi::isIncreasing "

Check if the vector is strictly increasing.

";

%feature("docstring") casadi::gradFIn "

>  GradFInputIOSchemeVector<M> casadi::gradFIn(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M())
------------------------------------------------------------------------

Input arguments of an NLP objective gradient function

>Input scheme: casadi::GradFInput (GRADF_NUM_IN = 3) [gradFIn]
+-----------+-------+---------------------+
| Full name | Short |     Description     |
+===========+=======+=====================+
| GRADF_X   | x     | Decision variable . |
+-----------+-------+---------------------+
| GRADF_P   | p     | Fixed parameter .   |
+-----------+-------+---------------------+

";

%feature("docstring") casadi::getFree "

Get all the free variables in an expression.

";

%feature("docstring") casadi::acosh "

>  T casadi::acosh(const T &x)
------------------------------------------------------------------------
[INTERNAL] 
Pre-C99 elementary functions from the 'math.h' ('cmath') header.

>  double casadi::acosh(double x)
------------------------------------------------------------------------
[INTERNAL]  throw ()
Pre-C99 elementary functions from the 'math.h' ('cmath') header.

";

%feature("docstring") casadi::erf "

>  T casadi::erf(const T &x)
------------------------------------------------------------------------
[INTERNAL] 
C99 elementary functions from the 'math.h' header.

>  double casadi::erf(double x)
------------------------------------------------------------------------
[INTERNAL]  throw ()
C99 elementary functions from the 'math.h' header.

";

%feature("docstring") casadi::pow "[INTERNAL]  Pre-C99 elementary functions
from the 'math.h' ('cmath') header.

";

%feature("docstring") casadi::ptrVec "[INTERNAL]  Convenience function,
convert vectors to vectors of pointers.

";

%feature("docstring") casadi::qr "[INTERNAL]  QR factorization using the
modified Gram-Schmidt algorithm More stable than the classical Gram-Schmidt,
but may break down if the rows of A are nearly linearly dependent See J.
Demmel: Applied Numerical Linear Algebra (algorithm 3.1.). Note that in
SWIG, Q and R are returned by value.

";

%feature("docstring") casadi::casadi_axpy "[INTERNAL]  AXPY: y <- a*x + y.

";

%feature("docstring") casadi::sq "[INTERNAL] ";

%feature("docstring") casadi::gradient "

>  MX casadi::gradient(const MX &ex, const MX &arg)
------------------------------------------------------------------------

split vertically, retaining groups of cols

Parameters:
-----------

output_offset:  List of all start cols for each group the last col group
will run to the end.

horzcat(horzsplit(x, ...)) = x

>  SX casadi::gradient(const SX &ex, const SX &arg)
------------------------------------------------------------------------

Integrate f from a to b using Gaussian quadrature with n points.

";

%feature("docstring") casadi::lpOut "

>  LPSolverOutputIOSchemeVector<M> casadi::lpOut(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="", const M &arg_m3=M())
------------------------------------------------------------------------

Output arguments of an LP Solver

>Output scheme: casadi::LPSolverOutput (LP_SOLVER_NUM_OUT = 5) [lpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| LP_SOLVER_X            | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| LP_SOLVER_COST         | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| LP_SOLVER_LAM_A        | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| LP_SOLVER_LAM_X        | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::logic_or "

Logical or, returns (an expression evaluating to) 1 if at least one
expression is nonzero and 0 otherwise.

";

%feature("docstring") casadi::collocationPointsGen "";

%feature("docstring") casadi::sdqpStruct "

>  SDQPStructIOSchemeVector<M> casadi::sdqpStruct(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="", const M &arg_m3=M())
------------------------------------------------------------------------

Structure specification of an SDQP

";

%feature("docstring") casadi::jacGOut "

>  JacGOutputIOSchemeVector<M> casadi::jacGOut(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M())
------------------------------------------------------------------------

Output arguments of an NLP Jacobian function

>Output scheme: casadi::JacGOutput (JACG_NUM_OUT = 4) [jacGOut]
+-----------+-------+-------------------------------+
| Full name | Short |          Description          |
+===========+=======+===============================+
| JACG_JAC  | jac   | Jacobian of the constraints . |
+-----------+-------+-------------------------------+
| JACG_F    | f     | Objective function .          |
+-----------+-------+-------------------------------+
| JACG_G    | g     | Constraint function .         |
+-----------+-------+-------------------------------+

";

%feature("docstring") casadi::atanh "

>  T casadi::atanh(const T &x)
------------------------------------------------------------------------
[INTERNAL] 
Pre-C99 elementary functions from the 'math.h' ('cmath') header.

>  double casadi::atanh(double x)
------------------------------------------------------------------------
[INTERNAL]  throw ()
Pre-C99 elementary functions from the 'math.h' ('cmath') header.

";

%feature("docstring") casadi::compress "

Remove identical calculations.

";

%feature("docstring") casadi::slicot_mb03wd "[INTERNAL] ";

%feature("docstring") casadi::sparse "

Make a matrix sparse by removing numerical zeros.

";

%feature("docstring") casadi::getSchemeEntryNames "";

%feature("docstring") casadi::diag "

>  MX casadi::diag(const MX &x)
------------------------------------------------------------------------

Get the diagonal of a matrix or construct a diagonal.

When the input is square, the diagonal elements are returned. If the input
is vector-like, a diagonal matrix is constructed with it.

>  Matrix< DataType > casadi::diag(const Matrix< DataType > &A)
------------------------------------------------------------------------

Get the diagonal of a matrix or construct a diagonal When the input is
square, the diagonal elements are returned. If the input is vector- like, a
diagonal matrix is constructed with it.

";

%feature("docstring") casadi::hessLagIn "

>  HessLagInputIOSchemeVector<M> casadi::hessLagIn(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="", const M &arg_m3=M())
------------------------------------------------------------------------

Input arguments of an NLP Hessian function

>Input scheme: casadi::HessLagInput (HESSLAG_NUM_IN = 5) [hessLagIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| HESSLAG_X              | x                      | Decision variable .    |
+------------------------+------------------------+------------------------+
| HESSLAG_P              | p                      | Fixed parameter .      |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_F          | lam_f                  | Multiplier for f. Just |
|                        |                        | a scalar factor for    |
|                        |                        | the objective that the |
|                        |                        | NLP solver might use   |
|                        |                        | to scale the           |
|                        |                        | objective.             |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_G          | lam_g                  | Multiplier for g .     |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::rank "

Obtain the structural rank of a sparsity-pattern.

";

%feature("docstring") casadi::lpIn "

>  LPSolverInputIOSchemeVector<M> casadi::lpIn(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="", const M &arg_m3=M(), const std::string &arg_s4="", const M &arg_m4=M(), const std::string &arg_s5="", const M &arg_m5=M())
------------------------------------------------------------------------

Input arguments of a LP problem

>Input scheme: casadi::LPSolverInput (LP_SOLVER_NUM_IN = 7) [lpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| LP_SOLVER_C            | c                      | The vector c: dense (n |
|                        |                        | x 1) .                 |
+------------------------+------------------------+------------------------+
| LP_SOLVER_A            | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| LP_SOLVER_LBA          | lba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| LP_SOLVER_UBA          | uba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| LP_SOLVER_LBX          | lbx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| LP_SOLVER_UBX          | ubx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::daeOut "

>  DAEOutputIOSchemeVector<M> casadi::daeOut(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M())
------------------------------------------------------------------------

Output arguments of an DAE function

>Output scheme: casadi::DAEOutput (DAE_NUM_OUT = 4) [daeOut]
+-----------+-------+--------------------------------------------+
| Full name | Short |                Description                 |
+===========+=======+============================================+
| DAE_ODE   | ode   | Right hand side of the implicit ODE .      |
+-----------+-------+--------------------------------------------+
| DAE_ALG   | alg   | Right hand side of algebraic equations .   |
+-----------+-------+--------------------------------------------+
| DAE_QUAD  | quad  | Right hand side of quadratures equations . |
+-----------+-------+--------------------------------------------+

";

%feature("docstring") casadi::logic_and "

Logical and, returns (an expression evaluating to) 1 if both expressions are
nonzero and 0 otherwise.

";

%feature("docstring") casadi::getSchemeEntryDoc "";

%feature("docstring") casadi::adj "";

%feature("docstring") casadi::isMonotone "

Check if the vector is monotone.

";

%feature("docstring") casadi::inner_prod "

>  MX casadi::inner_prod(const MX &x, const MX &y)
------------------------------------------------------------------------

Take the inner product of two vectors Equals.

with x and y vectors

>  Matrix< DataType > casadi::inner_prod(const Matrix< DataType > &x, const Matrix< DataType > &y)
------------------------------------------------------------------------

Inner product of two matrices Equals.

with x and y matrices of the same dimension

>  T casadi::inner_prod(const std::vector< T > &a, const std::vector< T > &b)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::matrixName "

Get typename.

";

%feature("docstring") casadi::atan "[INTERNAL]  Pre-C99 elementary
functions from the 'math.h' ('cmath') header.

";

%feature("docstring") casadi::getOperatorRepresentation "

>  std::string casadi::getOperatorRepresentation(const MX &xb, const std::vector< std::string > &args)
------------------------------------------------------------------------

Get a string representation for a binary MX, using custom arguments.

>  std::string casadi::getOperatorRepresentation(const SXElement &x, const std::vector< std::string > &args)
------------------------------------------------------------------------

Get a string representation for a binary SX, using custom arguments.

";

%feature("docstring") casadi::poly_roots "

Attempts to find the roots of a polynomial.

This will only work for polynomials up to order 3 It is assumed that the
roots are real.

";

%feature("docstring") casadi::qpOut "

>  QPSolverOutputIOSchemeVector<M> casadi::qpOut(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="", const M &arg_m3=M())
------------------------------------------------------------------------

Output arguments of an QP Solver

>Output scheme: casadi::QPSolverOutput (QP_SOLVER_NUM_OUT = 5) [qpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_X            | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| QP_SOLVER_COST         | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_A        | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X        | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::trace "

>  MX casadi::trace(const MX &A)
------------------------------------------------------------------------

Matrix trace.

";

%feature("docstring") casadi::casadi_nrm2 "[INTERNAL]  NRM2: ||x||_2 ->
return.

";

%feature("docstring") casadi::evalf "

>  Matrix< double > casadi::evalf(const SX &ex, const SX &v, const Matrix< double > &vdef)
------------------------------------------------------------------------

Substitute variable v with value vdef in an expression ex, and evaluate
numerically Note: this is not efficient. For critical parts (loops) of your
code, always use SXFunction.

>  Matrix< double > casadi::evalf(const SX &ex)
------------------------------------------------------------------------

Evaluate an SX graph numerically Note: this is not efficient. For critical
parts (loops) of your code, always use SXFunction.

";

%feature("docstring") casadi::rectangle "

rectangle function

\\\\[ \\\\begin {cases} \\\\Pi(x) = 1 & |x| < 1/2 \\\\\\\\ \\\\Pi(x) = 1/2 &
|x| = 1/2 \\\\\\\\ \\\\Pi(x) = 0 & |x| > 1/2 \\\\\\\\ \\\\end {cases} \\\\]

Also called: gate function, block function, band function, pulse function,
window function

";

%feature("docstring") casadi::sdqpOut "

>  SDQPOutputIOSchemeVector<M> casadi::sdqpOut(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="", const M &arg_m3=M(), const std::string &arg_s4="", const M &arg_m4=M(), const std::string &arg_s5="", const M &arg_m5=M(), const std::string &arg_s6="", const M &arg_m6=M())
------------------------------------------------------------------------

Output arguments of an SDQP Solver

>Output scheme: casadi::SDQPOutput (SDQP_SOLVER_NUM_OUT = 8) [sdqpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SDQP_SOLVER_X          | x                      | The primal solution (n |
|                        |                        | x 1) - may be used as  |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_P          | p                      | The solution P (m x m) |
|                        |                        | - may be used as       |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_DUAL       | dual                   | The dual solution (m x |
|                        |                        | m) - may be used as    |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_COST       | cost                   | The primal optimal     |
|                        |                        | cost (1 x 1) .         |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_DUAL_COST  | dual_cost              | The dual optimal cost  |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_LAM_A      | lam_a                  | The dual solution      |
|                        |                        | corresponding to the   |
|                        |                        | linear constraints (nc |
|                        |                        | x 1) .                 |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_LAM_X      | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds (n x 1)  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::matrixName< SXElement > " [INTERNAL] ";

%feature("docstring") casadi::atan2 "[INTERNAL]  Pre-C99 elementary
functions from the 'math.h' ('cmath') header.

";

%feature("docstring") casadi::slicot_mb03vy "[INTERNAL] ";

%feature("docstring") casadi::getMinor "";

%feature("docstring") casadi::pinv "

>  Matrix< double > casadi::pinv(const Matrix< double > &A, linearSolverCreator lsolver, const Dictionary &dict=Dictionary())

>  MX casadi::pinv(const MX &A, linearSolverCreator lsolver, const Dictionary &dict=Dictionary())
------------------------------------------------------------------------

Computes the Moore-Penrose pseudo-inverse.

If the matrix A is fat (size1>size2), mul(A, pinv(A)) is unity. If the
matrix A is slender (size2<size1), mul(pinv(A), A) is unity.

>  Matrix< DataType > casadi::pinv(const Matrix< DataType > &A)
------------------------------------------------------------------------

Computes the Moore-Penrose pseudo-inverse.

If the matrix A is fat (size2>size1), mul(A, pinv(A)) is unity. If the
matrix A is slender (size1<size2), mul(pinv(A), A) is unity.

";

%feature("docstring") casadi::getSymbols "

>  std::vector< SXElement > casadi::getSymbols(const SX &e)
------------------------------------------------------------------------

Get all symbols contained in the supplied expression Get all symbols on
which the supplied expression depends.

See:   SXFunction::getFree()

>  std::vector< MX > casadi::getSymbols(const MX &e)

>  std::vector< MX > casadi::getSymbols(const std::vector< MX > &e)
------------------------------------------------------------------------

Get all symbols contained in the supplied expression Get all symbols on
which the supplied expression depends.

See:   MXFunction::getFree()

";

%feature("docstring") casadi::pw_const "

Create a piecewise constant function Create a piecewise constant function
with n=val.size() intervals.

Inputs:

Parameters:
-----------

t:  a scalar variable (e.g. time)

tval:  vector with the discrete values of t at the interval transitions
(length n-1)

val:  vector with the value of the function for each interval (length n)

";

%feature("docstring") casadi::collocationPoints "

Obtain collocation points of specific order and scheme.

Parameters:
-----------

scheme:  'radau' or 'legendre'

";

%feature("docstring") casadi::explicitRK "

Construct an explicit Runge-Kutta integrator.

Parameters:
-----------

f:  dynamical system

>Input scheme: casadi::DAEInput (DAE_NUM_IN = 5) [daeIn]
+-----------+-------+----------------------------+
| Full name | Short |        Description         |
+===========+=======+============================+
| DAE_X     | x     | Differential state .       |
+-----------+-------+----------------------------+
| DAE_Z     | z     | Algebraic state .          |
+-----------+-------+----------------------------+
| DAE_P     | p     | Parameter .                |
+-----------+-------+----------------------------+
| DAE_T     | t     | Explicit time dependence . |
+-----------+-------+----------------------------+

>Output scheme: casadi::DAEOutput (DAE_NUM_OUT = 4) [daeOut]
+-----------+-------+--------------------------------------------+
| Full name | Short |                Description                 |
+===========+=======+============================================+
| DAE_ODE   | ode   | Right hand side of the implicit ODE .      |
+-----------+-------+--------------------------------------------+
| DAE_ALG   | alg   | Right hand side of algebraic equations .   |
+-----------+-------+--------------------------------------------+
| DAE_QUAD  | quad  | Right hand side of quadratures equations . |
+-----------+-------+--------------------------------------------+

Parameters:
-----------

tf:  Integration end time

order:  Order of integration

ne:  Number of times the RK primitive is repeated over the integration
interval

";

%feature("docstring") casadi::sinh "[INTERNAL]  Pre-C99 elementary
functions from the 'math.h' ('cmath') header.

";

%feature("docstring") casadi::cofactor "";

%feature("docstring") casadi::nlpSolverIn "

>  NLPSolverInputIOSchemeVector<M> casadi::nlpSolverIn(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="", const M &arg_m3=M(), const std::string &arg_s4="", const M &arg_m4=M(), const std::string &arg_s5="", const M &arg_m5=M(), const std::string &arg_s6="", const M &arg_m6=M(), const std::string &arg_s7="", const M &arg_m7=M())
------------------------------------------------------------------------

Input arguments of an NLP Solver

>Input scheme: casadi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::sdpStruct "

>  SDPStructIOSchemeVector<M> casadi::sdpStruct(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M())
------------------------------------------------------------------------

Structure specification of an SDP

";

%feature("docstring") casadi::dpleIn "

>  DPLEInputIOSchemeVector<M> casadi::dpleIn(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M())
------------------------------------------------------------------------

Input arguments of a dple solver

>Input scheme: casadi::DPLEInput (DPLE_NUM_IN = 3) [dpleIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| DPLE_A                 | a                      | A matrices (horzcat    |
|                        |                        | when const_dim,        |
|                        |                        | blkdiag otherwise) .   |
+------------------------+------------------------+------------------------+
| DPLE_V                 | v                      | V matrices (horzcat    |
|                        |                        | when const_dim,        |
|                        |                        | blkdiag otherwise) .   |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::blkdiag "

>  Sparsity casadi::blkdiag(const std::vector< Sparsity > &v)
------------------------------------------------------------------------

Construct a Sparsity with given blocks on the diagonal.

>  Sparsity casadi::blkdiag(const Sparsity &a, const Sparsity &b)
------------------------------------------------------------------------
[INTERNAL] 
 Reshape the sparsity pattern keeping the relative location of the nonzeros.

>  MX casadi::blkdiag(const std::vector< MX > &A)
------------------------------------------------------------------------

Construct a matrix with given blocks on the diagonal.

>  MX casadi::blkdiag(const MX &A, const MX &B)
------------------------------------------------------------------------
[INTERNAL] 
Construct a matrix with given blocks on the diagonal.

>  Matrix< DataType > casadi::blkdiag(const std::vector< Matrix< DataType > > &A)
------------------------------------------------------------------------

Construct a matrix with given block on the diagonal.

";

%feature("docstring") casadi::qcqpStruct "

>  QCQPStructIOSchemeVector<M> casadi::qcqpStruct(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M())
------------------------------------------------------------------------

Structure specification of a QP

";

%feature("docstring") casadi::casadi_copy "[INTERNAL]  COPY: y <-x.

";

%feature("docstring") casadi::slicot_mb03vd "[INTERNAL] ";

%feature("docstring") casadi::triu2symm "

Convert a upper triangular matrix to a symmetric one.

";

%feature("docstring") casadi::dpleOut "

>  DPLEOutputIOSchemeVector<M> casadi::dpleOut(const std::string &arg_s0="", const M &arg_m0=M())
------------------------------------------------------------------------

Output arguments of a dple solver

>Output scheme: casadi::DPLEOutput (DPLE_NUM_OUT = 2) [dpleOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| DPLE_P                 | p                      | Lyapunov matrix        |
|                        |                        | (horzcat when          |
|                        |                        | const_dim, blkdiag     |
|                        |                        | otherwise) (Cholesky   |
|                        |                        | of P if pos_def) .     |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::printCompact "

Print compact, introducing new variables for shared subexpressions.

";

%feature("docstring") casadi::mul "

>  Sparsity casadi::mul(const Sparsity &a, const Sparsity &b)
------------------------------------------------------------------------

Get the sparsity resulting from a matrix multiplication.

>  MX casadi::mul(const MX &x, const MX &y, const Sparsity &sp_z=Sparsity())
------------------------------------------------------------------------

Take the matrix product of 2 MX objects.

With optional sp_z you can specify the sparsity of the result A typical use
case might be where the product is only constructed to inspect the trace of
it. sp_z diagonal will be more efficient then.

>  MX casadi::mul(const std::vector< MX > &x)
------------------------------------------------------------------------

Take the matrix product of n MX objects.

>  Matrix< DataType > casadi::mul(const Matrix< DataType > &x, const Matrix< DataType > &y, const Sparsity &sp_z=Sparsity())
------------------------------------------------------------------------

Matrix product of two matrices.

With optional sp_z you can specify the sparsity of the result A typical use
case might be where the product is only constructed to inspect the trace of
it. sp_z diagonal will be more efficient in that case.

>  Matrix< DataType > casadi::mul(const std::vector< Matrix< DataType > > &args)
------------------------------------------------------------------------

Matrix product of n matrices.

";

%feature("docstring") casadi::horzsplit "

>  std::vector< Sparsity > casadi::horzsplit(const Sparsity &sp, const std::vector< int > &output_offset)
------------------------------------------------------------------------

Split up a sparsity pattern horizontally.

>  std::vector< MX > casadi::horzsplit(const MX &x, const std::vector< int > &output_offset)
------------------------------------------------------------------------

split vertically, retaining groups of cols

Parameters:
-----------

output_offset:  List of all start cols for each group the last col group
will run to the end.

horzcat(horzsplit(x, ...)) = x

>  std::vector< MX > casadi::horzsplit(const MX &x, int incr=1)

>  std::vector< Matrix< DataType > > casadi::horzsplit(const Matrix< DataType > &v, int incr=1)
------------------------------------------------------------------------

split vertically, retaining fixed-sized groups of cols

Parameters:
-----------

incr:  Size of each group of cols

horzcat(horzsplit(x, ...)) = x

>  std::vector< Matrix< DataType > > casadi::horzsplit(const Matrix< DataType > &v, const std::vector< int > &offset)
------------------------------------------------------------------------

split vertically, retaining groups of cols

Parameters:
-----------

offset:  List of all start cols for each group the last col group will run
to the end.

horzcat(horzsplit(x, ...)) = x

";

%feature("docstring") casadi::isNonIncreasing "

Check if the vector is non-increasing.

";

%feature("docstring") casadi::veccat "

>  MX casadi::veccat(const std::vector< MX > &comp)
------------------------------------------------------------------------

Concatenate vertically while vectorizing all arguments.

>  Matrix< DataType > casadi::veccat(const std::vector< Matrix< DataType > > &comp)
------------------------------------------------------------------------

concatenate vertically while vectorizing all arguments with vec

";

%feature("docstring") casadi::taylor "

univariate Taylor series expansion

Calculate the Taylor expansion of expression 'ex' up to order 'order' with
respect to variable 'x' around the point 'a'

$(x)=f(a)+f'(a)(x-a)+f''(a)\\\\frac
{(x-a)^2}{2!}+f'''(a)\\\\frac{(x-a)^3}{3!}+\\\\ldots$

Example usage:>>   x

";

%feature("docstring") casadi::getSchemeName "";

%feature("docstring") casadi::collocationPointsL "[INTERNAL]  Obtain
collocation points of specific order and scheme.

Parameters:
-----------

scheme:  'radau' or 'legendre'

";

%feature("docstring") casadi::makeVector "[INTERNAL]  Make a vector of a
certain length with its entries specified Usage C++:
makeVector<ClassName>(LENGTH, ENTRY_INDEX_1, ENTRY_VALUE_1, ENTRY_INDEX_2,
ENTRY_VALUE_2, ...) Usage Python: makeVector(ClassName,(LENGTH,
ENTRY_INDEX_1, ENTRY_VALUE_1, ENTRY_INDEX_2, ENTRY_VALUE_2 ...)

";

%feature("docstring") casadi::profileWriteBare "[INTERNAL] ";

%feature("docstring") casadi::repmat "

Repeat matrix A n times vertically and m times horizontally.

";

%feature("docstring") casadi::isNonDecreasing "

Check if the vector is non-decreasing.

";

%feature("docstring") casadi::cosh "[INTERNAL]  Pre-C99 elementary
functions from the 'math.h' ('cmath') header.

";

%feature("docstring") casadi::countNodes "

>  int casadi::countNodes(const MX &A)
------------------------------------------------------------------------

Count number of nodes

>  int casadi::countNodes(const SX &A)
------------------------------------------------------------------------

Count number of nodes.

";

%feature("docstring") casadi::matrixName< int > "

Get typename.

";

%feature("docstring") casadi::str "";

%feature("docstring") casadi::fabs "[INTERNAL]  Pre-C99 elementary
functions from the 'math.h' ('cmath') header.

";

%feature("docstring") casadi::isEqual "

Check if two expressions are equal, assuming that they are comparable.

";

%feature("docstring") casadi::socpOut "

>  SOCPOutputIOSchemeVector<M> casadi::socpOut(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="", const M &arg_m3=M())
------------------------------------------------------------------------

Output arguments of an SOCP Solver

>Output scheme: casadi::SOCPOutput (SOCP_SOLVER_NUM_OUT = 5) [socpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SOCP_SOLVER_X          | x                      | The primal solution (n |
|                        |                        | x 1) .                 |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_COST       | cost                   | The primal optimal     |
|                        |                        | cost (1 x 1) .         |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_LAM_A      | lam_a                  | The dual solution      |
|                        |                        | corresponding to the   |
|                        |                        | linear constraints (nc |
|                        |                        | x 1) .                 |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_LAM_X      | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds (n x 1)  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::log "[INTERNAL]  Pre-C99 elementary functions
from the 'math.h' ('cmath') header.

";

%feature("docstring") casadi::nlpSolverOut "

>  NLPSolverOutputIOSchemeVector<M> casadi::nlpSolverOut(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="", const M &arg_m3=M(), const std::string &arg_s4="", const M &arg_m4=M(), const std::string &arg_s5="", const M &arg_m5=M())
------------------------------------------------------------------------

Output arguments of an NLP Solver

>Output scheme: casadi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::profileWrite "[INTERNAL] ";

%feature("docstring") casadi::vec "

>  Sparsity casadi::vec(const Sparsity &a)
------------------------------------------------------------------------

Vectorize the pattern.

>  MX casadi::vec(const MX &x)
------------------------------------------------------------------------

Returns a vectorized version of the MX Same as reshape(x, x.numel(), 1)

a c b d

turns into

a b c d

>  Matrix< DataType > casadi::vec(const Matrix< DataType > &a)
------------------------------------------------------------------------

make a vector Reshapes/vectorizes the Matrix<DataType> such that the shape
becomes (expr.numel(), 1). Columns are stacked on top of each other. Same as
reshape(expr, expr.numel(), 1)

a c b d  turns into

a b c d

";

%feature("docstring") casadi::solve "

>  Matrix< double > casadi::solve(const Matrix< double > &A, const Matrix< double > &b, linearSolverCreator lsolver, const Dictionary &dict=Dictionary())

>  MX casadi::solve(const MX &A, const MX &b, linearSolverCreator lsolver=SymbolicQR::creator, const Dictionary &dict=Dictionary())
------------------------------------------------------------------------

Solve a system of equations: A*x = b.

>  Matrix< DataType > casadi::solve(const Matrix< DataType > &A, const Matrix< DataType > &b)
------------------------------------------------------------------------

Solve a system of equations: A*x = b The solve routine works similar to
Matlab's backslash when A is square and nonsingular. The algorithm used is
the following:

A simple forward or backward substitution if A is upper or lower triangular

If the linear system is at most 3-by-3, form the inverse via minor expansion
and multiply

Permute the variables and equations as to get a (structurally) nonzero
diagonal, then perform a QR factorization without pivoting and solve the
factorized system.

Note 1: If there are entries of the linear system known to be zero, these
will be removed. Elements that are very small, or will evaluate to be zero,
can still cause numerical errors, due to the lack of pivoting (which is not
possible since cannot compare the size of entries)

Note 2: When permuting the linear system, a BLT (block lower triangular)
transformation is formed. Only the permutation part of this is however used.
An improvement would be to solve block-by-block if there are multiple BLT
blocks.

";

%feature("docstring") casadi::linsolIn "

>  LinsolInputIOSchemeVector<M> casadi::linsolIn(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M())
------------------------------------------------------------------------

Input arguments of a linear solver

>Input scheme: casadi::LinsolInput (LINSOL_NUM_IN = 3) [linsolIn]
+-----------+-------+------------------------------------------------+
| Full name | Short |                  Description                   |
+===========+=======+================================================+
| LINSOL_A  | A     | The square matrix A: sparse, (n x n). .        |
+-----------+-------+------------------------------------------------+
| LINSOL_B  | B     | The right-hand-side matrix b: dense, (n x m) . |
+-----------+-------+------------------------------------------------+

";

%feature("docstring") casadi::poly_coeff "

extracts polynomial coefficients from an expression

ex Scalar expression that represents a polynomial  x Scalar symbol that the
polynomial is build up with

";

%feature("docstring") casadi::transpose "

>  Sparsity casadi::transpose(const Sparsity &a)
------------------------------------------------------------------------

Transpose the pattern.

>  MX casadi::transpose(const MX &x)
------------------------------------------------------------------------

Transpose an expression.

>  Matrix< DataType > casadi::transpose(const Matrix< DataType > &x)
------------------------------------------------------------------------

Transpose of a matrix.

";

%feature("docstring") casadi::bvec_or "[INTERNAL] ";

%feature("docstring") casadi::linsolOut "

>  LinsolOutputIOSchemeVector<M> casadi::linsolOut(const std::string &arg_s0="", const M &arg_m0=M())
------------------------------------------------------------------------

Output arguments of a linear solver

>Output scheme: casadi::LinsolOutput (LINSOL_NUM_OUT = 2) [linsolOut]
+-----------+-------+----------------------------------------------+
| Full name | Short |                 Description                  |
+===========+=======+==============================================+
| LINSOL_X  | X     | Solution to the linear system of equations . |
+-----------+-------+----------------------------------------------+

";

%feature("docstring") casadi::sqrt "[INTERNAL]  Pre-C99 elementary
functions from the 'math.h' ('cmath') header.

";

%feature("docstring") casadi::sort "[INTERNAL]  Sort the data in a vector.

Parameters:
-----------

values:  the vector that needs sorting

sorted_values:  the sorted vector

indices:  The indices such that 'sorted_values= values[indices]'

invert_indices:  Output indices such that 'sorted_values[indices=values'

";

%feature("docstring") casadi::print "[INTERNAL]  Print description.

";

%feature("docstring") casadi::tan "[INTERNAL]  Pre-C99 elementary functions
from the 'math.h' ('cmath') header.

";

%feature("docstring") casadi::extractShared "

Extract shared subexpressions from an set of expressions.

";

%feature("docstring") casadi::vertcat "

>  Sparsity casadi::vertcat(const std::vector< Sparsity > &v)
------------------------------------------------------------------------

Concatenate a list of sparsities vertically Alternative terminology:
vertical stack, vstack, vertical append, [a;b].

>  Sparsity casadi::vertcat(const Sparsity &a, const Sparsity &b)
------------------------------------------------------------------------
[INTERNAL] 
 Reshape the sparsity pattern keeping the relative location of the nonzeros.

>  MX casadi::vertcat(const MX &a, const MX &b)
------------------------------------------------------------------------
[INTERNAL] 
concatenate horizontally, two matrices

>  MX casadi::vertcat(const std::vector< MX > &comp)
------------------------------------------------------------------------

concatenate horizontally

vertcat(vertsplit(x, ...)) = x

>  Matrix< DataType > casadi::vertcat(const std::vector< Matrix< DataType > > &v)
------------------------------------------------------------------------

Concatenate a list of matrices horizontally Alternative terminology:
horizontal stack, hstack, horizontal append, [a b].

vertcat(vertsplit(x, ...)) = x

>  Matrix< DataType > casadi::vertcat(const Matrix< DataType > &x, const Matrix< DataType > &y)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::matrix_expand "

Expand MX graph to SXFunction call.

Expand the given expression e, optionally supplying expressions contained in
it at which expansion should stop.

";

%feature("docstring") casadi::qcqpIn "

>  QCQPSolverInputIOSchemeVector<M> casadi::qcqpIn(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="", const M &arg_m3=M(), const std::string &arg_s4="", const M &arg_m4=M(), const std::string &arg_s5="", const M &arg_m5=M(), const std::string &arg_s6="", const M &arg_m6=M(), const std::string &arg_s7="", const M &arg_m7=M(), const std::string &arg_s8="", const M &arg_m8=M(), const std::string &arg_s9="", const M &arg_m9=M(), const std::string &arg_s10="", const M &arg_m10=M(), const std::string &arg_s11="", const M &arg_m11=M())
------------------------------------------------------------------------

Input arguments of a QP problem

>Input scheme: casadi::QCQPSolverInput (QCQP_SOLVER_NUM_IN = 13) [qcqpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QCQP_SOLVER_H          | h                      | The square matrix H:   |
|                        |                        | sparse, (n x n). Only  |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical.     |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_G          | g                      | The vector g: dense,   |
|                        |                        | (n x 1) .              |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_P          | p                      | The horizontal stack   |
|                        |                        | of all Pi. Each Pi is  |
|                        |                        | sparse (n x n). Only   |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical.     |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_Q          | q                      | The vertical stack of  |
|                        |                        | all qi: dense, (nq n x |
|                        |                        | 1) .                   |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_R          | r                      | The vertical stack of  |
|                        |                        | all scalars ri (nq x   |
|                        |                        | 1) .                   |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_A          | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_LBA        | lba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_UBA        | uba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_LBX        | lbx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_UBX        | ubx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_X0         | x0                     | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_LAM_X0     | lam_x0                 | dense                  |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::applymap "[INTERNAL]  Apply a function f to
each element in a vector

";

%feature("docstring") casadi::any "";

%feature("docstring") casadi::isBadChar "";

%feature("docstring") casadi::dgetrs_ "[INTERNAL]   Solve a system of
equation using an LU-factorized matrix (lapack)

";

%feature("docstring") casadi::fmin "

>  T casadi::fmin(const T &x, const T &n)

>  T casadi::fmin(const T &x, double n)

>  T casadi::fmin(double x, const T &n)
------------------------------------------------------------------------
[INTERNAL] 
C99 elementary functions from the 'math.h' header.

>  double casadi::fmin(double x, double y)

>  int casadi::fmin(int x, int y)
------------------------------------------------------------------------
[INTERNAL]  throw ()
C99 elementary functions from the 'math.h' header.

";

%feature("docstring") casadi::ProfilingType "[INTERNAL] ";

%feature("docstring") casadi::getRepresentation "[INTERNAL]  Print
representation to string.

";

%feature("docstring") casadi::lpStruct "

>  LPStructIOSchemeVector<M> casadi::lpStruct(const std::string &arg_s0="", const M &arg_m0=M())
------------------------------------------------------------------------

Structure specification of an LP

";

%feature("docstring") casadi::describeInput "";

%feature("docstring") casadi::exp "[INTERNAL]  Pre-C99 elementary functions
from the 'math.h' ('cmath') header.

";

%feature("docstring") casadi::linspace "

>  MatType casadi::linspace(const GenericMatrix< MatType > &a, const GenericMatrix< MatType > &b, int nsteps)
------------------------------------------------------------------------

Matlab's linspace command.

>  void casadi::linspace(std::vector< T > &v, const F &first, const L &last)
------------------------------------------------------------------------
[INTERNAL] 
Matlab's linspace.

";

%feature("docstring") casadi::dtrsm_ "[INTERNAL]   Solve upper triangular
system (lapack)

";

%feature("docstring") casadi::qpStruct "

>  QPStructIOSchemeVector<M> casadi::qpStruct(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M())
------------------------------------------------------------------------

Structure specification of a QP

";

%feature("docstring") casadi::dense "

>  MX casadi::dense(const MX &x)
------------------------------------------------------------------------

create a clipped view into a matrix Create a sparse matrix from a dense
matrix A, with sparsity pattern sp

MX clip(const MX& A, const Sparsity& sp) { Join the sparsity patterns
std::vector<int> mapping; Sparsity sp = A.sparsity().patternIntersection(sp,
mapping);

Split up the mapping std::vector<int> nzA, nzB;

Copy sparsity for (int k=0; k<mapping.size(); ++k) { if (mapping[k]<0) {
nzA.push_back(k); } else if (mapping[k]>0) { nzB.push_back(k); } else {
throw CasadiException(\"Pattern intersection not empty\"); } }

Create mapping MX ret; ret.assignNode(new Mapping(sp)); ret->assign(A,
range(nzA.size()), nzA); ret->assign(B, range(nzB.size()), nzB); return ret;

}

Make the matrix dense if not already

>  Matrix< DataType > casadi::dense(const Matrix< DataType > &A)
------------------------------------------------------------------------

Make a matrix dense.

";

%feature("docstring") casadi::casadi_trans "[INTERNAL]  TRANS: y <-
trans(x)

";

%feature("docstring") casadi::stabilizedQpIn "

>  StabilizedQPSolverInputIOSchemeVector<M> casadi::stabilizedQpIn(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="", const M &arg_m3=M(), const std::string &arg_s4="", const M &arg_m4=M(), const std::string &arg_s5="", const M &arg_m5=M(), const std::string &arg_s6="", const M &arg_m6=M(), const std::string &arg_s7="", const M &arg_m7=M(), const std::string &arg_s8="", const M &arg_m8=M(), const std::string &arg_s9="", const M &arg_m9=M(), const std::string &arg_s10="", const M &arg_m10=M(), const std::string &arg_s11="", const M &arg_m11=M())
------------------------------------------------------------------------

Input arguments of a QP problem

>Input scheme: casadi::StabilizedQPSolverInput (STABILIZED_QP_SOLVER_NUM_IN = 13) [stabilizedQpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| STABILIZED_QP_SOLVER_H | h                      | The square matrix H:   |
|                        |                        | sparse, (n x n). Only  |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical.     |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_G | g                      | The vector g: dense,   |
|                        |                        | (n x 1) .              |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_A | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_L | lba                    | dense, (nc x 1)        |
| BA                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_U | uba                    | dense, (nc x 1)        |
| BA                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_L | lbx                    | dense, (n x 1)         |
| BX                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_U | ubx                    | dense, (n x 1)         |
| BX                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_X | x0                     | dense, (n x 1)         |
| 0                      |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_L | lam_x0                 | dense                  |
| AM_X0                  |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_M | muR                    | dense (1 x 1)          |
| UR                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_M | muE                    | dense (nc x 1)         |
| UE                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_M | mu                     | dense (nc x 1)         |
| U                      |                        |                        |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::norm_F "

Frobenius norm.

";

%feature("docstring") casadi::blockmatrix "

>  SX casadi::blockmatrix(SX array[n][m])
------------------------------------------------------------------------
[INTERNAL] 
Create a block matrix.

Return matrix

loop over cols

Create a col

append components to the col

append col to matrix

Return matrix

loop over cols

Create a col

append components to the col

append col to matrix

>  SX casadi::blockmatrix(SX array[n])
------------------------------------------------------------------------
[INTERNAL] 
Create a block matrix (vector)

Return matrix

loop over cols

append components

Return matrix

loop over cols

append components

";

%feature("docstring") casadi::gradFOut "

>  GradFOutputIOSchemeVector<M> casadi::gradFOut(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M())
------------------------------------------------------------------------

Output arguments of an NLP objective gradient function

>Output scheme: casadi::GradFOutput (GRADF_NUM_OUT = 4) [gradFOut]
+------------+-------+-------------------------------+
| Full name  | Short |          Description          |
+============+=======+===============================+
| GRADF_GRAD | grad  | Jacobian of the constraints . |
+------------+-------+-------------------------------+
| GRADF_F    | f     | Objective function .          |
+------------+-------+-------------------------------+
| GRADF_G    | g     | Constraint function .         |
+------------+-------+-------------------------------+

";

%feature("docstring") casadi::sumAll "

Return summation of all elements.

";

%feature("docstring") casadi::controlsimulatorIn "

>  ControlSimulatorInputIOSchemeVector<M> casadi::controlsimulatorIn(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M())
------------------------------------------------------------------------

Input arguments of a control simulator

>Input scheme: casadi::ControlSimulatorInput (CONTROLSIMULATOR_NUM_IN = 4) [controlsimulatorIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| CONTROLSIMULATOR_X0    | x0                     | Differential or        |
|                        |                        | algebraic state at t0  |
|                        |                        | (dimension nx-by-1) .  |
+------------------------+------------------------+------------------------+
| CONTROLSIMULATOR_P     | p                      | Parameters that are    |
|                        |                        | fixed over the entire  |
|                        |                        | horizon (dimension np- |
|                        |                        | by-1) .                |
+------------------------+------------------------+------------------------+
| CONTROLSIMULATOR_U     | u                      | Parameters that change |
|                        |                        | over the integration   |
|                        |                        | intervals (dimension   |
|                        |                        | nu-by-(ns-1)) .        |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::norm_1 "

>  MX casadi::norm_1(const MX &x)

>  Matrix< DataType > casadi::norm_1(const Matrix< DataType > &x)
------------------------------------------------------------------------

1-norm

>  T casadi::norm_1(const std::vector< T > &x)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::norm_2 "

>  MX casadi::norm_2(const MX &x)

>  Matrix< DataType > casadi::norm_2(const Matrix< DataType > &x)
------------------------------------------------------------------------

2-norm

>  T casadi::norm_2(const std::vector< T > &x)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::floor "[INTERNAL]  Pre-C99 elementary
functions from the 'math.h' ('cmath') header.

";

%feature("docstring") casadi::nlpOut "

>  NLPOutputIOSchemeVector<M> casadi::nlpOut(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M())
------------------------------------------------------------------------

Output arguments of an NLP function

>Output scheme: casadi::NLPOutput (NL_NUM_OUT = 3) [nlpOut]
+-----------+-------+-----------------------+
| Full name | Short |      Description      |
+===========+=======+=======================+
| NL_F      | f     | Objective function .  |
+-----------+-------+-----------------------+
| NL_G      | g     | Constraint function . |
+-----------+-------+-----------------------+

";

%feature("docstring") casadi::isnan "[INTERNAL]  throw () C99 elementary
functions from the 'math.h' header.

";

%feature("docstring") casadi::implicitRK "

Construct an implicit Runge-Kutta integrator.

Parameters:
-----------

f:  dynamical system

>Input scheme: casadi::DAEInput (DAE_NUM_IN = 5) [daeIn]
+-----------+-------+----------------------------+
| Full name | Short |        Description         |
+===========+=======+============================+
| DAE_X     | x     | Differential state .       |
+-----------+-------+----------------------------+
| DAE_Z     | z     | Algebraic state .          |
+-----------+-------+----------------------------+
| DAE_P     | p     | Parameter .                |
+-----------+-------+----------------------------+
| DAE_T     | t     | Explicit time dependence . |
+-----------+-------+----------------------------+

>Output scheme: casadi::DAEOutput (DAE_NUM_OUT = 4) [daeOut]
+-----------+-------+--------------------------------------------+
| Full name | Short |                Description                 |
+===========+=======+============================================+
| DAE_ODE   | ode   | Right hand side of the implicit ODE .      |
+-----------+-------+--------------------------------------------+
| DAE_ALG   | alg   | Right hand side of algebraic equations .   |
+-----------+-------+--------------------------------------------+
| DAE_QUAD  | quad  | Right hand side of quadratures equations . |
+-----------+-------+--------------------------------------------+

Parameters:
-----------

tf:  Integration end time

order:  Order of integration

scheme:  Collocation scheme, as excepted by collocationPoints function.

ne:  Number of times the RK primitive is repeated over the integration
interval

";

%feature("docstring") casadi::dgeqrf_ "[INTERNAL]  QR-factorize dense
matrix (lapack)

";

%feature("docstring") casadi::dense_mul_nt "[INTERNAL] ";

%feature("docstring") casadi::nlpIn "

>  NLPInputIOSchemeVector<M> casadi::nlpIn(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M())
------------------------------------------------------------------------

Input arguments of an NLP function

>Input scheme: casadi::NLPInput (NL_NUM_IN = 3) [nlpIn]
+-----------+-------+---------------------+
| Full name | Short |     Description     |
+===========+=======+=====================+
| NL_X      | x     | Decision variable . |
+-----------+-------+---------------------+
| NL_P      | p     | Fixed parameter .   |
+-----------+-------+---------------------+

";

%feature("docstring") casadi::copysign "

>  T casadi::copysign(const T &x, const T &y)
------------------------------------------------------------------------
[INTERNAL] 
 copysign function

>  double casadi::copysign(double x, double y)
------------------------------------------------------------------------
[INTERNAL] 
copysign function

";

%feature("docstring") casadi::fmax "

>  T casadi::fmax(const T &x, const T &n)

>  T casadi::fmax(const T &x, double n)

>  T casadi::fmax(double x, const T &n)
------------------------------------------------------------------------
[INTERNAL] 
C99 elementary functions from the 'math.h' header.

>  double casadi::fmax(double x, double y)

>  int casadi::fmax(int x, int y)
------------------------------------------------------------------------
[INTERNAL]  throw ()
C99 elementary functions from the 'math.h' header.

";

%feature("docstring") casadi::socpStruct "

>  SOCPStructIOSchemeVector<M> casadi::socpStruct(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M())
------------------------------------------------------------------------

Structure specification of an SOCP

";

%feature("docstring") casadi::ptrToLong "[INTERNAL] ";

%feature("docstring") casadi::getSchemeEntryEnumName "";

%feature("docstring") casadi::getDescription "[INTERNAL]  Print description
to string.

";

%feature("docstring") casadi::asin "[INTERNAL]  Pre-C99 elementary
functions from the 'math.h' ('cmath') header.

";

%feature("docstring") casadi::get_bvec_t "

>  bvec_t * casadi::get_bvec_t(std::vector< double > &v)
------------------------------------------------------------------------
[INTERNAL] 
Get an pointer of sets of booleans from a double vector

>  const bvec_t * casadi::get_bvec_t(const std::vector< double > &v)

>  bvec_t * casadi::get_bvec_t(std::vector< T > &v)

>  const bvec_t * casadi::get_bvec_t(const std::vector< T > &v)
------------------------------------------------------------------------
[INTERNAL] 
Get an pointer of sets of booleans from a double vector.

";

%feature("docstring") casadi::qpIn "

>  QPSolverInputIOSchemeVector<M> casadi::qpIn(const std::string &arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="", const M &arg_m3=M(), const std::string &arg_s4="", const M &arg_m4=M(), const std::string &arg_s5="", const M &arg_m5=M(), const std::string &arg_s6="", const M &arg_m6=M(), const std::string &arg_s7="", const M &arg_m7=M(), const std::string &arg_s8="", const M &arg_m8=M())
------------------------------------------------------------------------

Input arguments of a QP problem

>Input scheme: casadi::QPSolverInput (QP_SOLVER_NUM_IN = 10) [qpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_H            | h                      | The square matrix H:   |
|                        |                        | sparse, (n x n). Only  |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical.     |
+------------------------+------------------------+------------------------+
| QP_SOLVER_G            | g                      | The vector g: dense,   |
|                        |                        | (n x 1) .              |
+------------------------+------------------------+------------------------+
| QP_SOLVER_A            | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LBA          | lba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_UBA          | uba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LBX          | lbx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_UBX          | ubx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_X0           | x0                     | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X0       | lam_x0                 | dense                  |
+------------------------+------------------------+------------------------+

";

%feature("docstring") casadi::norm_inf "

>  MX casadi::norm_inf(const MX &x)

>  Matrix< DataType > casadi::norm_inf(const Matrix< DataType > &x)
------------------------------------------------------------------------

Infinity-norm.

>  T casadi::norm_inf(const std::vector< T > &x)
------------------------------------------------------------------------
[INTERNAL] 
";

%feature("docstring") casadi::det "

>  MX casadi::det(const MX &A)
------------------------------------------------------------------------

Matrix determinant (experimental)

";

%feature("docstring") casadi::gauss_quadrature "

Integrate f from a to b using Gaussian quadrature with n points.

";

%feature("docstring") casadi::has_empty "";

%feature("docstring") casadi::substituteInPlace "

>  void casadi::substituteInPlace(const std::vector< MX > &v, std::vector< MX > &vdef, bool reverse=false)
------------------------------------------------------------------------
[INTERNAL] 
Inplace substitution Substitute variables v out of the expressions
vdef sequentially.

>  void casadi::substituteInPlace(const std::vector< MX > &v, std::vector< MX > &vdef, std::vector< MX > &ex, bool reverse=false)
------------------------------------------------------------------------
[INTERNAL] 
Inplace substitution with piggyback expressions Substitute variables v
out of the expressions vdef sequentially, as well as out of a number
of other expressions piggyback.

>  void casadi::substituteInPlace(const SX &v, SX &vdef, bool reverse=false)
------------------------------------------------------------------------

Substitute variable var out of or into an expression expr.

>  void casadi::substituteInPlace(const SX &v, SX &vdef, std::vector< SX > &ex, bool reverse=false)
------------------------------------------------------------------------

Substitute variable var out of or into an expression expr, with an arbitrary
number of other expressions piggyback.

>  void casadi::substituteInPlace(const std::vector< SX > &v, std::vector< SX > &vdef, std::vector< SX > &ex, bool reverse=false)
------------------------------------------------------------------------

Substitute variable var out of or into an expression expr, with an arbitrary
number of other expressions piggyback (vector version)

";

%feature("docstring") casadi::casadi_fill "[INTERNAL]  FILL: x <- alpha.

";

%feature("docstring") casadi::getSchemeEntryName "";


// File: namespaceIpopt.xml


// File: namespacestd.xml


// File: 01_8dox.xml


// File: 02_8dox.xml


// File: 03_8dox.xml


// File: 04_8dox.xml


// File: 05_8dox.xml


// File: 06_8dox.xml


// File: a0__schemes_8hpp.xml


// File: all_8hpp.xml


// File: assertion_8cpp.xml


// File: casadi_2core_2mx_2assertion_8hpp.xml


// File: docs_2api_2examples_2misc_2assertion_8hpp.xml


// File: autogenerated_8cpp.xml


// File: b0__options_8hpp.xml


// File: binary__mx_8hpp.xml


// File: binary__mx__impl_8hpp.xml


// File: binary__sx_8hpp.xml


// File: c0__monitors_8hpp.xml


// File: call__function_8cpp.xml


// File: call__function_8hpp.xml


// File: callback_8hpp.xml


// File: casadi_8hpp.xml


// File: casadi__calculus_8hpp.xml


// File: casadi__common_8hpp.xml


// File: casadi__exception_8hpp.xml


// File: casadi__instantiations_8cpp.xml


// File: casadi__limits_8hpp.xml


// File: casadi__math_8hpp.xml


// File: casadi__meta_8cpp.xml


// File: casadi__meta_8hpp.xml


// File: casadi__options_8cpp.xml


// File: casadi__options_8hpp.xml


// File: casadi__types_8hpp.xml


// File: code__generator_8cpp.xml


// File: code__generator_8hpp.xml


// File: collocation__integrator_8cpp.xml


// File: collocation__integrator_8hpp.xml


// File: collocation__integrator__internal_8cpp.xml


// File: collocation__integrator__internal_8hpp.xml


// File: coloring_8hpp.xml


// File: concat_8cpp.xml


// File: concat_8hpp.xml


// File: constant__mx_8cpp.xml


// File: constant__mx_8hpp.xml


// File: constant__sx_8hpp.xml


// File: control__simulator_8cpp.xml


// File: control__simulator_8hpp.xml


// File: control__simulator__internal_8cpp.xml


// File: control__simulator__internal_8hpp.xml


// File: controlsimulator_8hpp.xml


// File: countNodes_8hpp.xml


// File: cplex__internal_8cpp.xml


// File: cplex__internal_8hpp.xml


// File: cplex__solver_8cpp.xml


// File: cplex__solver_8hpp.xml


// File: createParent_8hpp.xml


// File: csparse_8cpp.xml


// File: csparse_8hpp.xml


// File: csparse__cholesky_8cpp.xml


// File: csparse__cholesky_8hpp.xml


// File: csparse__cholesky__internal_8cpp.xml


// File: csparse__cholesky__internal_8hpp.xml


// File: csparse__internal_8cpp.xml


// File: csparse__internal_8hpp.xml


// File: ctemplate_8cpp.xml
%feature("docstring") main  "
This file does absolutely nothing but including all headers ";


// File: custom__function_8cpp.xml


// File: custom__function_8hpp.xml


// File: custom__function__internal_8cpp.xml


// File: custom__function__internal_8hpp.xml


// File: customfunction_8hpp.xml


// File: customfunction__c_8hpp.xml


// File: cvodes__integrator_8cpp.xml


// File: cvodes__integrator_8hpp.xml


// File: cvodes__internal_8cpp.xml


// File: cvodes__internal_8hpp.xml


// File: d0__stats_8hpp.xml


// File: determinant_8cpp.xml


// File: determinant_8hpp.xml


// File: direct__collocation_8cpp.xml


// File: direct__collocation_8hpp.xml


// File: direct__collocation__internal_8cpp.xml


// File: direct__collocation__internal_8hpp.xml


// File: direct__multiple__shooting_8cpp.xml


// File: direct__multiple__shooting_8hpp.xml


// File: direct__multiple__shooting__internal_8cpp.xml


// File: direct__multiple__shooting__internal_8hpp.xml


// File: direct__single__shooting_8cpp.xml


// File: direct__single__shooting_8hpp.xml


// File: direct__single__shooting__internal_8cpp.xml


// File: direct__single__shooting__internal_8hpp.xml


// File: dotdraw_8hpp.xml


// File: dple__internal_8cpp.xml


// File: dple__internal_8hpp.xml


// File: dple__solver_8cpp.xml


// File: dple__solver_8hpp.xml


// File: dsdp__internal_8cpp.xml


// File: dsdp__internal_8hpp.xml


// File: dsdp__solver_8cpp.xml


// File: dsdp__solver_8hpp.xml


// File: dulmageMendelsohn_8hpp.xml


// File: e0__diagram_8hpp.xml


// File: empty__lib_8cpp.xml


// File: exacthessian_8hpp.xml


// File: expand_8hpp.xml


// File: expression__tools_8hpp.xml


// File: external__function_8cpp.xml


// File: external__function_8hpp.xml


// File: external__function__internal_8cpp.xml


// File: external__function__internal_8hpp.xml


// File: fixed__step__integrator_8cpp.xml


// File: fixed__step__integrator_8hpp.xml


// File: fixed__step__integrator__internal_8cpp.xml


// File: fixed__step__integrator__internal_8hpp.xml


// File: function_8cpp.xml


// File: function_8hpp.xml


// File: function__internal_8cpp.xml


// File: function__internal_8hpp.xml


// File: functor_8cpp.xml


// File: functor_8hpp.xml


// File: functor__internal_8cpp.xml


// File: functor__internal_8hpp.xml


// File: generateCode_8hpp.xml


// File: generic__expression_8hpp.xml


// File: generic__expression__tools_8hpp.xml


// File: generic__matrix_8hpp.xml


// File: generic__matrix__tools_8hpp.xml


// File: generic__type_8cpp.xml


// File: generic__type_8hpp.xml


// File: generic__type__internal_8hpp.xml


// File: getnonzeros_8cpp.xml


// File: getnonzeros_8hpp.xml


// File: homotopy__nlp__internal_8cpp.xml


// File: homotopy__nlp__internal_8hpp.xml


// File: homotopy__nlp__solver_8cpp.xml


// File: homotopy__nlp__solver_8hpp.xml


// File: idas_8hpp.xml


// File: idas__integrator_8cpp.xml


// File: idas__integrator_8hpp.xml


// File: idas__internal_8cpp.xml


// File: idas__internal_8hpp.xml


// File: implicit__fixed__step__integrator_8cpp.xml


// File: implicit__fixed__step__integrator_8hpp.xml


// File: implicit__fixed__step__integrator__internal_8cpp.xml


// File: implicit__fixed__step__integrator__internal_8hpp.xml


// File: implicit__function_8cpp.xml


// File: implicit__function_8hpp.xml


// File: implicit__function__internal_8cpp.xml


// File: implicit__function__internal_8hpp.xml


// File: inner__prod_8cpp.xml


// File: inner__prod_8hpp.xml


// File: integration__tools_8cpp.xml


// File: integration__tools_8hpp.xml


// File: integrator_8cpp.xml


// File: integrator_8hpp.xml


// File: integrator__internal_8cpp.xml


// File: integrator__internal_8hpp.xml


// File: inverse_8cpp.xml


// File: inverse_8hpp.xml


// File: io__interface_8hpp.xml


// File: io__scheme_8cpp.xml


// File: io__scheme_8hpp.xml


// File: io__scheme__internal_8cpp.xml


// File: io__scheme__internal_8hpp.xml


// File: io__scheme__vector_8hpp.xml


// File: ipopt_8hpp.xml


// File: ipopt__internal_8cpp.xml


// File: ipopt__internal_8hpp.xml


// File: ipopt__nlp_8cpp.xml


// File: ipopt__nlp_8hpp.xml


// File: ipopt__solver_8cpp.xml


// File: ipopt__solver_8hpp.xml


// File: jacSparsity_8hpp.xml


// File: kinsol__internal_8cpp.xml


// File: kinsol__internal_8hpp.xml


// File: kinsol__solver_8cpp.xml


// File: kinsol__solver_8hpp.xml


// File: KinsolSolver_8hpp.xml


// File: knitro__internal_8cpp.xml


// File: knitro__internal_8hpp.xml


// File: knitro__solver_8cpp.xml


// File: knitro__solver_8hpp.xml


// File: lapack__lu__dense_8cpp.xml


// File: lapack__lu__dense_8hpp.xml


// File: lapack__qr__dense_8cpp.xml


// File: lapack__qr__dense_8hpp.xml


// File: limitPrinting_8hpp.xml


// File: limitPrinting__c_8hpp.xml


// File: linear__solver_8cpp.xml


// File: linear__solver_8hpp.xml


// File: linear__solver__internal_8cpp.xml


// File: linear__solver__internal_8hpp.xml


// File: LinearSolver_8hpp.xml


// File: lp__internal_8cpp.xml


// File: lp__internal_8hpp.xml


// File: lp__solver_8cpp.xml


// File: lp__solver_8hpp.xml


// File: main_8dox.xml


// File: matrix_8hpp.xml


// File: matrix__expand_8hpp.xml


// File: matrix__impl_8hpp.xml


// File: matrix__tools_8cpp.xml


// File: matrix__tools_8hpp.xml


// File: multiple__output_8cpp.xml


// File: multiple__output_8hpp.xml


// File: multiplication_8hpp.xml


// File: multiplication__impl_8hpp.xml


// File: mx_8cpp.xml


// File: mx_8hpp.xml


// File: mx__function_8cpp.xml


// File: mx__function_8hpp.xml


// File: mx__function__internal_8cpp.xml


// File: mx__function__internal_8hpp.xml


// File: mx__node_8cpp.xml


// File: mx__node_8hpp.xml


// File: mx__tools_8cpp.xml


// File: mx__tools_8hpp.xml


// File: newton__implicit__internal_8cpp.xml


// File: newton__implicit__internal_8hpp.xml


// File: newton__implicit__solver_8cpp.xml


// File: newton__implicit__solver_8hpp.xml


// File: NewtonImplicitSolver_8hpp.xml


// File: nlp__implicit__internal_8cpp.xml


// File: nlp__implicit__internal_8hpp.xml


// File: nlp__implicit__solver_8cpp.xml


// File: nlp__implicit__solver_8hpp.xml


// File: nlp__qp__internal_8cpp.xml


// File: nlp__qp__internal_8hpp.xml


// File: nlp__qp__solver_8cpp.xml


// File: nlp__qp__solver_8hpp.xml


// File: nlp__solver_8cpp.xml


// File: nlp__solver_8hpp.xml


// File: nlp__solver__internal_8cpp.xml


// File: nlp__solver__internal_8hpp.xml


// File: NLPImplicitSolver_8hpp.xml


// File: nonzeros_8hpp.xml


// File: norm_8cpp.xml


// File: norm_8hpp.xml


// File: nullspace_8cpp.xml


// File: nullspace_8hpp.xml


// File: nullspace__internal_8cpp.xml


// File: nullspace__internal_8hpp.xml


// File: ocp__solver_8cpp.xml


// File: ocp__solver_8hpp.xml


// File: ocp__solver__internal_8cpp.xml


// File: ocp__solver__internal_8hpp.xml


// File: old__collocation__integrator_8cpp.xml


// File: old__collocation__integrator_8hpp.xml


// File: old__collocation__integrator__internal_8cpp.xml


// File: old__collocation__integrator__internal_8hpp.xml


// File: ooqp__internal_8cpp.xml


// File: ooqp__internal_8hpp.xml


// File: ooqp__solver_8cpp.xml


// File: ooqp__solver_8hpp.xml


// File: options__functionality_8cpp.xml


// File: options__functionality_8hpp.xml


// File: parallelizer_8cpp.xml


// File: casadi_2core_2function_2parallelizer_8hpp.xml


// File: docs_2api_2examples_2Function_2parallelizer_8hpp.xml


// File: parallelizer__internal_8cpp.xml


// File: parallelizer__internal_8hpp.xml


// File: polynomial_8cpp.xml


// File: polynomial_8hpp.xml


// File: printable__object_8cpp.xml


// File: printable__object_8hpp.xml


// File: printme_8hpp.xml


// File: profiling_8cpp.xml


// File: profiling_8hpp.xml


// File: psd__indef__dple__internal_8cpp.xml


// File: psd__indef__dple__internal_8hpp.xml


// File: psd__indef__dple__solver_8cpp.xml


// File: psd__indef__dple__solver_8hpp.xml


// File: qcqp__qp__internal_8cpp.xml


// File: qcqp__qp__internal_8hpp.xml


// File: qcqp__qp__solver_8cpp.xml


// File: qcqp__qp__solver_8hpp.xml


// File: qcqp__solver_8cpp.xml


// File: qcqp__solver_8hpp.xml


// File: qcqp__solver__internal_8cpp.xml


// File: qcqp__solver__internal_8hpp.xml


// File: qp__lp__internal_8cpp.xml


// File: qp__lp__internal_8hpp.xml


// File: qp__lp__solver_8cpp.xml


// File: qp__lp__solver_8hpp.xml


// File: qp__solver_8cpp.xml


// File: qp__solver_8hpp.xml


// File: qp__solver__internal_8cpp.xml


// File: qp__solver__internal_8hpp.xml


// File: qp__stabilizer_8cpp.xml


// File: qp__stabilizer_8hpp.xml


// File: qp__stabilizer__internal_8cpp.xml


// File: qp__stabilizer__internal_8hpp.xml


// File: qpoases__internal_8cpp.xml


// File: qpoases__internal_8hpp.xml


// File: qpoases__solver_8cpp.xml


// File: qpoases__solver_8hpp.xml


// File: range_8hpp.xml


// File: reshape_8cpp.xml


// File: reshape_8hpp.xml


// File: rk__integrator_8cpp.xml


// File: rk__integrator_8hpp.xml


// File: rk__integrator__internal_8cpp.xml


// File: rk__integrator__internal_8hpp.xml


// File: runtime_8hpp.xml


// File: scaled__nlp__internal_8cpp.xml


// File: scaled__nlp__internal_8hpp.xml


// File: scaled__nlp__solver_8cpp.xml


// File: scaled__qp__internal_8hpp.xml


// File: schemes__helpers_8hpp.xml


// File: schemes__metadata_8cpp.xml


// File: schemes__metadata_8hpp.xml


// File: scpgen_8cpp.xml


// File: scpgen_8hpp.xml


// File: scpgen__internal_8cpp.xml


// File: scpgen__internal_8hpp.xml


// File: sdp__sdqp__internal_8cpp.xml


// File: sdp__sdqp__internal_8hpp.xml


// File: sdp__sdqp__solver_8cpp.xml


// File: sdp__sdqp__solver_8hpp.xml


// File: sdp__socp__internal_8cpp.xml


// File: sdp__socp__internal_8hpp.xml


// File: sdp__socp__solver_8cpp.xml


// File: sdp__socp__solver_8hpp.xml


// File: sdp__solver_8cpp.xml


// File: sdp__solver_8hpp.xml


// File: sdp__solver__internal_8cpp.xml


// File: sdp__solver__internal_8hpp.xml


// File: sdqp__solver_8cpp.xml


// File: sdqp__solver_8hpp.xml


// File: sdqp__solver__internal_8cpp.xml


// File: sdqp__solver__internal_8hpp.xml


// File: set__sparse_8cpp.xml


// File: set__sparse_8hpp.xml


// File: setnonzeros_8hpp.xml


// File: setnonzeros__impl_8hpp.xml


// File: shared__object_8cpp.xml


// File: shared__object_8hpp.xml


// File: simple__homotopy__nlp__internal_8cpp.xml


// File: simple__homotopy__nlp__internal_8hpp.xml


// File: simple__homotopy__nlp__solver_8cpp.xml


// File: simple__homotopy__nlp__solver_8hpp.xml


// File: simple__indef__dple__internal_8cpp.xml


// File: simple__indef__dple__internal_8hpp.xml


// File: simple__indef__dple__solver_8cpp.xml


// File: simple__indef__dple__solver_8hpp.xml


// File: simulator_8cpp.xml


// File: casadi_2core_2function_2simulator_8hpp.xml


// File: docs_2api_2examples_2integrators_2simulator_8hpp.xml


// File: simulator__internal_8cpp.xml


// File: simulator__internal_8hpp.xml


// File: slice_8cpp.xml


// File: slice_8hpp.xml


// File: slicot__tools_8cpp.xml
%feature("docstring") casadi::mb03vy_ "
[INTERNAL] ";
%feature("docstring") casadi::mb03wd_ "[INTERNAL] ";

%feature("docstring") casadi::mb03vd_ "[INTERNAL] ";


// File: slicot__tools_8hpp.xml


// File: snopt__internal_8cpp.xml


// File: snopt__internal_8hpp.xml


// File: snopt__solver_8cpp.xml


// File: snopt__solver_8hpp.xml


// File: socp__qcqp__internal_8cpp.xml


// File: socp__qcqp__internal_8hpp.xml


// File: socp__qcqp__solver_8cpp.xml


// File: socp__qcqp__solver_8hpp.xml


// File: socp__solver_8cpp.xml


// File: socp__solver_8hpp.xml


// File: socp__solver__internal_8cpp.xml


// File: socp__solver__internal_8hpp.xml


// File: solve_8hpp.xml


// File: solve__impl_8hpp.xml


// File: sparse__storage_8hpp.xml


// File: sparse__storage__impl_8hpp.xml


// File: sparsity_8cpp.xml


// File: sparsity_8hpp.xml


// File: sparsity__internal_8cpp.xml


// File: sparsity__internal_8hpp.xml


// File: sparsity__tools_8cpp.xml


// File: sparsity__tools_8hpp.xml


// File: split_8cpp.xml


// File: split_8hpp.xml


// File: sqic__internal_8cpp.xml


// File: sqic__internal_8hpp.xml


// File: sqic__solver_8cpp.xml


// File: sqic__solver_8hpp.xml


// File: sqp__internal_8cpp.xml


// File: sqp__internal_8hpp.xml


// File: sqp__method_8cpp.xml


// File: sqp__method_8hpp.xml


// File: ssym_8hpp.xml


// File: stabilized__qp__solver_8cpp.xml


// File: stabilized__qp__solver_8hpp.xml


// File: stabilized__qp__solver__internal_8cpp.xml


// File: stabilized__qp__solver__internal_8hpp.xml


// File: stabilized__sqic__internal_8cpp.xml


// File: stabilized__sqic__internal_8hpp.xml


// File: stabilized__sqic__solver_8cpp.xml


// File: stabilized__sqic__solver_8hpp.xml


// File: stabilized__sqp__internal_8cpp.xml


// File: stabilized__sqp__internal_8hpp.xml


// File: stabilized__sqp__method_8cpp.xml


// File: stabilized__sqp__method_8hpp.xml


// File: std__vector__tools_8cpp.xml


// File: std__vector__tools_8hpp.xml


// File: stronglyConnectedComponents_8hpp.xml


// File: subassign_8cpp.xml


// File: subassign_8hpp.xml


// File: submatrix_8hpp.xml


// File: subref_8cpp.xml


// File: subref_8hpp.xml


// File: sundials__integrator_8cpp.xml


// File: sundials__integrator_8hpp.xml


// File: sundials__internal_8cpp.xml


// File: sundials__internal_8hpp.xml


// File: sx__element_8cpp.xml


// File: sx__element_8hpp.xml


// File: sx__function_8cpp.xml


// File: sx__function_8hpp.xml


// File: sx__function__internal_8cpp.xml


// File: sx__function__internal_8hpp.xml


// File: sx__node_8cpp.xml


// File: sx__node_8hpp.xml


// File: sx__tools_8cpp.xml


// File: sx__tools_8hpp.xml


// File: SXaddition_8hpp.xml


// File: SXFunction__constr__oct_8hpp.xml


// File: SXFunction__constr__py_8hpp.xml


// File: symbolic__mx_8cpp.xml


// File: symbolic__mx_8hpp.xml


// File: symbolic__nlp_8cpp.xml


// File: symbolic__nlp_8hpp.xml


// File: symbolic__ocp_8cpp.xml


// File: symbolic__ocp_8hpp.xml


// File: symbolic__qr_8cpp.xml


// File: symbolic__qr_8hpp.xml


// File: symbolic__qr__internal_8cpp.xml


// File: symbolic__qr__internal_8hpp.xml


// File: symbolic__sx_8hpp.xml


// File: symbolicsubstitution_8hpp.xml


// File: tolerance_8hpp.xml


// File: transpose_8cpp.xml


// File: transpose_8hpp.xml


// File: unary__mx_8cpp.xml


// File: unary__mx_8hpp.xml


// File: unary__sx_8hpp.xml


// File: variable_8cpp.xml


// File: variable_8hpp.xml


// File: variable__internal_8cpp.xml


// File: veccat_8hpp.xml


// File: weak__ref_8cpp.xml


// File: weak__ref_8hpp.xml


// File: worhp__internal_8cpp.xml


// File: worhp__internal_8hpp.xml


// File: worhp__solver_8cpp.xml


// File: worhp__solver_8hpp.xml


// File: wsnopt_8hpp.xml
%feature("docstring") sninit_  "
[INTERNAL] ";
%feature("docstring") snseti_  "[INTERNAL] ";

%feature("docstring") snsetr_  "[INTERNAL] ";

%feature("docstring") snset_  "[INTERNAL] ";

%feature("docstring") snoptc_  "[INTERNAL] ";

%feature("docstring") snmemb_  "[INTERNAL] ";


// File: wsqic_8cpp.xml
%feature("docstring") main  "
";


// File: wsqic_8hpp.xml
%feature("docstring") sqicSolve  "
[INTERNAL] ";
%feature("docstring") sqicSolveStabilized  "[INTERNAL] ";

%feature("docstring") sqic  "[INTERNAL] ";

%feature("docstring") sqicDestroy  "[INTERNAL] ";


// File: x__function__internal_8hpp.xml


// File: xml__node_8cpp.xml


// File: xml__node_8hpp.xml


// File: group__DPLE__doc.xml


// File: group__HomotopyNLPSolver__doc.xml


// File: group__ImplicitFunction__doc.xml


// File: group__DAE__doc.xml


// File: group__iname.xml


// File: group__oname.xml


// File: group__iind.xml


// File: group__oind.xml


// File: group__Tvalset.xml


// File: group__Tvalget.xml


// File: group__LinearSolver__doc.xml


// File: group__LPSolver__doc.xml


// File: group__NLPSolver__doc.xml


// File: group__Nullspace__doc.xml


// File: group__QCQPSolver__doc.xml


// File: group__QPSolver__doc.xml


// File: group__SDPSolver__doc.xml


// File: group__SDQPSolver__doc.xml


// File: group__SOCPSolver__doc.xml


// File: group__StabilizedQPSolver__doc.xml


// File: group__expression__tools.xml


// File: group__IdasIntegrator__doc.xml


// File: group__scheme__IntegratorOutput.xml


// File: group__scheme__QCQPSolverInput.xml


// File: group__scheme__HessLagOutput.xml


// File: group__scheme__LinsolInput.xml


// File: group__scheme__SOCPOutput.xml


// File: group__scheme__NLPSolverOutput.xml


// File: group__scheme__SDPInput.xml


// File: group__scheme__LPSolverInput.xml


// File: group__scheme__RDAEInput.xml


// File: group__scheme__NLPOutput.xml


// File: group__scheme__DPLEInput.xml


// File: group__scheme__SDPOutput.xml


// File: group__scheme__NLPSolverInput.xml


// File: group__scheme__DAEInput.xml


// File: group__scheme__DAEOutput.xml


// File: group__scheme__InputOutputScheme.xml


// File: group__scheme__StabilizedQPSolverInput.xml


// File: group__scheme__GradFInput.xml


// File: group__scheme__LPSolverOutput.xml


// File: group__scheme__GradFOutput.xml


// File: group__scheme__SDQPInput.xml


// File: group__scheme__OCPInput.xml


// File: group__scheme__QCQPSolverOutput.xml


// File: group__scheme__MayerInput.xml


// File: group__scheme__ControlledDAEInput.xml


// File: group__scheme__NLPInput.xml


// File: group__scheme__IntegratorInput.xml


// File: group__scheme__QPSolverInput.xml


// File: group__scheme__OCPOutput.xml


// File: group__scheme__RDAEOutput.xml


// File: group__scheme__JacGOutput.xml


// File: group__scheme__LinsolOutput.xml


// File: group__scheme__SDQPOutput.xml


// File: group__scheme__ControlSimulatorInput.xml


// File: group__scheme__SOCPInput.xml


// File: group__scheme__JacGInput.xml


// File: group__scheme__DPLEOutput.xml


// File: group__scheme__HessLagInput.xml


// File: group__scheme__QPSolverOutput.xml


// File: group__scheme__HNLPInput.xml


// File: chapter1.xml


// File: chapter2.xml


// File: chapter3.xml


// File: chapter4.xml


// File: chapter5.xml


// File: chapter6.xml


// File: dir_a242f0f31177b4ee0e0f2869a68661e2.xml


// File: dir_173fa14f8112bf6d4fa5fb60c663b079.xml


// File: dir_cc00533f663a868a74a94bae6d243fa8.xml


// File: dir_3ae11b6e1cd218aed6bbf0b97d0cf4d1.xml


// File: dir_84ec18459fb5686aa61a50c9a4a5f1ce.xml


// File: dir_165538d1629d63b540b717a0a8f8d17c.xml


// File: dir_b67f2d3e502497e52a0860566e264050.xml


// File: dir_2211bd5fdd011119a318ab290df1d2d6.xml


// File: dir_c6bf31233a1f0eb03dbc4c2e0b88ebf9.xml


// File: dir_fc8898f6998d6b3cefcb64c4ce7ea1c4.xml


// File: dir_2acbf2200173536f11c2515b42b2be1c.xml


// File: dir_97f17b870f201e193796f88aa8b24ee7.xml


// File: dir_b0fbc30274a97f995867282301b5a22c.xml


// File: dir_2fcc9b76d63d907023752974d9503363.xml


// File: dir_674186e89c51fd5db44b7bb8b4bfd175.xml


// File: dir_6b24c408f936f5e3fad85af85fac13be.xml


// File: dir_dbed38ee933aae81b6ffa699ce6b0d5a.xml


// File: dir_0d90fb8f8b911bb67f5baffe35d6baec.xml


// File: dir_d560fb3fdf7c7d0fd11fcef22350e515.xml


// File: dir_2d4c4b22cf4ab2426dc22dcaf8e55868.xml


// File: dir_2ad7570a4726f50d9009d41ebbe56c46.xml


// File: dir_c3317fe2a063fec6069fcec6e906343a.xml


// File: dir_62b1d21e3c79c65cf07537ce621f8931.xml


// File: dir_35c4f5a62eb3f9b26d6fc9bafe9412e0.xml


// File: dir_dee56dc1f1f085e33b8d83efe818a164.xml


// File: dir_a0db0368355cb586cba4163f7f6a5add.xml


// File: dir_06b07da53372e68ec9ec3f325c8c4e88.xml


// File: dir_0e38855d9854873885416e0db777a031.xml


// File: dir_c7851ef3eb1eedcf1931ca03c2b2de61.xml


// File: dir_4c54b8644cdb97524ad2593db88f43f8.xml


// File: dir_19f99a3a6b2e15dd5d3dc3717aef760f.xml


// File: dir_32cb5448079888161100d95b01b6198d.xml


// File: dir_36edc65709980d217f100f7aceab18f7.xml


// File: dir_b35908272f9e1123cc1a956ba5b2e3aa.xml


// File: dir_4d46dafef57ae63a601f2959a12876ee.xml


// File: dir_32807da43d094e5518f780a9c1b04df2.xml


// File: dir_8d74aeb32c16fa9fd07602045437f1d6.xml


// File: algebra_2LinearSolver_8py-example.xml


// File: Function_2customfunction_8py-example.xml


// File: Function_2customfunction_c_8cc-example.xml


// File: Function_2expand_8py-example.xml


// File: Function_2parallelizer_8py-example.xml


// File: integrators_2controlsimulator_8py-example.xml


// File: integrators_2idas_8py-example.xml


// File: integrators_2simulator_8py-example.xml


// File: integrators_2tolerance_8py-example.xml


// File: matrix_2coloring_8py-example.xml


// File: matrix_2dulmageMendelsohn_8py-example.xml


// File: matrix_2stronglyConnectedComponents_8py-example.xml


// File: misc_2all_8cc-example.xml


// File: misc_2assertion_8py-example.xml


// File: misc_2dotdraw_8py-example.xml


// File: misc_2limitPrinting_8py-example.xml


// File: misc_2limitPrinting_c_8cc-example.xml


// File: misc_2printme_8py-example.xml


// File: misc_2range_8cc-example.xml


// File: MX_2createParent_8py-example.xml


// File: MX_2matrix_expand_8py-example.xml


// File: MX_2veccat_8py-example.xml


// File: solvers_2callback_8py-example.xml


// File: solvers_2exacthessian_8py-example.xml


// File: solvers_2ipopt_8py-example.xml


// File: solvers_2KinsolSolver_8py-example.xml


// File: solvers_2NewtonImplicitSolver_8py-example.xml


// File: solvers_2NLPImplicitSolver_8py-example.xml


// File: SX_2countNodes_8py-example.xml


// File: SX_2generateCode_8py-example.xml


// File: SX_2jacSparsity_8py-example.xml


// File: SX_2ssym_8py-example.xml


// File: SX_2SXaddition_8cc-example.xml


// File: SX_2SXFunction_constr_oct_8m-example.xml


// File: SX_2SXFunction_constr_py_8py-example.xml


// File: SX_2symbolicsubstitution_8py-example.xml

