
// File: index.xml

// File: classcasadi_1_1Assertion.xml
%feature("docstring")  casadi::MXNode::getNorm2() const  " [INTERNAL]
Spectral norm.

";

%feature("docstring")  casadi::MXNode::getNormInf() const  " [INTERNAL]
Infinity norm.

";

%feature("docstring")  casadi::MXNode::getValue() const  " [INTERNAL]  Get
the value (only for scalar constant nodes)

";

%feature("docstring")  casadi::MXNode::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied) " [INTERNAL]  Deep copy
data members.

";

%feature("docstring")  casadi::MXNode::getReshape(const Sparsity &sp) const
" [INTERNAL]   Reshape.

";

%feature("docstring")  casadi::MXNode::sameOpAndDeps(const MXNode *node, int
depth) const  " [INTERNAL]  Checks if two nodes have the same operation and
have equivalent dependencies up to a given depth.

";

%feature("docstring")  casadi::Assertion::evaluateSX(const SXPtrV &input,
SXPtrV &output, std::vector< int > &itmp, std::vector< SXElement > &rtmp) "
[INTERNAL]  Evaluate the function symbolically (SX)

";

%feature("docstring")  casadi::MXNode::getInnerProd(const MX &y) const  "
[INTERNAL]  Inner product.

";

%feature("docstring")  casadi::Assertion::evaluateD(const DMatrixPtrV
&input, DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double >
&rtmp) " [INTERNAL]  Evaluate the function numerically.

";

%feature("docstring")  casadi::Assertion::printPart(std::ostream &stream,
int part) const  " [INTERNAL]  Print a part of the expression */.

";

%feature("docstring")  casadi::MXNode::getAssertion(const MX &y, const
std::string &fail_message="") const  " [INTERNAL]   Assertion.

";

%feature("docstring")  casadi::MXNode::mapping() const  " [INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring")  casadi::MXNode::addDependency(const MX &dep) "
[INTERNAL]  Add a dependency.

";

%feature("docstring")  casadi::MXNode::getGetNonzeros(const Sparsity &sp,
const std::vector< int > &nz) const  " [INTERNAL]  Get the nonzeros of
matrix.

";

%feature("docstring")  casadi::MXNode::getHorzsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a horizontal split node.

";

%feature("docstring")  casadi::MXNode::numInplace() const  " [INTERNAL]  Can
the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring")  casadi::MXNode::sparsity() const  " [INTERNAL]  Get
the sparsity.

";

%feature("docstring")  casadi::MXNode::sparsity(int oind) const  "
[INTERNAL]  Get the sparsity of output oind.

";

%feature("docstring")  casadi::SharedObjectNode::getCount() const  "
[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::MXNode::isZero() const  " [INTERNAL]  Check
if identically zero.

";

%feature("docstring")  casadi::MXNode::isUnaryOp() const  " [INTERNAL]
Check if unary operation.

";

%feature("docstring")  casadi::MXNode::shape() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getVertsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a vertical split node (vectors
only)

";

%feature("docstring")  casadi::SharedObjectNode::weak() "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring")  casadi::SharedObjectNode::init() "[INTERNAL]
Initialize the object.

";

%feature("docstring")  casadi::MXNode::getSubRef(const Slice &i, const Slice
&j) const  " [INTERNAL]  Get submatrix reference.

";

%feature("docstring")  casadi::SharedObjectNode::assertInit() const  "
[INTERNAL]  Assert that the object has been initialized.

";

%feature("docstring") casadi::Assertion::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring")  casadi::MXNode::repr(std::ostream &stream) const  "
[INTERNAL]  Print a representation.

";

%feature("docstring")  casadi::MXNode::getNumOutputs() const  " [INTERNAL]
Number of outputs.

";

%feature("docstring")  casadi::SharedObjectNode::isInit() const  "
[INTERNAL]  Check if the object has been initialized.

";

%feature("docstring")  casadi::MXNode::hasDep() const  " [INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring")  casadi::MXNode::getBinarySwitch(int op, const MX &y)
const  " [INTERNAL]  Get a binary operation operation.

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, const std::vector< int > &onz, bool add=false) "
[INTERNAL]  Assign nonzeros (mapping matrix)

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, bool add=false) " [INTERNAL]  Assign nonzeros
(mapping matrix), output indices sequential.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep) "
[INTERNAL]  Set unary dependency.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2) " [INTERNAL]  Set binary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2, const MX &dep3) " [INTERNAL]  Set ternary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const std::vector< MX
> &dep) " [INTERNAL]  Set multiple dependencies.

";

%feature("docstring")  casadi::MXNode::generateOperation(std::ostream
&stream, const std::vector< std::string > &arg, const std::vector<
std::string > &res, CodeGenerator &gen) const  " [INTERNAL]  Generate code
for the operation.

";

%feature("docstring")  casadi::MXNode::setSparsity(const Sparsity &sparsity)
" [INTERNAL]  Set the sparsity.

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) const  " [INTERNAL]
dependencies - functions that have to be evaluated before this one

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getNormF() const  " [INTERNAL]
Frobenius norm.

";

%feature("docstring")  casadi::MXNode::getInverse() const  " [INTERNAL]
Inverse.

";

%feature("docstring")  casadi::MXNode::numel() const  " [INTERNAL]  Get
shape.

";

%feature("docstring")  casadi::MXNode::isValue(double val) const  "
[INTERNAL]  Check if a certain value.

";

%feature("docstring")  casadi::MXNode::getSolve(const MX &r, bool tr, const
LinearSolver &linear_solver) const  " [INTERNAL]   Solve a system of linear
equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring")  casadi::MXNode::getNorm1() const  " [INTERNAL]
1-norm

";

%feature("docstring")  casadi::MXNode::isNonLinear() "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring")  casadi::Assertion::clone() const  " [INTERNAL]  Clone
function.

";

%feature("docstring")  casadi::Assertion::propagateSparsity(DMatrixPtrV
&input, DMatrixPtrV &output, bool fwd) " [INTERNAL]  Propagate sparsity, no
work.

";

%feature("docstring")  casadi::MXNode::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp,
bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring") casadi::Assertion::Assertion(const MX &x, const MX &y,
const std::string &s) " [INTERNAL]  Constructor.

";

%feature("docstring") casadi::Assertion::~Assertion "[INTERNAL]
Destructor.

";

%feature("docstring")  casadi::MXNode::isOne() const  " [INTERNAL]  Check if
identically one.

";

%feature("docstring")  casadi::MXNode::getName() const  " [INTERNAL]  Get
the name.

";

%feature("docstring")  casadi::MXNode::getHorzcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a horizontal concatenation node.

";

%feature("docstring")  casadi::Assertion::evaluateMX(const MXPtrV &input,
MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV
&adjSeed, MXPtrVV &adjSens, bool output_given) " [INTERNAL]  Evaluate the
function symbolically ( MX)

";

%feature("docstring")  casadi::MXNode::evaluateMX(const MXPtrV &input,
MXPtrV &output) " [INTERNAL]  Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring")  casadi::MXNode::nTmp(size_t &ni, size_t &nr) "
[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::MXNode::getOutput(int oind) const  "
[INTERNAL]  Get an output.

";

%feature("docstring")  casadi::MXNode::isMultipleOutput() const  "
[INTERNAL]  Check if a multiple output node.

";

%feature("docstring")  casadi::MXNode::isIdentity() const  " [INTERNAL]
Check if identity matrix.

";

%feature("docstring")  casadi::MXNode::getSetSparse(const Sparsity &sp)
const  " [INTERNAL]  Create set sparse.

";

%feature("docstring") casadi::Assertion "[INTERNAL]   Assertion.

Joris Gillis

C++ includes: assertion.hpp ";

%feature("docstring")  casadi::MXNode::getDeterminant() const  " [INTERNAL]
Determinant.

";

%feature("docstring")  casadi::MXNode::getMatrixValue() const  " [INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring")  casadi::MXNode::getFunctionOutput() const  "
[INTERNAL]  Get function output.

";

%feature("docstring")  casadi::MXNode::getFunction() "[INTERNAL]  Get
function reference.

";

%feature("docstring")  casadi::MXNode::getFunction() const  " [INTERNAL]
Get function reference.

";

%feature("docstring")  casadi::MXNode::isBinaryOp() const  " [INTERNAL]
Check if binary operation.

";

%feature("docstring")  casadi::MXNode::getVertcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a vertical concatenation node (vectors only)

";

%feature("docstring")  casadi::MXNode::isEqual(const MXNode *node, int
depth) const  " [INTERNAL]  Check if two nodes are equivalent up to a given
depth.

";

%feature("docstring")  casadi::MXNode::getSubAssign(const MX &y, const Slice
&i, const Slice &j) const  " [INTERNAL]  Get submatrix assignment.

";

%feature("docstring")  casadi::MXNode::getUnary(int op) const  " [INTERNAL]
Get a unary operation.

";

%feature("docstring")  casadi::MXNode::size() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getFunctionInput() const  "
[INTERNAL]  Get function input.

";

%feature("docstring")  casadi::Assertion::getOp() const  " [INTERNAL]  Get
the operation.

";

%feature("docstring")  casadi::MXNode::getAddNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Add the nonzeros of a matrix to
another matrix.

";

%feature("docstring")  casadi::MXNode::getMultiplication(const MX &y, const
Sparsity &sp_z=Sparsity()) const  " [INTERNAL]   Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring")  casadi::MXNode::simplifyMe(MX &ex) " [INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring")  casadi::MXNode::isOutputNode() const  " [INTERNAL]
Check if evaluation output.

";

%feature("docstring")  casadi::MXNode::getTranspose() const  " [INTERNAL]
Transpose.

";

%feature("docstring")  casadi::MXNode::getBinary(int op, const MX &y, bool
scX, bool scY) const  " [INTERNAL]  Get a binary operation operation
(matrix-matrix)

";

%feature("docstring")  casadi::MXNode::getSetNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Assign the nonzeros of a matrix
to another matrix.

";

%feature("docstring")  casadi::MXNode::size1() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::size2() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream) const  "
[INTERNAL]  Print a description.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream, long
&remaining_calls) const  " [INTERNAL]  Print expression (make sure number of
calls is not exceeded)

";

%feature("docstring")  casadi::MXNode::ndep() const  " [INTERNAL]  Number of
dependencies.

";


// File: structcasadi_1_1BinaryChecker.xml
%feature("docstring") casadi::BinaryChecker "[INTERNAL]  Is the operation
binary as opposed to unary

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryChecker_3_01OP__ADD_01_4.xml
%feature("docstring") casadi::BinaryChecker< OP_ADD > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryChecker_3_01OP__AND_01_4.xml
%feature("docstring") casadi::BinaryChecker< OP_AND > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryChecker_3_01OP__ATAN2_01_4.xml
%feature("docstring") casadi::BinaryChecker< OP_ATAN2 > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryChecker_3_01OP__CONSTPOW_01_4.xml
%feature("docstring") casadi::BinaryChecker< OP_CONSTPOW > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryChecker_3_01OP__COPYSIGN_01_4.xml
%feature("docstring") casadi::BinaryChecker< OP_COPYSIGN > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryChecker_3_01OP__DIV_01_4.xml
%feature("docstring") casadi::BinaryChecker< OP_DIV > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryChecker_3_01OP__EQ_01_4.xml
%feature("docstring") casadi::BinaryChecker< OP_EQ > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryChecker_3_01OP__FMAX_01_4.xml
%feature("docstring") casadi::BinaryChecker< OP_FMAX > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryChecker_3_01OP__FMIN_01_4.xml
%feature("docstring") casadi::BinaryChecker< OP_FMIN > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryChecker_3_01OP__IF__ELSE__ZERO_01_4.xml
%feature("docstring") casadi::BinaryChecker< OP_IF_ELSE_ZERO > " [INTERNAL]
C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryChecker_3_01OP__MUL_01_4.xml
%feature("docstring") casadi::BinaryChecker< OP_MUL > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryChecker_3_01OP__NE_01_4.xml
%feature("docstring") casadi::BinaryChecker< OP_NE > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryChecker_3_01OP__OR_01_4.xml
%feature("docstring") casadi::BinaryChecker< OP_OR > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryChecker_3_01OP__POW_01_4.xml
%feature("docstring") casadi::BinaryChecker< OP_POW > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryChecker_3_01OP__PRINTME_01_4.xml
%feature("docstring") casadi::BinaryChecker< OP_PRINTME > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryChecker_3_01OP__SUB_01_4.xml
%feature("docstring") casadi::BinaryChecker< OP_SUB > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: classcasadi_1_1BinaryMX.xml
%feature("docstring")  casadi::MXNode::getNormInf() const  " [INTERNAL]
Infinity norm.

";

%feature("docstring")  casadi::MXNode::isMultipleOutput() const  "
[INTERNAL]  Check if a multiple output node.

";

%feature("docstring")  casadi::MXNode::getNormF() const  " [INTERNAL]
Frobenius norm.

";

%feature("docstring")  casadi::SharedObjectNode::isInit() const  "
[INTERNAL]  Check if the object has been initialized.

";

%feature("docstring")  casadi::SharedObjectNode::init() "[INTERNAL]
Initialize the object.

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) const  " [INTERNAL]
dependencies - functions that have to be evaluated before this one

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::addDependency(const MX &dep) "
[INTERNAL]  Add a dependency.

";

%feature("docstring")  casadi::MXNode::getOutput(int oind) const  "
[INTERNAL]  Get an output.

";

%feature("docstring")  casadi::BinaryMX< ScX, ScY
>::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, bool fwd) "
[INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp,
bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::BinaryMX< ScX, ScY >::printPart(std::ostream
&stream, int part) const  " [INTERNAL]  Print a part of the expression.

";

%feature("docstring")  casadi::MXNode::getName() const  " [INTERNAL]  Get
the name.

";

%feature("docstring")  casadi::MXNode::getNorm2() const  " [INTERNAL]
Spectral norm.

";

%feature("docstring")  casadi::MXNode::size2() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::isIdentity() const  " [INTERNAL]
Check if identity matrix.

";

%feature("docstring")  casadi::MXNode::getDeterminant() const  " [INTERNAL]
Determinant.

";

%feature("docstring")  casadi::BinaryMX< ScX, ScY >::getOp() const  "
[INTERNAL]  Get the operation.

";

%feature("docstring")  casadi::MXNode::getHorzcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a horizontal concatenation node.

";

%feature("docstring")  casadi::MXNode::sameOpAndDeps(const MXNode *node, int
depth) const  " [INTERNAL]  Checks if two nodes have the same operation and
have equivalent dependencies up to a given depth.

";

%feature("docstring") casadi::BinaryMX::~BinaryMX "[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::MXNode::getVertsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a vertical split node (vectors
only)

";

%feature("docstring")  casadi::MXNode::getTranspose() const  " [INTERNAL]
Transpose.

";

%feature("docstring")  casadi::BinaryMX< ScX, ScY >::evaluateD(const
DMatrixPtrV &input, DMatrixPtrV &output, std::vector< int > &itmp,
std::vector< double > &rtmp) " [INTERNAL]  Evaluate the function
numerically.

";

%feature("docstring")  casadi::MXNode::getNorm1() const  " [INTERNAL]
1-norm

";

%feature("docstring")  casadi::BinaryMX< ScX, ScY >::evaluateMX(const MXPtrV
&input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const
MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given) " [INTERNAL]
Evaluate the function symbolically ( MX)

";

%feature("docstring")  casadi::MXNode::evaluateMX(const MXPtrV &input,
MXPtrV &output) " [INTERNAL]  Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring")  casadi::MXNode::isUnaryOp() const  " [INTERNAL]
Check if unary operation.

";

%feature("docstring")  casadi::MXNode::getHorzsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a horizontal split node.

";

%feature("docstring")  casadi::MXNode::getSubRef(const Slice &i, const Slice
&j) const  " [INTERNAL]  Get submatrix reference.

";

%feature("docstring")  casadi::MXNode::getValue() const  " [INTERNAL]  Get
the value (only for scalar constant nodes)

";

%feature("docstring")  casadi::SharedObjectNode::weak() "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring")  casadi::BinaryMX< ScX, ScY >::isEqual(const MXNode
*node, int depth) const  " [INTERNAL]  Check if two nodes are equivalent up
to a given depth.

";

%feature("docstring")  casadi::MXNode::setSparsity(const Sparsity &sparsity)
" [INTERNAL]  Set the sparsity.

";

%feature("docstring")  casadi::MXNode::isOne() const  " [INTERNAL]  Check if
identically one.

";

%feature("docstring")  casadi::BinaryMX< ScX, ScY >::getBinary(int op, const
MX &y, bool scX, bool scY) const  " [INTERNAL]  Get a binary operation
operation.

";

%feature("docstring")  casadi::MXNode::getBinarySwitch(int op, const MX &y)
const  " [INTERNAL]  Get a binary operation operation.

";

%feature("docstring")  casadi::BinaryMX< ScX, ScY >::clone() const  "
[INTERNAL]  Clone function.

";

%feature("docstring")  casadi::MXNode::size() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::repr(std::ostream &stream) const  "
[INTERNAL]  Print a representation.

";

%feature("docstring")  casadi::SharedObjectNode::assertInit() const  "
[INTERNAL]  Assert that the object has been initialized.

";

%feature("docstring")  casadi::MXNode::isValue(double val) const  "
[INTERNAL]  Check if a certain value.

";

%feature("docstring")  casadi::MXNode::isZero() const  " [INTERNAL]  Check
if identically zero.

";

%feature("docstring")  casadi::BinaryMX< ScX, ScY >::evaluateSX(const SXPtrV
&input, SXPtrV &output, std::vector< int > &itmp, std::vector< SXElement >
&rtmp) " [INTERNAL]  Evaluate the function symbolically (SX)

";

%feature("docstring")  casadi::MXNode::nTmp(size_t &ni, size_t &nr) "
[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring") casadi::BinaryMX< ScX, ScY >::BinaryMX(Operation op,
const MX &x, const MX &y) " [INTERNAL]  Constructor.

";

%feature("docstring")  casadi::MXNode::size1() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getFunction() "[INTERNAL]  Get
function reference.

";

%feature("docstring")  casadi::MXNode::getFunction() const  " [INTERNAL]
Get function reference.

";

%feature("docstring")  casadi::MXNode::numel() const  " [INTERNAL]  Get
shape.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream) const  "
[INTERNAL]  Print a description.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream, long
&remaining_calls) const  " [INTERNAL]  Print expression (make sure number of
calls is not exceeded)

";

%feature("docstring")  casadi::BinaryMX< ScX, ScY
>::generateOperation(std::ostream &stream, const std::vector< std::string >
&arg, const std::vector< std::string > &res, CodeGenerator &gen) const  "
[INTERNAL]  Generate code for the operation.

";

%feature("docstring")  casadi::MXNode::getInverse() const  " [INTERNAL]
Inverse.

";

%feature("docstring")  casadi::MXNode::getMatrixValue() const  " [INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring")  casadi::MXNode::ndep() const  " [INTERNAL]  Number of
dependencies.

";

%feature("docstring")  casadi::MXNode::getMultiplication(const MX &y, const
Sparsity &sp_z=Sparsity()) const  " [INTERNAL]   Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring")  casadi::BinaryMX< ScX, ScY >::isBinaryOp() const  "
[INTERNAL]  Check if binary operation.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep) "
[INTERNAL]  Set unary dependency.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2) " [INTERNAL]  Set binary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2, const MX &dep3) " [INTERNAL]  Set ternary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const std::vector< MX
> &dep) " [INTERNAL]  Set multiple dependencies.

";

%feature("docstring")  casadi::MXNode::getFunctionInput() const  "
[INTERNAL]  Get function input.

";

%feature("docstring")  casadi::MXNode::getSolve(const MX &r, bool tr, const
LinearSolver &linear_solver) const  " [INTERNAL]   Solve a system of linear
equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring")  casadi::MXNode::getAddNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Add the nonzeros of a matrix to
another matrix.

";

%feature("docstring")  casadi::MXNode::getReshape(const Sparsity &sp) const
" [INTERNAL]   Reshape.

";

%feature("docstring")  casadi::MXNode::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied) " [INTERNAL]  Deep copy
data members.

";

%feature("docstring") casadi::BinaryMX::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring")  casadi::MXNode::getVertcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a vertical concatenation node (vectors only)

";

%feature("docstring")  casadi::MXNode::getSetSparse(const Sparsity &sp)
const  " [INTERNAL]  Create set sparse.

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, const std::vector< int > &onz, bool add=false) "
[INTERNAL]  Assign nonzeros (mapping matrix)

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, bool add=false) " [INTERNAL]  Assign nonzeros
(mapping matrix), output indices sequential.

";

%feature("docstring")  casadi::BinaryMX< ScX, ScY >::getUnary(int op) const
" [INTERNAL]  Get a unary operation.

";

%feature("docstring")  casadi::BinaryMX< ScX, ScY >::numInplace() const  "
[INTERNAL]  Can the operation be performed inplace (i.e. overwrite the
result)

";

%feature("docstring")  casadi::MXNode::isOutputNode() const  " [INTERNAL]
Check if evaluation output.

";

%feature("docstring")  casadi::MXNode::simplifyMe(MX &ex) " [INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring")  casadi::BinaryMX< ScX, ScY >::evaluateGen(const MatV
&input, MatV &output, std::vector< int > &itmp, std::vector< T > &rtmp) "
[INTERNAL]  Evaluate the function (template)

";

%feature("docstring")  casadi::MXNode::getAssertion(const MX &y, const
std::string &fail_message="") const  " [INTERNAL]   Assertion.

";

%feature("docstring")  casadi::MXNode::getGetNonzeros(const Sparsity &sp,
const std::vector< int > &nz) const  " [INTERNAL]  Get the nonzeros of
matrix.

";

%feature("docstring")  casadi::MXNode::mapping() const  " [INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring")  casadi::MXNode::hasDep() const  " [INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring")  casadi::MXNode::getSubAssign(const MX &y, const Slice
&i, const Slice &j) const  " [INTERNAL]  Get submatrix assignment.

";

%feature("docstring") casadi::BinaryMX "[INTERNAL]  Represents any binary
operation that involves two matrices.

Joel Andersson

C++ includes: binary_mx.hpp ";

%feature("docstring")  casadi::MXNode::getNumOutputs() const  " [INTERNAL]
Number of outputs.

";

%feature("docstring")  casadi::MXNode::getFunctionOutput() const  "
[INTERNAL]  Get function output.

";

%feature("docstring")  casadi::MXNode::getInnerProd(const MX &y) const  "
[INTERNAL]  Inner product.

";

%feature("docstring")  casadi::MXNode::sparsity() const  " [INTERNAL]  Get
the sparsity.

";

%feature("docstring")  casadi::MXNode::sparsity(int oind) const  "
[INTERNAL]  Get the sparsity of output oind.

";

%feature("docstring")  casadi::MXNode::getSetNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Assign the nonzeros of a matrix
to another matrix.

";

%feature("docstring")  casadi::MXNode::isNonLinear() "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring")  casadi::SharedObjectNode::getCount() const  "
[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::MXNode::shape() const  " [INTERNAL] ";


// File: structcasadi_1_1BinaryOperation.xml
%feature("docstring") casadi::BinaryOperation "[INTERNAL] C++ includes:
casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryOperation_3_01OP__ADD_01_4.xml
%feature("docstring") casadi::BinaryOperation< OP_ADD > " [INTERNAL]
Addition.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryOperation_3_01OP__AND_01_4.xml
%feature("docstring") casadi::BinaryOperation< OP_AND > " [INTERNAL]
Logical and.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryOperation_3_01OP__ATAN2_01_4.xml
%feature("docstring") casadi::BinaryOperation< OP_ATAN2 > " [INTERNAL]
Arctan2.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryOperation_3_01OP__CONSTPOW_01_4.xml
%feature("docstring") casadi::BinaryOperation< OP_CONSTPOW > " [INTERNAL]
Power, defined only for y constant.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryOperation_3_01OP__COPYSIGN_01_4.xml
%feature("docstring") casadi::BinaryOperation< OP_COPYSIGN > " [INTERNAL]
Copysign.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryOperation_3_01OP__DIV_01_4.xml
%feature("docstring") casadi::BinaryOperation< OP_DIV > " [INTERNAL]
Division.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryOperation_3_01OP__EQ_01_4.xml
%feature("docstring") casadi::BinaryOperation< OP_EQ > " [INTERNAL]  Equal
to.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryOperation_3_01OP__FMAX_01_4.xml
%feature("docstring") casadi::BinaryOperation< OP_FMAX > " [INTERNAL]
Maximum.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryOperation_3_01OP__FMIN_01_4.xml
%feature("docstring") casadi::BinaryOperation< OP_FMIN > " [INTERNAL]
Minimum.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryOperation_3_01OP__IF__ELSE__ZERO_01_4.xml
%feature("docstring") casadi::BinaryOperation< OP_IF_ELSE_ZERO > "
[INTERNAL]  Conditional assignment.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryOperation_3_01OP__LE_01_4.xml
%feature("docstring") casadi::BinaryOperation< OP_LE > " [INTERNAL]  Less or
equal to.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryOperation_3_01OP__LIFT_01_4.xml
%feature("docstring") casadi::BinaryOperation< OP_LIFT > " [INTERNAL]
Inverse of error function.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryOperation_3_01OP__LT_01_4.xml
%feature("docstring") casadi::BinaryOperation< OP_LT > " [INTERNAL]  Less
than.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryOperation_3_01OP__MUL_01_4.xml
%feature("docstring") casadi::BinaryOperation< OP_MUL > " [INTERNAL]
Multiplication.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryOperation_3_01OP__NE_01_4.xml
%feature("docstring") casadi::BinaryOperation< OP_NE > " [INTERNAL]  Not
equal to.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryOperation_3_01OP__OR_01_4.xml
%feature("docstring") casadi::BinaryOperation< OP_OR > " [INTERNAL]  Logical
or.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryOperation_3_01OP__POW_01_4.xml
%feature("docstring") casadi::BinaryOperation< OP_POW > " [INTERNAL]  Power,
defined only for x>=0.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryOperation_3_01OP__PRINTME_01_4.xml
%feature("docstring") casadi::BinaryOperation< OP_PRINTME > " [INTERNAL]
Identity operator with the side effect of printing.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryOperation_3_01OP__SUB_01_4.xml
%feature("docstring") casadi::BinaryOperation< OP_SUB > " [INTERNAL]
Subtraction.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryOperationE.xml
%feature("docstring") casadi::BinaryOperationE "[INTERNAL] C++ includes:
casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryOperationSS.xml
%feature("docstring") casadi::BinaryOperationSS "[INTERNAL]  Perform a
binary operation on two scalars.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryOperationSV.xml
%feature("docstring") casadi::BinaryOperationSV "[INTERNAL]  Perform a
binary operation on a scalar and a vector.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryOperationVS.xml
%feature("docstring") casadi::BinaryOperationVS "[INTERNAL]  Perform a
binary operation on a vector and a scalar.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1BinaryOperationVV.xml
%feature("docstring") casadi::BinaryOperationVV "[INTERNAL]  Perform a
binary operation on two vectors.

C++ includes: casadi_calculus.hpp ";


// File: classcasadi_1_1BinarySX.xml
%feature("docstring")  casadi::SXNode::isInteger() const  " [INTERNAL]
check properties of a node

";

%feature("docstring")  casadi::SXNode::isSymbolic() const  " [INTERNAL]
check properties of a node

";

%feature("docstring")  casadi::BinarySX::hasDep() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring")  casadi::BinarySX::dep(int i) const  " [INTERNAL]  get
the reference of a dependency

";

%feature("docstring")  casadi::BinarySX::dep(int i) " [INTERNAL]  get the
reference of a child

";

%feature("docstring")  casadi::BinarySX::print(std::ostream &stream, long
&remaining_calls) const  " [INTERNAL]  Print the expression (recursively
with a maximum number of levels)

";

%feature("docstring")  casadi::SXNode::print(std::ostream &stream) const  "
[INTERNAL]  print

";

%feature("docstring")  casadi::SXNode::getValue() const  " [INTERNAL]  Get
value of a constant node.

";

%feature("docstring")  casadi::SXNode::mark() "[INTERNAL] ";

%feature("docstring")  casadi::SXNode::getName() const  " [INTERNAL] ";

%feature("docstring")  casadi::BinarySX::getOp() const  " [INTERNAL]  Get
the operation.

";

%feature("docstring") casadi::BinarySX::~BinarySX "[INTERNAL]  Destructor
This is a rather complex destructor which is necessary since the default
destructor can cause stack overflow due to recursive calling.

";

%feature("docstring") casadi::BinarySX "[INTERNAL]  Represents a basic
binary operation on two SXElement nodes.

Joel Andersson

C++ includes: binary_sx.hpp ";

%feature("docstring")  casadi::SXNode::isOne() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring")  casadi::SXNode::isConstant() const  " [INTERNAL]
check properties of a node

";

%feature("docstring")  casadi::BinarySX::isEqual(const SXNode *node, int
depth) const  " [INTERNAL]  Check if two nodes are equivalent up to a given
depth.

";

%feature("docstring")  casadi::SXNode::isAlmostZero(double tol) const  "
[INTERNAL]  check properties of a node

";

%feature("docstring")  casadi::SXNode::isMinusInf() const  " [INTERNAL]
check properties of a node

";

%feature("docstring")  casadi::SXNode::getIntValue() const  " [INTERNAL]
Get value of a constant node.

";

%feature("docstring")  casadi::SXNode::isInf() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring")  casadi::SXNode::isZero() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring")  casadi::SXNode::isNan() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring")  casadi::SXNode::init() "[INTERNAL]  Initialize the
node (currently used only to give a similar interface to MXNode)

";

%feature("docstring")  casadi::SXNode::isMinusOne() const  " [INTERNAL]
check properties of a node

";

%feature("docstring")  casadi::BinarySX::isSmooth() const  " [INTERNAL]
Check if smooth.

";

%feature("docstring")  casadi::BinarySX::ndep() const  " [INTERNAL]  Number
of dependencies.

";

%feature("docstring")  casadi::SXNode::marked() const  " [INTERNAL] ";


// File: classcasadi_1_1Callback.xml
%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring") casadi::Callback "

Callback.

In C++, supply a CallbackCPtr function pointer When the callback function
returns a non-zero integer, the host is signalled of a problem. E.g. an
NLPSolver may halt iterations if the Callback is something else than 0

In python, supply a callable, annotated with pycallback decorator

C++ includes: functor.hpp ";

%feature("docstring")  casadi::SharedObject::checkNode() const  " [INTERNAL]
Assert that the node is pointing to the right type of object

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::Callback::Callback() "

Default constructor.

";

%feature("docstring") casadi::Callback::Callback(CallbackCPtr ptr) "

Construct from C pointer.

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";


// File: classcasadi_1_1CallFunction.xml
%feature("docstring")  casadi::MXNode::isBinaryOp() const  " [INTERNAL]
Check if binary operation.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep) "
[INTERNAL]  Set unary dependency.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2) " [INTERNAL]  Set binary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2, const MX &dep3) " [INTERNAL]  Set ternary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const std::vector< MX
> &dep) " [INTERNAL]  Set multiple dependencies.

";

%feature("docstring")  casadi::MXNode::setSparsity(const Sparsity &sparsity)
" [INTERNAL]  Set the sparsity.

";

%feature("docstring")  casadi::MXNode::isOutputNode() const  " [INTERNAL]
Check if evaluation output.

";

%feature("docstring")  casadi::MXNode::repr(std::ostream &stream) const  "
[INTERNAL]  Print a representation.

";

%feature("docstring")  casadi::MXNode::size2() const  " [INTERNAL] ";

%feature("docstring")  casadi::SharedObjectNode::init() "[INTERNAL]
Initialize the object.

";

%feature("docstring")  casadi::CallFunction::getFunction() "[INTERNAL]  Get
function reference.

";

%feature("docstring")  casadi::MXNode::getFunction() const  " [INTERNAL]
Get function reference.

";

%feature("docstring")  casadi::MXNode::isUnaryOp() const  " [INTERNAL]
Check if unary operation.

";

%feature("docstring")  casadi::MXNode::shape() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getInnerProd(const MX &y) const  "
[INTERNAL]  Inner product.

";

%feature("docstring")  casadi::SharedObjectNode::getCount() const  "
[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::MXNode::getVertcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a vertical concatenation node (vectors only)

";

%feature("docstring")  casadi::CallFunction::printPart(std::ostream &stream,
int part) const  " [INTERNAL]  Print a part of the expression.

";

%feature("docstring")  casadi::CallFunction::generateOperation(std::ostream
&stream, const std::vector< std::string > &arg, const std::vector<
std::string > &res, CodeGenerator &gen) const  " [INTERNAL]  Generate code
for the operation.

";

%feature("docstring")  casadi::MXNode::getMultiplication(const MX &y, const
Sparsity &sp_z=Sparsity()) const  " [INTERNAL]   Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring")  casadi::MXNode::isEqual(const MXNode *node, int
depth) const  " [INTERNAL]  Check if two nodes are equivalent up to a given
depth.

";

%feature("docstring")  casadi::MXNode::getInverse() const  " [INTERNAL]
Inverse.

";

%feature("docstring")  casadi::MXNode::getDeterminant() const  " [INTERNAL]
Determinant.

";

%feature("docstring")  casadi::MXNode::isNonLinear() "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring")  casadi::CallFunction::getFunctionOutput() const  "
[INTERNAL]  Get function output.

";

%feature("docstring")  casadi::MXNode::getHorzcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a horizontal concatenation node.

";

%feature("docstring")  casadi::SharedObjectNode::assertInit() const  "
[INTERNAL]  Assert that the object has been initialized.

";

%feature("docstring")  casadi::MXNode::hasDep() const  " [INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring")  casadi::MXNode::getAssertion(const MX &y, const
std::string &fail_message="") const  " [INTERNAL]   Assertion.

";

%feature("docstring")  casadi::MXNode::size() const  " [INTERNAL] ";

%feature("docstring")  casadi::CallFunction::getOp() const  " [INTERNAL]
Get the operation.

";

%feature("docstring")  casadi::MXNode::getHorzsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a horizontal split node.

";

%feature("docstring")  casadi::MXNode::isZero() const  " [INTERNAL]  Check
if identically zero.

";

%feature("docstring")  casadi::CallFunction::sparsity(int oind) const  "
[INTERNAL]  Get the sparsity of output oind.

";

%feature("docstring")  casadi::MXNode::sparsity() const  " [INTERNAL]  Get
the sparsity.

";

%feature("docstring")  casadi::CallFunction::evaluateMX(const MXPtrV &input,
MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV
&adjSeed, MXPtrVV &adjSens, bool output_given) " [INTERNAL]  Evaluate the
function symbolically ( MX)

";

%feature("docstring")  casadi::MXNode::evaluateMX(const MXPtrV &input,
MXPtrV &output) " [INTERNAL]  Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring")  casadi::MXNode::getNormF() const  " [INTERNAL]
Frobenius norm.

";

%feature("docstring")  casadi::MXNode::numInplace() const  " [INTERNAL]  Can
the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) const  " [INTERNAL]
dependencies - functions that have to be evaluated before this one

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getGetNonzeros(const Sparsity &sp,
const std::vector< int > &nz) const  " [INTERNAL]  Get the nonzeros of
matrix.

";

%feature("docstring")  casadi::MXNode::getBinarySwitch(int op, const MX &y)
const  " [INTERNAL]  Get a binary operation operation.

";

%feature("docstring")  casadi::SharedObjectNode::isInit() const  "
[INTERNAL]  Check if the object has been initialized.

";

%feature("docstring")  casadi::CallFunction::getNumOutputs() const  "
[INTERNAL]  Number of outputs.

";

%feature("docstring")  casadi::MXNode::getMatrixValue() const  " [INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring")  casadi::MXNode::size1() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getUnary(int op) const  " [INTERNAL]
Get a unary operation.

";

%feature("docstring")  casadi::MXNode::isIdentity() const  " [INTERNAL]
Check if identity matrix.

";

%feature("docstring")  casadi::MXNode::getVertsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a vertical split node (vectors
only)

";

%feature("docstring")  casadi::MXNode::getSetNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Assign the nonzeros of a matrix
to another matrix.

";

%feature("docstring")  casadi::MXNode::getSubRef(const Slice &i, const Slice
&j) const  " [INTERNAL]  Get submatrix reference.

";

%feature("docstring")  casadi::MXNode::ndep() const  " [INTERNAL]  Number of
dependencies.

";

%feature("docstring")  casadi::CallFunction::evaluateD(const DMatrixPtrV
&input, DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double >
&rtmp) " [INTERNAL]  Evaluate the function numerically.

";

%feature("docstring")  casadi::MXNode::getAddNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Add the nonzeros of a matrix to
another matrix.

";

%feature("docstring")  casadi::MXNode::simplifyMe(MX &ex) " [INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring")  casadi::CallFunction::clone() const  " [INTERNAL]
Clone function.

";

%feature("docstring")  casadi::MXNode::isOne() const  " [INTERNAL]  Check if
identically one.

";

%feature("docstring")  casadi::MXNode::getSetSparse(const Sparsity &sp)
const  " [INTERNAL]  Create set sparse.

";

%feature("docstring")  casadi::MXNode::sameOpAndDeps(const MXNode *node, int
depth) const  " [INTERNAL]  Checks if two nodes have the same operation and
have equivalent dependencies up to a given depth.

";

%feature("docstring") casadi::CallFunction::__nonzero__ "[INTERNAL]  Check
the truth value of this node.

";

%feature("docstring")  casadi::MXNode::getSubAssign(const MX &y, const Slice
&i, const Slice &j) const  " [INTERNAL]  Get submatrix assignment.

";

%feature("docstring")  casadi::MXNode::getSolve(const MX &r, bool tr, const
LinearSolver &linear_solver) const  " [INTERNAL]   Solve a system of linear
equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring")  casadi::MultipleOutput::getOutput(int oind) const  "
[INTERNAL]  Get an output.

";

%feature("docstring")  casadi::MXNode::getNormInf() const  " [INTERNAL]
Infinity norm.

";

%feature("docstring") casadi::CallFunction "[INTERNAL]

Joel Andersson

C++ includes: call_function.hpp ";

%feature("docstring")  casadi::CallFunction::nTmp(size_t &ni, size_t &nr) "
[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::MXNode::getReshape(const Sparsity &sp) const
" [INTERNAL]   Reshape.

";

%feature("docstring")  casadi::MXNode::addDependency(const MX &dep) "
[INTERNAL]  Add a dependency.

";

%feature("docstring") casadi::CallFunction::CallFunction(const Function
&fcn, std::vector< MX > arg) " [INTERNAL]  Constructor.

";

%feature("docstring")  casadi::MXNode::getValue() const  " [INTERNAL]  Get
the value (only for scalar constant nodes)

";

%feature("docstring")  casadi::MXNode::getBinary(int op, const MX &y, bool
scX, bool scY) const  " [INTERNAL]  Get a binary operation operation
(matrix-matrix)

";

%feature("docstring")  casadi::CallFunction::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied) " [INTERNAL]  Deep copy
data members.

";

%feature("docstring")  casadi::MXNode::isValue(double val) const  "
[INTERNAL]  Check if a certain value.

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, const std::vector< int > &onz, bool add=false) "
[INTERNAL]  Assign nonzeros (mapping matrix)

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, bool add=false) " [INTERNAL]  Assign nonzeros
(mapping matrix), output indices sequential.

";

%feature("docstring")  casadi::MultipleOutput::isMultipleOutput() const  "
[INTERNAL]  Check if a multiple output node.

";

%feature("docstring")  casadi::CallFunction::evaluateSX(const SXPtrV &input,
SXPtrV &output, std::vector< int > &itmp, std::vector< SXElement > &rtmp) "
[INTERNAL]  Evaluate the function symbolically (SX)

";

%feature("docstring") casadi::CallFunction::~CallFunction "[INTERNAL]
Destructor.

";

%feature("docstring")  casadi::SharedObjectNode::weak() "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring")  casadi::MXNode::getNorm1() const  " [INTERNAL]
1-norm

";

%feature("docstring")  casadi::MXNode::getNorm2() const  " [INTERNAL]
Spectral norm.

";

%feature("docstring")  casadi::MXNode::getTranspose() const  " [INTERNAL]
Transpose.

";

%feature("docstring")  casadi::CallFunction::getFunctionInput() const  "
[INTERNAL]  Get function input.

";

%feature("docstring")  casadi::CallFunction::propagateSparsity(DMatrixPtrV
&input, DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double >
&rtmp, bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, bool fwd) " [INTERNAL]  Propagate sparsity, no work.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream) const  "
[INTERNAL]  Print a description.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream, long
&remaining_calls) const  " [INTERNAL]  Print expression (make sure number of
calls is not exceeded)

";

%feature("docstring")  casadi::MXNode::getName() const  " [INTERNAL]  Get
the name.

";

%feature("docstring")  casadi::MXNode::mapping() const  " [INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring")  casadi::MXNode::numel() const  " [INTERNAL]  Get
shape.

";


// File: classcasadi_1_1casadi__limits.xml
%feature("docstring") casadi::casadi_limits "

casadi_limits class

The following class, which acts as a complements to the standard
numeric_limits class, allows specifying certain properties of scalar
objects. The template can be specialized for e.g. symbolic scalars Joel
Andersson

C++ includes: casadi_limits.hpp ";


// File: classcasadi_1_1casadi__limits_3_01SXElement_01_4.xml
%feature("docstring") casadi::casadi_limits< SXElement > " [INTERNAL] C++
includes: sx_element.hpp ";


// File: structcasadi_1_1casadi__math.xml
%feature("docstring") casadi::casadi_math "[INTERNAL]  Easy access to all
the functions for a particular type.

C++ includes: casadi_math.hpp ";


// File: structcasadi_1_1casadi__math_3_01int_01_4.xml
%feature("docstring") casadi::casadi_math< int > " [INTERNAL]  Specialize
the class so that it can be used with integer type.

C++ includes: casadi_math.hpp ";


// File: classcasadi_1_1CasadiException.xml
%feature("docstring")  casadi::CasadiException::what() const  "  throw ()
Display error.

";

%feature("docstring") casadi::CasadiException::CasadiException() "

Default constructor.

";

%feature("docstring") casadi::CasadiException::CasadiException(const
std::string &msg) "

Form message string.

";

%feature("docstring") casadi::CasadiException "

Casadi exception class.

Joel Andersson

C++ includes: casadi_exception.hpp ";

%feature("docstring") casadi::CasadiException::~CasadiException "throw ()
Destructor.

";


// File: classcasadi_1_1CasadiMeta.xml
%feature("docstring") casadi::CasadiMeta "

Collects global CasADi meta information.

Joris Gillis

C++ includes: casadi_meta.hpp ";


// File: classcasadi_1_1CasadiOptions.xml
%feature("docstring") casadi::CasadiOptions "

Collects global CasADi options.

Note to developers: use sparingly. Global options are - in general - a
rather bad idea

this class must never be instantiated. Access its static members directly
Joris Gillis

C++ includes: casadi_options.hpp ";


// File: classcasadi_1_1CodeGenerator.xml
%feature("docstring")  casadi::CodeGenerator::flush(std::ostream &s) const
" [INTERNAL]  Flush generated file to a stream.

";

%feature("docstring")  casadi::CodeGenerator::addInclude(const std::string
&new_include, bool relative_path=false) " [INTERNAL]  Add an include file
optionally using a relative path \"...\" instead of an absolute path <...>

";

%feature("docstring") casadi::CodeGenerator "[INTERNAL] C++ includes:
code_generator.hpp ";

%feature("docstring")  casadi::CodeGenerator::addDependency(const Function
&f) " [INTERNAL]  Add a dependent function.

";

%feature("docstring")  casadi::CodeGenerator::addAuxiliary(Auxiliary f) "
[INTERNAL]  Add a built-in auxiliary function.

";

%feature("docstring")  casadi::CodeGenerator::getConstant(const std::vector<
double > &v, bool allow_adding=false) " [INTERNAL]  Get or add a constant.

";

%feature("docstring")  casadi::CodeGenerator::getConstant(const std::vector<
int > &v, bool allow_adding=false) " [INTERNAL]  Get or add am integer
constant.

";

%feature("docstring")  casadi::CodeGenerator::getDependency(const Function
&f) const  " [INTERNAL]  Get the index of an existing dependency.

";

%feature("docstring")  casadi::CodeGenerator::addSparsity(const Sparsity
&sp) " [INTERNAL]  Add an include file optionally using a relative path
\"...\" instead of an absolute path <...>

";

%feature("docstring")  casadi::CodeGenerator::copyVector(std::ostream &s,
const std::string &arg, std::size_t n, const std::string &res, const
std::string &it="i", bool only_if_exists=false) const  " [INTERNAL]  Copy a
vector to another.

";

%feature("docstring")  casadi::CodeGenerator::getSparsity(const Sparsity
&sp) const  " [INTERNAL]  Get the index of an existing sparsity pattern.

";

%feature("docstring")  casadi::CodeGenerator::casadi_dot(int n, const
std::string &x, int inc_x, const std::string &y, int inc_y) " [INTERNAL]
Codegen casadi_dot

";


// File: classcasadi_1_1CollocationIntegrator.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::Integrator::getDAE() "

Get the DAE.

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Integrator::integrateB(double t_out) "

Integrate backward until a specified time point.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::Integrator::integrate(double t_out) "

Integrate forward until a specified time point.

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Integrator::resetB() "

Reset the backward problem.

Time will be set to tf and backward state to input(INTEGRATOR_RX0)

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring") casadi::CollocationIntegrator "

Fixed-step implicit Runge-Kutta integrator ODE/DAE integrator based on
collocation schemes.

The method is still under development

Base class for integrators. Solves an initial value problem (IVP) coupled to
a terminal value problem with differential equation given as an implicit ODE
coupled to an algebraic equation and a set of quadratures: Initial
conditions at t=t0  x(t0)  = x0  q(t0)  = 0   Forward integration from t=t0
to t=tf  der(x) = function(x,z,p,t) Forward ODE  0 = fz(x,z,p,t)
Forward algebraic equations  der(q) = fq(x,z,p,t)                  Forward
quadratures Terminal conditions at t=tf  rx(tf)  = rx0  rq(tf)  = 0
Backward integration from t=tf to t=t0  der(rx) = gx(rx,rz,rp,x,z,p,t)
Backward ODE  0 = gz(rx,rz,rp,x,z,p,t)        Backward algebraic equations
der(rq) = gq(rx,rz,rp,x,z,p,t)        Backward quadratures where we assume
that both the forward and backwards integrations are index-1  (i.e. dfz/dz,
dgz/drz are invertible) and furthermore that gx, gz and gq have a linear
dependency on rx, rz and rp.

Joel Andersson

>Input scheme: casadi::IntegratorInput (INTEGRATOR_NUM_IN = 7) [integratorIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_X0          | x0                     | Differential state at  |
|                        |                        | the initial time .     |
+------------------------+------------------------+------------------------+
| INTEGRATOR_P           | p                      | Parameters .           |
+------------------------+------------------------+------------------------+
| INTEGRATOR_Z0          | z0                     | Initial guess for the  |
|                        |                        | algebraic variable .   |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RX0         | rx0                    | Backward differential  |
|                        |                        | state at the final     |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RP          | rp                     | Backward parameter     |
|                        |                        | vector .               |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZ0         | rz0                    | Initial guess for the  |
|                        |                        | backwards algebraic    |
|                        |                        | variable .             |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::IntegratorOutput (INTEGRATOR_NUM_OUT = 7) [integratorOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_XF          | xf                     | Differential state at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_QF          | qf                     | Quadrature state at    |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_ZF          | zf                     | Algebraic variable at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RXF         | rxf                    | Backward differential  |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RQF         | rqf                    | Backward quadrature    |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZF         | rzf                    | Backward algebraic     |
|                        |                        | variable at the        |
|                        |                        | initial time .         |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| artol        | OT_REAL      | 0.000        | tolerance as | casadi::Inte |
|              |              |              | provided     | gratorIntern |
|              |              |              | with         | al           |
|              |              |              | setArTol to  |              |
|              |              |              | OOQP         |              |
+--------------+--------------+--------------+--------------+--------------+
| barrier_maxi | OT_INTEGER   | 2.100e+09    | Maximum      | casadi::Impl |
| ter          |              |              | number of    | icitFixedSte |
|              |              |              | barrier      | pIntegratorI |
|              |              |              | iterations.  | nternal      |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_augme | OT_BOOLEAN   | true         | DAE callback | casadi::Inte |
| nted         |              |              | function     | gratorIntern |
|              |              |              | also be      | al           |
|              |              |              | SXFunction . |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | (eval_f|eval | casadi::Coll |
|              | TOR          | )            | _djac)       | ocationInteg |
|              |              |              |              | ratorInterna |
|              |              |              |              | l            |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| number_of_fi | OT_INTEGER   | 20           | Number of    | casadi::Fixe |
| nite_element |              |              | finite       | dStepIntegra |
| s            |              |              | elements     | torInternal  |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available monitors
+-----------+---------------------------------------+
|    Id     |                Used in                |
+===========+=======================================+
| eval_djac | casadi::CollocationIntegratorInternal |
+-----------+---------------------------------------+
| eval_f    | casadi::CollocationIntegratorInternal |
+-----------+---------------------------------------+

Diagrams

C++ includes: collocation_integrator.hpp ";

%feature("docstring")  casadi::CollocationIntegrator::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::Integrator::getAugmented(int nfwd, int nadj)
"

Generate a augmented DAE system with nfwd forward sensitivities and nadj
adjoint sensitivities.

";

%feature("docstring") casadi::CollocationIntegrator::CollocationIntegrator()
"

Default constructor.

";

%feature("docstring")
casadi::CollocationIntegrator::CollocationIntegrator(const Function &f,
const Function &g=Function()) "

Create an integrator for explicit ODEs.

Parameters:
-----------

f:  dynamical system

>Input scheme: casadi::DAEInput (DAE_NUM_IN = 5) [daeIn]
+-----------+-------+----------------------------+
| Full name | Short |        Description         |
+===========+=======+============================+
| DAE_X     | x     | Differential state .       |
+-----------+-------+----------------------------+
| DAE_Z     | z     | Algebraic state .          |
+-----------+-------+----------------------------+
| DAE_P     | p     | Parameter .                |
+-----------+-------+----------------------------+
| DAE_T     | t     | Explicit time dependence . |
+-----------+-------+----------------------------+

>Output scheme: casadi::DAEOutput (DAE_NUM_OUT = 4) [daeOut]
+-----------+-------+--------------------------------------------+
| Full name | Short |                Description                 |
+===========+=======+============================================+
| DAE_ODE   | ode   | Right hand side of the implicit ODE .      |
+-----------+-------+--------------------------------------------+
| DAE_ALG   | alg   | Right hand side of algebraic equations .   |
+-----------+-------+--------------------------------------------+
| DAE_QUAD  | quad  | Right hand side of quadratures equations . |
+-----------+-------+--------------------------------------------+

Parameters:
-----------

g:  backwards system

>Input scheme: casadi::RDAEInput (RDAE_NUM_IN = 8) [rdaeIn]
+-----------+-------+-------------------------------+
| Full name | Short |          Description          |
+===========+=======+===============================+
| RDAE_RX   | rx    | Backward differential state . |
+-----------+-------+-------------------------------+
| RDAE_RZ   | rz    | Backward algebraic state .    |
+-----------+-------+-------------------------------+
| RDAE_RP   | rp    | Backward parameter vector .   |
+-----------+-------+-------------------------------+
| RDAE_X    | x     | Forward differential state .  |
+-----------+-------+-------------------------------+
| RDAE_Z    | z     | Forward algebraic state .     |
+-----------+-------+-------------------------------+
| RDAE_P    | p     | Parameter vector .            |
+-----------+-------+-------------------------------+
| RDAE_T    | t     | Explicit time dependence .    |
+-----------+-------+-------------------------------+

>Output scheme: casadi::RDAEOutput (RDAE_NUM_OUT = 4) [rdaeOut]
+-----------+-------+-------------------------------------------+
| Full name | Short |                Description                |
+===========+=======+===========================================+
| RDAE_ODE  | ode   | Right hand side of ODE. .                 |
+-----------+-------+-------------------------------------------+
| RDAE_ALG  | alg   | Right hand side of algebraic equations. . |
+-----------+-------+-------------------------------------------+
| RDAE_QUAD | quad  | Right hand side of quadratures. .         |
+-----------+-------+-------------------------------------------+

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::Integrator::clone() const  "

Clone.

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")  casadi::Integrator::reset() "

Reset the forward problem Time will be set to t0 and state to
input(INTEGRATOR_X0)

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::Integrator::printStats(std::ostream
&stream=std::cout) const  "

Print solver statistics.

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";


// File: structcasadi_1_1CommChecker.xml
%feature("docstring") casadi::CommChecker "[INTERNAL]  Is commutative

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1CommChecker_3_01OP__ADD_01_4.xml
%feature("docstring") casadi::CommChecker< OP_ADD > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1CommChecker_3_01OP__AND_01_4.xml
%feature("docstring") casadi::CommChecker< OP_AND > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1CommChecker_3_01OP__EQ_01_4.xml
%feature("docstring") casadi::CommChecker< OP_EQ > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1CommChecker_3_01OP__MUL_01_4.xml
%feature("docstring") casadi::CommChecker< OP_MUL > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1CommChecker_3_01OP__NE_01_4.xml
%feature("docstring") casadi::CommChecker< OP_NE > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1CommChecker_3_01OP__OR_01_4.xml
%feature("docstring") casadi::CommChecker< OP_OR > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1CompiletimeConst.xml
%feature("docstring") casadi::CompiletimeConst "[INTERNAL]   Constant known
at compiletime.

C++ includes: constant_mx.hpp ";


// File: classcasadi_1_1Concat.xml
%feature("docstring")  casadi::MXNode::getBinary(int op, const MX &y, bool
scX, bool scY) const  " [INTERNAL]  Get a binary operation operation
(matrix-matrix)

";

%feature("docstring")  casadi::MXNode::getNormInf() const  " [INTERNAL]
Infinity norm.

";

%feature("docstring")  casadi::MXNode::size() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::isValue(double val) const  "
[INTERNAL]  Check if a certain value.

";

%feature("docstring")  casadi::MXNode::sparsity() const  " [INTERNAL]  Get
the sparsity.

";

%feature("docstring")  casadi::MXNode::sparsity(int oind) const  "
[INTERNAL]  Get the sparsity of output oind.

";

%feature("docstring")  casadi::MXNode::sameOpAndDeps(const MXNode *node, int
depth) const  " [INTERNAL]  Checks if two nodes have the same operation and
have equivalent dependencies up to a given depth.

";

%feature("docstring")  casadi::MXNode::nTmp(size_t &ni, size_t &nr) "
[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::MXNode::getSubAssign(const MX &y, const Slice
&i, const Slice &j) const  " [INTERNAL]  Get submatrix assignment.

";

%feature("docstring")  casadi::SharedObjectNode::init() "[INTERNAL]
Initialize the object.

";

%feature("docstring")  casadi::MXNode::shape() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getAssertion(const MX &y, const
std::string &fail_message="") const  " [INTERNAL]   Assertion.

";

%feature("docstring")  casadi::MXNode::getName() const  " [INTERNAL]  Get
the name.

";

%feature("docstring")  casadi::MXNode::size1() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getBinarySwitch(int op, const MX &y)
const  " [INTERNAL]  Get a binary operation operation.

";

%feature("docstring")  casadi::MXNode::simplifyMe(MX &ex) " [INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring")  casadi::MXNode::isMultipleOutput() const  "
[INTERNAL]  Check if a multiple output node.

";

%feature("docstring")  casadi::SharedObjectNode::isInit() const  "
[INTERNAL]  Check if the object has been initialized.

";

%feature("docstring")  casadi::MXNode::isBinaryOp() const  " [INTERNAL]
Check if binary operation.

";

%feature("docstring")  casadi::MXNode::getVertsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a vertical split node (vectors
only)

";

%feature("docstring")  casadi::MXNode::getFunctionOutput() const  "
[INTERNAL]  Get function output.

";

%feature("docstring")  casadi::MXNode::clone() const  " [INTERNAL]  Clone
function.

";

%feature("docstring")  casadi::MXNode::getSubRef(const Slice &i, const Slice
&j) const  " [INTERNAL]  Get submatrix reference.

";

%feature("docstring")  casadi::MXNode::ndep() const  " [INTERNAL]  Number of
dependencies.

";

%feature("docstring")  casadi::MXNode::isIdentity() const  " [INTERNAL]
Check if identity matrix.

";

%feature("docstring")  casadi::MXNode::numInplace() const  " [INTERNAL]  Can
the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring")  casadi::MXNode::isNonLinear() "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring")  casadi::Concat::evaluateSX(const SXPtrV &input,
SXPtrV &output, std::vector< int > &itmp, std::vector< SXElement > &rtmp) "
[INTERNAL]  Evaluate the function symbolically (SX)

";

%feature("docstring")  casadi::MXNode::getUnary(int op) const  " [INTERNAL]
Get a unary operation.

";

%feature("docstring")  casadi::MXNode::getInverse() const  " [INTERNAL]
Inverse.

";

%feature("docstring")  casadi::SharedObjectNode::weak() "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring")  casadi::MXNode::getNorm2() const  " [INTERNAL]
Spectral norm.

";

%feature("docstring")  casadi::MXNode::isOutputNode() const  " [INTERNAL]
Check if evaluation output.

";

%feature("docstring") casadi::Concat::Concat(const std::vector< MX > &x) "
[INTERNAL]  Constructor.

";

%feature("docstring")  casadi::Concat::isEqual(const MXNode *node, int
depth) const  " [INTERNAL]  Check if two nodes are equivalent up to a given
depth.

";

%feature("docstring")  casadi::Concat::evaluateGen(const MatV &input, MatV
&output, std::vector< int > &itmp, std::vector< T > &rtmp) " [INTERNAL]
Evaluate the function (template)

";

%feature("docstring")  casadi::MXNode::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied) " [INTERNAL]  Deep copy
data members.

";

%feature("docstring")  casadi::MXNode::getAddNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Add the nonzeros of a matrix to
another matrix.

";

%feature("docstring")  casadi::MXNode::getHorzsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a horizontal split node.

";

%feature("docstring")  casadi::MXNode::getDeterminant() const  " [INTERNAL]
Determinant.

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) const  " [INTERNAL]
dependencies - functions that have to be evaluated before this one

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::printPart(std::ostream &stream, int
part) const  " [INTERNAL]  Print a part of the expression.

";

%feature("docstring")  casadi::MXNode::getInnerProd(const MX &y) const  "
[INTERNAL]  Inner product.

";

%feature("docstring")  casadi::MXNode::getHorzcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a horizontal concatenation node.

";

%feature("docstring")  casadi::MXNode::evaluateMX(const MXPtrV &input,
MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV
&adjSeed, MXPtrVV &adjSens, bool output_given) " [INTERNAL]  Evaluate
symbolically ( MX)

";

%feature("docstring")  casadi::MXNode::evaluateMX(const MXPtrV &input,
MXPtrV &output) " [INTERNAL]  Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring")  casadi::MXNode::isZero() const  " [INTERNAL]  Check
if identically zero.

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, const std::vector< int > &onz, bool add=false) "
[INTERNAL]  Assign nonzeros (mapping matrix)

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, bool add=false) " [INTERNAL]  Assign nonzeros
(mapping matrix), output indices sequential.

";

%feature("docstring")  casadi::Concat::getGetNonzeros(const Sparsity &sp,
const std::vector< int > &nz) const  " [INTERNAL]  Get the nonzeros of
matrix.

";

%feature("docstring")  casadi::MXNode::getOp() const  " [INTERNAL]  Get the
operation.

";

%feature("docstring")  casadi::SharedObjectNode::getCount() const  "
[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::MXNode::getVertcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a vertical concatenation node (vectors only)

";

%feature("docstring")  casadi::MXNode::hasDep() const  " [INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring")  casadi::MXNode::getNorm1() const  " [INTERNAL]
1-norm

";

%feature("docstring") casadi::Concat::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring")  casadi::MXNode::numel() const  " [INTERNAL]  Get
shape.

";

%feature("docstring")  casadi::MXNode::getFunction() "[INTERNAL]  Get
function reference.

";

%feature("docstring")  casadi::MXNode::getFunction() const  " [INTERNAL]
Get function reference.

";

%feature("docstring")  casadi::MXNode::mapping() const  " [INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream) const  "
[INTERNAL]  Print a description.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream, long
&remaining_calls) const  " [INTERNAL]  Print expression (make sure number of
calls is not exceeded)

";

%feature("docstring")  casadi::MXNode::getNumOutputs() const  " [INTERNAL]
Number of outputs.

";

%feature("docstring")  casadi::MXNode::getValue() const  " [INTERNAL]  Get
the value (only for scalar constant nodes)

";

%feature("docstring") casadi::Concat "[INTERNAL]  Concatenation: Join
multiple expressions stacking the nonzeros.

Joel Andersson

C++ includes: concat.hpp ";

%feature("docstring")  casadi::MXNode::setSparsity(const Sparsity &sparsity)
" [INTERNAL]  Set the sparsity.

";

%feature("docstring")  casadi::Concat::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp,
bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep) "
[INTERNAL]  Set unary dependency.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2) " [INTERNAL]  Set binary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2, const MX &dep3) " [INTERNAL]  Set ternary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const std::vector< MX
> &dep) " [INTERNAL]  Set multiple dependencies.

";

%feature("docstring")  casadi::MXNode::getReshape(const Sparsity &sp) const
" [INTERNAL]   Reshape.

";

%feature("docstring")  casadi::MXNode::repr(std::ostream &stream) const  "
[INTERNAL]  Print a representation.

";

%feature("docstring")  casadi::MXNode::getNormF() const  " [INTERNAL]
Frobenius norm.

";

%feature("docstring")  casadi::MXNode::getFunctionInput() const  "
[INTERNAL]  Get function input.

";

%feature("docstring")  casadi::MXNode::size2() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getSolve(const MX &r, bool tr, const
LinearSolver &linear_solver) const  " [INTERNAL]   Solve a system of linear
equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring")  casadi::MXNode::getMatrixValue() const  " [INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring")  casadi::MXNode::getSetNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Assign the nonzeros of a matrix
to another matrix.

";

%feature("docstring")  casadi::Concat::evaluateD(const DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp)
" [INTERNAL]  Evaluate the function numerically.

";

%feature("docstring")  casadi::MXNode::getTranspose() const  " [INTERNAL]
Transpose.

";

%feature("docstring") casadi::Concat::~Concat "[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::MXNode::isUnaryOp() const  " [INTERNAL]
Check if unary operation.

";

%feature("docstring")  casadi::MXNode::addDependency(const MX &dep) "
[INTERNAL]  Add a dependency.

";

%feature("docstring")  casadi::MXNode::getOutput(int oind) const  "
[INTERNAL]  Get an output.

";

%feature("docstring")  casadi::Concat::generateOperation(std::ostream
&stream, const std::vector< std::string > &arg, const std::vector<
std::string > &res, CodeGenerator &gen) const  " [INTERNAL]  Generate code
for the operation.

";

%feature("docstring")  casadi::SharedObjectNode::assertInit() const  "
[INTERNAL]  Assert that the object has been initialized.

";

%feature("docstring")  casadi::MXNode::getMultiplication(const MX &y, const
Sparsity &sp_z=Sparsity()) const  " [INTERNAL]   Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring")  casadi::MXNode::getSetSparse(const Sparsity &sp)
const  " [INTERNAL]  Create set sparse.

";

%feature("docstring")  casadi::MXNode::isOne() const  " [INTERNAL]  Check if
identically one.

";


// File: classcasadi_1_1Constant.xml
%feature("docstring")  casadi::Constant< Value >::evaluateD(const
DMatrixPtrV &input, DMatrixPtrV &output, std::vector< int > &itmp,
std::vector< double > &rtmp) " [INTERNAL]  Evaluate the function
numerically.

";

%feature("docstring")  casadi::MXNode::getNumOutputs() const  " [INTERNAL]
Number of outputs.

";

%feature("docstring")  casadi::Constant< Value >::getSetSparse(const
Sparsity &sp) const  " [INTERNAL]  Get densification.

";

%feature("docstring")  casadi::SharedObjectNode::weak() "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring")  casadi::MXNode::sparsity() const  " [INTERNAL]  Get
the sparsity.

";

%feature("docstring")  casadi::MXNode::sparsity(int oind) const  "
[INTERNAL]  Get the sparsity of output oind.

";

%feature("docstring")  casadi::MXNode::getFunctionInput() const  "
[INTERNAL]  Get function input.

";

%feature("docstring")  casadi::MXNode::mapping() const  " [INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring")  casadi::MXNode::getName() const  " [INTERNAL]  Get
the name.

";

%feature("docstring")  casadi::MXNode::nTmp(size_t &ni, size_t &nr) "
[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::MXNode::isEqual(const MXNode *node, int
depth) const  " [INTERNAL]  Check if two nodes are equivalent up to a given
depth.

";

%feature("docstring")  casadi::MXNode::getNorm1() const  " [INTERNAL]
1-norm

";

%feature("docstring")  casadi::ConstantMX::propagateSparsity(DMatrixPtrV
&input, DMatrixPtrV &output, bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp,
bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::sameOpAndDeps(const MXNode *node, int
depth) const  " [INTERNAL]  Checks if two nodes have the same operation and
have equivalent dependencies up to a given depth.

";

%feature("docstring")  casadi::MXNode::getAssertion(const MX &y, const
std::string &fail_message="") const  " [INTERNAL]   Assertion.

";

%feature("docstring")  casadi::MXNode::getNormF() const  " [INTERNAL]
Frobenius norm.

";

%feature("docstring")  casadi::Constant< Value >::isValue(double val) const
" [INTERNAL]  Check if a certain value.

";

%feature("docstring")  casadi::MXNode::addDependency(const MX &dep) "
[INTERNAL]  Add a dependency.

";

%feature("docstring")  casadi::Constant< Value >::isOne() const  "
[INTERNAL]  Check if identically one.

";

%feature("docstring")  casadi::MXNode::repr(std::ostream &stream) const  "
[INTERNAL]  Print a representation.

";

%feature("docstring")  casadi::Constant< Value >::getBinary(int op, const MX
&y, bool ScX, bool ScY) const  " [INTERNAL]  Get a binary operation
operation.

";

%feature("docstring")  casadi::MXNode::getHorzsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a horizontal split node.

";

%feature("docstring")  casadi::MXNode::ndep() const  " [INTERNAL]  Number of
dependencies.

";

%feature("docstring")  casadi::MXNode::getFunction() "[INTERNAL]  Get
function reference.

";

%feature("docstring")  casadi::MXNode::getFunction() const  " [INTERNAL]
Get function reference.

";

%feature("docstring")  casadi::MXNode::getVertsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a vertical split node (vectors
only)

";

%feature("docstring")  casadi::SharedObjectNode::getCount() const  "
[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::Constant< Value >::isZero() const  "
[INTERNAL]  Check if a particular integer value.

";

%feature("docstring")  casadi::MXNode::isOutputNode() const  " [INTERNAL]
Check if evaluation output.

";

%feature("docstring")  casadi::MXNode::simplifyMe(MX &ex) " [INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring")  casadi::Constant< Value >::clone() const  "
[INTERNAL]  Clone function.

";

%feature("docstring")  casadi::ConstantMX::getOp() const  " [INTERNAL]  Get
the operation.

";

%feature("docstring")  casadi::MXNode::getSubAssign(const MX &y, const Slice
&i, const Slice &j) const  " [INTERNAL]  Get submatrix assignment.

";

%feature("docstring")  casadi::MXNode::setSparsity(const Sparsity &sparsity)
" [INTERNAL]  Set the sparsity.

";

%feature("docstring")  casadi::Constant< Value
>::generateOperation(std::ostream &stream, const std::vector< std::string >
&arg, const std::vector< std::string > &res, CodeGenerator &gen) const  "
[INTERNAL]  Generate code for the operation.

";

%feature("docstring")  casadi::Constant< Value >::getVertcat(const
std::vector< MX > &x) const  " [INTERNAL]  Create a vertical concatenation
node (vectors only)

";

%feature("docstring")  casadi::MXNode::getSubRef(const Slice &i, const Slice
&j) const  " [INTERNAL]  Get submatrix reference.

";

%feature("docstring")  casadi::Constant< Value >::printPart(std::ostream
&stream, int part) const  " [INTERNAL]  Print a part of the expression.

";

%feature("docstring")  casadi::Constant< Value >::getSetNonzeros(const MX
&y, const std::vector< int > &nz) const  " [INTERNAL]  Assign the nonzeros
of a matrix to another matrix.

";

%feature("docstring")  casadi::MXNode::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied) " [INTERNAL]  Deep copy
data members.

";

%feature("docstring")  casadi::MXNode::getNorm2() const  " [INTERNAL]
Spectral norm.

";

%feature("docstring")  casadi::Constant< Value >::evaluateSX(const SXPtrV
&input, SXPtrV &output, std::vector< int > &itmp, std::vector< SXElement >
&rtmp) " [INTERNAL]  Evaluate the function symbolically (SX)

";

%feature("docstring")  casadi::Constant< Value >::getUnary(int op) const  "
[INTERNAL]  Get a unary operation.

";

%feature("docstring")  casadi::Constant< Value >::getReshape(const Sparsity
&sp) const  " [INTERNAL]   Reshape.

";

%feature("docstring")  casadi::MXNode::getAddNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Add the nonzeros of a matrix to
another matrix.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep) "
[INTERNAL]  Set unary dependency.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2) " [INTERNAL]  Set binary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2, const MX &dep3) " [INTERNAL]  Set ternary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const std::vector< MX
> &dep) " [INTERNAL]  Set multiple dependencies.

";

%feature("docstring")  casadi::Constant< Value >::getTranspose() const  "
[INTERNAL]   Transpose.

";

%feature("docstring")  casadi::MXNode::isMultipleOutput() const  "
[INTERNAL]  Check if a multiple output node.

";

%feature("docstring") casadi::Constant::~Constant "[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::MXNode::numel() const  " [INTERNAL]  Get
shape.

";

%feature("docstring") casadi::Constant::__nonzero__ "[INTERNAL]  Return
truth value of an MX.

";

%feature("docstring")  casadi::MXNode::getSolve(const MX &r, bool tr, const
LinearSolver &linear_solver) const  " [INTERNAL]   Solve a system of linear
equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, const std::vector< int > &onz, bool add=false) "
[INTERNAL]  Assign nonzeros (mapping matrix)

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, bool add=false) " [INTERNAL]  Assign nonzeros
(mapping matrix), output indices sequential.

";

%feature("docstring")  casadi::MXNode::isNonLinear() "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring")  casadi::MXNode::getFunctionOutput() const  "
[INTERNAL]  Get function output.

";

%feature("docstring")  casadi::MXNode::getInverse() const  " [INTERNAL]
Inverse.

";

%feature("docstring")  casadi::Constant< Value >::isIdentity() const  "
[INTERNAL]  Check if identity matrix.

";

%feature("docstring")  casadi::MXNode::isUnaryOp() const  " [INTERNAL]
Check if unary operation.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream) const  "
[INTERNAL]  Print a description.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream, long
&remaining_calls) const  " [INTERNAL]  Print expression (make sure number of
calls is not exceeded)

";

%feature("docstring")  casadi::ConstantMX::evaluateMX(const MXPtrV &input,
MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV
&adjSeed, MXPtrVV &adjSens, bool output_given) " [INTERNAL]  Evaluate the
function symbolically ( MX)

";

%feature("docstring")  casadi::MXNode::evaluateMX(const MXPtrV &input,
MXPtrV &output) " [INTERNAL]  Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring")  casadi::SharedObjectNode::isInit() const  "
[INTERNAL]  Check if the object has been initialized.

";

%feature("docstring")  casadi::MXNode::size1() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::shape() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::size2() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getDeterminant() const  " [INTERNAL]
Determinant.

";

%feature("docstring")  casadi::SharedObjectNode::init() "[INTERNAL]
Initialize the object.

";

%feature("docstring")  casadi::MXNode::getMultiplication(const MX &y, const
Sparsity &sp_z=Sparsity()) const  " [INTERNAL]   Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring")  casadi::MXNode::isBinaryOp() const  " [INTERNAL]
Check if binary operation.

";

%feature("docstring")  casadi::Constant< Value >::getValue() const  "
[INTERNAL]  Get the value (only for scalar constant nodes)

";

%feature("docstring")  casadi::SharedObjectNode::assertInit() const  "
[INTERNAL]  Assert that the object has been initialized.

";

%feature("docstring")  casadi::MXNode::hasDep() const  " [INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring")  casadi::Constant< Value >::getMatrixValue() const  "
[INTERNAL]  Get the value (only for constant nodes)

";

%feature("docstring")  casadi::MXNode::size() const  " [INTERNAL] ";

%feature("docstring") casadi::Constant "[INTERNAL]  A constant with all
entries identical.

C++ includes: constant_mx.hpp ";

%feature("docstring")  casadi::Constant< Value >::getGetNonzeros(const
Sparsity &sp, const std::vector< int > &nz) const  " [INTERNAL]  Get the
nonzeros of matrix.

";

%feature("docstring")  casadi::MXNode::numInplace() const  " [INTERNAL]  Can
the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) const  " [INTERNAL]
dependencies - functions that have to be evaluated before this one

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) " [INTERNAL] ";

%feature("docstring") casadi::Constant< Value >::Constant(const Sparsity
&sp, Value v=Value()) " [INTERNAL]  Constructor.

";

%feature("docstring")  casadi::ConstantMX::getInnerProd(const MX &y) const
" [INTERNAL]   Matrix multiplication.

Inner product

";

%feature("docstring")  casadi::MXNode::getNormInf() const  " [INTERNAL]
Infinity norm.

";

%feature("docstring")  casadi::MXNode::getOutput(int oind) const  "
[INTERNAL]  Get an output.

";

%feature("docstring")  casadi::MXNode::getBinarySwitch(int op, const MX &y)
const  " [INTERNAL]  Get a binary operation operation.

";

%feature("docstring")  casadi::Constant< Value >::getHorzcat(const
std::vector< MX > &x) const  " [INTERNAL]  Create a horizontal concatenation
node.

";


// File: classcasadi_1_1ConstantDMatrix.xml
%feature("docstring")  casadi::ConstantDMatrix::isEqual(const MXNode *node,
int depth) const  " [INTERNAL]  Check if two nodes are equivalent up to a
given depth.

";

%feature("docstring")  casadi::ConstantMX::evaluateMX(const MXPtrV &input,
MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV
&adjSeed, MXPtrVV &adjSens, bool output_given) " [INTERNAL]  Evaluate the
function symbolically ( MX)

";

%feature("docstring")  casadi::MXNode::evaluateMX(const MXPtrV &input,
MXPtrV &output) " [INTERNAL]  Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring")  casadi::ConstantMX::propagateSparsity(DMatrixPtrV
&input, DMatrixPtrV &output, bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp,
bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::getNorm2() const  " [INTERNAL]
Spectral norm.

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) const  " [INTERNAL]
dependencies - functions that have to be evaluated before this one

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getSolve(const MX &r, bool tr, const
LinearSolver &linear_solver) const  " [INTERNAL]   Solve a system of linear
equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring")  casadi::MXNode::getOutput(int oind) const  "
[INTERNAL]  Get an output.

";

%feature("docstring")  casadi::MXNode::getReshape(const Sparsity &sp) const
" [INTERNAL]   Reshape.

";

%feature("docstring")  casadi::ConstantDMatrix::printPart(std::ostream
&stream, int part) const  " [INTERNAL]  Print a part of the expression.

";

%feature("docstring")  casadi::ConstantDMatrix::isIdentity() const  "
[INTERNAL]  Check if identity matrix.

";

%feature("docstring")  casadi::MXNode::ndep() const  " [INTERNAL]  Number of
dependencies.

";

%feature("docstring")  casadi::ConstantDMatrix::isZero() const  " [INTERNAL]
Check if a particular integer value.

";

%feature("docstring")  casadi::MXNode::getDeterminant() const  " [INTERNAL]
Determinant.

";

%feature("docstring")  casadi::MXNode::addDependency(const MX &dep) "
[INTERNAL]  Add a dependency.

";

%feature("docstring")  casadi::MXNode::size() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::nTmp(size_t &ni, size_t &nr) "
[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::MXNode::getNorm1() const  " [INTERNAL]
1-norm

";

%feature("docstring")  casadi::MXNode::numel() const  " [INTERNAL]  Get
shape.

";

%feature("docstring")
casadi::ConstantDMatrix::generateOperation(std::ostream &stream, const
std::vector< std::string > &arg, const std::vector< std::string > &res,
CodeGenerator &gen) const  " [INTERNAL]  Generate code for the operation.

";

%feature("docstring")  casadi::MXNode::getMultiplication(const MX &y, const
Sparsity &sp_z=Sparsity()) const  " [INTERNAL]   Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring")  casadi::MXNode::getTranspose() const  " [INTERNAL]
Transpose.

";

%feature("docstring") casadi::ConstantDMatrix::__nonzero__ "[INTERNAL]
Return truth value of an MX.

";

%feature("docstring")  casadi::MXNode::getNumOutputs() const  " [INTERNAL]
Number of outputs.

";

%feature("docstring")  casadi::MXNode::getSetSparse(const Sparsity &sp)
const  " [INTERNAL]  Create set sparse.

";

%feature("docstring")  casadi::MXNode::numInplace() const  " [INTERNAL]  Can
the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring")  casadi::MXNode::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied) " [INTERNAL]  Deep copy
data members.

";

%feature("docstring")  casadi::SharedObjectNode::assertInit() const  "
[INTERNAL]  Assert that the object has been initialized.

";

%feature("docstring")  casadi::MXNode::getVertsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a vertical split node (vectors
only)

";

%feature("docstring")  casadi::SharedObjectNode::getCount() const  "
[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::MXNode::getFunctionInput() const  "
[INTERNAL]  Get function input.

";

%feature("docstring")  casadi::MXNode::getHorzcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a horizontal concatenation node.

";

%feature("docstring") casadi::ConstantDMatrix::~ConstantDMatrix "[INTERNAL]
Destructor.

";

%feature("docstring")  casadi::MXNode::getNormF() const  " [INTERNAL]
Frobenius norm.

";

%feature("docstring")  casadi::MXNode::isNonLinear() "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring")  casadi::MXNode::getFunction() "[INTERNAL]  Get
function reference.

";

%feature("docstring")  casadi::MXNode::getFunction() const  " [INTERNAL]
Get function reference.

";

%feature("docstring")  casadi::MXNode::shape() const  " [INTERNAL] ";

%feature("docstring") casadi::ConstantDMatrix::ConstantDMatrix(const Matrix<
double > &x) " [INTERNAL]  Constructor.

";

%feature("docstring")  casadi::MXNode::sameOpAndDeps(const MXNode *node, int
depth) const  " [INTERNAL]  Checks if two nodes have the same operation and
have equivalent dependencies up to a given depth.

";

%feature("docstring")  casadi::MXNode::getUnary(int op) const  " [INTERNAL]
Get a unary operation.

";

%feature("docstring")  casadi::ConstantDMatrix::clone() const  " [INTERNAL]
Clone function.

";

%feature("docstring")  casadi::MXNode::isBinaryOp() const  " [INTERNAL]
Check if binary operation.

";

%feature("docstring")  casadi::MXNode::getInverse() const  " [INTERNAL]
Inverse.

";

%feature("docstring")  casadi::MXNode::repr(std::ostream &stream) const  "
[INTERNAL]  Print a representation.

";

%feature("docstring")  casadi::SharedObjectNode::weak() "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring")  casadi::SharedObjectNode::init() "[INTERNAL]
Initialize the object.

";

%feature("docstring")  casadi::SharedObjectNode::isInit() const  "
[INTERNAL]  Check if the object has been initialized.

";

%feature("docstring")  casadi::MXNode::sparsity() const  " [INTERNAL]  Get
the sparsity.

";

%feature("docstring")  casadi::MXNode::sparsity(int oind) const  "
[INTERNAL]  Get the sparsity of output oind.

";

%feature("docstring")  casadi::MXNode::getFunctionOutput() const  "
[INTERNAL]  Get function output.

";

%feature("docstring")  casadi::ConstantDMatrix::isOne() const  " [INTERNAL]
Check if identically one.

";

%feature("docstring") casadi::ConstantDMatrix "[INTERNAL]  A constant given
as a DMatrix.

C++ includes: constant_mx.hpp ";

%feature("docstring")  casadi::MXNode::size2() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::size1() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::setSparsity(const Sparsity &sparsity)
" [INTERNAL]  Set the sparsity.

";

%feature("docstring")  casadi::MXNode::getNormInf() const  " [INTERNAL]
Infinity norm.

";

%feature("docstring")  casadi::MXNode::isValue(double val) const  "
[INTERNAL]  Check if a certain value.

";

%feature("docstring")  casadi::ConstantDMatrix::evaluateD(const DMatrixPtrV
&input, DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double >
&rtmp) " [INTERNAL]  Evaluate the function numerically.

";

%feature("docstring")  casadi::ConstantDMatrix::getValue() const  "
[INTERNAL]  Get the value (only for scalar constant nodes)

";

%feature("docstring")  casadi::ConstantMX::getOp() const  " [INTERNAL]  Get
the operation.

";

%feature("docstring")  casadi::MXNode::getVertcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a vertical concatenation node (vectors only)

";

%feature("docstring")  casadi::MXNode::isOutputNode() const  " [INTERNAL]
Check if evaluation output.

";

%feature("docstring")  casadi::ConstantDMatrix::evaluateSX(const SXPtrV
&input, SXPtrV &output, std::vector< int > &itmp, std::vector< SXElement >
&rtmp) " [INTERNAL]  Evaluate the function symbolically (SX)

";

%feature("docstring")  casadi::MXNode::hasDep() const  " [INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring")  casadi::MXNode::mapping() const  " [INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring")  casadi::MXNode::getBinarySwitch(int op, const MX &y)
const  " [INTERNAL]  Get a binary operation operation.

";

%feature("docstring")  casadi::MXNode::getBinary(int op, const MX &y, bool
scX, bool scY) const  " [INTERNAL]  Get a binary operation operation
(matrix-matrix)

";

%feature("docstring")  casadi::MXNode::simplifyMe(MX &ex) " [INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring")  casadi::MXNode::getGetNonzeros(const Sparsity &sp,
const std::vector< int > &nz) const  " [INTERNAL]  Get the nonzeros of
matrix.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep) "
[INTERNAL]  Set unary dependency.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2) " [INTERNAL]  Set binary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2, const MX &dep3) " [INTERNAL]  Set ternary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const std::vector< MX
> &dep) " [INTERNAL]  Set multiple dependencies.

";

%feature("docstring")  casadi::MXNode::getSetNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Assign the nonzeros of a matrix
to another matrix.

";

%feature("docstring")  casadi::MXNode::getSubRef(const Slice &i, const Slice
&j) const  " [INTERNAL]  Get submatrix reference.

";

%feature("docstring")  casadi::MXNode::getSubAssign(const MX &y, const Slice
&i, const Slice &j) const  " [INTERNAL]  Get submatrix assignment.

";

%feature("docstring")  casadi::MXNode::getAssertion(const MX &y, const
std::string &fail_message="") const  " [INTERNAL]   Assertion.

";

%feature("docstring")  casadi::MXNode::getAddNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Add the nonzeros of a matrix to
another matrix.

";

%feature("docstring")  casadi::MXNode::isMultipleOutput() const  "
[INTERNAL]  Check if a multiple output node.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream) const  "
[INTERNAL]  Print a description.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream, long
&remaining_calls) const  " [INTERNAL]  Print expression (make sure number of
calls is not exceeded)

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, const std::vector< int > &onz, bool add=false) "
[INTERNAL]  Assign nonzeros (mapping matrix)

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, bool add=false) " [INTERNAL]  Assign nonzeros
(mapping matrix), output indices sequential.

";

%feature("docstring")  casadi::ConstantMX::getInnerProd(const MX &y) const
" [INTERNAL]   Matrix multiplication.

Inner product

";

%feature("docstring")  casadi::MXNode::getHorzsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a horizontal split node.

";

%feature("docstring")  casadi::ConstantDMatrix::getMatrixValue() const  "
[INTERNAL]  Get the value (only for constant nodes)

";

%feature("docstring")  casadi::MXNode::isUnaryOp() const  " [INTERNAL]
Check if unary operation.

";

%feature("docstring")  casadi::MXNode::getName() const  " [INTERNAL]  Get
the name.

";

%feature("docstring")  casadi::ConstantDMatrix::isMinusOne() const  "
[INTERNAL] ";


// File: classcasadi_1_1ConstantMX.xml
%feature("docstring")  casadi::MXNode::getBinary(int op, const MX &y, bool
scX, bool scY) const  " [INTERNAL]  Get a binary operation operation
(matrix-matrix)

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) const  " [INTERNAL]
dependencies - functions that have to be evaluated before this one

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::isMultipleOutput() const  "
[INTERNAL]  Check if a multiple output node.

";

%feature("docstring")  casadi::MXNode::isZero() const  " [INTERNAL]  Check
if identically zero.

";

%feature("docstring")  casadi::MXNode::repr(std::ostream &stream) const  "
[INTERNAL]  Print a representation.

";

%feature("docstring")  casadi::MXNode::numel() const  " [INTERNAL]  Get
shape.

";

%feature("docstring")  casadi::MXNode::getSubAssign(const MX &y, const Slice
&i, const Slice &j) const  " [INTERNAL]  Get submatrix assignment.

";

%feature("docstring")  casadi::MXNode::getBinarySwitch(int op, const MX &y)
const  " [INTERNAL]  Get a binary operation operation.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep) "
[INTERNAL]  Set unary dependency.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2) " [INTERNAL]  Set binary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2, const MX &dep3) " [INTERNAL]  Set ternary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const std::vector< MX
> &dep) " [INTERNAL]  Set multiple dependencies.

";

%feature("docstring")  casadi::MXNode::getVertcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a vertical concatenation node (vectors only)

";

%feature("docstring") casadi::ConstantMX::~ConstantMX "[INTERNAL]
Destructor.

";

%feature("docstring")  casadi::MXNode::simplifyMe(MX &ex) " [INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring")  casadi::SharedObjectNode::getCount() const  "
[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::MXNode::getInverse() const  " [INTERNAL]
Inverse.

";

%feature("docstring")  casadi::ConstantMX::propagateSparsity(DMatrixPtrV
&input, DMatrixPtrV &output, bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp,
bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::getNormInf() const  " [INTERNAL]
Infinity norm.

";

%feature("docstring")  casadi::ConstantMX::getOp() const  " [INTERNAL]  Get
the operation.

";

%feature("docstring")  casadi::MXNode::getHorzsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a horizontal split node.

";

%feature("docstring")  casadi::MXNode::getSolve(const MX &r, bool tr, const
LinearSolver &linear_solver) const  " [INTERNAL]   Solve a system of linear
equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring")  casadi::MXNode::numInplace() const  " [INTERNAL]  Can
the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring")  casadi::MXNode::sparsity() const  " [INTERNAL]  Get
the sparsity.

";

%feature("docstring")  casadi::MXNode::sparsity(int oind) const  "
[INTERNAL]  Get the sparsity of output oind.

";

%feature("docstring")  casadi::SharedObjectNode::init() "[INTERNAL]
Initialize the object.

";

%feature("docstring")  casadi::MXNode::size() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::isIdentity() const  " [INTERNAL]
Check if identity matrix.

";

%feature("docstring")  casadi::ConstantMX::clone() const  " [INTERNAL]
Clone function.

";

%feature("docstring")  casadi::MXNode::hasDep() const  " [INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring")  casadi::MXNode::getAssertion(const MX &y, const
std::string &fail_message="") const  " [INTERNAL]   Assertion.

";

%feature("docstring")  casadi::MXNode::printPart(std::ostream &stream, int
part) const  " [INTERNAL]  Print a part of the expression.

";

%feature("docstring")  casadi::MXNode::getNormF() const  " [INTERNAL]
Frobenius norm.

";

%feature("docstring")  casadi::ConstantMX::getMatrixValue() const  "
[INTERNAL]  Get the value (only for constant nodes)

";

%feature("docstring")  casadi::MXNode::sameOpAndDeps(const MXNode *node, int
depth) const  " [INTERNAL]  Checks if two nodes have the same operation and
have equivalent dependencies up to a given depth.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream) const  "
[INTERNAL]  Print a description.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream, long
&remaining_calls) const  " [INTERNAL]  Print expression (make sure number of
calls is not exceeded)

";

%feature("docstring")  casadi::MXNode::getVertsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a vertical split node (vectors
only)

";

%feature("docstring")  casadi::MXNode::getOutput(int oind) const  "
[INTERNAL]  Get an output.

";

%feature("docstring")  casadi::ConstantMX::getInnerProd(const MX &y) const
" [INTERNAL]   Matrix multiplication.

Inner product

";

%feature("docstring")  casadi::MXNode::isOne() const  " [INTERNAL]  Check if
identically one.

";

%feature("docstring") casadi::ConstantMX::__nonzero__ "[INTERNAL]  Return
truth value of an MX.

";

%feature("docstring")  casadi::ConstantMX::evaluateD(const DMatrixPtrV
&input, DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double >
&rtmp) " [INTERNAL]  Evaluate the function numerically.

";

%feature("docstring")  casadi::MXNode::getMultiplication(const MX &y, const
Sparsity &sp_z=Sparsity()) const  " [INTERNAL]   Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring")  casadi::MXNode::getHorzcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a horizontal concatenation node.

";

%feature("docstring") casadi::ConstantMX::ConstantMX(const Sparsity &sp) "
[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::MXNode::size2() const  " [INTERNAL] ";

%feature("docstring")  casadi::SharedObjectNode::assertInit() const  "
[INTERNAL]  Assert that the object has been initialized.

";

%feature("docstring")  casadi::ConstantMX::evaluateMX(const MXPtrV &input,
MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV
&adjSeed, MXPtrVV &adjSens, bool output_given) " [INTERNAL]  Evaluate the
function symbolically ( MX)

";

%feature("docstring")  casadi::MXNode::evaluateMX(const MXPtrV &input,
MXPtrV &output) " [INTERNAL]  Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring")  casadi::MXNode::size1() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getFunctionInput() const  "
[INTERNAL]  Get function input.

";

%feature("docstring")  casadi::MXNode::isOutputNode() const  " [INTERNAL]
Check if evaluation output.

";

%feature("docstring")  casadi::MXNode::getSetSparse(const Sparsity &sp)
const  " [INTERNAL]  Create set sparse.

";

%feature("docstring")  casadi::MXNode::getAddNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Add the nonzeros of a matrix to
another matrix.

";

%feature("docstring")  casadi::MXNode::getNorm1() const  " [INTERNAL]
1-norm

";

%feature("docstring")  casadi::MXNode::getNorm2() const  " [INTERNAL]
Spectral norm.

";

%feature("docstring")  casadi::ConstantMX::evaluateSX(const SXPtrV &input,
SXPtrV &output, std::vector< int > &itmp, std::vector< SXElement > &rtmp) "
[INTERNAL]  Evaluate the function symbolically (SX)

";

%feature("docstring")  casadi::MXNode::getTranspose() const  " [INTERNAL]
Transpose.

";

%feature("docstring")  casadi::MXNode::getSetNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Assign the nonzeros of a matrix
to another matrix.

";

%feature("docstring")  casadi::MXNode::isValue(double val) const  "
[INTERNAL]  Check if a certain value.

";

%feature("docstring")  casadi::MXNode::generateOperation(std::ostream
&stream, const std::vector< std::string > &arg, const std::vector<
std::string > &res, CodeGenerator &gen) const  " [INTERNAL]  Generate code
for the operation.

";

%feature("docstring")  casadi::ConstantMX::getValue() const  " [INTERNAL]
Get the value (only for scalar constant nodes)

";

%feature("docstring")  casadi::MXNode::shape() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getDeterminant() const  " [INTERNAL]
Determinant.

";

%feature("docstring")  casadi::SharedObjectNode::isInit() const  "
[INTERNAL]  Check if the object has been initialized.

";

%feature("docstring")  casadi::MXNode::nTmp(size_t &ni, size_t &nr) "
[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::MXNode::ndep() const  " [INTERNAL]  Number of
dependencies.

";

%feature("docstring")  casadi::MXNode::mapping() const  " [INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, const std::vector< int > &onz, bool add=false) "
[INTERNAL]  Assign nonzeros (mapping matrix)

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, bool add=false) " [INTERNAL]  Assign nonzeros
(mapping matrix), output indices sequential.

";

%feature("docstring")  casadi::MXNode::getName() const  " [INTERNAL]  Get
the name.

";

%feature("docstring")  casadi::MXNode::isEqual(const MXNode *node, int
depth) const  " [INTERNAL]  Check if two nodes are equivalent up to a given
depth.

";

%feature("docstring")  casadi::MXNode::getUnary(int op) const  " [INTERNAL]
Get a unary operation.

";

%feature("docstring")  casadi::MXNode::getFunction() "[INTERNAL]  Get
function reference.

";

%feature("docstring")  casadi::MXNode::getFunction() const  " [INTERNAL]
Get function reference.

";

%feature("docstring")  casadi::MXNode::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied) " [INTERNAL]  Deep copy
data members.

";

%feature("docstring")  casadi::MXNode::getNumOutputs() const  " [INTERNAL]
Number of outputs.

";

%feature("docstring")  casadi::MXNode::isUnaryOp() const  " [INTERNAL]
Check if unary operation.

";

%feature("docstring")  casadi::MXNode::addDependency(const MX &dep) "
[INTERNAL]  Add a dependency.

";

%feature("docstring")  casadi::MXNode::getGetNonzeros(const Sparsity &sp,
const std::vector< int > &nz) const  " [INTERNAL]  Get the nonzeros of
matrix.

";

%feature("docstring")  casadi::MXNode::isNonLinear() "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring")  casadi::MXNode::getFunctionOutput() const  "
[INTERNAL]  Get function output.

";

%feature("docstring")  casadi::SharedObjectNode::weak() "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring")  casadi::MXNode::getSubRef(const Slice &i, const Slice
&j) const  " [INTERNAL]  Get submatrix reference.

";

%feature("docstring") casadi::ConstantMX "[INTERNAL]  Represents an MX that
is only composed of a constant.

Joel Andersson  A regular user is not supposed to work with this Node class.
This user can call MX(double) directly, or even rely on implicit
typecasting. See:  zeros , ones

C++ includes: constant_mx.hpp ";

%feature("docstring")  casadi::MXNode::getReshape(const Sparsity &sp) const
" [INTERNAL]   Reshape.

";

%feature("docstring")  casadi::MXNode::setSparsity(const Sparsity &sparsity)
" [INTERNAL]  Set the sparsity.

";

%feature("docstring")  casadi::MXNode::isBinaryOp() const  " [INTERNAL]
Check if binary operation.

";


// File: classcasadi_1_1ConstantSX.xml
%feature("docstring")  casadi::SXNode::isOne() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring")  casadi::SXNode::isSymbolic() const  " [INTERNAL]
check properties of a node

";

%feature("docstring")  casadi::SXNode::ndep() const  " [INTERNAL]  Number of
dependencies.

";

%feature("docstring")  casadi::SXNode::isMinusInf() const  " [INTERNAL]
check properties of a node

";

%feature("docstring")  casadi::SXNode::hasDep() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring")  casadi::SXNode::isInf() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring")  casadi::SXNode::print(std::ostream &stream) const  "
[INTERNAL]  print

";

%feature("docstring") casadi::ConstantSX "[INTERNAL]  Represents a constant
SX.

Joel Andersson

C++ includes: constant_sx.hpp ";

%feature("docstring")  casadi::ConstantSX::isConstant() const  " [INTERNAL]
Properties.

";

%feature("docstring")  casadi::SXNode::isAlmostZero(double tol) const  "
[INTERNAL]  check properties of a node

";

%feature("docstring")  casadi::ConstantSX::getValue() const  " [INTERNAL]
Get the value must be defined.

";

%feature("docstring")  casadi::ConstantSX::getOp() const  " [INTERNAL]  Get
the operation.

";

%feature("docstring")  casadi::SXNode::getIntValue() const  " [INTERNAL]
Get value of a constant node.

";

%feature("docstring")  casadi::SXNode::marked() const  " [INTERNAL] ";

%feature("docstring") casadi::ConstantSX::~ConstantSX "[INTERNAL] ";

%feature("docstring")  casadi::SXNode::getName() const  " [INTERNAL] ";

%feature("docstring")  casadi::SXNode::init() "[INTERNAL]  Initialize the
node (currently used only to give a similar interface to MXNode)

";

%feature("docstring")  casadi::SXNode::isNan() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring")  casadi::ConstantSX::isEqual(const SXNode *node, int
depth) const  " [INTERNAL]  Check if two nodes are equivalent up to a given
depth.

";

%feature("docstring")  casadi::SXNode::isZero() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring")  casadi::SXNode::mark() "[INTERNAL] ";

%feature("docstring")  casadi::SXNode::dep(int i) const  " [INTERNAL]  get
the reference of a child

";

%feature("docstring")  casadi::SXNode::dep(int i) " [INTERNAL]  get the
reference of a child

";

%feature("docstring")  casadi::SXNode::isInteger() const  " [INTERNAL]
check properties of a node

";

%feature("docstring")  casadi::SXNode::isSmooth() const  " [INTERNAL]  Check
if smooth.

";

%feature("docstring")  casadi::SXNode::isMinusOne() const  " [INTERNAL]
check properties of a node

";


// File: classcasadi_1_1ControlledDAEInputIOSchemeVector.xml
%feature("docstring")  casadi::IOSchemeVector< M  >::vector() const "
[INTERNAL] ";

%feature("docstring") casadi::ControlledDAEInputIOSchemeVector::__getitem__
"[INTERNAL] ";

%feature("docstring") casadi::ControlledDAEInputIOSchemeVector::__getitem__
"[INTERNAL] ";

%feature("docstring")  casadi::IOSchemeVector< M  >::repr(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "
[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::ControlledDAEInputIOSchemeVector< M
>::ControlledDAEInputIOSchemeVector(const std::vector< M > &t) " [INTERNAL]
";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "
[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::IOSchemeVector< M  >::print(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a description of the object.

";

%feature("docstring") casadi::ControlledDAEInputIOSchemeVector "[INTERNAL]
Helper function for 'ControlledDAEInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::ControlledDAEInputIOSchemeVector::__len__ "[INTERNAL] ";


// File: classcasadi_1_1ControlSimulator.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::OptionsFunctionality::hasOption(const std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring") casadi::ControlSimulator "

Piecewise Simulation class.

A ControlSimulator can be seen as a chain of Simulators whereby some
parameters change from one Simulator to the next.

These changing parameters can typically be interpreted as \"controls\" in
the context of dynamic optimization.

We discriminate between the following time steps: Major time-steps. These
are the time steps provided by the supplied grid. Controls are constant
inbetween major time-steps  Minor time-steps. These are time steps linearly
interpolated from one major time-step to the next. The option 'nf' regulates
how many minor time-steps are taken.  Integration time-steps. Time steps
that the supplied integrator might choose to integrate the continuous
dynamics. They are not important what ControlSimulator is concerned.  np
Number of parameters nu Number of controls ns The number of major grid
points, as supplied in the constructor nf The number of minor grid points
per major interval

Joris Gillis

>Input scheme: casadi::ControlSimulatorInput (CONTROLSIMULATOR_NUM_IN = 4) [controlsimulatorIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| CONTROLSIMULATOR_X0    | x0                     | Differential or        |
|                        |                        | algebraic state at t0  |
|                        |                        | (dimension nx-by-1) .  |
+------------------------+------------------------+------------------------+
| CONTROLSIMULATOR_P     | p                      | Parameters that are    |
|                        |                        | fixed over the entire  |
|                        |                        | horizon (dimension np- |
|                        |                        | by-1) .                |
+------------------------+------------------------+------------------------+
| CONTROLSIMULATOR_U     | u                      | Parameters that change |
|                        |                        | over the integration   |
|                        |                        | intervals (dimension   |
|                        |                        | nu-by-(ns-1)) .        |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| control_endp | OT_BOOLEAN   | false        | Used for int | casadi::Cont |
| oint         |              |              | erpolation.  | rolSimulator |
|              |              |              |              | Internal     |
+--------------+--------------+--------------+--------------+--------------+
| control_inte | OT_STRING    | \"none\"       | none|nearest | casadi::Cont |
| rpolation    |              |              | |linear      | rolSimulator |
|              |              |              |              | Internal     |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_augme | OT_BOOLEAN   | true         | DAE callback | casadi::Cont |
| nted         |              |              | function     | rolSimulator |
|              |              |              | also be      | Internal     |
|              |              |              | SXFunction . |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: control_simulator.hpp ";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")  casadi::ControlSimulator::getMajorIndex() const  "

Get the index i such that gridminor[i] == gridmajor

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::ControlSimulator::getMinorT() const  "

Get the (minor) time grid The length is (ns-1)*nf + 1

";

%feature("docstring")  casadi::ControlSimulator::getMinorU() const  "

Get the controls, sampled on the minor timescale. Number of rows is
(ns-1)*nf.

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::ControlSimulator::ControlSimulator() "

Default constructor.

";

%feature("docstring") casadi::ControlSimulator::ControlSimulator(const
Function &dae, const Function &output_fcn, const std::vector< double >
&grid) "

Creates a piecewise simulator.

Parameters:
-----------

ffcn:  Continuous time dynamics, an casadi::Function with the following
mapping:

>Input scheme: casadi::ControlledDAEInput (CONTROL_DAE_NUM_IN = 10) [controldaeIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| CONTROL_DAE_T          | t                      | Global physical time.  |
|                        |                        | (1-by-1) .             |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_X          | x                      | State vector           |
|                        |                        | (dimension nx-by-1).   |
|                        |                        | Should have the same   |
|                        |                        | amount of non-zeros as |
|                        |                        | DAEOutput:DAE_RES      |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_Z          | z                      | Algebraic state vector |
|                        |                        | (dimension np-by-1). . |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_P          | p                      | Parameter vector       |
|                        |                        | (dimension np-by-1). . |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_U          | u                      | Control vector         |
|                        |                        | (dimension nu-by-1). . |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_U_INTERP   | u_interp               | Control vector,        |
|                        |                        | linearly interpolated  |
|                        |                        | (dimension nu-by-1). . |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_X_MAJOR    | x_major                | State vector           |
|                        |                        | (dimension nx-by-1) at |
|                        |                        | the last major time-   |
|                        |                        | step .                 |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_T0         | t0                     | Time at start of       |
|                        |                        | control interval       |
|                        |                        | (1-by-1) .             |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_TF         | tf                     | Time at end of control |
|                        |                        | interval (1-by-1) .    |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::DAEOutput (DAE_NUM_OUT = 4) [daeOut]
+-----------+-------+--------------------------------------------+
| Full name | Short |                Description                 |
+===========+=======+============================================+
| DAE_ODE   | ode   | Right hand side of the implicit ODE .      |
+-----------+-------+--------------------------------------------+
| DAE_ALG   | alg   | Right hand side of algebraic equations .   |
+-----------+-------+--------------------------------------------+
| DAE_QUAD  | quad  | Right hand side of quadratures equations . |
+-----------+-------+--------------------------------------------+

Parameters:
-----------

output_fcn:  output function which maps ControlledDAEInput or DAEInput to n
outputs.

>Input scheme: casadi::DAEInput (DAE_NUM_IN = 5) [daeIn]
+-----------+-------+----------------------------+
| Full name | Short |        Description         |
+===========+=======+============================+
| DAE_X     | x     | Differential state .       |
+-----------+-------+----------------------------+
| DAE_Z     | z     | Algebraic state .          |
+-----------+-------+----------------------------+
| DAE_P     | p     | Parameter .                |
+-----------+-------+----------------------------+
| DAE_T     | t     | Explicit time dependence . |
+-----------+-------+----------------------------+

>Input scheme: casadi::ControlledDAEInput (CONTROL_DAE_NUM_IN = 10) [controldaeIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| CONTROL_DAE_T          | t                      | Global physical time.  |
|                        |                        | (1-by-1) .             |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_X          | x                      | State vector           |
|                        |                        | (dimension nx-by-1).   |
|                        |                        | Should have the same   |
|                        |                        | amount of non-zeros as |
|                        |                        | DAEOutput:DAE_RES      |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_Z          | z                      | Algebraic state vector |
|                        |                        | (dimension np-by-1). . |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_P          | p                      | Parameter vector       |
|                        |                        | (dimension np-by-1). . |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_U          | u                      | Control vector         |
|                        |                        | (dimension nu-by-1). . |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_U_INTERP   | u_interp               | Control vector,        |
|                        |                        | linearly interpolated  |
|                        |                        | (dimension nu-by-1). . |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_X_MAJOR    | x_major                | State vector           |
|                        |                        | (dimension nx-by-1) at |
|                        |                        | the last major time-   |
|                        |                        | step .                 |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_T0         | t0                     | Time at start of       |
|                        |                        | control interval       |
|                        |                        | (1-by-1) .             |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_TF         | tf                     | Time at end of control |
|                        |                        | interval (1-by-1) .    |
+------------------------+------------------------+------------------------+

Parameters:
-----------

grid:  the major time grid

";

%feature("docstring") casadi::ControlSimulator::ControlSimulator(const
Function &dae, const Function &output_fcn, const Matrix< double > &grid) "
";

%feature("docstring") casadi::ControlSimulator::ControlSimulator(const
Function &dae, const std::vector< double > &grid) "

Output function equal to the state.

";

%feature("docstring") casadi::ControlSimulator::ControlSimulator(const
Function &dae, const Matrix< double > &grid) " ";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::ControlSimulator::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";


// File: classcasadi_1_1ControlSimulatorInputIOSchemeVector.xml
%feature("docstring")  casadi::IOSchemeVector< M  >::print(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a description of the object.

";

%feature("docstring") casadi::ControlSimulatorInputIOSchemeVector< M
>::ControlSimulatorInputIOSchemeVector(const std::vector< M > &t) "
[INTERNAL] ";

%feature("docstring")  casadi::IOSchemeVector< M  >::vector() const "
[INTERNAL] ";

%feature("docstring") casadi::ControlSimulatorInputIOSchemeVector "[INTERNAL]  Helper function for 'ControlSimulatorInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::ControlSimulatorInputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring")  casadi::IOSchemeVector< M  >::repr(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "
[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "
[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring")
casadi::ControlSimulatorInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring")
casadi::ControlSimulatorInputIOSchemeVector::__getitem__ "[INTERNAL] ";


// File: classcasadi_1_1CplexSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::QPSolver::generateNativeCode(const
std::string &filename) const  "

Generate native code in the interfaced language for debugging

";

%feature("docstring")  casadi::QPSolver::generateNativeCode(std::ostream
&file) const  "

Generate native code in the interfaced language for debugging

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring") casadi::CplexSolver "

Interface to Cplex solver for sparse Quadratic Programs.

Solves the following strictly convex problem:

min          1/2 x' H x + g' x  x  subject to             LBA <= A x <= UBA
LBX <= x   <= UBX      with :       H sparse (n x n) positive definite
g dense  (n x 1)      n: number of decision variables (x)     nc: number of
constraints (A)

If H is not positive-definite, the solver should throw an error. Attila
Kozma, Joel Andersson

>Input scheme: casadi::QPSolverInput (QP_SOLVER_NUM_IN = 10) [qpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_H            | h                      | The square matrix H:   |
|                        |                        | sparse, (n x n). Only  |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical.     |
+------------------------+------------------------+------------------------+
| QP_SOLVER_G            | g                      | The vector g: dense,   |
|                        |                        | (n x 1) .              |
+------------------------+------------------------+------------------------+
| QP_SOLVER_A            | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LBA          | lba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_UBA          | uba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LBX          | lbx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_UBX          | ubx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_X0           | x0                     | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X0       | lam_x0                 | dense                  |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::QPSolverOutput (QP_SOLVER_NUM_OUT = 5) [qpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_X            | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| QP_SOLVER_COST         | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_A        | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X        | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| barrier_maxi | OT_INTEGER   | 2.100e+09    | Maximum      | casadi::Cple |
| ter          |              |              | number of    | xInternal    |
|              |              |              | barrier      |              |
|              |              |              | iterations.  |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| dump_filenam | OT_STRING    | \"qp.dat\"     | The filename | casadi::Cple |
| e            |              |              | to dump to.  | xInternal    |
+--------------+--------------+--------------+--------------+--------------+
| dump_to_file | OT_BOOLEAN   | false        | Dumps QP to  | casadi::Cple |
|              |              |              | file in      | xInternal    |
|              |              |              | CPLEX        |              |
|              |              |              | format.      |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| parametric   | OT_BOOLEAN   | GenericType( | input        | casadi::Cple |
|              |              | )            | argument     | xInternal    |
|              |              |              | appended at  |              |
|              |              |              | the end,     |              |
|              |              |              | denoting     |              |
|              |              |              | fixed        |              |
|              |              |              | parameters.  |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| simplex_maxi | OT_INTEGER   | 2.100e+09    | Maximum      | casadi::Cple |
| ter          |              |              | number of    | xInternal    |
|              |              |              | simplex      |              |
|              |              |              | iterations.  |              |
+--------------+--------------+--------------+--------------+--------------+
| tol          | OT_REAL      | 0.000        | Tolerance of | casadi::Cple |
|              |              |              | solver       | xInternal    |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: cplex_solver.hpp ";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::CplexSolver::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::CplexSolver::CplexSolver() "

Default constructor.

";

%feature("docstring") casadi::CplexSolver::CplexSolver(const QPStructure
&st) "

Constructor.

Parameters:
-----------

st:  Problem structure

";

%feature("docstring")  casadi::QPSolver::setLPOptions() "

Set options that make the QP solver more suitable for solving LPs.

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";


// File: classcasadi_1_1CSparse.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::CSparse::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::CSparse "

LinearSolver with CSparse Interface.

Solves the linear system A*X = B or A^T*X = B for X with A square and non-
singular

If A is structurally singular, an error will be thrown during init. If A is
numerically singular, the prepare step will fail.

CSparse is an casadi::Function mapping from 2 inputs [ A (matrix),b
(vector)] to one output [x (vector)].

The usual procedure to use CSparse is:  init()

set the first input (A)

prepare()

set the second input (b)

solve()

Repeat steps 4 and 5 to work with other b vectors.

The method evaluate() combines the prepare() and solve() step and is
therefore more expensive if A is invariant.

>Input scheme: casadi::LinsolInput (LINSOL_NUM_IN = 3) [linsolIn]
+-----------+-------+------------------------------------------------+
| Full name | Short |                  Description                   |
+===========+=======+================================================+
| LINSOL_A  | A     | The square matrix A: sparse, (n x n). .        |
+-----------+-------+------------------------------------------------+
| LINSOL_B  | B     | The right-hand-side matrix b: dense, (n x m) . |
+-----------+-------+------------------------------------------------+

>Output scheme: casadi::LinsolOutput (LINSOL_NUM_OUT = 2) [linsolOut]
+-----------+-------+----------------------------------------------+
| Full name | Short |                 Description                  |
+===========+=======+==============================================+
| LINSOL_X  | X     | Solution to the linear system of equations . |
+-----------+-------+----------------------------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: csparse.hpp ";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::LinearSolver::solve(bool transpose=false) "

Solve the system of equations, internal vector.

";

%feature("docstring")  casadi::LinearSolver::solve(double *x, int nrhs=1,
bool transpose=false) " [INTERNAL]   Solve the factorized system of
equations.

";

%feature("docstring")  casadi::LinearSolver::solve(const MX &A, const MX &B,
bool transpose=false) "

Create a solve node.

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")  casadi::LinearSolver::prepare() "

Factorize the matrix.

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::LinearSolver::spSolve(bvec_t *X, const bvec_t
*B, bool transpose=false) const  " [INTERNAL]  Propagate sparsity through a
linear solve

";

%feature("docstring")  casadi::LinearSolver::spSolve(DMatrix &X, const
DMatrix &B, bool transpose=false) const  " [INTERNAL]  Propagate sparsity
through a linear solve

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring") casadi::CSparse::CSparse() "

Default (empty) constructor.

";

%feature("docstring") casadi::CSparse::CSparse(const Sparsity &sp, int
nrhs=1) "

Create a linear solver given a sparsity pattern.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::LinearSolver::prepared() const  "

Check if prepared.

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";


// File: classcasadi_1_1CSparseCholesky.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::OptionsFunctionality::hasSetOption(const std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::CSparseCholesky::getFactorization(bool
transpose=false) const  "

Obtain a numeric Cholesky factorization.

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::LinearSolver::prepare() "

Factorize the matrix.

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::LinearSolver::solve(bool transpose=false) "

Solve the system of equations, internal vector.

";

%feature("docstring")  casadi::LinearSolver::solve(double *x, int nrhs=1,
bool transpose=false) " [INTERNAL]   Solve the factorized system of
equations.

";

%feature("docstring")  casadi::LinearSolver::solve(const MX &A, const MX &B,
bool transpose=false) "

Create a solve node.

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring") casadi::CSparseCholesky "

LinearSolver with CSparseCholesky Interface.

Solves the linear system A*X = B or A^T*X = B for X with A square and non-
singular

If A is structurally singular, an error will be thrown during init. If A is
numerically singular, the prepare step will fail.

CSparseCholesky is an casadi::Function mapping from 2 inputs [ A (matrix),b
(vector)] to one output [x (vector)].

*  A = LL' *    Ax = b *    LL'x = b *    L'x = L^-1 b *

The usual procedure to use CSparseCholesky is:  init()

set the first input (A)

prepare()

set the second input (b)

solve()

Repeat steps 4 and 5 to work with other b vectors.

The method evaluate() combines the prepare() and solve() step and is
therefore more expensive if A is invariant.

>Input scheme: casadi::LinsolInput (LINSOL_NUM_IN = 3) [linsolIn]
+-----------+-------+------------------------------------------------+
| Full name | Short |                  Description                   |
+===========+=======+================================================+
| LINSOL_A  | A     | The square matrix A: sparse, (n x n). .        |
+-----------+-------+------------------------------------------------+
| LINSOL_B  | B     | The right-hand-side matrix b: dense, (n x m) . |
+-----------+-------+------------------------------------------------+

>Output scheme: casadi::LinsolOutput (LINSOL_NUM_OUT = 2) [linsolOut]
+-----------+-------+----------------------------------------------+
| Full name | Short |                 Description                  |
+===========+=======+==============================================+
| LINSOL_X  | X     | Solution to the linear system of equations . |
+-----------+-------+----------------------------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: csparse_cholesky.hpp ";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")  casadi::LinearSolver::spSolve(bvec_t *X, const bvec_t
*B, bool transpose=false) const  " [INTERNAL]  Propagate sparsity through a
linear solve

";

%feature("docstring")  casadi::LinearSolver::spSolve(DMatrix &X, const
DMatrix &B, bool transpose=false) const  " [INTERNAL]  Propagate sparsity
through a linear solve

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")
casadi::CSparseCholesky::getFactorizationSparsity(bool transpose=false)
const  "

Obtain a symbolic Cholesky factorization.

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::CSparseCholesky::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::CSparseCholesky::solveL(double *x, int nrhs,
bool transpose) "

Solve the system of equations Lx = b

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::LinearSolver::prepared() const  "

Check if prepared.

";

%feature("docstring") casadi::CSparseCholesky::CSparseCholesky() "

Default (empty) constructor.

";

%feature("docstring") casadi::CSparseCholesky::CSparseCholesky(const
Sparsity &sp, int nrhs=1) "

Create a linear solver given a sparsity pattern.

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";


// File: classcasadi_1_1CustomEvaluate.xml
%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::SharedObject::checkNode() const  " [INTERNAL]
Assert that the node is pointing to the right type of object

";

%feature("docstring") casadi::CustomEvaluate::CustomEvaluate() "

Default constructor.

";

%feature("docstring")
casadi::CustomEvaluate::CustomEvaluate(CustomEvaluateCPtr ptr) "

Construct from C pointer.

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring") casadi::CustomEvaluate "

CustomEvaluate.

In C++, supply a CustomEvaluateCPtr function pointer

In python, supply a callable, annotated with pyevaluate decorator

C++ includes: functor.hpp ";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";


// File: classcasadi_1_1CustomFunction.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::Function::inputScheme() const  " [INTERNAL]  Access input/output
scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::CustomFunction::checkNode() const  "

Check if the pointer points towards a valid object.

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring") casadi::CustomFunction "

Interface to a custom function.

Joel Andersson

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: custom_function.hpp ";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::CustomFunction::CustomFunction(const
CustomEvaluate &c_fcn, const std::vector< Sparsity > &inputscheme, const
std::vector< Sparsity > &outputscheme) "

Create a function with input/output schemes given.

";

%feature("docstring") casadi::CustomFunction::CustomFunction(const
CustomEvaluate &c_fcn, const IOSchemeVector< Sparsity > &inputscheme, const
std::vector< Sparsity > &outputscheme) "

Create a function with input/output schemes given.

";

%feature("docstring") casadi::CustomFunction::CustomFunction(const
CustomEvaluate &c_fcn, const std::vector< Sparsity > &inputscheme, const
IOSchemeVector< Sparsity > &outputscheme) "

Create a function with input/output schemes given.

";

%feature("docstring") casadi::CustomFunction::CustomFunction(const
CustomEvaluate &c_fcn, const IOSchemeVector< Sparsity > &inputscheme, const
IOSchemeVector< Sparsity > &outputscheme) "

Create a function with input/output schemes given.

";

%feature("docstring") casadi::CustomFunction::CustomFunction() "

default constructor

";

%feature("docstring") casadi::CustomFunction::CustomFunction(const
CustomEvaluate &c_fcn) "

Create a function, user sets inputs outputs manually.

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";


// File: classcasadi_1_1CVodesIntegrator.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::SharedObject::weak() " [INTERNAL]  Get a weak reference to the
object.

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring") casadi::CVodesIntegrator "

Interface to CVodes from the Sundials suite.

Base class for integrators. Solves an initial value problem (IVP) coupled to
a terminal value problem with differential equation given as an implicit ODE
coupled to an algebraic equation and a set of quadratures: Initial
conditions at t=t0  x(t0)  = x0  q(t0)  = 0   Forward integration from t=t0
to t=tf  der(x) = function(x,z,p,t) Forward ODE  0 = fz(x,z,p,t)
Forward algebraic equations  der(q) = fq(x,z,p,t)                  Forward
quadratures Terminal conditions at t=tf  rx(tf)  = rx0  rq(tf)  = 0
Backward integration from t=tf to t=t0  der(rx) = gx(rx,rz,rp,x,z,p,t)
Backward ODE  0 = gz(rx,rz,rp,x,z,p,t)        Backward algebraic equations
der(rq) = gq(rx,rz,rp,x,z,p,t)        Backward quadratures where we assume
that both the forward and backwards integrations are index-1  (i.e. dfz/dz,
dgz/drz are invertible) and furthermore that gx, gz and gq have a linear
dependency on rx, rz and rp.

A call to evaluate will integrate to the end.

You can retrieve the entire state trajectory as follows, after the evaluate
call: Call reset. Then call integrate(t_i) and getOuput for a series of
times t_i.

>Input scheme: casadi::IntegratorInput (INTEGRATOR_NUM_IN = 7) [integratorIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_X0          | x0                     | Differential state at  |
|                        |                        | the initial time .     |
+------------------------+------------------------+------------------------+
| INTEGRATOR_P           | p                      | Parameters .           |
+------------------------+------------------------+------------------------+
| INTEGRATOR_Z0          | z0                     | Initial guess for the  |
|                        |                        | algebraic variable .   |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RX0         | rx0                    | Backward differential  |
|                        |                        | state at the final     |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RP          | rp                     | Backward parameter     |
|                        |                        | vector .               |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZ0         | rz0                    | Initial guess for the  |
|                        |                        | backwards algebraic    |
|                        |                        | variable .             |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::IntegratorOutput (INTEGRATOR_NUM_OUT = 7) [integratorOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_XF          | xf                     | Differential state at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_QF          | qf                     | Quadrature state at    |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_ZF          | zf                     | Algebraic variable at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RXF         | rxf                    | Backward differential  |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RQF         | rqf                    | Backward quadrature    |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZF         | rzf                    | Backward algebraic     |
|                        |                        | variable at the        |
|                        |                        | initial time .         |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| allow_equili | OT_BOOLEAN   | false        |              | casadi::CVod |
| bration_fail |              |              |              | esInternal   |
| ure          |              |              |              |              |
+--------------+--------------+--------------+--------------+--------------+
| artol        | OT_REAL      | 0.000        | tolerance as | casadi::Inte |
|              |              |              | provided     | gratorIntern |
|              |              |              | with         | al           |
|              |              |              | setArTol to  |              |
|              |              |              | OOQP         |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| exact_jacobi | OT_BOOLEAN   | GenericType( | [default:    | casadi::Sund |
| anB          |              | )            | equal to exa | ialsInternal |
|              |              |              | ct_jacobian] |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_augme | OT_BOOLEAN   | true         | DAE callback | casadi::Inte |
| nted         |              |              | function     | gratorIntern |
|              |              |              | also be      | al           |
|              |              |              | SXFunction . |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_LINEARSOL | GenericType( | [default:    | casadi::Sund |
| rB           | VER          | )            | equal to lin | ialsInternal |
|              |              |              | ear_solver]  |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_DICTIONAR | GenericType( | [default:    | casadi::Sund |
| r_optionsB   | Y            | )            | equal to lin | ialsInternal |
|              |              |              | ear_solver_o |              |
|              |              |              | ptions]      |              |
+--------------+--------------+--------------+--------------+--------------+
| lower_bandwi | OT_INTEGER   | GenericType( | [default:    | casadi::Sund |
| dthB         |              | )            | equal to low | ialsInternal |
|              |              |              | er_bandwidth |              |
|              |              |              | ]            |              |
+--------------+--------------+--------------+--------------+--------------+
| max_multiste | OT_INTEGER   | 5            |              | casadi::Sund |
| p_order      |              |              |              | ialsInternal |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | (eval_f|eval | casadi::Sund |
|              | TOR          | )            | _djac)       | ialsInternal |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| upper_bandwi | OT_INTEGER   | GenericType( | [default:    | casadi::Sund |
| dthB         |              | )            | equal to upp | ialsInternal |
|              |              |              | er_bandwidth |              |
|              |              |              | ]            |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available stats
+-------------+------------------------+
|     Id      |        Used in         |
+=============+========================+
| nlinsetups  | casadi::CVodesInternal |
+-------------+------------------------+
| nlinsetupsB | casadi::CVodesInternal |
+-------------+------------------------+
| nsteps      | casadi::CVodesInternal |
+-------------+------------------------+
| nstepsB     | casadi::CVodesInternal |
+-------------+------------------------+

Diagrams

C++ includes: cvodes_integrator.hpp ";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")  casadi::Integrator::printStats(std::ostream
&stream=std::cout) const  "

Print solver statistics.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::Integrator::integrateB(double t_out) "

Integrate backward until a specified time point.

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring") casadi::CVodesIntegrator::CVodesIntegrator() "

Default constructor.

";

%feature("docstring") casadi::CVodesIntegrator::CVodesIntegrator(const
Function &f, const Function &g=Function()) "

Create an integrator for explicit ODEs.

Parameters:
-----------

f:  dynamical system

>Input scheme: casadi::DAEInput (DAE_NUM_IN = 5) [daeIn]
+-----------+-------+----------------------------+
| Full name | Short |        Description         |
+===========+=======+============================+
| DAE_X     | x     | Differential state .       |
+-----------+-------+----------------------------+
| DAE_Z     | z     | Algebraic state .          |
+-----------+-------+----------------------------+
| DAE_P     | p     | Parameter .                |
+-----------+-------+----------------------------+
| DAE_T     | t     | Explicit time dependence . |
+-----------+-------+----------------------------+

>Output scheme: casadi::DAEOutput (DAE_NUM_OUT = 4) [daeOut]
+-----------+-------+--------------------------------------------+
| Full name | Short |                Description                 |
+===========+=======+============================================+
| DAE_ODE   | ode   | Right hand side of the implicit ODE .      |
+-----------+-------+--------------------------------------------+
| DAE_ALG   | alg   | Right hand side of algebraic equations .   |
+-----------+-------+--------------------------------------------+
| DAE_QUAD  | quad  | Right hand side of quadratures equations . |
+-----------+-------+--------------------------------------------+

Parameters:
-----------

g:  backwards system

>Input scheme: casadi::RDAEInput (RDAE_NUM_IN = 8) [rdaeIn]
+-----------+-------+-------------------------------+
| Full name | Short |          Description          |
+===========+=======+===============================+
| RDAE_RX   | rx    | Backward differential state . |
+-----------+-------+-------------------------------+
| RDAE_RZ   | rz    | Backward algebraic state .    |
+-----------+-------+-------------------------------+
| RDAE_RP   | rp    | Backward parameter vector .   |
+-----------+-------+-------------------------------+
| RDAE_X    | x     | Forward differential state .  |
+-----------+-------+-------------------------------+
| RDAE_Z    | z     | Forward algebraic state .     |
+-----------+-------+-------------------------------+
| RDAE_P    | p     | Parameter vector .            |
+-----------+-------+-------------------------------+
| RDAE_T    | t     | Explicit time dependence .    |
+-----------+-------+-------------------------------+

>Output scheme: casadi::RDAEOutput (RDAE_NUM_OUT = 4) [rdaeOut]
+-----------+-------+-------------------------------------------+
| Full name | Short |                Description                |
+===========+=======+===========================================+
| RDAE_ODE  | ode   | Right hand side of ODE. .                 |
+-----------+-------+-------------------------------------------+
| RDAE_ALG  | alg   | Right hand side of algebraic equations. . |
+-----------+-------+-------------------------------------------+
| RDAE_QUAD | quad  | Right hand side of quadratures. .         |
+-----------+-------+-------------------------------------------+

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::SundialsIntegrator::setStopTime(double tf) "

Set a stop time for the forward integration.

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")  casadi::Integrator::integrate(double t_out) "

Integrate forward until a specified time point.

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Integrator::getDAE() "

Get the DAE.

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::Integrator::resetB() "

Reset the backward problem.

Time will be set to tf and backward state to input(INTEGRATOR_RX0)

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::Integrator::clone() const  "

Clone.

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::Integrator::reset() "

Reset the forward problem Time will be set to t0 and state to
input(INTEGRATOR_X0)

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::CVodesIntegrator::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Integrator::getAugmented(int nfwd, int nadj)
"

Generate a augmented DAE system with nfwd forward sensitivities and nadj
adjoint sensitivities.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";


// File: classcasadi_1_1DAEInputIOSchemeVector.xml
%feature("docstring") casadi::DAEInputIOSchemeVector< M
>::DAEInputIOSchemeVector(const std::vector< M > &t) " [INTERNAL] ";

%feature("docstring") casadi::DAEInputIOSchemeVector "[INTERNAL]  Helper
function for 'DAEInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "
[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::IOSchemeVector< M  >::print(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a description of the object.

";

%feature("docstring") casadi::DAEInputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring")  casadi::IOSchemeVector< M  >::vector() const "
[INTERNAL] ";

%feature("docstring")  casadi::IOSchemeVector< M  >::repr(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a representation of the object.

";

%feature("docstring") casadi::DAEInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::DAEInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "
[INTERNAL]  Return a string with a representation (for SWIG)

";


// File: classcasadi_1_1DAEOutputIOSchemeVector.xml
%feature("docstring") casadi::DAEOutputIOSchemeVector< M
>::DAEOutputIOSchemeVector(const std::vector< M > &t) " [INTERNAL] ";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "
[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::IOSchemeVector< M  >::repr(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a representation of the object.

";

%feature("docstring") casadi::DAEOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::DAEOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring")  casadi::IOSchemeVector< M  >::print(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "
[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::IOSchemeVector< M  >::vector() const "
[INTERNAL] ";

%feature("docstring") casadi::DAEOutputIOSchemeVector "[INTERNAL]  Helper
function for 'DAEOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::DAEOutputIOSchemeVector::__len__ "[INTERNAL]
";


// File: classcasadi_1_1DenseMultiplication.xml
%feature("docstring")  casadi::MXNode::getNormF() const  " [INTERNAL]
Frobenius norm.

";

%feature("docstring")  casadi::MXNode::getValue() const  " [INTERNAL]  Get
the value (only for scalar constant nodes)

";

%feature("docstring")  casadi::MXNode::getFunction() "[INTERNAL]  Get
function reference.

";

%feature("docstring")  casadi::MXNode::getFunction() const  " [INTERNAL]
Get function reference.

";

%feature("docstring")  casadi::MXNode::getFunctionInput() const  "
[INTERNAL]  Get function input.

";

%feature("docstring")  casadi::MXNode::getHorzcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a horizontal concatenation node.

";

%feature("docstring") casadi::DenseMultiplication::__nonzero__ "[INTERNAL]
Check the truth value of this node.

";

%feature("docstring")  casadi::MXNode::getTranspose() const  " [INTERNAL]
Transpose.

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) const  " [INTERNAL]
dependencies - functions that have to be evaluated before this one

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getNormInf() const  " [INTERNAL]
Infinity norm.

";

%feature("docstring")  casadi::MXNode::getReshape(const Sparsity &sp) const
" [INTERNAL]   Reshape.

";

%feature("docstring")  casadi::MXNode::isUnaryOp() const  " [INTERNAL]
Check if unary operation.

";

%feature("docstring")  casadi::SharedObjectNode::isInit() const  "
[INTERNAL]  Check if the object has been initialized.

";

%feature("docstring")  casadi::MXNode::simplifyMe(MX &ex) " [INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, const std::vector< int > &onz, bool add=false) "
[INTERNAL]  Assign nonzeros (mapping matrix)

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, bool add=false) " [INTERNAL]  Assign nonzeros
(mapping matrix), output indices sequential.

";

%feature("docstring")  casadi::MXNode::getOutput(int oind) const  "
[INTERNAL]  Get an output.

";

%feature("docstring")  casadi::Multiplication< TrX, TrY >::isEqual(const
MXNode *node, int depth) const  " [INTERNAL]  Check if two nodes are
equivalent up to a given depth.

";

%feature("docstring")  casadi::MXNode::getDeterminant() const  " [INTERNAL]
Determinant.

";

%feature("docstring")  casadi::MXNode::getNumOutputs() const  " [INTERNAL]
Number of outputs.

";

%feature("docstring")  casadi::MXNode::isIdentity() const  " [INTERNAL]
Check if identity matrix.

";

%feature("docstring")  casadi::MXNode::getSubAssign(const MX &y, const Slice
&i, const Slice &j) const  " [INTERNAL]  Get submatrix assignment.

";

%feature("docstring")  casadi::MXNode::ndep() const  " [INTERNAL]  Number of
dependencies.

";

%feature("docstring")  casadi::MXNode::getMatrixValue() const  " [INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring")  casadi::Multiplication< TrX, TrY >::evaluateD(const
DMatrixPtrV &input, DMatrixPtrV &output, std::vector< int > &itmp,
std::vector< double > &rtmp) " [INTERNAL]  Evaluate the function
numerically.

";

%feature("docstring")  casadi::MXNode::getNorm2() const  " [INTERNAL]
Spectral norm.

";

%feature("docstring")  casadi::MXNode::isOutputNode() const  " [INTERNAL]
Check if evaluation output.

";

%feature("docstring")  casadi::MXNode::setSparsity(const Sparsity &sparsity)
" [INTERNAL]  Set the sparsity.

";

%feature("docstring")  casadi::MXNode::repr(std::ostream &stream) const  "
[INTERNAL]  Print a representation.

";

%feature("docstring")  casadi::MXNode::sparsity() const  " [INTERNAL]  Get
the sparsity.

";

%feature("docstring")  casadi::MXNode::sparsity(int oind) const  "
[INTERNAL]  Get the sparsity of output oind.

";

%feature("docstring")  casadi::MXNode::isNonLinear() "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring")  casadi::DenseMultiplication< TrX, TrY >::clone()
const  " [INTERNAL]  Clone function.

";

%feature("docstring")  casadi::MXNode::mapping() const  " [INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring")  casadi::MXNode::hasDep() const  " [INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring")  casadi::MXNode::numel() const  " [INTERNAL]  Get
shape.

";

%feature("docstring") casadi::DenseMultiplication::~DenseMultiplication "[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::SharedObjectNode::weak() "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring")  casadi::Multiplication< TrX, TrY
>::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, bool fwd) "
[INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp,
bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::isValue(double val) const  "
[INTERNAL]  Check if a certain value.

";

%feature("docstring")  casadi::Multiplication< TrX, TrY
>::printPart(std::ostream &stream, int part) const  " [INTERNAL]  Print a
part of the expression.

";

%feature("docstring")  casadi::MXNode::getVertcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a vertical concatenation node (vectors only)

";

%feature("docstring")  casadi::SharedObjectNode::assertInit() const  "
[INTERNAL]  Assert that the object has been initialized.

";

%feature("docstring")  casadi::Multiplication< TrX, TrY >::evaluateGen(const
MatV &input, MatV &output, std::vector< int > &itmp, std::vector< T > &rtmp)
" [INTERNAL]  Evaluate the function (template)

";

%feature("docstring")  casadi::MXNode::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied) " [INTERNAL]  Deep copy
data members.

";

%feature("docstring")  casadi::MXNode::getBinary(int op, const MX &y, bool
scX, bool scY) const  " [INTERNAL]  Get a binary operation operation
(matrix-matrix)

";

%feature("docstring")  casadi::MXNode::size2() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::size1() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getBinarySwitch(int op, const MX &y)
const  " [INTERNAL]  Get a binary operation operation.

";

%feature("docstring")  casadi::MXNode::getHorzsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a horizontal split node.

";

%feature("docstring")  casadi::MXNode::sameOpAndDeps(const MXNode *node, int
depth) const  " [INTERNAL]  Checks if two nodes have the same operation and
have equivalent dependencies up to a given depth.

";

%feature("docstring")  casadi::MXNode::isOne() const  " [INTERNAL]  Check if
identically one.

";

%feature("docstring")  casadi::MXNode::getSetSparse(const Sparsity &sp)
const  " [INTERNAL]  Create set sparse.

";

%feature("docstring")  casadi::MXNode::addDependency(const MX &dep) "
[INTERNAL]  Add a dependency.

";

%feature("docstring")  casadi::MXNode::getName() const  " [INTERNAL]  Get
the name.

";

%feature("docstring")  casadi::MXNode::getInnerProd(const MX &y) const  "
[INTERNAL]  Inner product.

";

%feature("docstring") casadi::DenseMultiplication< TrX, TrY
>::DenseMultiplication(const MX &z, const MX &x, const MX &y) " [INTERNAL]
Constructor.

";

%feature("docstring")  casadi::MXNode::getAddNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Add the nonzeros of a matrix to
another matrix.

";

%feature("docstring")  casadi::Multiplication< TrX, TrY >::evaluateSX(const
SXPtrV &input, SXPtrV &output, std::vector< int > &itmp, std::vector<
SXElement > &rtmp) " [INTERNAL]  Evaluate the function symbolically (SX)

";

%feature("docstring")  casadi::MXNode::getSolve(const MX &r, bool tr, const
LinearSolver &linear_solver) const  " [INTERNAL]   Solve a system of linear
equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep) "
[INTERNAL]  Set unary dependency.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2) " [INTERNAL]  Set binary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2, const MX &dep3) " [INTERNAL]  Set ternary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const std::vector< MX
> &dep) " [INTERNAL]  Set multiple dependencies.

";

%feature("docstring")  casadi::Multiplication< TrX, TrY >::evaluateMX(const
MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens,
const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given) " [INTERNAL]
Evaluate the function symbolically ( MX)

";

%feature("docstring")  casadi::MXNode::evaluateMX(const MXPtrV &input,
MXPtrV &output) " [INTERNAL]  Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring")  casadi::MXNode::getInverse() const  " [INTERNAL]
Inverse.

";

%feature("docstring")  casadi::MXNode::getAssertion(const MX &y, const
std::string &fail_message="") const  " [INTERNAL]   Assertion.

";

%feature("docstring")  casadi::Multiplication< TrX, TrY >::getOp() const  "
[INTERNAL]  Get the operation.

";

%feature("docstring")  casadi::MXNode::isZero() const  " [INTERNAL]  Check
if identically zero.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream) const  "
[INTERNAL]  Print a description.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream, long
&remaining_calls) const  " [INTERNAL]  Print expression (make sure number of
calls is not exceeded)

";

%feature("docstring")  casadi::SharedObjectNode::init() "[INTERNAL]
Initialize the object.

";

%feature("docstring")  casadi::MXNode::isBinaryOp() const  " [INTERNAL]
Check if binary operation.

";

%feature("docstring")  casadi::MXNode::getGetNonzeros(const Sparsity &sp,
const std::vector< int > &nz) const  " [INTERNAL]  Get the nonzeros of
matrix.

";

%feature("docstring")  casadi::MXNode::isMultipleOutput() const  "
[INTERNAL]  Check if a multiple output node.

";

%feature("docstring")  casadi::MXNode::getSetNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Assign the nonzeros of a matrix
to another matrix.

";

%feature("docstring")  casadi::DenseMultiplication< TrX, TrY
>::generateOperation(std::ostream &stream, const std::vector< std::string >
&arg, const std::vector< std::string > &res, CodeGenerator &gen) const  "
[INTERNAL]  Generate code for the operation.

";

%feature("docstring")  casadi::MXNode::getMultiplication(const MX &y, const
Sparsity &sp_z=Sparsity()) const  " [INTERNAL]   Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring")  casadi::MXNode::getVertsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a vertical split node (vectors
only)

";

%feature("docstring")  casadi::MXNode::getFunctionOutput() const  "
[INTERNAL]  Get function output.

";

%feature("docstring")  casadi::MXNode::getSubRef(const Slice &i, const Slice
&j) const  " [INTERNAL]  Get submatrix reference.

";

%feature("docstring")  casadi::MXNode::nTmp(size_t &ni, size_t &nr) "
[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::MXNode::shape() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getNorm1() const  " [INTERNAL]
1-norm

";

%feature("docstring") casadi::DenseMultiplication "[INTERNAL]  An MX atomic
for matrix-matrix product, note that the factor must be provided transposed.

Joel Andersson

C++ includes: multiplication.hpp ";

%feature("docstring")  casadi::MXNode::getUnary(int op) const  " [INTERNAL]
Get a unary operation.

";

%feature("docstring")  casadi::MXNode::size() const  " [INTERNAL] ";

%feature("docstring")  casadi::SharedObjectNode::getCount() const  "
[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::Multiplication< TrX, TrY >::numInplace()
const  " [INTERNAL]  Can the operation be performed inplace (i.e. overwrite
the result)

";


// File: classcasadi_1_1DenseTranspose.xml
%feature("docstring")  casadi::SharedObjectNode::weak() "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring")  casadi::MXNode::addDependency(const MX &dep) "
[INTERNAL]  Add a dependency.

";

%feature("docstring")  casadi::MXNode::isIdentity() const  " [INTERNAL]
Check if identity matrix.

";

%feature("docstring")  casadi::MXNode::isNonLinear() "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep) "
[INTERNAL]  Set unary dependency.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2) " [INTERNAL]  Set binary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2, const MX &dep3) " [INTERNAL]  Set ternary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const std::vector< MX
> &dep) " [INTERNAL]  Set multiple dependencies.

";

%feature("docstring") casadi::DenseTranspose::~DenseTranspose "[INTERNAL]
Destructor.

";

%feature("docstring")  casadi::MXNode::getSubAssign(const MX &y, const Slice
&i, const Slice &j) const  " [INTERNAL]  Get submatrix assignment.

";

%feature("docstring")  casadi::MXNode::sameOpAndDeps(const MXNode *node, int
depth) const  " [INTERNAL]  Checks if two nodes have the same operation and
have equivalent dependencies up to a given depth.

";

%feature("docstring")  casadi::MXNode::getInnerProd(const MX &y) const  "
[INTERNAL]  Inner product.

";

%feature("docstring")  casadi::MXNode::getNumOutputs() const  " [INTERNAL]
Number of outputs.

";

%feature("docstring")  casadi::MXNode::getFunctionInput() const  "
[INTERNAL]  Get function input.

";

%feature("docstring")  casadi::SharedObjectNode::assertInit() const  "
[INTERNAL]  Assert that the object has been initialized.

";

%feature("docstring")  casadi::MXNode::getFunctionOutput() const  "
[INTERNAL]  Get function output.

";

%feature("docstring")  casadi::MXNode::size1() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getSetSparse(const Sparsity &sp)
const  " [INTERNAL]  Create set sparse.

";

%feature("docstring")  casadi::MXNode::getSubRef(const Slice &i, const Slice
&j) const  " [INTERNAL]  Get submatrix reference.

";

%feature("docstring")  casadi::MXNode::repr(std::ostream &stream) const  "
[INTERNAL]  Print a representation.

";

%feature("docstring") casadi::DenseTranspose "[INTERNAL]   Matrix transpose
(dense)

Joel Andersson

C++ includes: transpose.hpp ";

%feature("docstring")  casadi::MXNode::isMultipleOutput() const  "
[INTERNAL]  Check if a multiple output node.

";

%feature("docstring")  casadi::MXNode::isValue(double val) const  "
[INTERNAL]  Check if a certain value.

";

%feature("docstring")  casadi::MXNode::size2() const  " [INTERNAL] ";

%feature("docstring")  casadi::Transpose::getOp() const  " [INTERNAL]  Get
the operation.

";

%feature("docstring")  casadi::MXNode::getAssertion(const MX &y, const
std::string &fail_message="") const  " [INTERNAL]   Assertion.

";

%feature("docstring")  casadi::MXNode::size() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, const std::vector< int > &onz, bool add=false) "
[INTERNAL]  Assign nonzeros (mapping matrix)

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, bool add=false) " [INTERNAL]  Assign nonzeros
(mapping matrix), output indices sequential.

";

%feature("docstring")  casadi::MXNode::getBinary(int op, const MX &y, bool
scX, bool scY) const  " [INTERNAL]  Get a binary operation operation
(matrix-matrix)

";

%feature("docstring")  casadi::DenseTranspose::clone() const  " [INTERNAL]
Clone function.

";

%feature("docstring")  casadi::MXNode::isUnaryOp() const  " [INTERNAL]
Check if unary operation.

";

%feature("docstring")  casadi::MXNode::getFunction() "[INTERNAL]  Get
function reference.

";

%feature("docstring")  casadi::MXNode::getFunction() const  " [INTERNAL]
Get function reference.

";

%feature("docstring")  casadi::MXNode::hasDep() const  " [INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring")  casadi::MXNode::isZero() const  " [INTERNAL]  Check
if identically zero.

";

%feature("docstring") casadi::DenseTranspose::__nonzero__ "[INTERNAL]
Check the truth value of this node.

";

%feature("docstring")  casadi::MXNode::simplifyMe(MX &ex) " [INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring") casadi::DenseTranspose::DenseTranspose(const MX &x) "
[INTERNAL]  Constructor.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream) const  "
[INTERNAL]  Print a description.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream, long
&remaining_calls) const  " [INTERNAL]  Print expression (make sure number of
calls is not exceeded)

";

%feature("docstring")  casadi::SharedObjectNode::isInit() const  "
[INTERNAL]  Check if the object has been initialized.

";

%feature("docstring")  casadi::DenseTranspose::evaluateSX(const SXPtrV
&input, SXPtrV &output, std::vector< int > &itmp, std::vector< SXElement >
&rtmp) " [INTERNAL]  Evaluate the function symbolically (SX)

";

%feature("docstring")  casadi::MXNode::getHorzcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a horizontal concatenation node.

";

%feature("docstring")  casadi::Transpose::getTranspose() const  " [INTERNAL]
Transpose.

";

%feature("docstring")  casadi::MXNode::getReshape(const Sparsity &sp) const
" [INTERNAL]   Reshape.

";

%feature("docstring")  casadi::MXNode::getBinarySwitch(int op, const MX &y)
const  " [INTERNAL]  Get a binary operation operation.

";

%feature("docstring")  casadi::SharedObjectNode::init() "[INTERNAL]
Initialize the object.

";

%feature("docstring")  casadi::MXNode::getSolve(const MX &r, bool tr, const
LinearSolver &linear_solver) const  " [INTERNAL]   Solve a system of linear
equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring")  casadi::MXNode::shape() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getUnary(int op) const  " [INTERNAL]
Get a unary operation.

";

%feature("docstring")  casadi::MXNode::getNormF() const  " [INTERNAL]
Frobenius norm.

";

%feature("docstring")  casadi::MXNode::isOutputNode() const  " [INTERNAL]
Check if evaluation output.

";

%feature("docstring")  casadi::MXNode::getMatrixValue() const  " [INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring")  casadi::MXNode::mapping() const  " [INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring")  casadi::MXNode::getVertsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a vertical split node (vectors
only)

";

%feature("docstring")  casadi::MXNode::numInplace() const  " [INTERNAL]  Can
the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring")  casadi::DenseTranspose::propagateSparsity(DMatrixPtrV
&input, DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double >
&rtmp, bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, bool fwd) " [INTERNAL]  Propagate sparsity, no work.

";

%feature("docstring")  casadi::Transpose::evaluateMX(const MXPtrV &input,
MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV
&adjSeed, MXPtrVV &adjSens, bool output_given) " [INTERNAL]  Evaluate the
function symbolically ( MX)

";

%feature("docstring")  casadi::MXNode::evaluateMX(const MXPtrV &input,
MXPtrV &output) " [INTERNAL]  Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring")  casadi::MXNode::numel() const  " [INTERNAL]  Get
shape.

";

%feature("docstring")  casadi::MXNode::getNorm1() const  " [INTERNAL]
1-norm

";

%feature("docstring")  casadi::MXNode::getNorm2() const  " [INTERNAL]
Spectral norm.

";

%feature("docstring")  casadi::DenseTranspose::nTmp(size_t &ni, size_t &nr)
" [INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::DenseTranspose::evaluateGen(const MatV
&input, MatV &output, std::vector< int > &itmp, std::vector< T > &rtmp) "
[INTERNAL]  Evaluate the function (template)

";

%feature("docstring")  casadi::MXNode::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied) " [INTERNAL]  Deep copy
data members.

";

%feature("docstring")  casadi::MXNode::getAddNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Add the nonzeros of a matrix to
another matrix.

";

%feature("docstring")  casadi::DenseTranspose::evaluateD(const DMatrixPtrV
&input, DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double >
&rtmp) " [INTERNAL]  Evaluate the function numerically.

";

%feature("docstring")  casadi::MXNode::getValue() const  " [INTERNAL]  Get
the value (only for scalar constant nodes)

";

%feature("docstring")  casadi::MXNode::getHorzsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a horizontal split node.

";

%feature("docstring")  casadi::MXNode::getGetNonzeros(const Sparsity &sp,
const std::vector< int > &nz) const  " [INTERNAL]  Get the nonzeros of
matrix.

";

%feature("docstring")  casadi::MXNode::isOne() const  " [INTERNAL]  Check if
identically one.

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) const  " [INTERNAL]
dependencies - functions that have to be evaluated before this one

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) " [INTERNAL] ";

%feature("docstring")  casadi::Transpose::printPart(std::ostream &stream,
int part) const  " [INTERNAL]  Print a part of the expression */.

";

%feature("docstring")  casadi::MXNode::getInverse() const  " [INTERNAL]
Inverse.

";

%feature("docstring")  casadi::MXNode::getName() const  " [INTERNAL]  Get
the name.

";

%feature("docstring")
casadi::DenseTranspose::generateOperation(std::ostream &stream, const
std::vector< std::string > &arg, const std::vector< std::string > &res,
CodeGenerator &gen) const  " [INTERNAL]  Generate code for the operation.

";

%feature("docstring")  casadi::MXNode::getMultiplication(const MX &y, const
Sparsity &sp_z=Sparsity()) const  " [INTERNAL]   Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring")  casadi::MXNode::sparsity() const  " [INTERNAL]  Get
the sparsity.

";

%feature("docstring")  casadi::MXNode::sparsity(int oind) const  "
[INTERNAL]  Get the sparsity of output oind.

";

%feature("docstring")  casadi::MXNode::setSparsity(const Sparsity &sparsity)
" [INTERNAL]  Set the sparsity.

";

%feature("docstring")  casadi::MXNode::getDeterminant() const  " [INTERNAL]
Determinant.

";

%feature("docstring")  casadi::Transpose::isEqual(const MXNode *node, int
depth) const  " [INTERNAL]   Solve for square linear system.

Check if two nodes are equivalent up to a given depth

";

%feature("docstring")  casadi::MXNode::isBinaryOp() const  " [INTERNAL]
Check if binary operation.

";

%feature("docstring")  casadi::SharedObjectNode::getCount() const  "
[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::MXNode::getOutput(int oind) const  "
[INTERNAL]  Get an output.

";

%feature("docstring")  casadi::MXNode::ndep() const  " [INTERNAL]  Number of
dependencies.

";

%feature("docstring")  casadi::MXNode::getSetNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Assign the nonzeros of a matrix
to another matrix.

";

%feature("docstring")  casadi::MXNode::getVertcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a vertical concatenation node (vectors only)

";

%feature("docstring")  casadi::MXNode::getNormInf() const  " [INTERNAL]
Infinity norm.

";


// File: structcasadi_1_1DerBinaryOpertion.xml
%feature("docstring") casadi::DerBinaryOpertion "[INTERNAL]  Calculate
function and derivative.

C++ includes: casadi_calculus.hpp ";


// File: classcasadi_1_1DerivativeGenerator.xml
%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring") casadi::DerivativeGenerator::DerivativeGenerator() "

Default constructor.

";

%feature("docstring")
casadi::DerivativeGenerator::DerivativeGenerator(DerivativeGeneratorCPtr
ptr) "

Construct from C pointer.

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::SharedObject::checkNode() const  " [INTERNAL]
Assert that the node is pointing to the right type of object

";

%feature("docstring") casadi::DerivativeGenerator "

Derivative Generator Functor.

In C++, supply a DerivativeGeneratorCPtr function pointer

In python, supply a callable, annotated with derivativegenerator decorator

C++ includes: functor.hpp ";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";


// File: classcasadi_1_1Determinant.xml
%feature("docstring")  casadi::MXNode::getNorm1() const  " [INTERNAL]
1-norm

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) const  " [INTERNAL]
dependencies - functions that have to be evaluated before this one

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getFunctionOutput() const  "
[INTERNAL]  Get function output.

";

%feature("docstring")  casadi::MXNode::getSubRef(const Slice &i, const Slice
&j) const  " [INTERNAL]  Get submatrix reference.

";

%feature("docstring")  casadi::MXNode::nTmp(size_t &ni, size_t &nr) "
[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::MXNode::getHorzsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a horizontal split node.

";

%feature("docstring")  casadi::MXNode::isOne() const  " [INTERNAL]  Check if
identically one.

";

%feature("docstring")  casadi::MXNode::getSubAssign(const MX &y, const Slice
&i, const Slice &j) const  " [INTERNAL]  Get submatrix assignment.

";

%feature("docstring")  casadi::SharedObjectNode::getCount() const  "
[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::MXNode::size2() const  " [INTERNAL] ";

%feature("docstring") casadi::Determinant::~Determinant "[INTERNAL]
Destructor.

";

%feature("docstring")  casadi::MXNode::isOutputNode() const  " [INTERNAL]
Check if evaluation output.

";

%feature("docstring")  casadi::MXNode::getNorm2() const  " [INTERNAL]
Spectral norm.

";

%feature("docstring")  casadi::MXNode::getMultiplication(const MX &y, const
Sparsity &sp_z=Sparsity()) const  " [INTERNAL]   Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring")  casadi::MXNode::getReshape(const Sparsity &sp) const
" [INTERNAL]   Reshape.

";

%feature("docstring")  casadi::MXNode::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp,
bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, bool fwd) " [INTERNAL]  Propagate sparsity, no work.

";

%feature("docstring")  casadi::MXNode::repr(std::ostream &stream) const  "
[INTERNAL]  Print a representation.

";

%feature("docstring")  casadi::MXNode::getName() const  " [INTERNAL]  Get
the name.

";

%feature("docstring")  casadi::MXNode::ndep() const  " [INTERNAL]  Number of
dependencies.

";

%feature("docstring")  casadi::MXNode::getBinary(int op, const MX &y, bool
scX, bool scY) const  " [INTERNAL]  Get a binary operation operation
(matrix-matrix)

";

%feature("docstring")  casadi::MXNode::getBinarySwitch(int op, const MX &y)
const  " [INTERNAL]  Get a binary operation operation.

";

%feature("docstring")  casadi::MXNode::isBinaryOp() const  " [INTERNAL]
Check if binary operation.

";

%feature("docstring")  casadi::MXNode::getFunctionInput() const  "
[INTERNAL]  Get function input.

";

%feature("docstring")  casadi::MXNode::getDeterminant() const  " [INTERNAL]
Determinant.

";

%feature("docstring")  casadi::MXNode::simplifyMe(MX &ex) " [INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring")  casadi::MXNode::numel() const  " [INTERNAL]  Get
shape.

";

%feature("docstring")  casadi::MXNode::getVertsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a vertical split node (vectors
only)

";

%feature("docstring")  casadi::MXNode::getGetNonzeros(const Sparsity &sp,
const std::vector< int > &nz) const  " [INTERNAL]  Get the nonzeros of
matrix.

";

%feature("docstring")  casadi::MXNode::sparsity() const  " [INTERNAL]  Get
the sparsity.

";

%feature("docstring")  casadi::MXNode::sparsity(int oind) const  "
[INTERNAL]  Get the sparsity of output oind.

";

%feature("docstring")  casadi::SharedObjectNode::isInit() const  "
[INTERNAL]  Check if the object has been initialized.

";

%feature("docstring")  casadi::MXNode::isValue(double val) const  "
[INTERNAL]  Check if a certain value.

";

%feature("docstring")  casadi::MXNode::evaluateD(const DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp)
" [INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::MXNode::getFunction() "[INTERNAL]  Get
function reference.

";

%feature("docstring")  casadi::MXNode::getFunction() const  " [INTERNAL]
Get function reference.

";

%feature("docstring")  casadi::MXNode::isNonLinear() "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring")  casadi::MXNode::evaluateSX(const SXPtrV &input,
SXPtrV &output, std::vector< int > &itmp, std::vector< SXElement > &rtmp) "
[INTERNAL]  Evaluate symbolically (SX)

";

%feature("docstring")  casadi::Determinant::printPart(std::ostream &stream,
int part) const  " [INTERNAL]  Print a part of the expression */.

";

%feature("docstring")  casadi::MXNode::generateOperation(std::ostream
&stream, const std::vector< std::string > &arg, const std::vector<
std::string > &res, CodeGenerator &gen) const  " [INTERNAL]  Generate code
for the operation.

";

%feature("docstring")  casadi::MXNode::getNormInf() const  " [INTERNAL]
Infinity norm.

";

%feature("docstring")  casadi::SharedObjectNode::init() "[INTERNAL]
Initialize the object.

";

%feature("docstring")  casadi::Determinant::getOp() const  " [INTERNAL]  Get
the operation.

";

%feature("docstring") casadi::Determinant::__nonzero__ "[INTERNAL]  Check
the truth value of this node.

";

%feature("docstring")  casadi::MXNode::isUnaryOp() const  " [INTERNAL]
Check if unary operation.

";

%feature("docstring")  casadi::MXNode::numInplace() const  " [INTERNAL]  Can
the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring")  casadi::MXNode::getAssertion(const MX &y, const
std::string &fail_message="") const  " [INTERNAL]   Assertion.

";

%feature("docstring")  casadi::MXNode::getInverse() const  " [INTERNAL]
Inverse.

";

%feature("docstring")  casadi::MXNode::size1() const  " [INTERNAL] ";

%feature("docstring")  casadi::Determinant::clone() const  " [INTERNAL]
Clone function.

";

%feature("docstring")  casadi::MXNode::getSetNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Assign the nonzeros of a matrix
to another matrix.

";

%feature("docstring")  casadi::MXNode::getUnary(int op) const  " [INTERNAL]
Get a unary operation.

";

%feature("docstring")  casadi::MXNode::setSparsity(const Sparsity &sparsity)
" [INTERNAL]  Set the sparsity.

";

%feature("docstring")  casadi::MXNode::isMultipleOutput() const  "
[INTERNAL]  Check if a multiple output node.

";

%feature("docstring")  casadi::MXNode::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied) " [INTERNAL]  Deep copy
data members.

";

%feature("docstring")  casadi::MXNode::getTranspose() const  " [INTERNAL]
Transpose.

";

%feature("docstring")  casadi::MXNode::isZero() const  " [INTERNAL]  Check
if identically zero.

";

%feature("docstring")  casadi::MXNode::size() const  " [INTERNAL] ";

%feature("docstring")  casadi::SharedObjectNode::weak() "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring")  casadi::MXNode::isIdentity() const  " [INTERNAL]
Check if identity matrix.

";

%feature("docstring")  casadi::MXNode::mapping() const  " [INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring")  casadi::MXNode::getMatrixValue() const  " [INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep) "
[INTERNAL]  Set unary dependency.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2) " [INTERNAL]  Set binary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2, const MX &dep3) " [INTERNAL]  Set ternary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const std::vector< MX
> &dep) " [INTERNAL]  Set multiple dependencies.

";

%feature("docstring")  casadi::MXNode::getOutput(int oind) const  "
[INTERNAL]  Get an output.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream) const  "
[INTERNAL]  Print a description.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream, long
&remaining_calls) const  " [INTERNAL]  Print expression (make sure number of
calls is not exceeded)

";

%feature("docstring")  casadi::MXNode::getAddNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Add the nonzeros of a matrix to
another matrix.

";

%feature("docstring") casadi::Determinant::Determinant(const MX &x) "
[INTERNAL]  Constructor.

";

%feature("docstring")  casadi::MXNode::getValue() const  " [INTERNAL]  Get
the value (only for scalar constant nodes)

";

%feature("docstring")  casadi::SharedObjectNode::assertInit() const  "
[INTERNAL]  Assert that the object has been initialized.

";

%feature("docstring")  casadi::MXNode::isEqual(const MXNode *node, int
depth) const  " [INTERNAL]  Check if two nodes are equivalent up to a given
depth.

";

%feature("docstring")  casadi::MXNode::shape() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getSolve(const MX &r, bool tr, const
LinearSolver &linear_solver) const  " [INTERNAL]   Solve a system of linear
equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring")  casadi::MXNode::addDependency(const MX &dep) "
[INTERNAL]  Add a dependency.

";

%feature("docstring")  casadi::Determinant::evaluateMX(const MXPtrV &input,
MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV
&adjSeed, MXPtrVV &adjSens, bool output_given) " [INTERNAL]  Evaluate the
function symbolically ( MX)

";

%feature("docstring")  casadi::MXNode::evaluateMX(const MXPtrV &input,
MXPtrV &output) " [INTERNAL]  Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring")  casadi::MXNode::getHorzcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a horizontal concatenation node.

";

%feature("docstring")  casadi::MXNode::hasDep() const  " [INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring")  casadi::MXNode::getSetSparse(const Sparsity &sp)
const  " [INTERNAL]  Create set sparse.

";

%feature("docstring") casadi::Determinant "[INTERNAL]   Matrix determinant.

Joel Andersson

C++ includes: determinant.hpp ";

%feature("docstring")  casadi::MXNode::getNormF() const  " [INTERNAL]
Frobenius norm.

";

%feature("docstring")  casadi::MXNode::getNumOutputs() const  " [INTERNAL]
Number of outputs.

";

%feature("docstring")  casadi::MXNode::sameOpAndDeps(const MXNode *node, int
depth) const  " [INTERNAL]  Checks if two nodes have the same operation and
have equivalent dependencies up to a given depth.

";

%feature("docstring")  casadi::MXNode::getInnerProd(const MX &y) const  "
[INTERNAL]  Inner product.

";

%feature("docstring")  casadi::MXNode::getVertcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a vertical concatenation node (vectors only)

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, const std::vector< int > &onz, bool add=false) "
[INTERNAL]  Assign nonzeros (mapping matrix)

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, bool add=false) " [INTERNAL]  Assign nonzeros
(mapping matrix), output indices sequential.

";


// File: classcasadi_1_1DirectCollocation.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::OCPSolver::getRfcn() const  " ";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring") casadi::DirectCollocation "

Direct collocation.

Joel Andersson

>Input scheme: casadi::OCPInput (OCP_NUM_IN = 14) [ocpIn]
+------------+--------+----------------------------------------------+
| Full name  | Short  |                 Description                  |
+============+========+==============================================+
| OCP_LBX    | lbx    | States lower bounds (nx x (ns+1)) .          |
+------------+--------+----------------------------------------------+
| OCP_UBX    | ubx    | States upper bounds (nx x (ns+1)) .          |
+------------+--------+----------------------------------------------+
| OCP_X_INIT | x_init | States initial guess (nx x (ns+1)) .         |
+------------+--------+----------------------------------------------+
| OCP_LBU    | lbu    | Controls lower bounds (nu x ns) .            |
+------------+--------+----------------------------------------------+
| OCP_UBU    | ubu    | Controls upper bounds (nu x ns) .            |
+------------+--------+----------------------------------------------+
| OCP_U_INIT | u_init | Controls initial guess (nu x ns) .           |
+------------+--------+----------------------------------------------+
| OCP_LBP    | lbp    | Parameters lower bounds (np x 1) .           |
+------------+--------+----------------------------------------------+
| OCP_UBP    | ubp    | Parameters upper bounds (np x 1) .           |
+------------+--------+----------------------------------------------+
| OCP_P_INIT | p_init | Parameters initial guess (np x 1) .          |
+------------+--------+----------------------------------------------+
| OCP_LBH    | lbh    | Point constraint lower bound (nh x (ns+1)) . |
+------------+--------+----------------------------------------------+
| OCP_UBH    | ubh    | Point constraint upper bound (nh x (ns+1)) . |
+------------+--------+----------------------------------------------+
| OCP_LBG    | lbg    | Lower bound for the coupling constraints .   |
+------------+--------+----------------------------------------------+
| OCP_UBG    | ubg    | Upper bound for the coupling constraints .   |
+------------+--------+----------------------------------------------+

>Output scheme: casadi::OCPOutput (OCP_NUM_OUT = 5) [ocpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| OCP_X_OPT              | x_opt                  | Optimal state          |
|                        |                        | trajectory .           |
+------------------------+------------------------+------------------------+
| OCP_U_OPT              | u_opt                  | Optimal control        |
|                        |                        | trajectory .           |
+------------------------+------------------------+------------------------+
| OCP_P_OPT              | p_opt                  | Optimal parameters .   |
+------------------------+------------------------+------------------------+
| OCP_COST               | cost                   | Objective/cost         |
|                        |                        | function for optimal   |
|                        |                        | solution (1 x 1) .     |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| barrier_maxi | OT_INTEGER   | 2.100e+09    | Maximum      | casadi::Dire |
| ter          |              |              | number of    | ctCollocatio |
|              |              |              | barrier      | nInternal    |
|              |              |              | iterations.  |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| final_time   | OT_REAL      | 1            |              | casadi::OCPS |
|              |              |              |              | olverInterna |
|              |              |              |              | l            |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| number_of_gr | OT_INTEGER   | 20           |              | casadi::OCPS |
| id_points    |              |              |              | olverInterna |
|              |              |              |              | l            |
+--------------+--------------+--------------+--------------+--------------+
| number_of_pa | OT_INTEGER   | 0            |              | casadi::OCPS |
| rameters     |              |              |              | olverInterna |
|              |              |              |              | l            |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: direct_collocation.hpp ";

%feature("docstring") casadi::DirectCollocation::DirectCollocation() "

Default constructor.

";

%feature("docstring") casadi::DirectCollocation::DirectCollocation(const
Function &ffcn, const Function &mfcn, const Function &cfcn=Function(), const
Function &rfcn=Function()) "

Constructor.

";

%feature("docstring")
casadi::DirectCollocation::getConstraintBounds(std::vector< double > &G_min,
std::vector< double > &G_max) const  "

Get the constraints.

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::DirectCollocation::setOptimalSolution(const
std::vector< double > &V_opt) "

Set the optimal solution.

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::OCPSolver::getCfcn() const  " ";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")  casadi::Function::checkNode() const  " [INTERNAL]
Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::DirectCollocation::getReportConstraints() "

Return the report as a string.

";

%feature("docstring")  casadi::DirectCollocation::getGuess(std::vector<
double > &V_init) const  "

Get the variables.

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")
casadi::DirectCollocation::getVariableBounds(std::vector< double > &V_min,
std::vector< double > &V_max) const  "

Get the variables.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::DirectCollocation::getNLPSolver() const  "

Access the underlying NLPSolver object.

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::OCPSolver::getFfcn() const  " ";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")
casadi::DirectCollocation::reportConstraints(std::ostream &stream=std::cout)
"

Prints out a human readable report about possible constraint violations,
after solving.

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")  casadi::OCPSolver::getMfcn() const  " ";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";


// File: classcasadi_1_1DirectMultipleShooting.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::Function::inputScheme() const  " [INTERNAL]  Access input/output
scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")
casadi::DirectMultipleShooting::getReportConstraints() "";

%feature("docstring")
casadi::DirectMultipleShooting::setOptimalSolution(const std::vector< double
> &V_opt) "

Set the optimal solution.

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")
casadi::DirectMultipleShooting::getVariableBounds(std::vector< double >
&V_min, std::vector< double > &V_max) const  "

Get the variables.

";

%feature("docstring")  casadi::DirectMultipleShooting::getGuess(std::vector<
double > &V_init) const  "

Get the variables.

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")
casadi::DirectMultipleShooting::reportConstraints(std::ostream
&stream=std::cout) " ";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring") casadi::DirectMultipleShooting "

Direct Multiple Shooting.

ns: Number of shooting nodes: from option number_of_grid_points  nx: Number
of differential states: from ffcn.input(INTEGRATOR_X0).size()  nc: Number of
constants during integration: ffcn.input(INTEGRATOR_P).size() nu: Number of
controls: from nc - np  np: Number of parameters: from option
number_of_parameters  nh: Number of point constraints: from
cfcn.input(0).size()

Joel Andersson

>Input scheme: casadi::OCPInput (OCP_NUM_IN = 14) [ocpIn]
+------------+--------+----------------------------------------------+
| Full name  | Short  |                 Description                  |
+============+========+==============================================+
| OCP_LBX    | lbx    | States lower bounds (nx x (ns+1)) .          |
+------------+--------+----------------------------------------------+
| OCP_UBX    | ubx    | States upper bounds (nx x (ns+1)) .          |
+------------+--------+----------------------------------------------+
| OCP_X_INIT | x_init | States initial guess (nx x (ns+1)) .         |
+------------+--------+----------------------------------------------+
| OCP_LBU    | lbu    | Controls lower bounds (nu x ns) .            |
+------------+--------+----------------------------------------------+
| OCP_UBU    | ubu    | Controls upper bounds (nu x ns) .            |
+------------+--------+----------------------------------------------+
| OCP_U_INIT | u_init | Controls initial guess (nu x ns) .           |
+------------+--------+----------------------------------------------+
| OCP_LBP    | lbp    | Parameters lower bounds (np x 1) .           |
+------------+--------+----------------------------------------------+
| OCP_UBP    | ubp    | Parameters upper bounds (np x 1) .           |
+------------+--------+----------------------------------------------+
| OCP_P_INIT | p_init | Parameters initial guess (np x 1) .          |
+------------+--------+----------------------------------------------+
| OCP_LBH    | lbh    | Point constraint lower bound (nh x (ns+1)) . |
+------------+--------+----------------------------------------------+
| OCP_UBH    | ubh    | Point constraint upper bound (nh x (ns+1)) . |
+------------+--------+----------------------------------------------+
| OCP_LBG    | lbg    | Lower bound for the coupling constraints .   |
+------------+--------+----------------------------------------------+
| OCP_UBG    | ubg    | Upper bound for the coupling constraints .   |
+------------+--------+----------------------------------------------+

>Output scheme: casadi::OCPOutput (OCP_NUM_OUT = 5) [ocpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| OCP_X_OPT              | x_opt                  | Optimal state          |
|                        |                        | trajectory .           |
+------------------------+------------------------+------------------------+
| OCP_U_OPT              | u_opt                  | Optimal control        |
|                        |                        | trajectory .           |
+------------------------+------------------------+------------------------+
| OCP_P_OPT              | p_opt                  | Optimal parameters .   |
+------------------------+------------------------+------------------------+
| OCP_COST               | cost                   | Objective/cost         |
|                        |                        | function for optimal   |
|                        |                        | solution (1 x 1) .     |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| final_time   | OT_REAL      | 1            |              | casadi::OCPS |
|              |              |              |              | olverInterna |
|              |              |              |              | l            |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| number_of_gr | OT_INTEGER   | 20           |              | casadi::OCPS |
| id_points    |              |              |              | olverInterna |
|              |              |              |              | l            |
+--------------+--------------+--------------+--------------+--------------+
| number_of_pa | OT_INTEGER   | 0            |              | casadi::OCPS |
| rameters     |              |              |              | olverInterna |
|              |              |              |              | l            |
+--------------+--------------+--------------+--------------+--------------+
| parallelizat | OT_STRING    | GenericType( | Passed on to | casadi::Dire |
| ion          |              | )            | casadi::Para | ctMultipleSh |
|              |              |              | llelizer     | ootingIntern |
|              |              |              |              | al           |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: direct_multiple_shooting.hpp ";

%feature("docstring")  casadi::OCPSolver::getMfcn() const  " ";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::OCPSolver::getFfcn() const  " ";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::Function::checkNode() const  " [INTERNAL]
Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")
casadi::DirectMultipleShooting::DirectMultipleShooting() "

Default constructor.

";

%feature("docstring")
casadi::DirectMultipleShooting::DirectMultipleShooting(const Function &ffcn,
const Function &mfcn, const Function &cfcn=Function(), const Function
&rfcn=Function()) "

Create a multiple shooting OCP solver.

Parameters:
-----------

ffcn:  Continuous time dynamics, an casadi::Function with the following
mapping:

>Input scheme: casadi::DAEInput (DAE_NUM_IN = 5) [daeIn]
+-----------+-------+----------------------------+
| Full name | Short |        Description         |
+===========+=======+============================+
| DAE_X     | x     | Differential state .       |
+-----------+-------+----------------------------+
| DAE_Z     | z     | Algebraic state .          |
+-----------+-------+----------------------------+
| DAE_P     | p     | Parameter .                |
+-----------+-------+----------------------------+
| DAE_T     | t     | Explicit time dependence . |
+-----------+-------+----------------------------+

>Output scheme: casadi::DAEOutput (DAE_NUM_OUT = 4) [daeOut]
+-----------+-------+--------------------------------------------+
| Full name | Short |                Description                 |
+===========+=======+============================================+
| DAE_ODE   | ode   | Right hand side of the implicit ODE .      |
+-----------+-------+--------------------------------------------+
| DAE_ALG   | alg   | Right hand side of algebraic equations .   |
+-----------+-------+--------------------------------------------+
| DAE_QUAD  | quad  | Right hand side of quadratures equations . |
+-----------+-------+--------------------------------------------+
 Important notes:
In the above table, INTEGRATOR_P input is not really of shape (np x
1), but rather ( (np+nu) x 1 ).

The first np entries of the INTEGRATOR_P input are interpreted as parameters
to be optimized but constant over the whole domain. The remainder are
interpreted as controls.

BEWARE: if the right hand side of ffcn is dependent on time, the results
will be incorrect.

Parameters:
-----------

mfcn:  Mayer term, casadi::Function mapping to cost (1 x 1)

>Input scheme: casadi::MayerInput (MAYER_NUM_IN = 3) [mayerIn]
+-----------+-------+---------------------------------------------+
| Full name | Short |                 Description                 |
+===========+=======+=============================================+
| MAYER_X   | x     | States at the end of integration (nx x 1) . |
+-----------+-------+---------------------------------------------+
| MAYER_P   | p     | Problem parameters (np x 1) .               |
+-----------+-------+---------------------------------------------+

Parameters:
-----------

cfcn:  Path constraints, casadi::Function mapping to (nh x 1)

>Input scheme: casadi::DAEInput (DAE_NUM_IN = 5) [daeIn]
+-----------+-------+----------------------------+
| Full name | Short |        Description         |
+===========+=======+============================+
| DAE_X     | x     | Differential state .       |
+-----------+-------+----------------------------+
| DAE_Z     | z     | Algebraic state .          |
+-----------+-------+----------------------------+
| DAE_P     | p     | Parameter .                |
+-----------+-------+----------------------------+
| DAE_T     | t     | Explicit time dependence . |
+-----------+-------+----------------------------+

Parameters:
-----------

rfcn:  Initial value constraints

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::OCPSolver::getRfcn() const  " ";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::OCPSolver::getCfcn() const  " ";

%feature("docstring")  casadi::DirectMultipleShooting::getNLPSolver() const
" ";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")
casadi::DirectMultipleShooting::getConstraintBounds(std::vector< double >
&G_min, std::vector< double > &G_max) const  "

Get the constraints.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";


// File: classcasadi_1_1DirectSingleShooting.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::DirectSingleShooting::getConstraintBounds(std::vector< double >
&G_min, std::vector< double > &G_max) const  "

Get the constraints.

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::OCPSolver::getCfcn() const  " ";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::OCPSolver::getFfcn() const  " ";

%feature("docstring")
casadi::DirectSingleShooting::setOptimalSolution(const std::vector< double >
&V_opt) "

Set the optimal solution.

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::DirectSingleShooting::getNLPSolver() const  "
";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::checkNode() const  " [INTERNAL]
Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring") casadi::DirectSingleShooting "

Direct Single Shooting.

ns: Number of shooting nodes: from option number_of_grid_points  nx: Number
of differential states: from ffcn.input(INTEGRATOR_X0).size()  nc: Number of
constants during integration: ffcn.input(INTEGRATOR_P).size() nu: Number of
controls: from nc - np  np: Number of parameters: from option
number_of_parameters  nh: Number of point constraints: from
cfcn.input(0).size()

Joel Andersson

>Input scheme: casadi::OCPInput (OCP_NUM_IN = 14) [ocpIn]
+------------+--------+----------------------------------------------+
| Full name  | Short  |                 Description                  |
+============+========+==============================================+
| OCP_LBX    | lbx    | States lower bounds (nx x (ns+1)) .          |
+------------+--------+----------------------------------------------+
| OCP_UBX    | ubx    | States upper bounds (nx x (ns+1)) .          |
+------------+--------+----------------------------------------------+
| OCP_X_INIT | x_init | States initial guess (nx x (ns+1)) .         |
+------------+--------+----------------------------------------------+
| OCP_LBU    | lbu    | Controls lower bounds (nu x ns) .            |
+------------+--------+----------------------------------------------+
| OCP_UBU    | ubu    | Controls upper bounds (nu x ns) .            |
+------------+--------+----------------------------------------------+
| OCP_U_INIT | u_init | Controls initial guess (nu x ns) .           |
+------------+--------+----------------------------------------------+
| OCP_LBP    | lbp    | Parameters lower bounds (np x 1) .           |
+------------+--------+----------------------------------------------+
| OCP_UBP    | ubp    | Parameters upper bounds (np x 1) .           |
+------------+--------+----------------------------------------------+
| OCP_P_INIT | p_init | Parameters initial guess (np x 1) .          |
+------------+--------+----------------------------------------------+
| OCP_LBH    | lbh    | Point constraint lower bound (nh x (ns+1)) . |
+------------+--------+----------------------------------------------+
| OCP_UBH    | ubh    | Point constraint upper bound (nh x (ns+1)) . |
+------------+--------+----------------------------------------------+
| OCP_LBG    | lbg    | Lower bound for the coupling constraints .   |
+------------+--------+----------------------------------------------+
| OCP_UBG    | ubg    | Upper bound for the coupling constraints .   |
+------------+--------+----------------------------------------------+

>Output scheme: casadi::OCPOutput (OCP_NUM_OUT = 5) [ocpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| OCP_X_OPT              | x_opt                  | Optimal state          |
|                        |                        | trajectory .           |
+------------------------+------------------------+------------------------+
| OCP_U_OPT              | u_opt                  | Optimal control        |
|                        |                        | trajectory .           |
+------------------------+------------------------+------------------------+
| OCP_P_OPT              | p_opt                  | Optimal parameters .   |
+------------------------+------------------------+------------------------+
| OCP_COST               | cost                   | Objective/cost         |
|                        |                        | function for optimal   |
|                        |                        | solution (1 x 1) .     |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| final_time   | OT_REAL      | 1            |              | casadi::OCPS |
|              |              |              |              | olverInterna |
|              |              |              |              | l            |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| number_of_gr | OT_INTEGER   | 20           |              | casadi::OCPS |
| id_points    |              |              |              | olverInterna |
|              |              |              |              | l            |
+--------------+--------------+--------------+--------------+--------------+
| number_of_pa | OT_INTEGER   | 0            |              | casadi::OCPS |
| rameters     |              |              |              | olverInterna |
|              |              |              |              | l            |
+--------------+--------------+--------------+--------------+--------------+
| parallelizat | OT_STRING    | GenericType( | Passed on to | casadi::Dire |
| ion          |              | )            | casadi::Para | ctSingleShoo |
|              |              |              | llelizer     | tingInternal |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: direct_single_shooting.hpp ";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")
casadi::DirectSingleShooting::getVariableBounds(std::vector< double >
&V_min, std::vector< double > &V_max) const  "

Get the variables.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::DirectSingleShooting::getReportConstraints()
"";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")  casadi::OCPSolver::getMfcn() const  " ";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::DirectSingleShooting::getGuess(std::vector<
double > &V_init) const  "

Get the variables.

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::OCPSolver::getRfcn() const  " ";

%feature("docstring")
casadi::DirectSingleShooting::reportConstraints(std::ostream
&stream=std::cout) " ";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring") casadi::DirectSingleShooting::DirectSingleShooting() "

Default constructor.

";

%feature("docstring")
casadi::DirectSingleShooting::DirectSingleShooting(const Function &ffcn,
const Function &mfcn, const Function &cfcn=Function(), const Function
&rfcn=Function()) "

Create a multiple shooting OCP solver.

Parameters:
-----------

ffcn:  Continuous time dynamics, an casadi::Function with the following
mapping:

>Input scheme: casadi::DAEInput (DAE_NUM_IN = 5) [daeIn]
+-----------+-------+----------------------------+
| Full name | Short |        Description         |
+===========+=======+============================+
| DAE_X     | x     | Differential state .       |
+-----------+-------+----------------------------+
| DAE_Z     | z     | Algebraic state .          |
+-----------+-------+----------------------------+
| DAE_P     | p     | Parameter .                |
+-----------+-------+----------------------------+
| DAE_T     | t     | Explicit time dependence . |
+-----------+-------+----------------------------+

>Output scheme: casadi::DAEOutput (DAE_NUM_OUT = 4) [daeOut]
+-----------+-------+--------------------------------------------+
| Full name | Short |                Description                 |
+===========+=======+============================================+
| DAE_ODE   | ode   | Right hand side of the implicit ODE .      |
+-----------+-------+--------------------------------------------+
| DAE_ALG   | alg   | Right hand side of algebraic equations .   |
+-----------+-------+--------------------------------------------+
| DAE_QUAD  | quad  | Right hand side of quadratures equations . |
+-----------+-------+--------------------------------------------+
 Important notes:
In the above table, INTEGRATOR_P input is not really of shape (np x
1), but rather ( (np+nu) x 1 ).

The first np entries of the INTEGRATOR_P input are interpreted as parameters
to be optimized but constant over the whole domain. The remainder are
interpreted as controls.

BEWARE: if the right hand side of ffcn is dependent on time, the results
will be incorrect.

Parameters:
-----------

mfcn:  Mayer term, casadi::Function mapping to cost (1 x 1)

>Input scheme: casadi::MayerInput (MAYER_NUM_IN = 3) [mayerIn]
+-----------+-------+---------------------------------------------+
| Full name | Short |                 Description                 |
+===========+=======+=============================================+
| MAYER_X   | x     | States at the end of integration (nx x 1) . |
+-----------+-------+---------------------------------------------+
| MAYER_P   | p     | Problem parameters (np x 1) .               |
+-----------+-------+---------------------------------------------+

Parameters:
-----------

cfcn:  Path constraints, casadi::Function mapping to (nh x 1)

>Input scheme: casadi::DAEInput (DAE_NUM_IN = 5) [daeIn]
+-----------+-------+----------------------------+
| Full name | Short |        Description         |
+===========+=======+============================+
| DAE_X     | x     | Differential state .       |
+-----------+-------+----------------------------+
| DAE_Z     | z     | Algebraic state .          |
+-----------+-------+----------------------------+
| DAE_P     | p     | Parameter .                |
+-----------+-------+----------------------------+
| DAE_T     | t     | Explicit time dependence . |
+-----------+-------+----------------------------+

Parameters:
-----------

rfcn:  Initial value constraints

";


// File: classcasadi_1_1DPLEInputIOSchemeVector.xml
%feature("docstring") casadi::DPLEInputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring")  casadi::IOSchemeVector< M  >::vector() const "
[INTERNAL] ";

%feature("docstring") casadi::DPLEInputIOSchemeVector "[INTERNAL]  Helper
function for 'DPLEInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "
[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::IOSchemeVector< M  >::print(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a description of the object.

";

%feature("docstring") casadi::DPLEInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::DPLEInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::DPLEInputIOSchemeVector< M
>::DPLEInputIOSchemeVector(const std::vector< M > &t) " [INTERNAL] ";

%feature("docstring")  casadi::IOSchemeVector< M  >::repr(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "
[INTERNAL]  Return a string with a description (for SWIG)

";


// File: classcasadi_1_1DPLEOutputIOSchemeVector.xml
%feature("docstring") casadi::DPLEOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::DPLEOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring")  casadi::IOSchemeVector< M  >::repr(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a representation of the object.

";

%feature("docstring") casadi::DPLEOutputIOSchemeVector "[INTERNAL]  Helper
function for 'DPLEOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "
[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "
[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::IOSchemeVector< M  >::vector() const "
[INTERNAL] ";

%feature("docstring")  casadi::IOSchemeVector< M  >::print(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a description of the object.

";

%feature("docstring") casadi::DPLEOutputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::DPLEOutputIOSchemeVector< M
>::DPLEOutputIOSchemeVector(const std::vector< M > &t) " [INTERNAL] ";


// File: classcasadi_1_1DpleSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::DpleSolver::printStats(std::ostream &stream=std::cout) const  "

Print solver statistics.

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::DpleSolver::clone() const  "

Clone.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring") casadi::DpleSolver "

Base class for Discrete Periodic Lyapunov Equation Solvers.

Given matrices $A_k$ and symmetric $V_k, k = 0..K-1$

A_k in R^(n x n) V_k in R^n

provides all of $P_k$ that satisfy:

P_0 = A_(K-1)*P_(K-1)*A_(K-1)' + V_k P_k+1 = A_k*P_k*A_k' + V_k  for k =
1..K-1 Joris Gillis

>Input scheme: casadi::DPLEInput (DPLE_NUM_IN = 3) [dpleIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| DPLE_A                 | a                      | A matrices (horzcat    |
|                        |                        | when const_dim,        |
|                        |                        | blkdiag otherwise) .   |
+------------------------+------------------------+------------------------+
| DPLE_V                 | v                      | V matrices (horzcat    |
|                        |                        | when const_dim,        |
|                        |                        | blkdiag otherwise) .   |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::DPLEOutput (DPLE_NUM_OUT = 2) [dpleOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| DPLE_P                 | p                      | Lyapunov matrix        |
|                        |                        | (horzcat when          |
|                        |                        | const_dim, blkdiag     |
|                        |                        | otherwise) (Cholesky   |
|                        |                        | of P if pos_def) .     |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| const_dim    | OT_BOOLEAN   | true         | Assume       | casadi::Dple |
|              |              |              | constant     | Internal     |
|              |              |              | dimension of |              |
|              |              |              | P            |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| eps_unstable | OT_REAL      | 0.000        | A margin for | casadi::Dple |
|              |              |              | unstability  | Internal     |
|              |              |              | detection    |              |
+--------------+--------------+--------------+--------------+--------------+
| error_unstab | OT_BOOLEAN   | false        | has          | casadi::Dple |
| le           |              |              | eigenvalues  | Internal     |
|              |              |              | greater than |              |
|              |              |              | 1-eps_unstab |              |
|              |              |              | le           |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| pos_def      | OT_BOOLEAN   | false        | Assume P     | casadi::Dple |
|              |              |              | positive     | Internal     |
|              |              |              | definite     |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: dple_solver.hpp ";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring") casadi::DpleSolver::DpleSolver() "

Default constructor.

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::DpleSolver::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";


// File: classcasadi_1_1DSDPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::OptionsFunctionality::getOptionNames() const  "

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")  casadi::SDPSolver::setSOCPOptions() "

Set options that make the SDP solver more suitable for solving SOCPs.

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::DSDPSolver "

Interface to DSDP Solver for semi definite programming.

Solves an SDP problem in standard form.
Seehttp://sdpa.indsys.chuo-u.ac.jp/sdpa/files/sdpa-c.6.2.0.manual.pdf

Primal:

min          c' x  x subject to               P = Sum_i^m F_i x_i - G P
negative semidefinite              LBA <= A x <= UBA             LBX <= x
<= UBX      with x ( n x 1)          c ( n x 1 )          G, F_i  sparse
symmetric (m x m)          X dense symmetric ( m x m ) A sparse matrix ( nc
x n)          LBA, UBA dense vector (nc x 1) LBX, UBX dense vector (n x 1)

This formulation is chosen as primal, because it does not call for a large
decision variable space.

Dual:

max          trace(G Y)  Y  subject to             trace(F_i Y) = c_i Y
positive semidefinite      with Y dense symmetric ( m x m)

On generality: you might have formulation with block partitioning:

Primal:

min          c' x  x subject to               Pj = Sum_i^m F_ij x_i - gj
for all j               Pj negative semidefinite   for all j with x ( n x 1)
c ( n x 1 )          G, F_i  sparse symmetric (m x m)          X dense
symmetric ( m x m )

Dual:max          Sum_j trace(Gj Yj)  Yj  subject to             Sum_j
trace(F_ij Yj) = c_i   for all j             Yj positive semidefinite for
all j      with Y dense symmetric ( m x m)

You can cast this into the standard form with: G = blkdiag(Gj for all j) Fi
= blkdiag(F_ij for all j)

Implementations of SDPSolver are encouraged to exploit this block structure.

Warning: The solver DSDP is not good at handling linear equalities. There
are several options if you notice difficulties: play around with the
parameter \"_penalty\" leave a gap manually switch to another SDP Solver

Joris Gillis

>Input scheme: casadi::SDPInput (SDP_SOLVER_NUM_IN = 9) [sdpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SDP_SOLVER_F           | f                      | The horizontal stack   |
|                        |                        | of all matrices F_i: ( |
|                        |                        | m x nm) .              |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_C           | c                      | The vector c: ( n x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_G           | g                      | The matrix G: ( m x m) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_A           | a                      | The matrix A: ( nc x   |
|                        |                        | n) .                   |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_LBA         | lba                    | Lower bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_UBA         | uba                    | Upper bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_LBX         | lbx                    | Lower bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_UBX         | ubx                    | Upper bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::SDPOutput (SDP_SOLVER_NUM_OUT = 8) [sdpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SDP_SOLVER_X           | x                      | The primal solution (n |
|                        |                        | x 1) - may be used as  |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_P           | p                      | The solution P (m x m) |
|                        |                        | - may be used as       |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_DUAL        | dual                   | The dual solution (m x |
|                        |                        | m) - may be used as    |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_COST        | cost                   | The primal optimal     |
|                        |                        | cost (1 x 1) .         |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_DUAL_COST   | dual_cost              | The dual optimal cost  |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_LAM_A       | lam_a                  | The dual solution      |
|                        |                        | corresponding to the   |
|                        |                        | linear constraints (nc |
|                        |                        | x 1) .                 |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_LAM_X       | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds (n x 1)  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| _isumm       | OT_INTEGER   | 6            |              | casadi::DSDP |
|              |              |              |              | Internal     |
+--------------+--------------+--------------+--------------+--------------+
| _rho         | OT_REAL      | 4            | Potential    | casadi::DSDP |
|              |              |              | parameter.   | Internal     |
|              |              |              | Must be >=1  |              |
+--------------+--------------+--------------+--------------+--------------+
| _zbar        | OT_REAL      | 1.000e+10    | Initial      | casadi::DSDP |
|              |              |              | upper bound  | Internal     |
|              |              |              | on the       |              |
|              |              |              | objective of |              |
|              |              |              | the dual     |              |
|              |              |              | problem.     |              |
+--------------+--------------+--------------+--------------+--------------+
| calc_dual    | OT_BOOLEAN   | true         | Indicate if  | casadi::SDPS |
|              |              |              | dual should  | olverInterna |
|              |              |              | be allocated | l            |
|              |              |              | and          |              |
|              |              |              | calculated.  |              |
|              |              |              | as is always |              |
|              |              |              | dense (m x   |              |
|              |              |              | m).          |              |
+--------------+--------------+--------------+--------------+--------------+
| calc_p       | OT_BOOLEAN   | true         | You may want | casadi::SDPS |
|              |              |              | to avoid     | olverInterna |
|              |              |              | calculating  | l            |
|              |              |              | this         |              |
|              |              |              | variable for |              |
|              |              |              | problems     |              |
|              |              |              | with n       |              |
|              |              |              | large, as is |              |
|              |              |              | always dense |              |
|              |              |              | (m x m).     |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| dualTol      | OT_REAL      | 0.000        | (translates  | casadi::DSDP |
|              |              |              | to primal in | Internal     |
|              |              |              | feasibility  |              |
|              |              |              | in dsdp      |              |
|              |              |              | terms)       |              |
+--------------+--------------+--------------+--------------+--------------+
| inf          | OT_REAL      | 1.000e+30    | Treat        | casadi::DSDP |
|              |              |              | numbers      | Internal     |
|              |              |              | higher than  |              |
|              |              |              | this as      |              |
|              |              |              | infinity     |              |
+--------------+--------------+--------------+--------------+--------------+
| maxIter      | OT_INTEGER   | 500          | Maximum      | casadi::DSDP |
|              |              |              | number of    | Internal     |
|              |              |              | iterations   |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| primalTol    | OT_REAL      | 0.000        | (translates  | casadi::DSDP |
|              |              |              | to dual infe | Internal     |
|              |              |              | asibility in |              |
|              |              |              | dsdp terms)  |              |
+--------------+--------------+--------------+--------------+--------------+
| print_proble | OT_BOOLEAN   | false        | Print out    | casadi::SDPS |
| m            |              |              | problem      | olverInterna |
|              |              |              | statement    | l            |
|              |              |              | for          |              |
|              |              |              | debugging.   |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available stats
+--------------------+----------------------+
|         Id         |       Used in        |
+====================+======================+
| solution_type      | casadi::DSDPInternal |
+--------------------+----------------------+
| termination_reason | casadi::DSDPInternal |
+--------------------+----------------------+

Diagrams

C++ includes: dsdp_solver.hpp ";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring") casadi::DSDPSolver::DSDPSolver() "

Default constructor.

";

%feature("docstring") casadi::DSDPSolver::DSDPSolver(const SDPStructure &st)
" ";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::DSDPSolver::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";


// File: classcasadi_1_1EmptySparsity.xml


/*  Check if two sparsity patterns are identical  */

/*  Size and element counting  */ %feature("docstring")
casadi::Sparsity::row() const  " [INTERNAL]  Get a reference to row-vector,
containing rows for all non-zero elements (see class description)

";

%feature("docstring")  casadi::Sparsity::row(int el) const  " [INTERNAL]
Get the row of a non-zero element.

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) " [INTERNAL]  Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::Sparsity::reserve(int nnz, int ncol) "
[INTERNAL]  Reserve space.

";

%feature("docstring")  casadi::Sparsity::patternUnion(const Sparsity &y,
std::vector< unsigned char > &output_mapping) const  " [INTERNAL]  Union of
two sparsity patterns.

";

%feature("docstring")  casadi::Sparsity::patternUnion(const Sparsity &y)
const  " [INTERNAL]  Union of two sparsity patterns.

";

%feature("docstring")  casadi::Sparsity::compress() const  " [INTERNAL]
Compress a sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::makeDense(std::vector< int >
&mapping) const  " [INTERNAL]  Make a patten dense.

";

%feature("docstring")  casadi::Sparsity::enlarge(int nrow, int ncol, const
std::vector< int > &jj, const std::vector< int > &ii) " [INTERNAL]  Enlarge
matrix Make the matrix larger by inserting empty rows and columns, keeping
the existing non-zeros.

For the matrices A to B A(m,n) length(jj)=m , length(ii)=n B(nrow,ncol)

A=enlarge(m,n,ii,jj) makes sure that

B[jj,ii] == A

";

%feature("docstring")  casadi::Sparsity::getUpperNZ() const  " [INTERNAL]
Get nonzeros in upper triangular part.

";

%feature("docstring")  casadi::Sparsity::set(T *data, const T *val_data,
const Sparsity &val_sp) const  " [INTERNAL]  Assign the nonzero entries of
one sparsity pattern to the nonzero entries of another sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::set(DataType *data, const DataType
*val_data, const Sparsity &val_sp) const  " [INTERNAL] ";

%feature("docstring")  casadi::Sparsity::isEmpty(bool both=false) const  "
[INTERNAL]  Check if the sparsity is empty.

A sparsity is considered empty if one of the dimensions is zero (or
optionally both dimensions)

";

%feature("docstring")  casadi::Sparsity::patternInverse() const  "
[INTERNAL]  Take the inverse of a sparsity pattern; flip zeros and non-
zeros.

";

%feature("docstring")  casadi::Sparsity::removeDuplicates(std::vector< int >
&mapping) " [INTERNAL]  Remove duplicate entries.

The same indices will be removed from the mapping vector, which must have
the same length as the number of nonzeros

";

%feature("docstring")  casadi::Sparsity::appendColumns(const Sparsity &sp) "
[INTERNAL]  Append another sparsity patten horizontally.

";

%feature("docstring")  casadi::Sparsity::diag(int nrow) " [INTERNAL]  Create
diagonal sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::diag(int nrow, int ncol) "
[INTERNAL]  Create diagonal sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::diag(const std::pair< int, int >
&rc) " [INTERNAL]  Create diagonal sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::sub(const std::vector< int > &jj,
const std::vector< int > &ii, std::vector< int > &output_mapping) const  "
[INTERNAL]  Get a submatrix.

Returns the sparsity of the submatrix, with a mapping such that submatrix[k]
= originalmatrix[mapping[k]]

";

%feature("docstring")  casadi::Sparsity::resize(int nrow, int ncol) "
[INTERNAL]  Resize.

";

%feature("docstring")  casadi::Sparsity::rowsSequential(bool strictly=true)
const  " [INTERNAL]  Do the rows appear sequentially on each column.

Parameters:
-----------

strictly:  if true, then do not allow multiple entries

";

%feature("docstring")  casadi::Sparsity::T() const  " [INTERNAL]   Transpose
the matrix (shorthand)

";

%feature("docstring")  casadi::Sparsity::isReshape(const Sparsity &y) const
" [INTERNAL]  Check if the sparsity is a reshape of another.

";

%feature("docstring")  casadi::Sparsity::scalar(bool dense_scalar=true) "
[INTERNAL]  Create a scalar sparsity pattern.

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::Sparsity::spyMatlab(const std::string &mfile)
const  " [INTERNAL]  Generate a script for Matlab or Octave which visualizes
the sparsity using the spy command.

";

%feature("docstring")  casadi::Sparsity::starColoring2(int ordering=1, int
cutoff=std::numeric_limits< int >::max()) const  " [INTERNAL]  Perform a
star coloring of a symmetric matrix: A new greedy distance-2 coloring
algorithm (Algorithm 4.1 in A. H. GEBREMEDHIN, A. TARAFDAR, F. MANNE, A.
POTHEN) Ordering options: None (0), largest first (1)

";

%feature("docstring")  casadi::Sparsity::isDiagonal() const  " [INTERNAL]
Is diagonal?

";

%feature("docstring")  casadi::Sparsity::hash() const  " [INTERNAL] ";

%feature("docstring")  casadi::Sparsity::isDense() const  " [INTERNAL]  Is
dense?

";

%feature("docstring")  casadi::Sparsity::printCompact(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a compact description of the
sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::isEqual(const Sparsity &y) const  "
[INTERNAL] ";

%feature("docstring")  casadi::Sparsity::isEqual(int nrow, int ncol, const
std::vector< int > &colind, const std::vector< int > &row) const  "
[INTERNAL] ";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")  casadi::Sparsity::compressed(const std::vector< int >
&v) " [INTERNAL]  Create from a single vector containing the pattern in
compressed column storage format: The format: The first two entries are the
number of rows (nrow) and columns (ncol) The next ncol+1 entries are the
column offsets (colind). Note that the last element, colind[ncol], gives the
number of nonzeros The last colind[ncol] entries are the row indices

";

%feature("docstring")  casadi::Sparsity::compressed(const int *v) "
[INTERNAL]  Create from a single vector containing the pattern in compressed
column storage format: The format: The first two entries are the number of
rows (nrow) and columns (ncol) The next ncol+1 entries are the column
offsets (colind). Note that the last element, colind[ncol], gives the number
of nonzeros The last colind[ncol] entries are the row indices

";

%feature("docstring")  casadi::Sparsity::size2() const  " [INTERNAL]  Get
the number of columns.

";

%feature("docstring")  casadi::Sparsity::getCRS(std::vector< int >
&output_rowind, std::vector< int > &output_col) const  " [INTERNAL]  Get the
sparsity in compressed row storage (CRS) format.

";

%feature("docstring")  casadi::Sparsity::size1() const  " [INTERNAL]  Get
the number of rows.

";

%feature("docstring")  casadi::SharedObject::isInit() const  " [INTERNAL]
Is initialized?

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::Sparsity::unit(int n, int el) " [INTERNAL]
Create the sparsity pattern for a unit vector of length n and a nonzero on
position el.

";

%feature("docstring")  casadi::Sparsity::checkNode() const  " [INTERNAL]
Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::Sparsity::transpose() const  " [INTERNAL]
Transpose the matrix.

";

%feature("docstring")  casadi::Sparsity::transpose(std::vector< int >
&mapping, bool invert_mapping=false) const  " [INTERNAL]   Transpose the
matrix and get the reordering of the non-zero entries.

Parameters:
-----------

mapping:  the non-zeros of the original matrix for each non-zero of the new
matrix

";

%feature("docstring")  casadi::Sparsity::eliminationTree(bool ata=false)
const  " [INTERNAL]  Calculate the elimination tree See Direct Methods for
Sparse Linear Systems by Davis (2006). If the parameter ata is false, the
algorithm is equivalent to Matlab's etree(A), except that the indices are
zero- based. If ata is true, the algorithm is equivalent to Matlab's
etree(A,'row').

";

%feature("docstring") casadi::EmptySparsity "[INTERNAL] ";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "
[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::Sparsity::getNZ(int rr, int cc) " [INTERNAL]
Get the index of a non-zero element Add the element if it does not exist and
copy object if it's not unique.

";

%feature("docstring")  casadi::Sparsity::getNZ(int rr, int cc) const  "
[INTERNAL]  Get the index of an existing non-zero element return -1 if the
element does not exist.

";

%feature("docstring")  casadi::Sparsity::getNZ(const std::vector< int > &rr,
const std::vector< int > &cc) const  " [INTERNAL]  Get a set of non-zero
element return -1 if the element does not exist.

";

%feature("docstring")  casadi::Sparsity::depthFirstSearch(int j, int top,
std::vector< int > &xi, std::vector< int > &pstack, const std::vector< int >
&pinv, std::vector< bool > &marked) const  " [INTERNAL]  Depth-first search
on the adjacency graph of the sparsity See Direct Methods for Sparse Linear
Systems by Davis (2006).

";

%feature("docstring")  casadi::Sparsity::starColoring(int ordering=1, int
cutoff=std::numeric_limits< int >::max()) const  " [INTERNAL]  Perform a
star coloring of a symmetric matrix: A greedy distance-2 coloring algorithm
(Algorithm 4.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN) Ordering options:
None (0), largest first (1)

";

%feature("docstring")  casadi::Sparsity::patternProduct(const Sparsity
&x_trans, std::vector< std::vector< std::pair< int, int > > >
&output_mapping) const  " [INTERNAL]   Sparsity pattern for a matrix-matrix
product Returns the sparsity pattern resulting from pre-multiplying the
pattern with the transpose of x. Returns the new sparsity pattern as well as
a mapping with the same length as the number of non-zero elements The
mapping contains a vector of the index pairs that makes up the scalar
products for each non-zero.

";

%feature("docstring")  casadi::Sparsity::patternProduct(const Sparsity
&x_trans) const  " [INTERNAL]   Sparsity pattern for a matrix-matrix product
Returns the sparsity pattern resulting from pre-multiplying the pattern with
the transpose of x. Returns the new sparsity pattern as well as a mapping
with the same length as the number of non-zero elements The mapping contains
a vector of the index pairs that makes up the scalar products for each non-
zero.

";

%feature("docstring")  casadi::Sparsity::append(const Sparsity &sp) "
[INTERNAL]  Append another sparsity patten vertically (NOTE: only efficient
if vector)

";

%feature("docstring")  casadi::Sparsity::rowRef() "[INTERNAL]  Get a
reference to the rows of all non-zero element (copy if not unique!)

";

%feature("docstring")  casadi::Sparsity::getTriplet(std::vector< int >
&output_row, std::vector< int > &output_col) const  " [INTERNAL]  Get the
sparsity in sparse triplet format.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "
[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::Sparsity::isSquare() const  " [INTERNAL]  Is
square?

";

%feature("docstring")  casadi::Sparsity::erase(const std::vector< int > &jj,
const std::vector< int > &ii) " [INTERNAL]  Erase rows and/or columns of a
matrix.

";

%feature("docstring")  casadi::Sparsity::bor(T *data, const T *val_data,
const Sparsity &val_sp) const  " [INTERNAL]  Bitwise or of the nonzero
entries of one sparsity pattern and the nonzero entries of another sparsity
pattern.

";

%feature("docstring")  casadi::Sparsity::bor(DataType *data, const DataType
*val_data, const Sparsity &val_sp) const  " [INTERNAL] ";

%feature("docstring")  casadi::Sparsity::colind() const  " [INTERNAL]  Get a
reference to the colindex of all column element (see class description)

";

%feature("docstring")  casadi::Sparsity::colind(int i) const  " [INTERNAL]
Get a reference to the colindex of col i (see class description)

";

%feature("docstring")  casadi::Sparsity::size() const  " [INTERNAL]  Get the
number of (structural) non-zeros.

See:   numel()

";

%feature("docstring")  casadi::Sparsity::patternCombine(const Sparsity &y,
bool f0x_is_zero, bool function0_is_zero, std::vector< unsigned char >
&output_mapping) const  " [INTERNAL]  Combine two sparsity patterns Returns
the new sparsity pattern as well as a mapping with the same length as the
number of non-zero elements The mapping matrix contains the arguments for
each nonzero, the first bit indicates if the first argument is nonzero, the
second bit indicates if the second argument is nonzero (note that none of,
one of or both of the arguments can be nonzero)

";

%feature("docstring")  casadi::Sparsity::patternCombine(const Sparsity &y,
bool f0x_is_zero, bool function0_is_zero) const  " [INTERNAL]  Combine two
sparsity patterns Returns the new sparsity pattern as well as a mapping with
the same length as the number of non-zero elements The mapping matrix
contains the arguments for each nonzero, the first bit indicates if the
first argument is nonzero, the second bit indicates if the second argument
is nonzero (note that none of, one of or both of the arguments can be
nonzero)

";

%feature("docstring")  casadi::Sparsity::dulmageMendelsohn(std::vector< int
> &output_rowperm, std::vector< int > &output_colperm, std::vector< int >
&output_rowblock, std::vector< int > &output_colblock, std::vector< int >
&output_coarse_rowblock, std::vector< int > &output_coarse_colblock, int
seed=0) const  " [INTERNAL]  Compute the Dulmage-Mendelsohn decomposition
See Direct Methods for Sparse Linear Systems by Davis (2006).

Dulmage-Mendelsohn will try to bring your matrix into lower block-
triangular (LBT) form. It will not care about the distance of off- diagonal
elements to the diagonal: there is no guarantee you will get a block-
diagonal matrix if you supply a randomly permuted block- diagonal matrix.

If your matrix is symmetrical, this method is of limited use; permutation
can make it non-symmetric.

See:   stronglyConnectedComponents

";

%feature("docstring")  casadi::Sparsity::enlargeColumns(int ncol, const
std::vector< int > &ii) " [INTERNAL]  Enlarge the matrix along the second
dimension (i.e. insert columns)

";

%feature("docstring")  casadi::Sparsity::sizeU() const  " [INTERNAL]  Number
of non-zeros in the upper triangular half, i.e. the number of elements (i,j)
with j>=i.

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::Sparsity::sizeL() const  " [INTERNAL]  Number
of non-zeros in the lower triangular half, i.e. the number of elements (i,j)
with j<=i.

";

%feature("docstring")  casadi::Sparsity::sizeD() const  " [INTERNAL]  Number
of non-zeros on the diagonal, i.e. the number of elements (i,j) with j==i.

";

%feature("docstring")  casadi::Sparsity::isVector() const  " [INTERNAL]  Is
vector (i.e. size2()==1)

";

%feature("docstring")  casadi::Sparsity::numel() const  " [INTERNAL]  The
total number of elements, including structural zeros, i.e. size2()*size1()

See:   size()

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::Sparsity::getDiag(std::vector< int >
&output_mapping) const  " [INTERNAL]  Get the diagonal of the matrix/create
a diagonal matrix (mapping will contain the nonzero mapping) When the input
is square, the diagonal elements are returned. If the input is vector-like,
a diagonal matrix is constructed with it.

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::Sparsity::sparse(int nrow, int ncol=1) "
[INTERNAL]  Create a sparse (empty) rectangular sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::sparse(const std::pair< int, int >
&rc) " [INTERNAL]  Create a sparse (empty) rectangular sparsity pattern.

";

%feature("docstring")  casadi::SharedObject::isNull() const  " [INTERNAL]
Is a null pointer?

";

%feature("docstring")  casadi::Sparsity::getTril(bool includeDiagonal=true)
const  " [INTERNAL]  Get lower triangular part.

";

%feature("docstring")  casadi::Sparsity::unidirectionalColoring(const
Sparsity &AT=Sparsity(), int cutoff=std::numeric_limits< int >::max()) const
" [INTERNAL]  Perform a unidirectional coloring: A greedy distance-2
coloring algorithm (Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN)

";

%feature("docstring")  casadi::Sparsity::patternIntersection(const Sparsity
&y, std::vector< unsigned char > &output_mapping) const  " [INTERNAL]
Intersection of two sparsity patterns Returns the new sparsity pattern as
well as a mapping with the same length as the number of non-zero elements
The value is 1 if the non-zero comes from the first (i.e. this) object, 2 if
it is from the second and 3 (i.e. 1 | 2) if from both.

";

%feature("docstring")  casadi::Sparsity::patternIntersection(const Sparsity
&y) const  " [INTERNAL]  Intersection of two sparsity patterns Returns the
new sparsity pattern as well as a mapping with the same length as the number
of non-zero elements The value is 1 if the non-zero comes from the first
(i.e. this) object, 2 if it is from the second and 3 (i.e. 1 | 2) if from
both.

";

%feature("docstring")  casadi::Sparsity::dimString() const  " [INTERNAL]
Get the dimension as a string.

";

%feature("docstring")  casadi::Sparsity::sanityCheck(bool complete=false)
const  " [INTERNAL]  Check if the dimensions and colind, row vectors are
compatible.

Parameters:
-----------

complete:  set to true to also check elementwise throws an error as possible
result

";

%feature("docstring")  casadi::Sparsity::reCache() "[INTERNAL]  Check if
there is an identical copy of the sparsity pattern in the cache, and if so,
make a shallow copy of that one.

";

%feature("docstring")  casadi::Sparsity::isTril() const  " [INTERNAL]  Is
lower triangular?

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "
[INTERNAL]  Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::Sparsity::getTriu(bool includeDiagonal=true)
const  " [INTERNAL]  Get upper triangular part.

";

%feature("docstring")  casadi::Sparsity::reshape(int nrow, int ncol) const
" [INTERNAL]   Reshape a sparsity, order of nonzeros remains the same.

";

%feature("docstring")
casadi::Sparsity::stronglyConnectedComponents(std::vector< int >
&output_index, std::vector< int > &output_offset) const  " [INTERNAL]  Find
the strongly connected components of the bigraph defined by the sparsity
pattern of a square matrix.

See Direct Methods for Sparse Linear Systems by Davis (2006). Returns:
Number of components

Offset for each components (length: 1 + number of components)

Indices for each components, component i has indices index[offset[i]], ...,
index[offset[i+1]]

In the case that the matrix is symmetric, the result has a particular
interpretation: Given a symmetric matrix A and n =
A.stronglyConnectedComponents(p,r)

=> A[p,p] will appear block-diagonal with n blocks and with the indices of
the block boundaries to be found in r.

";

%feature("docstring")  casadi::Sparsity::largestFirstOrdering() const  "
[INTERNAL]  Order the cols by decreasing degree.

";

%feature("docstring")  casadi::Sparsity::spy(std::ostream &stream=std::cout)
const  " [INTERNAL]  Print a textual representation of sparsity.

";

%feature("docstring")  casadi::Sparsity::isSingular() const  " [INTERNAL]
Check whether the sparsity-pattern indicates structural singularity.

";

%feature("docstring")  casadi::Sparsity::getCCS(std::vector< int >
&output_colind, std::vector< int > &output_row) const  " [INTERNAL]  Get the
sparsity in compressed column storage (CCS) format.

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring") casadi::EmptySparsity::EmptySparsity() "[INTERNAL] ";

%feature("docstring")  casadi::Sparsity::isScalar(bool
scalar_and_dense=false) const  " [INTERNAL]  Is scalar?

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::Sparsity::isTranspose(const Sparsity &y)
const  " [INTERNAL]  Check if the sparsity is the transpose of another.

";

%feature("docstring")  casadi::Sparsity::getNZInplace(std::vector< int >
&indices) const  " [INTERNAL]  Get the nonzero index for a set of elements
The index vector is used both for input and outputs and must be sorted by
increasing nonzero index, i.e. column-wise. Elements not found in the
sparsity pattern are set to -1.

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::Sparsity::hasNZ(int rr, int cc) const  "
[INTERNAL]  Returns true if the pattern has a non-zero at location rr,cc.

";

%feature("docstring")  casadi::Sparsity::isSymmetric() const  " [INTERNAL]
Is symmetric?

";

%feature("docstring")  casadi::Sparsity::shape() const  " [INTERNAL]  Get
the shape.

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::Sparsity::pmult(const std::vector< int > &p,
bool permute_rows=true, bool permute_cols=true, bool
invert_permutation=false) const  " [INTERNAL]  Permute rows and/or columns
Multiply the sparsity with a permutation matrix from the left and/or from
the right P * A * trans(P), A * trans(P) or A * trans(P) with P defined by
an index vector containing the row for each col. As an alternative, P can be
transposed (inverted).

";

%feature("docstring")  casadi::Sparsity::getCol() const  " [INTERNAL]  Get
the column for each non-zero entry Together with the row-vector, this vector
gives the sparsity of the matrix in sparse triplet format, i.e. the column
and row for each non-zero elements.

";

%feature("docstring")  casadi::Sparsity::isTriu() const  " [INTERNAL]  Is
upper triangular?

";

%feature("docstring")  casadi::Sparsity::enlargeRows(int nrow, const
std::vector< int > &jj) " [INTERNAL]  Enlarge the matrix along the first
dimension (i.e. insert rows)

";

%feature("docstring")  casadi::Sparsity::getElements(bool col_major=true)
const  " [INTERNAL]  Get the location of all non-zero elements as they would
appear in a Dense matrix A : DenseMatrix 4 x 3 B : SparseMatrix 4 x 3 , 5
structural non-zeros.

k = A.getElements() A[k] will contain the elements of A that are non- zero
in B

";

%feature("docstring")  casadi::Sparsity::getElements(std::vector< int >
&loc, bool col_major=true) const  " [INTERNAL]  Get the location of all
nonzero elements (inplace version)

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::Sparsity::dense(int nrow, int ncol=1) "
[INTERNAL]  Create a dense rectangular sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::dense(const std::pair< int, int >
&rc) " [INTERNAL]  Create a dense rectangular sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::getLowerNZ() const  " [INTERNAL]
Get nonzeros in lower triangular part.

";

%feature("docstring")  casadi::Sparsity::add(T *data, const T *val_data,
const Sparsity &val_sp) const  " [INTERNAL]  Add the nonzero entries of one
sparsity pattern to the nonzero entries of another sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::add(DataType *data, const DataType
*val_data, const Sparsity &val_sp) const  " [INTERNAL] ";

%feature("docstring")  casadi::Sparsity::colindRef() "[INTERNAL]  Get a
reference to the colindex of all column element (copy if not unique!)

";


// File: classcasadi_1_1ExternalFunction.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::Function::generateCode(const std::string &filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring") casadi::ExternalFunction "

Interface for a function that is not implemented by CasADi symbolics.

Joel Andersson

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: external_function.hpp ";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::ExternalFunction::checkNode() const  "

Check if the pointer points towards a valid object.

";

%feature("docstring") casadi::ExternalFunction::ExternalFunction() "

CONSTRUCTORS:

default constructor

";

%feature("docstring") casadi::ExternalFunction::ExternalFunction(const
std::string &bin_name) "

Create an empty function.

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";


// File: structcasadi_1_1F00Checker.xml
%feature("docstring") casadi::F00Checker "[INTERNAL]  If evaluated with
both arguments zero, is the result zero?

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F00Checker_3_01OP__ADD_01_4.xml
%feature("docstring") casadi::F00Checker< OP_ADD > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F00Checker_3_01OP__AND_01_4.xml
%feature("docstring") casadi::F00Checker< OP_AND > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F00Checker_3_01OP__COPYSIGN_01_4.xml
%feature("docstring") casadi::F00Checker< OP_COPYSIGN > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F00Checker_3_01OP__FMAX_01_4.xml
%feature("docstring") casadi::F00Checker< OP_FMAX > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F00Checker_3_01OP__FMIN_01_4.xml
%feature("docstring") casadi::F00Checker< OP_FMIN > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F00Checker_3_01OP__OR_01_4.xml
%feature("docstring") casadi::F00Checker< OP_OR > " [INTERNAL] C++ includes:
casadi_calculus.hpp ";


// File: structcasadi_1_1F00Checker_3_01OP__SUB_01_4.xml
%feature("docstring") casadi::F00Checker< OP_SUB > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F0XChecker.xml
%feature("docstring") casadi::F0XChecker "[INTERNAL]  If evaluated with the
first argument zero, is the result zero?

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F0XChecker_3_01OP__AND_01_4.xml
%feature("docstring") casadi::F0XChecker< OP_AND > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F0XChecker_3_01OP__ASIN_01_4.xml
%feature("docstring") casadi::F0XChecker< OP_ASIN > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F0XChecker_3_01OP__ASINH_01_4.xml
%feature("docstring") casadi::F0XChecker< OP_ASINH > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F0XChecker_3_01OP__ASSIGN_01_4.xml
%feature("docstring") casadi::F0XChecker< OP_ASSIGN > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F0XChecker_3_01OP__ATAN_01_4.xml
%feature("docstring") casadi::F0XChecker< OP_ATAN > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F0XChecker_3_01OP__ATANH_01_4.xml
%feature("docstring") casadi::F0XChecker< OP_ATANH > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F0XChecker_3_01OP__CEIL_01_4.xml
%feature("docstring") casadi::F0XChecker< OP_CEIL > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F0XChecker_3_01OP__CONSTPOW_01_4.xml
%feature("docstring") casadi::F0XChecker< OP_CONSTPOW > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F0XChecker_3_01OP__COPYSIGN_01_4.xml
%feature("docstring") casadi::F0XChecker< OP_COPYSIGN > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F0XChecker_3_01OP__DIV_01_4.xml
%feature("docstring") casadi::F0XChecker< OP_DIV > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F0XChecker_3_01OP__ERF_01_4.xml
%feature("docstring") casadi::F0XChecker< OP_ERF > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F0XChecker_3_01OP__ERFINV_01_4.xml
%feature("docstring") casadi::F0XChecker< OP_ERFINV > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F0XChecker_3_01OP__FABS_01_4.xml
%feature("docstring") casadi::F0XChecker< OP_FABS > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F0XChecker_3_01OP__FLOOR_01_4.xml
%feature("docstring") casadi::F0XChecker< OP_FLOOR > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F0XChecker_3_01OP__IF__ELSE__ZERO_01_4.xml
%feature("docstring") casadi::F0XChecker< OP_IF_ELSE_ZERO > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F0XChecker_3_01OP__MUL_01_4.xml
%feature("docstring") casadi::F0XChecker< OP_MUL > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F0XChecker_3_01OP__NEG_01_4.xml
%feature("docstring") casadi::F0XChecker< OP_NEG > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F0XChecker_3_01OP__POW_01_4.xml
%feature("docstring") casadi::F0XChecker< OP_POW > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F0XChecker_3_01OP__SIGN_01_4.xml
%feature("docstring") casadi::F0XChecker< OP_SIGN > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F0XChecker_3_01OP__SIN_01_4.xml
%feature("docstring") casadi::F0XChecker< OP_SIN > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F0XChecker_3_01OP__SINH_01_4.xml
%feature("docstring") casadi::F0XChecker< OP_SINH > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F0XChecker_3_01OP__SQ_01_4.xml
%feature("docstring") casadi::F0XChecker< OP_SQ > " [INTERNAL] C++ includes:
casadi_calculus.hpp ";


// File: structcasadi_1_1F0XChecker_3_01OP__SQRT_01_4.xml
%feature("docstring") casadi::F0XChecker< OP_SQRT > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F0XChecker_3_01OP__TAN_01_4.xml
%feature("docstring") casadi::F0XChecker< OP_TAN > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F0XChecker_3_01OP__TANH_01_4.xml
%feature("docstring") casadi::F0XChecker< OP_TANH > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1F0XChecker_3_01OP__TWICE_01_4.xml
%feature("docstring") casadi::F0XChecker< OP_TWICE > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: classcasadi_1_1FixedStepIntegrator.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::SharedObject::getCount() const  " [INTERNAL]  Get the reference
count.

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::Integrator::getDAE() "

Get the DAE.

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Integrator::resetB() "

Reset the backward problem.

Time will be set to tf and backward state to input(INTEGRATOR_RX0)

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::Integrator::integrateB(double t_out) "

Integrate backward until a specified time point.

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Integrator::printStats(std::ostream
&stream=std::cout) const  "

Print solver statistics.

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::FixedStepIntegrator::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::Integrator::integrate(double t_out) "

Integrate forward until a specified time point.

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::FixedStepIntegrator::FixedStepIntegrator() "

Default constructor.

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::Integrator::clone() const  "

Clone.

";

%feature("docstring") casadi::FixedStepIntegrator "

Base class for fixed step integrators.

Joel Andersson

>Input scheme: casadi::IntegratorInput (INTEGRATOR_NUM_IN = 7) [integratorIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_X0          | x0                     | Differential state at  |
|                        |                        | the initial time .     |
+------------------------+------------------------+------------------------+
| INTEGRATOR_P           | p                      | Parameters .           |
+------------------------+------------------------+------------------------+
| INTEGRATOR_Z0          | z0                     | Initial guess for the  |
|                        |                        | algebraic variable .   |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RX0         | rx0                    | Backward differential  |
|                        |                        | state at the final     |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RP          | rp                     | Backward parameter     |
|                        |                        | vector .               |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZ0         | rz0                    | Initial guess for the  |
|                        |                        | backwards algebraic    |
|                        |                        | variable .             |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::IntegratorOutput (INTEGRATOR_NUM_OUT = 7) [integratorOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_XF          | xf                     | Differential state at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_QF          | qf                     | Quadrature state at    |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_ZF          | zf                     | Algebraic variable at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RXF         | rxf                    | Backward differential  |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RQF         | rqf                    | Backward quadrature    |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZF         | rzf                    | Backward algebraic     |
|                        |                        | variable at the        |
|                        |                        | initial time .         |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| artol        | OT_REAL      | 0.000        | tolerance as | casadi::Inte |
|              |              |              | provided     | gratorIntern |
|              |              |              | with         | al           |
|              |              |              | setArTol to  |              |
|              |              |              | OOQP         |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_augme | OT_BOOLEAN   | true         | DAE callback | casadi::Inte |
| nted         |              |              | function     | gratorIntern |
|              |              |              | also be      | al           |
|              |              |              | SXFunction . |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| number_of_fi | OT_INTEGER   | 20           | Number of    | casadi::Fixe |
| nite_element |              |              | finite       | dStepIntegra |
| s            |              |              | elements     | torInternal  |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: fixed_step_integrator.hpp ";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::Integrator::getAugmented(int nfwd, int nadj)
"

Generate a augmented DAE system with nfwd forward sensitivities and nadj
adjoint sensitivities.

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Integrator::reset() "

Reset the forward problem Time will be set to t0 and state to
input(INTEGRATOR_X0)

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";


// File: classcasadi_1_1Function.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::SharedObject::repr(std::ostream &stream) const  " [INTERNAL]  Print
a representation of the object.

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::Function::Function() "

default constructor

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring") casadi::Function::~Function "

Destructor.

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::Function::checkNode() const  " [INTERNAL]
Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::Function "

General function.

A general function $f$ in casadi can be multi-input, multi-output. Number of
inputs: nin getNumInputs() Number of outputs: nout getNumOutputs()  We can
view this function as a being composed of a ( nin, nout) grid of single-
input, single-output primitive functions. Each such primitive function
$f_{i,j} \\\\forall i \\\\in [0,nin-1], j \\\\in [0,nout-1]$ can map as
$\\\\mathbf{R}^{n,m}\\\\to\\\\mathbf{R}^{p,q}$, in which n,m,p,q can take
different values for every (i,j) pair.  When passing input, you specify
which partition $i$ is active. You pass the numbers vectorized, as a vector
of size $(n*m)$. When requesting output, you specify which partition $j$ is
active. You get the numbers vectorized, as a vector of size $(p*q)$.  To
calculate Jacobians, you need to have $(m=1,q=1)$.

Write the Jacobian as $J_{i,j} = \\\\nabla f_{i,j} = \\\\frac{\\\\partial
f_{i,j}(\\\\vec{x})}{\\\\partial \\\\vec{x}}$.

Using $\\\\vec{v} \\\\in \\\\mathbf{R}^n$ as a forward seed: setFwdSeed(v,i)
Retrieving $\\\\vec{s}_f \\\\in \\\\mathbf{R}^p$ from: getFwdSens(sf,j)
Using $\\\\vec{w} \\\\in \\\\mathbf{R}^p$ as a forward seed: setAdjSeed(w,j)
Retrieving $\\\\vec{s}_a \\\\in \\\\mathbf{R}^n $ from: getAdjSens(sa,i)  We
have the following relationships for function mapping from a row vector to a
row vector:

$ \\\\vec{s}_f = \\\\nabla f_{i,j} . \\\\vec{v}$ $ \\\\vec{s}_a = (\\\\nabla
f_{i,j})^T . \\\\vec{w}$

Some quantities in these formulas must be transposed: input col: transpose $
\\\\vec{v} $ and $\\\\vec{s}_a$ output col: transpose $ \\\\vec{w} $ and
$\\\\vec{s}_f$  NOTE: Functions are allowed to modify their input arguments
when evaluating: implicitFunction, IDAS solver Further releases may disallow
this.

Joel Andersson

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: function.hpp ";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";


// File: structcasadi_1_1Function0Checker.xml
%feature("docstring") casadi::Function0Checker "[INTERNAL]  If evaluated
with the second argument zero, is the result zero?

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1Function0Checker_3_01OP__AND_01_4.xml
%feature("docstring") casadi::Function0Checker< OP_AND > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1Function0Checker_3_01OP__IF__ELSE__ZERO_01_4.xml
%feature("docstring") casadi::Function0Checker< OP_IF_ELSE_ZERO > "
[INTERNAL] C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1Function0Checker_3_01OP__MUL_01_4.xml
%feature("docstring") casadi::Function0Checker< OP_MUL > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: classcasadi_1_1Functor.xml
%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::SharedObject::checkNode() const  " [INTERNAL]
Assert that the node is pointing to the right type of object

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring") casadi::Functor "

Functor.

Joris Gillis

C++ includes: functor.hpp ";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";


// File: classcasadi_1_1GenericExpression.xml


/*  Operations from the left  */

/* For Python

*/ %feature("docstring") casadi::GenericExpression::__rne__ " ";

%feature("docstring") casadi::GenericExpression::__rtruediv__ "";

%feature("docstring") casadi::GenericExpression::__rle__ "";

%feature("docstring") casadi::GenericExpression::__rge__ "";

%feature("docstring") casadi::GenericExpression::__ge__ "

No need to have both <= and >=.

";

%feature("docstring") casadi::GenericExpression::__rsub__ "";

%feature("docstring") casadi::GenericExpression::__rdiv__ "";

%feature("docstring") casadi::GenericExpression::__req__ "";

%feature("docstring") casadi::GenericExpression::__rmul__ "";

%feature("docstring") casadi::GenericExpression::__mldivide__ "

Matrix division from left.

";

%feature("docstring") casadi::GenericExpression::__radd__ "";

%feature("docstring") casadi::GenericExpression::__truediv__ "

Division (with __future__.division in effect)

";

%feature("docstring") casadi::GenericExpression "

Expression interface.

This is a common base class for SX, MX and Matrix<>, introducing a uniform
syntax and implementing common functionality using the curiously recurring
template pattern (CRTP) idiom. Joel Andersson

C++ includes: generic_expression.hpp ";

%feature("docstring") casadi::GenericExpression::__rlt__ "";

%feature("docstring") casadi::GenericExpression::__gt__ "

No need to have both < and >

";

%feature("docstring") casadi::GenericExpression::__rgt__ "";


// File: classcasadi_1_1GenericMatrix.xml


/*  Construct symbolic primitives  */

/* The \"sym\" function is intended to work in a similar way as \"sym\" used
in the Symbolic Toolbox for Matlab but instead creating a CasADi symbolic
primitive.

*/ %feature("docstring")  casadi::GenericMatrix< MatType >::shape() const  "
[INTERNAL]  Get the shape.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::size2() const  "

Get the second dimension (i.e. number of columns)

";

%feature("docstring")  casadi::GenericMatrix< MatType >::isDense() const  "

Check if the matrix expression is dense.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::isScalar(bool
scalar_and_dense=false) const  "

Check if the matrix expression is scalar.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::isTril() const  "

Check if the matrix is lower triangular.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::sparsityRef() "

Access the sparsity, make a copy if there are multiple references to it.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::dimString() const
"

Get string representation of dimensions. The representation is (nrow x ncol
= numel | size)

";

%feature("docstring")  casadi::GenericMatrix< MatType >::sparsity() const  "

Get the sparsity pattern.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::sizeD() const  "

Get get the number of non-zeros on the diagonal.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::isSquare() const  "

Check if the matrix expression is square.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::sizeL() const  "

Get the number of non-zeros in the lower triangular half.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::isVector() const  "

Check if the matrix is a vector (i.e. size2()==1)

";

%feature("docstring")  casadi::GenericMatrix< MatType >::sizeU() const  "

Get the number of non-zeros in the upper triangular half.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::size() const  "

Get the number of (structural) non-zero elements.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::size(SparsityType
sp) const  "

Get the number if non-zeros for a given sparsity pattern.

";

%feature("docstring") casadi::GenericMatrix "

Matrix base class.

This is a common base class for MX and Matrix<>, introducing a uniform
syntax and implementing common functionality using the curiously recurring
template pattern (CRTP) idiom.  The class is designed with the idea that
\"everything is a matrix\", that is, also scalars and vectors. This
philosophy makes it easy to use and to interface in particularly with Python
and Matlab/Octave.  The syntax tries to stay as close as possible to the
ublas syntax when it comes to vector/matrix operations.  Index starts with
0. Index vec happens as follows: (rr,cc) -> k = rr+cc*size1() Vectors are
column vectors.  The storage format is Compressed Column Storage (CCS),
similar to that used for sparse matrices in Matlab, but unlike this format,
we do allow for elements to be structurally non-zero but numerically zero.
The sparsity pattern, which is reference counted and cached, can be accessed
with Sparsity& sparsity() Joel Andersson

C++ includes: generic_matrix.hpp ";

%feature("docstring")  casadi::GenericMatrix< MatType >::mul_smart(const
MatType &y, const Sparsity &sp_z) const  "

Matrix-matrix multiplication. Attempts to identify quick returns on matrix-
level and delegates to MatType::mul_full if no such quick returns are found.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::isTriu() const  "

Check if the matrix is upper triangular.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::size1() const  "

Get the first dimension (i.e. number of rows)

";

%feature("docstring")  casadi::GenericMatrix< MatType >::numel() const  "

Get the number of elements.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::zeros(int nrow=1,
int ncol=1) "

Create a dense matrix or a matrix with specified sparsity with all entries
zero.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::zeros(const
Sparsity &sp) "

Create a dense matrix or a matrix with specified sparsity with all entries
zero.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::zeros(const
std::pair< int, int > &rc) "

Create a dense matrix or a matrix with specified sparsity with all entries
zero.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::sparse(int nrow=1,
int ncol=1) "

create a sparse matrix with all zeros

";

%feature("docstring")  casadi::GenericMatrix< MatType >::sparse(const
std::pair< int, int > &rc) "

create a sparse matrix with all zeros

";

%feature("docstring")  casadi::GenericMatrix< MatType >::isEmpty(bool
both=false) const  "

Check if the sparsity is empty, i.e. if one of the dimensions is zero (or
optionally both dimensions)

";

%feature("docstring")  casadi::GenericMatrix< MatType >::sym(const
std::string &name, int nrow=1, int ncol=1) "

Create an nrow-by-ncol symbolic primitive.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::sym(const
std::string &name, const std::pair< int, int > &rc) "

Construct a symbolic primitive with given dimensions.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::sym(const
std::string &name, const Sparsity &sp) "

Create symbolic primitive with a given sparsity pattern.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::sym(const
std::string &name, const Sparsity &sp, int p) "

Create a vector of length p with with matrices with symbolic primitives of
given sparsity.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::sym(const
std::string &name, int nrow, int ncol, int p) "

Create a vector of length p with nrow-by-ncol symbolic primitives.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::sym(const
std::string &name, const Sparsity &sp, int p, int r) "

Create a vector of length r of vectors of length p with symbolic primitives
with given sparsity.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::sym(const
std::string &name, int nrow, int ncol, int p, int r) "

Create a vector of length r of vectors of length p with nrow-by-ncol
symbolic primitives.

";

%feature("docstring")  casadi::GenericMatrix< MX >::sym(const std::string
&name, const Sparsity &sp) " ";

%feature("docstring")  casadi::GenericMatrix< MX >::sym(const std::string
&name, const Sparsity &sp) " ";

%feature("docstring")  casadi::GenericMatrix< SX >::sym(const std::string
&name, const Sparsity &sp) " ";

%feature("docstring")  casadi::GenericMatrix< SX >::sym(const std::string
&name, const Sparsity &sp) " ";

%feature("docstring")  casadi::GenericMatrix< MatType >::ones(int nrow=1,
int ncol=1) "

Create a dense matrix or a matrix with specified sparsity with all entries
one.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::ones(const Sparsity
&sp) "

Create a dense matrix or a matrix with specified sparsity with all entries
one.

";

%feature("docstring")  casadi::GenericMatrix< MatType >::ones(const
std::pair< int, int > &rc) "

Create a dense matrix or a matrix with specified sparsity with all entries
one.

";


// File: classcasadi_1_1GenericType.xml
%feature("docstring")  casadi::GenericType::isDouble() const  "

Is a double?

";

%feature("docstring")  casadi::GenericType::isBool() const  "

Is boolean?

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::SharedObject::checkNode() const  " [INTERNAL]
Assert that the node is pointing to the right type of object

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::GenericType::isString() const  "

Is a string?

";

%feature("docstring")  casadi::GenericType::toFunction() const  "

Convert to shared object.

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::GenericType::isDoubleVector() const  "

Is a vector of doubles?

";

%feature("docstring") casadi::GenericType "

Generic data type.

Joel Andersson

C++ includes: generic_type.hpp ";

%feature("docstring")  casadi::GenericType::isEmptyVector() const  "

Is an empty vector?

";

%feature("docstring")  casadi::GenericType::isSharedObject() const  "

Is a shared object?

";

%feature("docstring")  casadi::GenericType::getType() const  " ";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::GenericType::isInt() const  "

Is an integer?

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::GenericType::can_cast_to(opt_type other)
const  " ";

%feature("docstring")  casadi::GenericType::can_cast_to(const GenericType
&other) const  " ";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::GenericType::toStringVector() const  "

Convert to vector of strings.

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::GenericType::toSharedObject() const  "

Convert to shared object.

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::GenericType::isDictionary() const  "

Is a shared object?

";

%feature("docstring")  casadi::GenericType::toDoubleVector() const  "
[INTERNAL]  Convert to vector of doubles.

";

%feature("docstring")  casadi::GenericType::toDoubleVector() "[INTERNAL]
Convert to vector of doubles.

";

%feature("docstring")  casadi::GenericType::toInt() const  "

Convert to int.

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::GenericType::toBool() const  "

Convert to boolean.

";

%feature("docstring")  casadi::GenericType::isFunction() const  "

Is a shared object?

";

%feature("docstring")  casadi::GenericType::is_a() const  " [INTERNAL]
Check if it is of a certain type (implementation in
generic_type_internal.hpp)

";

%feature("docstring") casadi::GenericType::GenericType() "";

%feature("docstring") casadi::GenericType::GenericType(bool b) " ";

%feature("docstring") casadi::GenericType::GenericType(int i) " ";

%feature("docstring") casadi::GenericType::GenericType(double d) " ";

%feature("docstring") casadi::GenericType::GenericType(const std::string &s)
" ";

%feature("docstring") casadi::GenericType::GenericType(const std::vector<
bool > &iv) " ";

%feature("docstring") casadi::GenericType::GenericType(const std::vector<
int > &iv) " ";

%feature("docstring") casadi::GenericType::GenericType(const std::vector<
double > &dv) " ";

%feature("docstring") casadi::GenericType::GenericType(const std::vector<
std::string > &sv) " ";

%feature("docstring") casadi::GenericType::GenericType(const char s[]) " ";

%feature("docstring") casadi::GenericType::GenericType(const Function &f) "
";

%feature("docstring") casadi::GenericType::GenericType(const SharedObject
&obj) " ";

%feature("docstring") casadi::GenericType::GenericType(void *ptr) "
[INTERNAL] ";

%feature("docstring") casadi::GenericType::GenericType(const Dictionary
&dict) " ";

%feature("docstring") casadi::GenericType::GenericType(NLPSolverCreator ptr)
"

Creator functions.

";

%feature("docstring") casadi::GenericType::GenericType(linearSolverCreator
ptr) " ";

%feature("docstring") casadi::GenericType::GenericType(LPSolverCreator ptr)
" ";

%feature("docstring") casadi::GenericType::GenericType(integratorCreator
ptr) " ";

%feature("docstring") casadi::GenericType::GenericType(QPSolverCreator ptr)
" ";

%feature("docstring")
casadi::GenericType::GenericType(StabilizedQPSolverCreator ptr) " ";

%feature("docstring") casadi::GenericType::GenericType(SOCPSolverCreator
ptr) " ";

%feature("docstring") casadi::GenericType::GenericType(SDPSolverCreator ptr)
" ";

%feature("docstring") casadi::GenericType::GenericType(SDQPSolverCreator
ptr) " ";

%feature("docstring") casadi::GenericType::GenericType(QCQPSolverCreator
ptr) " ";

%feature("docstring")
casadi::GenericType::GenericType(implicitFunctionCreator ptr) " ";

%feature("docstring") casadi::GenericType::GenericType(const
DerivativeGenerator &c) " ";

%feature("docstring") casadi::GenericType::GenericType(const Callback &c) "
";

%feature("docstring")  casadi::GenericType::toString() const  "

Convert to string.

";

%feature("docstring")  casadi::GenericType::isStringVector() const  "

Is a vector of strings.

";

%feature("docstring")  casadi::GenericType::toVoidPointer() const  "

Convert to void pointer.

";

%feature("docstring")  casadi::GenericType::isIntVector() const  "

Is a vector of ints?

";

%feature("docstring")  casadi::GenericType::get_description() const  "

Get a description of the object's type.

";

%feature("docstring")  casadi::GenericType::toDouble() const  "

Convert to double.

";

%feature("docstring")  casadi::GenericType::toDictionary() const  "
[INTERNAL]  Convert to Dictionary.

";

%feature("docstring")  casadi::GenericType::toDictionary() "[INTERNAL]
Convert to Dictionary.

";

%feature("docstring")  casadi::GenericType::toIntVector() const  "
[INTERNAL]  Convert to vector of ints.

";

%feature("docstring")  casadi::GenericType::toIntVector() "[INTERNAL]
Convert to vector of ints.

";


// File: classcasadi_1_1GetNonzeros.xml
%feature("docstring")  casadi::MXNode::getSubAssign(const MX &y, const Slice
&i, const Slice &j) const  " [INTERNAL]  Get submatrix assignment.

";

%feature("docstring")  casadi::MXNode::evaluateSX(const SXPtrV &input,
SXPtrV &output, std::vector< int > &itmp, std::vector< SXElement > &rtmp) "
[INTERNAL]  Evaluate symbolically (SX)

";

%feature("docstring")  casadi::MXNode::setSparsity(const Sparsity &sparsity)
" [INTERNAL]  Set the sparsity.

";

%feature("docstring")  casadi::MXNode::getBinarySwitch(int op, const MX &y)
const  " [INTERNAL]  Get a binary operation operation.

";

%feature("docstring") casadi::GetNonzeros::GetNonzeros(const Sparsity &sp,
const MX &x) " [INTERNAL]  Constructor.

";

%feature("docstring")  casadi::MXNode::getName() const  " [INTERNAL]  Get
the name.

";

%feature("docstring")  casadi::SharedObjectNode::weak() "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring")  casadi::MXNode::numel() const  " [INTERNAL]  Get
shape.

";

%feature("docstring")  casadi::MXNode::isIdentity() const  " [INTERNAL]
Check if identity matrix.

";

%feature("docstring")  casadi::MXNode::ndep() const  " [INTERNAL]  Number of
dependencies.

";

%feature("docstring")  casadi::MXNode::simplifyMe(MX &ex) " [INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring") casadi::GetNonzeros::__nonzero__ "[INTERNAL]  Check
the truth value of this node.

";

%feature("docstring")  casadi::MXNode::sameOpAndDeps(const MXNode *node, int
depth) const  " [INTERNAL]  Checks if two nodes have the same operation and
have equivalent dependencies up to a given depth.

";

%feature("docstring")  casadi::MXNode::getBinary(int op, const MX &y, bool
scX, bool scY) const  " [INTERNAL]  Get a binary operation operation
(matrix-matrix)

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) const  " [INTERNAL]
dependencies - functions that have to be evaluated before this one

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getTranspose() const  " [INTERNAL]
Transpose.

";

%feature("docstring")  casadi::MXNode::getOutput(int oind) const  "
[INTERNAL]  Get an output.

";

%feature("docstring")  casadi::MXNode::getMultiplication(const MX &y, const
Sparsity &sp_z=Sparsity()) const  " [INTERNAL]   Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring")  casadi::MXNode::repr(std::ostream &stream) const  "
[INTERNAL]  Print a representation.

";

%feature("docstring")  casadi::SharedObjectNode::assertInit() const  "
[INTERNAL]  Assert that the object has been initialized.

";

%feature("docstring")  casadi::MXNode::isNonLinear() "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring")  casadi::MXNode::numInplace() const  " [INTERNAL]  Can
the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring")  casadi::MXNode::isEqual(const MXNode *node, int
depth) const  " [INTERNAL]  Check if two nodes are equivalent up to a given
depth.

";

%feature("docstring")  casadi::SharedObjectNode::init() "[INTERNAL]
Initialize the object.

";

%feature("docstring")  casadi::MXNode::getAssertion(const MX &y, const
std::string &fail_message="") const  " [INTERNAL]   Assertion.

";

%feature("docstring") casadi::GetNonzeros::~GetNonzeros "[INTERNAL]
Destructor.

";

%feature("docstring")  casadi::MXNode::size1() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::size2() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getNorm1() const  " [INTERNAL]
1-norm

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream) const  "
[INTERNAL]  Print a description.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream, long
&remaining_calls) const  " [INTERNAL]  Print expression (make sure number of
calls is not exceeded)

";

%feature("docstring")  casadi::GetNonzeros::getAll() const  " [INTERNAL]
Get all the nonzeros.

";

%feature("docstring")  casadi::GetNonzeros::mapping() const  " [INTERNAL]
Get an IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring")  casadi::SharedObjectNode::getCount() const  "
[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::MXNode::isUnaryOp() const  " [INTERNAL]
Check if unary operation.

";

%feature("docstring")  casadi::MXNode::isZero() const  " [INTERNAL]  Check
if identically zero.

";

%feature("docstring")  casadi::MXNode::getMatrixValue() const  " [INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring")  casadi::MXNode::isOne() const  " [INTERNAL]  Check if
identically one.

";

%feature("docstring")  casadi::MXNode::shape() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, const std::vector< int > &onz, bool add=false) "
[INTERNAL]  Assign nonzeros (mapping matrix)

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, bool add=false) " [INTERNAL]  Assign nonzeros
(mapping matrix), output indices sequential.

";

%feature("docstring")  casadi::MXNode::generateOperation(std::ostream
&stream, const std::vector< std::string > &arg, const std::vector<
std::string > &res, CodeGenerator &gen) const  " [INTERNAL]  Generate code
for the operation.

";

%feature("docstring")  casadi::MXNode::getVertcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a vertical concatenation node (vectors only)

";

%feature("docstring")  casadi::MXNode::addDependency(const MX &dep) "
[INTERNAL]  Add a dependency.

";

%feature("docstring")  casadi::MXNode::getInverse() const  " [INTERNAL]
Inverse.

";

%feature("docstring")  casadi::MXNode::getUnary(int op) const  " [INTERNAL]
Get a unary operation.

";

%feature("docstring")  casadi::MXNode::getSetSparse(const Sparsity &sp)
const  " [INTERNAL]  Create set sparse.

";

%feature("docstring")  casadi::MXNode::getHorzcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a horizontal concatenation node.

";

%feature("docstring")  casadi::GetNonzeros::getGetNonzeros(const Sparsity
&sp, const std::vector< int > &nz) const  " [INTERNAL]  Get the nonzeros of
matrix.

";

%feature("docstring")  casadi::MXNode::getFunctionOutput() const  "
[INTERNAL]  Get function output.

";

%feature("docstring")  casadi::MXNode::size() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::isBinaryOp() const  " [INTERNAL]
Check if binary operation.

";

%feature("docstring")  casadi::MXNode::getHorzsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a horizontal split node.

";

%feature("docstring")  casadi::MXNode::clone() const  " [INTERNAL]  Clone
function.

";

%feature("docstring")  casadi::MXNode::getInnerProd(const MX &y) const  "
[INTERNAL]  Inner product.

";

%feature("docstring")  casadi::MXNode::nTmp(size_t &ni, size_t &nr) "
[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::MXNode::getSetNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Assign the nonzeros of a matrix
to another matrix.

";

%feature("docstring")  casadi::MXNode::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied) " [INTERNAL]  Deep copy
data members.

";

%feature("docstring")  casadi::GetNonzeros::evaluateMX(const MXPtrV &input,
MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV
&adjSeed, MXPtrVV &adjSens, bool output_given) " [INTERNAL]  Evaluate the
function symbolically ( MX)

";

%feature("docstring")  casadi::MXNode::evaluateMX(const MXPtrV &input,
MXPtrV &output) " [INTERNAL]  Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring")  casadi::MXNode::hasDep() const  " [INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring")  casadi::MXNode::evaluateD(const DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp)
" [INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::MXNode::getVertsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a vertical split node (vectors
only)

";

%feature("docstring")  casadi::SharedObjectNode::isInit() const  "
[INTERNAL]  Check if the object has been initialized.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep) "
[INTERNAL]  Set unary dependency.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2) " [INTERNAL]  Set binary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2, const MX &dep3) " [INTERNAL]  Set ternary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const std::vector< MX
> &dep) " [INTERNAL]  Set multiple dependencies.

";

%feature("docstring") casadi::GetNonzeros "[INTERNAL]  Get nonzeros of a
matrix.

Joel Andersson

C++ includes: getnonzeros.hpp ";

%feature("docstring")  casadi::MXNode::getDeterminant() const  " [INTERNAL]
Determinant.

";

%feature("docstring")  casadi::MXNode::getSolve(const MX &r, bool tr, const
LinearSolver &linear_solver) const  " [INTERNAL]   Solve a system of linear
equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring")  casadi::MXNode::getAddNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Add the nonzeros of a matrix to
another matrix.

";

%feature("docstring")  casadi::MXNode::isValue(double val) const  "
[INTERNAL]  Check if a certain value.

";

%feature("docstring")  casadi::MXNode::sparsity() const  " [INTERNAL]  Get
the sparsity.

";

%feature("docstring")  casadi::MXNode::sparsity(int oind) const  "
[INTERNAL]  Get the sparsity of output oind.

";

%feature("docstring")  casadi::MXNode::getFunction() "[INTERNAL]  Get
function reference.

";

%feature("docstring")  casadi::MXNode::getFunction() const  " [INTERNAL]
Get function reference.

";

%feature("docstring")  casadi::GetNonzeros::getOp() const  " [INTERNAL]  Get
the operation.

";

%feature("docstring")  casadi::MXNode::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp,
bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, bool fwd) " [INTERNAL]  Propagate sparsity, no work.

";

%feature("docstring")  casadi::MXNode::printPart(std::ostream &stream, int
part) const  " [INTERNAL]  Print a part of the expression.

";

%feature("docstring")  casadi::MXNode::getReshape(const Sparsity &sp) const
" [INTERNAL]   Reshape.

";

%feature("docstring")  casadi::MXNode::getNormF() const  " [INTERNAL]
Frobenius norm.

";

%feature("docstring")  casadi::MXNode::isOutputNode() const  " [INTERNAL]
Check if evaluation output.

";

%feature("docstring")  casadi::MXNode::getNorm2() const  " [INTERNAL]
Spectral norm.

";

%feature("docstring")  casadi::MXNode::getNormInf() const  " [INTERNAL]
Infinity norm.

";

%feature("docstring")  casadi::MXNode::getNumOutputs() const  " [INTERNAL]
Number of outputs.

";

%feature("docstring")  casadi::MXNode::getFunctionInput() const  "
[INTERNAL]  Get function input.

";

%feature("docstring")  casadi::MXNode::getSubRef(const Slice &i, const Slice
&j) const  " [INTERNAL]  Get submatrix reference.

";

%feature("docstring")  casadi::MXNode::getValue() const  " [INTERNAL]  Get
the value (only for scalar constant nodes)

";

%feature("docstring")  casadi::MXNode::isMultipleOutput() const  "
[INTERNAL]  Check if a multiple output node.

";


// File: classcasadi_1_1GetNonzerosSlice.xml
%feature("docstring")  casadi::MXNode::getAssertion(const MX &y, const
std::string &fail_message="") const  " [INTERNAL]   Assertion.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream) const  "
[INTERNAL]  Print a description.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream, long
&remaining_calls) const  " [INTERNAL]  Print expression (make sure number of
calls is not exceeded)

";

%feature("docstring")  casadi::MXNode::shape() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::size1() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getDeterminant() const  " [INTERNAL]
Determinant.

";

%feature("docstring")  casadi::GetNonzerosSlice::isEqual(const MXNode *node,
int depth) const  " [INTERNAL]  Check if two nodes are equivalent up to a
given depth.

";

%feature("docstring")  casadi::GetNonzerosSlice::evaluateSX(const SXPtrV
&input, SXPtrV &output, std::vector< int > &itmp, std::vector< SXElement >
&rtmp) " [INTERNAL]  Evaluate the function symbolically (SX)

";

%feature("docstring")  casadi::MXNode::isZero() const  " [INTERNAL]  Check
if identically zero.

";

%feature("docstring")  casadi::MXNode::sameOpAndDeps(const MXNode *node, int
depth) const  " [INTERNAL]  Checks if two nodes have the same operation and
have equivalent dependencies up to a given depth.

";

%feature("docstring")  casadi::MXNode::size() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getAddNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Add the nonzeros of a matrix to
another matrix.

";

%feature("docstring")  casadi::MXNode::getSetSparse(const Sparsity &sp)
const  " [INTERNAL]  Create set sparse.

";

%feature("docstring")  casadi::MXNode::hasDep() const  " [INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring")  casadi::MXNode::getTranspose() const  " [INTERNAL]
Transpose.

";

%feature("docstring")  casadi::MXNode::numel() const  " [INTERNAL]  Get
shape.

";

%feature("docstring")  casadi::MXNode::getMatrixValue() const  " [INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring")  casadi::MXNode::getNorm2() const  " [INTERNAL]
Spectral norm.

";

%feature("docstring")  casadi::MXNode::repr(std::ostream &stream) const  "
[INTERNAL]  Print a representation.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep) "
[INTERNAL]  Set unary dependency.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2) " [INTERNAL]  Set binary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2, const MX &dep3) " [INTERNAL]  Set ternary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const std::vector< MX
> &dep) " [INTERNAL]  Set multiple dependencies.

";

%feature("docstring") casadi::GetNonzerosSlice::GetNonzerosSlice(const
Sparsity &sp, const MX &x, const Slice &s) " [INTERNAL]  Constructor.

";

%feature("docstring")  casadi::SharedObjectNode::weak() "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring")  casadi::MXNode::size2() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::isOutputNode() const  " [INTERNAL]
Check if evaluation output.

";

%feature("docstring")  casadi::MXNode::getSubAssign(const MX &y, const Slice
&i, const Slice &j) const  " [INTERNAL]  Get submatrix assignment.

";

%feature("docstring")  casadi::SharedObjectNode::getCount() const  "
[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::MXNode::setSparsity(const Sparsity &sparsity)
" [INTERNAL]  Set the sparsity.

";

%feature("docstring")  casadi::MXNode::isUnaryOp() const  " [INTERNAL]
Check if unary operation.

";

%feature("docstring") casadi::GetNonzerosSlice::~GetNonzerosSlice "[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::SharedObjectNode::isInit() const  "
[INTERNAL]  Check if the object has been initialized.

";

%feature("docstring")
casadi::GetNonzerosSlice::generateOperation(std::ostream &stream, const
std::vector< std::string > &arg, const std::vector< std::string > &res,
CodeGenerator &gen) const  " [INTERNAL]  Generate code for the operation.

";

%feature("docstring")  casadi::MXNode::getFunction() "[INTERNAL]  Get
function reference.

";

%feature("docstring")  casadi::MXNode::getFunction() const  " [INTERNAL]
Get function reference.

";

%feature("docstring")  casadi::GetNonzerosSlice::evaluateGen(const MatV
&input, MatV &output, std::vector< int > &itmp, std::vector< T > &rtmp) "
[INTERNAL]  Evaluate the function (template)

";

%feature("docstring")  casadi::SharedObjectNode::init() "[INTERNAL]
Initialize the object.

";

%feature("docstring")  casadi::MXNode::nTmp(size_t &ni, size_t &nr) "
[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::MXNode::getFunctionInput() const  "
[INTERNAL]  Get function input.

";

%feature("docstring")  casadi::MXNode::isValue(double val) const  "
[INTERNAL]  Check if a certain value.

";

%feature("docstring")  casadi::GetNonzerosSlice::isIdentity() const  "
[INTERNAL]  Check if the instance is in fact an identity mapping (that can
be simplified)

";

%feature("docstring")  casadi::MXNode::isOne() const  " [INTERNAL]  Check if
identically one.

";

%feature("docstring")  casadi::MXNode::getName() const  " [INTERNAL]  Get
the name.

";

%feature("docstring")  casadi::GetNonzeros::mapping() const  " [INTERNAL]
Get an IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring")  casadi::MXNode::getSubRef(const Slice &i, const Slice
&j) const  " [INTERNAL]  Get submatrix reference.

";

%feature("docstring")
casadi::GetNonzerosSlice::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV
&output, bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp,
bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::getValue() const  " [INTERNAL]  Get
the value (only for scalar constant nodes)

";

%feature("docstring")  casadi::MXNode::getHorzsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a horizontal split node.

";

%feature("docstring")  casadi::MXNode::getFunctionOutput() const  "
[INTERNAL]  Get function output.

";

%feature("docstring")  casadi::MXNode::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied) " [INTERNAL]  Deep copy
data members.

";

%feature("docstring")  casadi::MXNode::getSolve(const MX &r, bool tr, const
LinearSolver &linear_solver) const  " [INTERNAL]   Solve a system of linear
equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring")  casadi::MXNode::sparsity() const  " [INTERNAL]  Get
the sparsity.

";

%feature("docstring")  casadi::MXNode::sparsity(int oind) const  "
[INTERNAL]  Get the sparsity of output oind.

";

%feature("docstring")  casadi::SharedObjectNode::assertInit() const  "
[INTERNAL]  Assert that the object has been initialized.

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, const std::vector< int > &onz, bool add=false) "
[INTERNAL]  Assign nonzeros (mapping matrix)

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, bool add=false) " [INTERNAL]  Assign nonzeros
(mapping matrix), output indices sequential.

";

%feature("docstring") casadi::GetNonzerosSlice "[INTERNAL] C++ includes:
getnonzeros.hpp ";

%feature("docstring")  casadi::MXNode::getUnary(int op) const  " [INTERNAL]
Get a unary operation.

";

%feature("docstring")  casadi::MXNode::isBinaryOp() const  " [INTERNAL]
Check if binary operation.

";

%feature("docstring")  casadi::MXNode::getHorzcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a horizontal concatenation node.

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) const  " [INTERNAL]
dependencies - functions that have to be evaluated before this one

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getVertcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a vertical concatenation node (vectors only)

";

%feature("docstring")  casadi::MXNode::isNonLinear() "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring")  casadi::GetNonzerosSlice::evaluateD(const DMatrixPtrV
&input, DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double >
&rtmp) " [INTERNAL]  Evaluate the function numerically.

";

%feature("docstring")  casadi::MXNode::getInnerProd(const MX &y) const  "
[INTERNAL]  Inner product.

";

%feature("docstring")  casadi::MXNode::getMultiplication(const MX &y, const
Sparsity &sp_z=Sparsity()) const  " [INTERNAL]   Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring")  casadi::MXNode::addDependency(const MX &dep) "
[INTERNAL]  Add a dependency.

";

%feature("docstring")  casadi::GetNonzeros::getGetNonzeros(const Sparsity
&sp, const std::vector< int > &nz) const  " [INTERNAL]  Get the nonzeros of
matrix.

";

%feature("docstring")  casadi::MXNode::getSetNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Assign the nonzeros of a matrix
to another matrix.

";

%feature("docstring")  casadi::MXNode::getVertsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a vertical split node (vectors
only)

";

%feature("docstring")  casadi::MXNode::ndep() const  " [INTERNAL]  Number of
dependencies.

";

%feature("docstring")  casadi::MXNode::numInplace() const  " [INTERNAL]  Can
the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring")  casadi::MXNode::getBinarySwitch(int op, const MX &y)
const  " [INTERNAL]  Get a binary operation operation.

";

%feature("docstring")  casadi::MXNode::getInverse() const  " [INTERNAL]
Inverse.

";

%feature("docstring")  casadi::MXNode::getNumOutputs() const  " [INTERNAL]
Number of outputs.

";

%feature("docstring")  casadi::MXNode::getBinary(int op, const MX &y, bool
scX, bool scY) const  " [INTERNAL]  Get a binary operation operation
(matrix-matrix)

";

%feature("docstring")  casadi::GetNonzerosSlice::getAll() const  "
[INTERNAL]  Get all the nonzeros.

";

%feature("docstring") casadi::GetNonzerosSlice::__nonzero__ "[INTERNAL]
Check the truth value of this node.

";

%feature("docstring")  casadi::GetNonzerosSlice::simplifyMe(MX &ex) "
[INTERNAL]  Simplify.

";

%feature("docstring")  casadi::GetNonzeros::evaluateMX(const MXPtrV &input,
MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV
&adjSeed, MXPtrVV &adjSens, bool output_given) " [INTERNAL]  Evaluate the
function symbolically ( MX)

";

%feature("docstring")  casadi::MXNode::evaluateMX(const MXPtrV &input,
MXPtrV &output) " [INTERNAL]  Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring")  casadi::GetNonzeros::getOp() const  " [INTERNAL]  Get
the operation.

";

%feature("docstring")  casadi::MXNode::getNormF() const  " [INTERNAL]
Frobenius norm.

";

%feature("docstring")  casadi::MXNode::getReshape(const Sparsity &sp) const
" [INTERNAL]   Reshape.

";

%feature("docstring")  casadi::MXNode::isMultipleOutput() const  "
[INTERNAL]  Check if a multiple output node.

";

%feature("docstring")  casadi::MXNode::getNormInf() const  " [INTERNAL]
Infinity norm.

";

%feature("docstring")  casadi::GetNonzerosSlice::printPart(std::ostream
&stream, int part) const  " [INTERNAL]  Print a part of the expression */.

";

%feature("docstring")  casadi::MXNode::getOutput(int oind) const  "
[INTERNAL]  Get an output.

";

%feature("docstring")  casadi::MXNode::getNorm1() const  " [INTERNAL]
1-norm

";

%feature("docstring")  casadi::GetNonzerosSlice::clone() const  " [INTERNAL]
Clone function.

";


// File: classcasadi_1_1GetNonzerosSlice2.xml
%feature("docstring")  casadi::MXNode::getVertsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a vertical split node (vectors
only)

";

%feature("docstring")  casadi::MXNode::getBinary(int op, const MX &y, bool
scX, bool scY) const  " [INTERNAL]  Get a binary operation operation
(matrix-matrix)

";

%feature("docstring")  casadi::MXNode::repr(std::ostream &stream) const  "
[INTERNAL]  Print a representation.

";

%feature("docstring")  casadi::MXNode::getNumOutputs() const  " [INTERNAL]
Number of outputs.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep) "
[INTERNAL]  Set unary dependency.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2) " [INTERNAL]  Set binary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2, const MX &dep3) " [INTERNAL]  Set ternary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const std::vector< MX
> &dep) " [INTERNAL]  Set multiple dependencies.

";

%feature("docstring")  casadi::MXNode::getAddNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Add the nonzeros of a matrix to
another matrix.

";

%feature("docstring")  casadi::MXNode::getSubRef(const Slice &i, const Slice
&j) const  " [INTERNAL]  Get submatrix reference.

";

%feature("docstring")  casadi::MXNode::setSparsity(const Sparsity &sparsity)
" [INTERNAL]  Set the sparsity.

";

%feature("docstring")  casadi::GetNonzeros::evaluateMX(const MXPtrV &input,
MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV
&adjSeed, MXPtrVV &adjSens, bool output_given) " [INTERNAL]  Evaluate the
function symbolically ( MX)

";

%feature("docstring")  casadi::MXNode::evaluateMX(const MXPtrV &input,
MXPtrV &output) " [INTERNAL]  Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring")  casadi::SharedObjectNode::getCount() const  "
[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::GetNonzerosSlice2::evaluateSX(const SXPtrV
&input, SXPtrV &output, std::vector< int > &itmp, std::vector< SXElement >
&rtmp) " [INTERNAL]  Evaluate the function symbolically (SX)

";

%feature("docstring")  casadi::MXNode::getBinarySwitch(int op, const MX &y)
const  " [INTERNAL]  Get a binary operation operation.

";

%feature("docstring")  casadi::MXNode::getInverse() const  " [INTERNAL]
Inverse.

";

%feature("docstring")
casadi::GetNonzerosSlice2::generateOperation(std::ostream &stream, const
std::vector< std::string > &arg, const std::vector< std::string > &res,
CodeGenerator &gen) const  " [INTERNAL]  Generate code for the operation.

";

%feature("docstring")  casadi::GetNonzerosSlice2::evaluateGen(const MatV
&input, MatV &output, std::vector< int > &itmp, std::vector< T > &rtmp) "
[INTERNAL]  Evaluate the function (template)

";

%feature("docstring")  casadi::MXNode::getFunction() "[INTERNAL]  Get
function reference.

";

%feature("docstring")  casadi::MXNode::getFunction() const  " [INTERNAL]
Get function reference.

";

%feature("docstring")  casadi::MXNode::getNormF() const  " [INTERNAL]
Frobenius norm.

";

%feature("docstring")  casadi::MXNode::getDeterminant() const  " [INTERNAL]
Determinant.

";

%feature("docstring")  casadi::MXNode::getOutput(int oind) const  "
[INTERNAL]  Get an output.

";

%feature("docstring")  casadi::MXNode::isMultipleOutput() const  "
[INTERNAL]  Check if a multiple output node.

";

%feature("docstring")  casadi::MXNode::sparsity() const  " [INTERNAL]  Get
the sparsity.

";

%feature("docstring")  casadi::MXNode::sparsity(int oind) const  "
[INTERNAL]  Get the sparsity of output oind.

";

%feature("docstring")  casadi::MXNode::isValue(double val) const  "
[INTERNAL]  Check if a certain value.

";

%feature("docstring")  casadi::MXNode::getName() const  " [INTERNAL]  Get
the name.

";

%feature("docstring")  casadi::SharedObjectNode::weak() "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring")  casadi::MXNode::size1() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, const std::vector< int > &onz, bool add=false) "
[INTERNAL]  Assign nonzeros (mapping matrix)

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, bool add=false) " [INTERNAL]  Assign nonzeros
(mapping matrix), output indices sequential.

";

%feature("docstring")  casadi::MXNode::getSolve(const MX &r, bool tr, const
LinearSolver &linear_solver) const  " [INTERNAL]   Solve a system of linear
equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring")  casadi::MXNode::getHorzsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a horizontal split node.

";

%feature("docstring")  casadi::SharedObjectNode::assertInit() const  "
[INTERNAL]  Assert that the object has been initialized.

";

%feature("docstring")  casadi::MXNode::getValue() const  " [INTERNAL]  Get
the value (only for scalar constant nodes)

";

%feature("docstring")  casadi::GetNonzeros::getOp() const  " [INTERNAL]  Get
the operation.

";

%feature("docstring")
casadi::GetNonzerosSlice2::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV
&output, bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp,
bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring") casadi::GetNonzerosSlice2 "[INTERNAL] C++ includes:
getnonzeros.hpp ";

%feature("docstring")  casadi::MXNode::addDependency(const MX &dep) "
[INTERNAL]  Add a dependency.

";

%feature("docstring")  casadi::MXNode::getReshape(const Sparsity &sp) const
" [INTERNAL]   Reshape.

";

%feature("docstring")  casadi::MXNode::simplifyMe(MX &ex) " [INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring")  casadi::MXNode::isIdentity() const  " [INTERNAL]
Check if identity matrix.

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) const  " [INTERNAL]
dependencies - functions that have to be evaluated before this one

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getNormInf() const  " [INTERNAL]
Infinity norm.

";

%feature("docstring")  casadi::MXNode::getAssertion(const MX &y, const
std::string &fail_message="") const  " [INTERNAL]   Assertion.

";

%feature("docstring")  casadi::MXNode::getUnary(int op) const  " [INTERNAL]
Get a unary operation.

";

%feature("docstring")  casadi::MXNode::getNorm2() const  " [INTERNAL]
Spectral norm.

";

%feature("docstring")  casadi::MXNode::getMultiplication(const MX &y, const
Sparsity &sp_z=Sparsity()) const  " [INTERNAL]   Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring")  casadi::GetNonzerosSlice2::evaluateD(const
DMatrixPtrV &input, DMatrixPtrV &output, std::vector< int > &itmp,
std::vector< double > &rtmp) " [INTERNAL]  Evaluate the function
numerically.

";

%feature("docstring")  casadi::MXNode::getHorzcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a horizontal concatenation node.

";

%feature("docstring")  casadi::MXNode::getMatrixValue() const  " [INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring")  casadi::MXNode::numInplace() const  " [INTERNAL]  Can
the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring")  casadi::MXNode::ndep() const  " [INTERNAL]  Number of
dependencies.

";

%feature("docstring")  casadi::SharedObjectNode::init() "[INTERNAL]
Initialize the object.

";

%feature("docstring")  casadi::MXNode::numel() const  " [INTERNAL]  Get
shape.

";

%feature("docstring")  casadi::MXNode::getInnerProd(const MX &y) const  "
[INTERNAL]  Inner product.

";

%feature("docstring")  casadi::MXNode::getNorm1() const  " [INTERNAL]
1-norm

";

%feature("docstring")  casadi::GetNonzerosSlice2::getAll() const  "
[INTERNAL]  Get all the nonzeros.

";

%feature("docstring")  casadi::MXNode::isOutputNode() const  " [INTERNAL]
Check if evaluation output.

";

%feature("docstring")  casadi::SharedObjectNode::isInit() const  "
[INTERNAL]  Check if the object has been initialized.

";

%feature("docstring")  casadi::MXNode::getSubAssign(const MX &y, const Slice
&i, const Slice &j) const  " [INTERNAL]  Get submatrix assignment.

";

%feature("docstring") casadi::GetNonzerosSlice2::__nonzero__ "[INTERNAL]
Check the truth value of this node.

";

%feature("docstring")  casadi::MXNode::isUnaryOp() const  " [INTERNAL]
Check if unary operation.

";

%feature("docstring")  casadi::MXNode::size2() const  " [INTERNAL] ";

%feature("docstring") casadi::GetNonzerosSlice2::GetNonzerosSlice2(const
Sparsity &sp, const MX &x, const Slice &inner, const Slice &outer) "
[INTERNAL]  Constructor.

";

%feature("docstring")  casadi::MXNode::hasDep() const  " [INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring")  casadi::MXNode::shape() const  " [INTERNAL] ";

%feature("docstring")  casadi::GetNonzerosSlice2::printPart(std::ostream
&stream, int part) const  " [INTERNAL]  Print a part of the expression */.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream) const  "
[INTERNAL]  Print a description.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream, long
&remaining_calls) const  " [INTERNAL]  Print expression (make sure number of
calls is not exceeded)

";

%feature("docstring")  casadi::MXNode::isOne() const  " [INTERNAL]  Check if
identically one.

";

%feature("docstring")  casadi::GetNonzerosSlice2::clone() const  "
[INTERNAL]  Clone function.

";

%feature("docstring")  casadi::MXNode::getSetSparse(const Sparsity &sp)
const  " [INTERNAL]  Create set sparse.

";

%feature("docstring")  casadi::MXNode::sameOpAndDeps(const MXNode *node, int
depth) const  " [INTERNAL]  Checks if two nodes have the same operation and
have equivalent dependencies up to a given depth.

";

%feature("docstring")  casadi::GetNonzerosSlice2::isEqual(const MXNode
*node, int depth) const  " [INTERNAL]  Check if two nodes are equivalent up
to a given depth.

";

%feature("docstring")  casadi::GetNonzeros::mapping() const  " [INTERNAL]
Get an IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring")  casadi::MXNode::isZero() const  " [INTERNAL]  Check
if identically zero.

";

%feature("docstring")  casadi::MXNode::getVertcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a vertical concatenation node (vectors only)

";

%feature("docstring")  casadi::MXNode::getFunctionOutput() const  "
[INTERNAL]  Get function output.

";

%feature("docstring")  casadi::MXNode::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied) " [INTERNAL]  Deep copy
data members.

";

%feature("docstring")  casadi::MXNode::size() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::isBinaryOp() const  " [INTERNAL]
Check if binary operation.

";

%feature("docstring") casadi::GetNonzerosSlice2::~GetNonzerosSlice2 "[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::MXNode::getFunctionInput() const  "
[INTERNAL]  Get function input.

";

%feature("docstring")  casadi::MXNode::getTranspose() const  " [INTERNAL]
Transpose.

";

%feature("docstring")  casadi::MXNode::nTmp(size_t &ni, size_t &nr) "
[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::MXNode::isNonLinear() "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring")  casadi::MXNode::getSetNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Assign the nonzeros of a matrix
to another matrix.

";

%feature("docstring")  casadi::GetNonzeros::getGetNonzeros(const Sparsity
&sp, const std::vector< int > &nz) const  " [INTERNAL]  Get the nonzeros of
matrix.

";


// File: classcasadi_1_1GetNonzerosVector.xml
%feature("docstring")
casadi::GetNonzerosVector::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV
&output, bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp,
bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::getInnerProd(const MX &y) const  "
[INTERNAL]  Inner product.

";

%feature("docstring")  casadi::MXNode::getMatrixValue() const  " [INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring")  casadi::SharedObjectNode::init() "[INTERNAL]
Initialize the object.

";

%feature("docstring")  casadi::MXNode::getFunctionInput() const  "
[INTERNAL]  Get function input.

";

%feature("docstring")  casadi::MXNode::getHorzcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a horizontal concatenation node.

";

%feature("docstring")  casadi::MXNode::isOutputNode() const  " [INTERNAL]
Check if evaluation output.

";

%feature("docstring")  casadi::MXNode::getSetSparse(const Sparsity &sp)
const  " [INTERNAL]  Create set sparse.

";

%feature("docstring")  casadi::MXNode::getUnary(int op) const  " [INTERNAL]
Get a unary operation.

";

%feature("docstring")  casadi::GetNonzerosVector::evaluateD(const
DMatrixPtrV &input, DMatrixPtrV &output, std::vector< int > &itmp,
std::vector< double > &rtmp) " [INTERNAL]  Evaluate the function
numerically.

";

%feature("docstring")  casadi::MXNode::getAssertion(const MX &y, const
std::string &fail_message="") const  " [INTERNAL]   Assertion.

";

%feature("docstring")  casadi::GetNonzeros::getGetNonzeros(const Sparsity
&sp, const std::vector< int > &nz) const  " [INTERNAL]  Get the nonzeros of
matrix.

";

%feature("docstring")  casadi::GetNonzeros::getOp() const  " [INTERNAL]  Get
the operation.

";

%feature("docstring")  casadi::MXNode::getBinarySwitch(int op, const MX &y)
const  " [INTERNAL]  Get a binary operation operation.

";

%feature("docstring")  casadi::MXNode::repr(std::ostream &stream) const  "
[INTERNAL]  Print a representation.

";

%feature("docstring")  casadi::GetNonzeros::evaluateMX(const MXPtrV &input,
MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV
&adjSeed, MXPtrVV &adjSens, bool output_given) " [INTERNAL]  Evaluate the
function symbolically ( MX)

";

%feature("docstring")  casadi::MXNode::evaluateMX(const MXPtrV &input,
MXPtrV &output) " [INTERNAL]  Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring")  casadi::MXNode::getTranspose() const  " [INTERNAL]
Transpose.

";

%feature("docstring")  casadi::MXNode::getNumOutputs() const  " [INTERNAL]
Number of outputs.

";

%feature("docstring")  casadi::MXNode::getSetNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Assign the nonzeros of a matrix
to another matrix.

";

%feature("docstring")  casadi::MXNode::isZero() const  " [INTERNAL]  Check
if identically zero.

";

%feature("docstring")  casadi::SharedObjectNode::assertInit() const  "
[INTERNAL]  Assert that the object has been initialized.

";

%feature("docstring")  casadi::MXNode::getHorzsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a horizontal split node.

";

%feature("docstring")  casadi::MXNode::hasDep() const  " [INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring") casadi::GetNonzerosVector::GetNonzerosVector(const
Sparsity &sp, const MX &x, const std::vector< int > &nz) " [INTERNAL]
Constructor.

";

%feature("docstring")  casadi::MXNode::isOne() const  " [INTERNAL]  Check if
identically one.

";

%feature("docstring")  casadi::GetNonzerosVector::clone() const  "
[INTERNAL]  Clone function.

";

%feature("docstring")  casadi::GetNonzeros::mapping() const  " [INTERNAL]
Get an IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring")  casadi::MXNode::isValue(double val) const  "
[INTERNAL]  Check if a certain value.

";

%feature("docstring")  casadi::MXNode::addDependency(const MX &dep) "
[INTERNAL]  Add a dependency.

";

%feature("docstring")  casadi::MXNode::isIdentity() const  " [INTERNAL]
Check if identity matrix.

";

%feature("docstring")  casadi::MXNode::getMultiplication(const MX &y, const
Sparsity &sp_z=Sparsity()) const  " [INTERNAL]   Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring")  casadi::MXNode::getOutput(int oind) const  "
[INTERNAL]  Get an output.

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, const std::vector< int > &onz, bool add=false) "
[INTERNAL]  Assign nonzeros (mapping matrix)

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, bool add=false) " [INTERNAL]  Assign nonzeros
(mapping matrix), output indices sequential.

";

%feature("docstring")  casadi::GetNonzerosVector::printPart(std::ostream
&stream, int part) const  " [INTERNAL]  Print a part of the expression */.

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) const  " [INTERNAL]
dependencies - functions that have to be evaluated before this one

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::isNonLinear() "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring") casadi::GetNonzerosVector "[INTERNAL] C++ includes:
getnonzeros.hpp ";

%feature("docstring")  casadi::MXNode::getVertsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a vertical split node (vectors
only)

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep) "
[INTERNAL]  Set unary dependency.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2) " [INTERNAL]  Set binary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2, const MX &dep3) " [INTERNAL]  Set ternary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const std::vector< MX
> &dep) " [INTERNAL]  Set multiple dependencies.

";

%feature("docstring")  casadi::MXNode::shape() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getNorm1() const  " [INTERNAL]
1-norm

";

%feature("docstring")  casadi::MXNode::getFunction() "[INTERNAL]  Get
function reference.

";

%feature("docstring")  casadi::MXNode::getFunction() const  " [INTERNAL]
Get function reference.

";

%feature("docstring")  casadi::MXNode::sparsity() const  " [INTERNAL]  Get
the sparsity.

";

%feature("docstring")  casadi::MXNode::sparsity(int oind) const  "
[INTERNAL]  Get the sparsity of output oind.

";

%feature("docstring")  casadi::MXNode::getNorm2() const  " [INTERNAL]
Spectral norm.

";

%feature("docstring")  casadi::MXNode::getDeterminant() const  " [INTERNAL]
Determinant.

";

%feature("docstring")  casadi::GetNonzerosVector::evaluateSX(const SXPtrV
&input, SXPtrV &output, std::vector< int > &itmp, std::vector< SXElement >
&rtmp) " [INTERNAL]  Evaluate the function symbolically (SX)

";

%feature("docstring")  casadi::MXNode::getName() const  " [INTERNAL]  Get
the name.

";

%feature("docstring")  casadi::SharedObjectNode::isInit() const  "
[INTERNAL]  Check if the object has been initialized.

";

%feature("docstring")  casadi::MXNode::size() const  " [INTERNAL] ";

%feature("docstring")  casadi::SharedObjectNode::weak() "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring")  casadi::MXNode::simplifyMe(MX &ex) " [INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring")  casadi::GetNonzerosVector::isEqual(const MXNode
*node, int depth) const  " [INTERNAL]  Check if two nodes are equivalent up
to a given depth.

";

%feature("docstring")  casadi::MXNode::getInverse() const  " [INTERNAL]
Inverse.

";

%feature("docstring")  casadi::MXNode::sameOpAndDeps(const MXNode *node, int
depth) const  " [INTERNAL]  Checks if two nodes have the same operation and
have equivalent dependencies up to a given depth.

";

%feature("docstring")  casadi::MXNode::size1() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getNormInf() const  " [INTERNAL]
Infinity norm.

";

%feature("docstring")  casadi::MXNode::isMultipleOutput() const  "
[INTERNAL]  Check if a multiple output node.

";

%feature("docstring")  casadi::SharedObjectNode::getCount() const  "
[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::GetNonzerosVector::evaluateGen(const MatV
&input, MatV &output, std::vector< int > &itmp, std::vector< T > &rtmp) "
[INTERNAL]  Evaluate the function (template)

";

%feature("docstring") casadi::GetNonzerosVector::~GetNonzerosVector "[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::MXNode::getFunctionOutput() const  "
[INTERNAL]  Get function output.

";

%feature("docstring")  casadi::MXNode::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied) " [INTERNAL]  Deep copy
data members.

";

%feature("docstring") casadi::GetNonzerosVector::__nonzero__ "[INTERNAL]
Check the truth value of this node.

";

%feature("docstring")  casadi::MXNode::size2() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getBinary(int op, const MX &y, bool
scX, bool scY) const  " [INTERNAL]  Get a binary operation operation
(matrix-matrix)

";

%feature("docstring")  casadi::MXNode::getVertcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a vertical concatenation node (vectors only)

";

%feature("docstring")  casadi::MXNode::numInplace() const  " [INTERNAL]  Can
the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring")  casadi::MXNode::setSparsity(const Sparsity &sparsity)
" [INTERNAL]  Set the sparsity.

";

%feature("docstring")  casadi::MXNode::getNormF() const  " [INTERNAL]
Frobenius norm.

";

%feature("docstring")  casadi::MXNode::nTmp(size_t &ni, size_t &nr) "
[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::MXNode::getValue() const  " [INTERNAL]  Get
the value (only for scalar constant nodes)

";

%feature("docstring")  casadi::MXNode::isUnaryOp() const  " [INTERNAL]
Check if unary operation.

";

%feature("docstring")  casadi::MXNode::getAddNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Add the nonzeros of a matrix to
another matrix.

";

%feature("docstring")  casadi::MXNode::getReshape(const Sparsity &sp) const
" [INTERNAL]   Reshape.

";

%feature("docstring")
casadi::GetNonzerosVector::generateOperation(std::ostream &stream, const
std::vector< std::string > &arg, const std::vector< std::string > &res,
CodeGenerator &gen) const  " [INTERNAL]  Generate code for the operation.

";

%feature("docstring")  casadi::MXNode::getSubRef(const Slice &i, const Slice
&j) const  " [INTERNAL]  Get submatrix reference.

";

%feature("docstring")  casadi::MXNode::ndep() const  " [INTERNAL]  Number of
dependencies.

";

%feature("docstring")  casadi::MXNode::numel() const  " [INTERNAL]  Get
shape.

";

%feature("docstring")  casadi::GetNonzerosVector::getAll() const  "
[INTERNAL]  Get all the nonzeros.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream) const  "
[INTERNAL]  Print a description.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream, long
&remaining_calls) const  " [INTERNAL]  Print expression (make sure number of
calls is not exceeded)

";

%feature("docstring")  casadi::MXNode::getSubAssign(const MX &y, const Slice
&i, const Slice &j) const  " [INTERNAL]  Get submatrix assignment.

";

%feature("docstring")  casadi::MXNode::getSolve(const MX &r, bool tr, const
LinearSolver &linear_solver) const  " [INTERNAL]   Solve a system of linear
equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring")  casadi::MXNode::isBinaryOp() const  " [INTERNAL]
Check if binary operation.

";


// File: classcasadi_1_1GradFInputIOSchemeVector.xml
%feature("docstring")  casadi::PrintableObject::getDescription() const  "
[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "
[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::IOSchemeVector< M  >::vector() const "
[INTERNAL] ";

%feature("docstring")  casadi::IOSchemeVector< M  >::print(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a description of the object.

";

%feature("docstring") casadi::GradFInputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::GradFInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::GradFInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::GradFInputIOSchemeVector "[INTERNAL]  Helper
function for 'GradFInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring")  casadi::IOSchemeVector< M  >::repr(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a representation of the object.

";

%feature("docstring") casadi::GradFInputIOSchemeVector< M
>::GradFInputIOSchemeVector(const std::vector< M > &t) " [INTERNAL] ";


// File: classcasadi_1_1GradFOutputIOSchemeVector.xml
%feature("docstring") casadi::GradFOutputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring") casadi::GradFOutputIOSchemeVector "[INTERNAL]  Helper
function for 'GradFOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "
[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "
[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::IOSchemeVector< M  >::repr(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::IOSchemeVector< M  >::vector() const "
[INTERNAL] ";

%feature("docstring") casadi::GradFOutputIOSchemeVector< M
>::GradFOutputIOSchemeVector(const std::vector< M > &t) " [INTERNAL] ";

%feature("docstring") casadi::GradFOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::GradFOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring")  casadi::IOSchemeVector< M  >::print(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a description of the object.

";


// File: classcasadi_1_1HessLagInputIOSchemeVector.xml
%feature("docstring") casadi::HessLagInputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring") casadi::HessLagInputIOSchemeVector "[INTERNAL]
Helper function for 'HessLagInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "
[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::HessLagInputIOSchemeVector< M
>::HessLagInputIOSchemeVector(const std::vector< M > &t) " [INTERNAL] ";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "
[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::IOSchemeVector< M  >::repr(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::IOSchemeVector< M  >::vector() const "
[INTERNAL] ";

%feature("docstring") casadi::HessLagInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::HessLagInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring")  casadi::IOSchemeVector< M  >::print(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a description of the object.

";


// File: classcasadi_1_1HessLagOutputIOSchemeVector.xml
%feature("docstring") casadi::HessLagOutputIOSchemeVector "[INTERNAL]
Helper function for 'HessLagOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::HessLagOutputIOSchemeVector< M
>::HessLagOutputIOSchemeVector(const std::vector< M > &t) " [INTERNAL] ";

%feature("docstring")  casadi::IOSchemeVector< M  >::vector() const "
[INTERNAL] ";

%feature("docstring")  casadi::IOSchemeVector< M  >::print(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a description of the object.

";

%feature("docstring") casadi::HessLagOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::HessLagOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "
[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::HessLagOutputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "
[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::IOSchemeVector< M  >::repr(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a representation of the object.

";


// File: classcasadi_1_1HNLPInputIOSchemeVector.xml
%feature("docstring")  casadi::PrintableObject::getDescription() const  "
[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::IOSchemeVector< M  >::repr(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a representation of the object.

";

%feature("docstring") casadi::HNLPInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::HNLPInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "
[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::IOSchemeVector< M  >::vector() const "
[INTERNAL] ";

%feature("docstring")  casadi::IOSchemeVector< M  >::print(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a description of the object.

";

%feature("docstring") casadi::HNLPInputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::HNLPInputIOSchemeVector "[INTERNAL]  Helper
function for 'HNLPInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::HNLPInputIOSchemeVector< M
>::HNLPInputIOSchemeVector(const std::vector< M > &t) " [INTERNAL] ";


// File: classcasadi_1_1HomotopyNLPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring") casadi::HomotopyNLPSolver::HomotopyNLPSolver() "

Default constructor.

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring") casadi::HomotopyNLPSolver "

Base class for Homotopy NLP Solvers.

Solves the following parametric nonlinear program (NLP):min
F(x,p,tau)  x  subject to             LBX <=   x    <= UBX             LBG
<= G(x,p) <= UBG                        p  == P nx: number of decision
variables     ng: number of constraints     np: number of parameters

In a homotopy from tau = 0 to tau = 1.

Joris Gillis

>Input scheme: casadi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| final_time   | OT_REAL      | 1            |              | casadi::Homo |
|              |              |              |              | topyNLPInter |
|              |              |              |              | nal          |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: homotopy_nlp_solver.hpp ";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::HomotopyNLPSolver::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";


// File: classcasadi_1_1Horzcat.xml
%feature("docstring")  casadi::MXNode::isNonLinear() "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring")  casadi::MXNode::nTmp(size_t &ni, size_t &nr) "
[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::SharedObjectNode::isInit() const  "
[INTERNAL]  Check if the object has been initialized.

";

%feature("docstring")  casadi::MXNode::isValue(double val) const  "
[INTERNAL]  Check if a certain value.

";

%feature("docstring")  casadi::Horzcat::printPart(std::ostream &stream, int
part) const  " [INTERNAL]  Print a part of the expression */.

";

%feature("docstring")  casadi::MXNode::getMatrixValue() const  " [INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring")  casadi::MXNode::sameOpAndDeps(const MXNode *node, int
depth) const  " [INTERNAL]  Checks if two nodes have the same operation and
have equivalent dependencies up to a given depth.

";

%feature("docstring")  casadi::MXNode::sparsity() const  " [INTERNAL]  Get
the sparsity.

";

%feature("docstring")  casadi::MXNode::sparsity(int oind) const  "
[INTERNAL]  Get the sparsity of output oind.

";

%feature("docstring")  casadi::MXNode::getSetSparse(const Sparsity &sp)
const  " [INTERNAL]  Create set sparse.

";

%feature("docstring")  casadi::MXNode::getHorzsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a horizontal split node.

";

%feature("docstring")  casadi::MXNode::simplifyMe(MX &ex) " [INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring")  casadi::MXNode::setSparsity(const Sparsity &sparsity)
" [INTERNAL]  Set the sparsity.

";

%feature("docstring")  casadi::MXNode::getHorzcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a horizontal concatenation node.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream) const  "
[INTERNAL]  Print a description.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream, long
&remaining_calls) const  " [INTERNAL]  Print expression (make sure number of
calls is not exceeded)

";

%feature("docstring")  casadi::MXNode::getTranspose() const  " [INTERNAL]
Transpose.

";

%feature("docstring")  casadi::MXNode::numInplace() const  " [INTERNAL]  Can
the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring")  casadi::SharedObjectNode::getCount() const  "
[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::MXNode::isIdentity() const  " [INTERNAL]
Check if identity matrix.

";

%feature("docstring")  casadi::MXNode::isUnaryOp() const  " [INTERNAL]
Check if unary operation.

";

%feature("docstring")  casadi::MXNode::hasDep() const  " [INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring")  casadi::MXNode::getNormF() const  " [INTERNAL]
Frobenius norm.

";

%feature("docstring")  casadi::MXNode::getFunction() "[INTERNAL]  Get
function reference.

";

%feature("docstring")  casadi::MXNode::getFunction() const  " [INTERNAL]
Get function reference.

";

%feature("docstring")  casadi::MXNode::addDependency(const MX &dep) "
[INTERNAL]  Add a dependency.

";

%feature("docstring")  casadi::Concat::getGetNonzeros(const Sparsity &sp,
const std::vector< int > &nz) const  " [INTERNAL]  Get the nonzeros of
matrix.

";

%feature("docstring")  casadi::MXNode::getVertsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a vertical split node (vectors
only)

";

%feature("docstring")  casadi::MXNode::getFunctionInput() const  "
[INTERNAL]  Get function input.

";

%feature("docstring")  casadi::Horzcat::getOp() const  " [INTERNAL]  Get the
operation.

";

%feature("docstring")  casadi::Concat::evaluateGen(const MatV &input, MatV
&output, std::vector< int > &itmp, std::vector< T > &rtmp) " [INTERNAL]
Evaluate the function (template)

";

%feature("docstring")  casadi::MXNode::isOutputNode() const  " [INTERNAL]
Check if evaluation output.

";

%feature("docstring")  casadi::MXNode::isBinaryOp() const  " [INTERNAL]
Check if binary operation.

";

%feature("docstring")  casadi::MXNode::isOne() const  " [INTERNAL]  Check if
identically one.

";

%feature("docstring")  casadi::MXNode::getNormInf() const  " [INTERNAL]
Infinity norm.

";

%feature("docstring")  casadi::MXNode::getReshape(const Sparsity &sp) const
" [INTERNAL]   Reshape.

";

%feature("docstring") casadi::Horzcat::~Horzcat "[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) const  " [INTERNAL]
dependencies - functions that have to be evaluated before this one

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getSubAssign(const MX &y, const Slice
&i, const Slice &j) const  " [INTERNAL]  Get submatrix assignment.

";

%feature("docstring")  casadi::MXNode::mapping() const  " [INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") casadi::Horzcat "[INTERNAL]  Horizontal
concatenation.

Joel Andersson

C++ includes: concat.hpp ";

%feature("docstring")  casadi::Horzcat::evaluateMX(const MXPtrV &input,
MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV
&adjSeed, MXPtrVV &adjSens, bool output_given) " [INTERNAL]  Evaluate the
function symbolically ( MX)

";

%feature("docstring")  casadi::MXNode::evaluateMX(const MXPtrV &input,
MXPtrV &output) " [INTERNAL]  Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring")  casadi::MXNode::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied) " [INTERNAL]  Deep copy
data members.

";

%feature("docstring")  casadi::MXNode::getDeterminant() const  " [INTERNAL]
Determinant.

";

%feature("docstring")  casadi::MXNode::getVertcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a vertical concatenation node (vectors only)

";

%feature("docstring")  casadi::Horzcat::clone() const  " [INTERNAL]  Clone
function.

";

%feature("docstring") casadi::Horzcat::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring")  casadi::MXNode::getBinarySwitch(int op, const MX &y)
const  " [INTERNAL]  Get a binary operation operation.

";

%feature("docstring")  casadi::MXNode::size2() const  " [INTERNAL] ";

%feature("docstring")  casadi::Concat::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp,
bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::getInverse() const  " [INTERNAL]
Inverse.

";

%feature("docstring")  casadi::SharedObjectNode::weak() "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring")  casadi::MXNode::getOutput(int oind) const  "
[INTERNAL]  Get an output.

";

%feature("docstring")  casadi::MXNode::numel() const  " [INTERNAL]  Get
shape.

";

%feature("docstring")  casadi::MXNode::ndep() const  " [INTERNAL]  Number of
dependencies.

";

%feature("docstring")  casadi::SharedObjectNode::assertInit() const  "
[INTERNAL]  Assert that the object has been initialized.

";

%feature("docstring")  casadi::MXNode::getMultiplication(const MX &y, const
Sparsity &sp_z=Sparsity()) const  " [INTERNAL]   Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring")  casadi::MXNode::getUnary(int op) const  " [INTERNAL]
Get a unary operation.

";

%feature("docstring")  casadi::MXNode::getFunctionOutput() const  "
[INTERNAL]  Get function output.

";

%feature("docstring")  casadi::Concat::isEqual(const MXNode *node, int
depth) const  " [INTERNAL]  Check if two nodes are equivalent up to a given
depth.

";

%feature("docstring")  casadi::MXNode::getName() const  " [INTERNAL]  Get
the name.

";

%feature("docstring")  casadi::MXNode::getNorm1() const  " [INTERNAL]
1-norm

";

%feature("docstring")  casadi::MXNode::repr(std::ostream &stream) const  "
[INTERNAL]  Print a representation.

";

%feature("docstring")  casadi::MXNode::isZero() const  " [INTERNAL]  Check
if identically zero.

";

%feature("docstring")  casadi::MXNode::size() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getNorm2() const  " [INTERNAL]
Spectral norm.

";

%feature("docstring")  casadi::Concat::generateOperation(std::ostream
&stream, const std::vector< std::string > &arg, const std::vector<
std::string > &res, CodeGenerator &gen) const  " [INTERNAL]  Generate code
for the operation.

";

%feature("docstring")  casadi::SharedObjectNode::init() "[INTERNAL]
Initialize the object.

";

%feature("docstring")  casadi::MXNode::getNumOutputs() const  " [INTERNAL]
Number of outputs.

";

%feature("docstring")  casadi::MXNode::getSetNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Assign the nonzeros of a matrix
to another matrix.

";

%feature("docstring")  casadi::Concat::evaluateSX(const SXPtrV &input,
SXPtrV &output, std::vector< int > &itmp, std::vector< SXElement > &rtmp) "
[INTERNAL]  Evaluate the function symbolically (SX)

";

%feature("docstring")  casadi::MXNode::size1() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getAddNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Add the nonzeros of a matrix to
another matrix.

";

%feature("docstring")  casadi::MXNode::getAssertion(const MX &y, const
std::string &fail_message="") const  " [INTERNAL]   Assertion.

";

%feature("docstring")  casadi::MXNode::getValue() const  " [INTERNAL]  Get
the value (only for scalar constant nodes)

";

%feature("docstring")  casadi::MXNode::getSolve(const MX &r, bool tr, const
LinearSolver &linear_solver) const  " [INTERNAL]   Solve a system of linear
equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, const std::vector< int > &onz, bool add=false) "
[INTERNAL]  Assign nonzeros (mapping matrix)

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, bool add=false) " [INTERNAL]  Assign nonzeros
(mapping matrix), output indices sequential.

";

%feature("docstring")  casadi::Concat::evaluateD(const DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp)
" [INTERNAL]  Evaluate the function numerically.

";

%feature("docstring")  casadi::MXNode::isMultipleOutput() const  "
[INTERNAL]  Check if a multiple output node.

";

%feature("docstring")  casadi::MXNode::getBinary(int op, const MX &y, bool
scX, bool scY) const  " [INTERNAL]  Get a binary operation operation
(matrix-matrix)

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep) "
[INTERNAL]  Set unary dependency.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2) " [INTERNAL]  Set binary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2, const MX &dep3) " [INTERNAL]  Set ternary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const std::vector< MX
> &dep) " [INTERNAL]  Set multiple dependencies.

";

%feature("docstring") casadi::Horzcat::Horzcat(const std::vector< MX > &x) "
[INTERNAL]  Constructor.

";

%feature("docstring")  casadi::MXNode::getSubRef(const Slice &i, const Slice
&j) const  " [INTERNAL]  Get submatrix reference.

";

%feature("docstring")  casadi::MXNode::getInnerProd(const MX &y) const  "
[INTERNAL]  Inner product.

";

%feature("docstring")  casadi::MXNode::shape() const  " [INTERNAL] ";


// File: classcasadi_1_1Horzsplit.xml
%feature("docstring")  casadi::MXNode::shape() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::size() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep) "
[INTERNAL]  Set unary dependency.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2) " [INTERNAL]  Set binary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2, const MX &dep3) " [INTERNAL]  Set ternary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const std::vector< MX
> &dep) " [INTERNAL]  Set multiple dependencies.

";

%feature("docstring") casadi::Horzsplit::~Horzsplit "[INTERNAL]
Destructor.

";

%feature("docstring")  casadi::MXNode::size1() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getSetNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Assign the nonzeros of a matrix
to another matrix.

";

%feature("docstring")  casadi::MXNode::getSolve(const MX &r, bool tr, const
LinearSolver &linear_solver) const  " [INTERNAL]   Solve a system of linear
equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring")  casadi::MXNode::getValue() const  " [INTERNAL]  Get
the value (only for scalar constant nodes)

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream) const  "
[INTERNAL]  Print a description.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream, long
&remaining_calls) const  " [INTERNAL]  Print expression (make sure number of
calls is not exceeded)

";

%feature("docstring")  casadi::MXNode::size2() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getAssertion(const MX &y, const
std::string &fail_message="") const  " [INTERNAL]   Assertion.

";

%feature("docstring")  casadi::MXNode::isValue(double val) const  "
[INTERNAL]  Check if a certain value.

";

%feature("docstring")  casadi::MXNode::getFunction() "[INTERNAL]  Get
function reference.

";

%feature("docstring")  casadi::MXNode::getFunction() const  " [INTERNAL]
Get function reference.

";

%feature("docstring")  casadi::MXNode::getDeterminant() const  " [INTERNAL]
Determinant.

";

%feature("docstring")  casadi::MXNode::getNormF() const  " [INTERNAL]
Frobenius norm.

";

%feature("docstring")  casadi::MXNode::hasDep() const  " [INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring")  casadi::MXNode::getMatrixValue() const  " [INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring")  casadi::Horzsplit::printPart(std::ostream &stream,
int part) const  " [INTERNAL]  Print a part of the expression */.

";

%feature("docstring")  casadi::MXNode::mapping() const  " [INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring")  casadi::MXNode::getVertcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a vertical concatenation node (vectors only)

";

%feature("docstring")  casadi::Horzsplit::clone() const  " [INTERNAL]  Clone
function.

";

%feature("docstring")  casadi::SharedObjectNode::init() "[INTERNAL]
Initialize the object.

";

%feature("docstring")  casadi::MXNode::simplifyMe(MX &ex) " [INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring")  casadi::Split::sparsity(int oind) const  " [INTERNAL]
Get the sparsity of output oind.

";

%feature("docstring")  casadi::MXNode::sparsity() const  " [INTERNAL]  Get
the sparsity.

";

%feature("docstring")  casadi::MXNode::getFunctionInput() const  "
[INTERNAL]  Get function input.

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) const  " [INTERNAL]
dependencies - functions that have to be evaluated before this one

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::isBinaryOp() const  " [INTERNAL]
Check if binary operation.

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, const std::vector< int > &onz, bool add=false) "
[INTERNAL]  Assign nonzeros (mapping matrix)

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, bool add=false) " [INTERNAL]  Assign nonzeros
(mapping matrix), output indices sequential.

";

%feature("docstring")  casadi::MXNode::getNorm2() const  " [INTERNAL]
Spectral norm.

";

%feature("docstring")  casadi::MXNode::getNorm1() const  " [INTERNAL]
1-norm

";

%feature("docstring")  casadi::Split::evaluateSX(const SXPtrV &input, SXPtrV
&output, std::vector< int > &itmp, std::vector< SXElement > &rtmp) "
[INTERNAL]  Evaluate the function symbolically (SX)

";

%feature("docstring")  casadi::MXNode::getName() const  " [INTERNAL]  Get
the name.

";

%feature("docstring")  casadi::Horzsplit::evaluateMX(const MXPtrV &input,
MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV
&adjSeed, MXPtrVV &adjSens, bool output_given) " [INTERNAL]  Evaluate the
function symbolically ( MX)

";

%feature("docstring")  casadi::MXNode::evaluateMX(const MXPtrV &input,
MXPtrV &output) " [INTERNAL]  Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring")  casadi::MXNode::isNonLinear() "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring")  casadi::MXNode::getFunctionOutput() const  "
[INTERNAL]  Get function output.

";

%feature("docstring")  casadi::Horzsplit::getHorzcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a horizontal concatenation node.

";

%feature("docstring")  casadi::MXNode::getGetNonzeros(const Sparsity &sp,
const std::vector< int > &nz) const  " [INTERNAL]  Get the nonzeros of
matrix.

";

%feature("docstring")  casadi::MXNode::isOutputNode() const  " [INTERNAL]
Check if evaluation output.

";

%feature("docstring") casadi::Horzsplit "[INTERNAL]  Horizontal split, x ->
x0, x1,...

Joel Andersson

C++ includes: split.hpp ";

%feature("docstring")  casadi::Split::getNumOutputs() const  " [INTERNAL]
Number of outputs.

";

%feature("docstring")  casadi::SharedObjectNode::getCount() const  "
[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::Split::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp,
bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring") casadi::Horzsplit::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring")  casadi::MXNode::getTranspose() const  " [INTERNAL]
Transpose.

";

%feature("docstring")  casadi::Split::evaluateD(const DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp)
" [INTERNAL]  Evaluate the function numerically.

";

%feature("docstring")  casadi::MXNode::isOne() const  " [INTERNAL]  Check if
identically one.

";

%feature("docstring")  casadi::MXNode::isZero() const  " [INTERNAL]  Check
if identically zero.

";

%feature("docstring")  casadi::MXNode::getSubRef(const Slice &i, const Slice
&j) const  " [INTERNAL]  Get submatrix reference.

";

%feature("docstring")  casadi::SharedObjectNode::weak() "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring")  casadi::SharedObjectNode::assertInit() const  "
[INTERNAL]  Assert that the object has been initialized.

";

%feature("docstring")  casadi::MultipleOutput::getOutput(int oind) const  "
[INTERNAL]  Get an output.

";

%feature("docstring")  casadi::MXNode::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied) " [INTERNAL]  Deep copy
data members.

";

%feature("docstring")  casadi::MXNode::getMultiplication(const MX &y, const
Sparsity &sp_z=Sparsity()) const  " [INTERNAL]   Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring")  casadi::MXNode::getBinarySwitch(int op, const MX &y)
const  " [INTERNAL]  Get a binary operation operation.

";

%feature("docstring")  casadi::MXNode::getUnary(int op) const  " [INTERNAL]
Get a unary operation.

";

%feature("docstring")  casadi::MXNode::getReshape(const Sparsity &sp) const
" [INTERNAL]   Reshape.

";

%feature("docstring")  casadi::MultipleOutput::isMultipleOutput() const  "
[INTERNAL]  Check if a multiple output node.

";

%feature("docstring")  casadi::MXNode::numInplace() const  " [INTERNAL]  Can
the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring")  casadi::MXNode::getNormInf() const  " [INTERNAL]
Infinity norm.

";

%feature("docstring")  casadi::Split::generateOperation(std::ostream
&stream, const std::vector< std::string > &arg, const std::vector<
std::string > &res, CodeGenerator &gen) const  " [INTERNAL]  Generate code
for the operation.

";

%feature("docstring")  casadi::MXNode::getInverse() const  " [INTERNAL]
Inverse.

";

%feature("docstring")  casadi::MXNode::nTmp(size_t &ni, size_t &nr) "
[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::MXNode::getBinary(int op, const MX &y, bool
scX, bool scY) const  " [INTERNAL]  Get a binary operation operation
(matrix-matrix)

";

%feature("docstring")  casadi::MXNode::getHorzsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a horizontal split node.

";

%feature("docstring")  casadi::SharedObjectNode::isInit() const  "
[INTERNAL]  Check if the object has been initialized.

";

%feature("docstring")  casadi::MXNode::isEqual(const MXNode *node, int
depth) const  " [INTERNAL]  Check if two nodes are equivalent up to a given
depth.

";

%feature("docstring")  casadi::MXNode::isUnaryOp() const  " [INTERNAL]
Check if unary operation.

";

%feature("docstring")  casadi::MXNode::ndep() const  " [INTERNAL]  Number of
dependencies.

";

%feature("docstring")  casadi::MXNode::getVertsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a vertical split node (vectors
only)

";

%feature("docstring")  casadi::Split::evaluateGen(const MatV &input, MatV
&output, std::vector< int > &itmp, std::vector< T > &rtmp) " [INTERNAL]
Evaluate the function (template)

";

%feature("docstring") casadi::Horzsplit::Horzsplit(const MX &x, const
std::vector< int > &offset) " [INTERNAL]  Constructor.

";

%feature("docstring")  casadi::MXNode::addDependency(const MX &dep) "
[INTERNAL]  Add a dependency.

";

%feature("docstring")  casadi::MXNode::getInnerProd(const MX &y) const  "
[INTERNAL]  Inner product.

";

%feature("docstring")  casadi::Horzsplit::getOp() const  " [INTERNAL]  Get
the operation.

";

%feature("docstring")  casadi::MXNode::getAddNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Add the nonzeros of a matrix to
another matrix.

";

%feature("docstring")  casadi::MXNode::setSparsity(const Sparsity &sparsity)
" [INTERNAL]  Set the sparsity.

";

%feature("docstring")  casadi::MXNode::sameOpAndDeps(const MXNode *node, int
depth) const  " [INTERNAL]  Checks if two nodes have the same operation and
have equivalent dependencies up to a given depth.

";

%feature("docstring")  casadi::MXNode::getSetSparse(const Sparsity &sp)
const  " [INTERNAL]  Create set sparse.

";

%feature("docstring")  casadi::MXNode::repr(std::ostream &stream) const  "
[INTERNAL]  Print a representation.

";

%feature("docstring")  casadi::MXNode::numel() const  " [INTERNAL]  Get
shape.

";

%feature("docstring")  casadi::MXNode::getSubAssign(const MX &y, const Slice
&i, const Slice &j) const  " [INTERNAL]  Get submatrix assignment.

";

%feature("docstring")  casadi::MXNode::isIdentity() const  " [INTERNAL]
Check if identity matrix.

";


// File: classcasadi_1_1IdasIntegrator.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::OptionsFunctionality::getOptionAllowed(const std::string &str) const
"

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::Integrator::integrate(double t_out) "

Integrate forward until a specified time point.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Integrator::getAugmented(int nfwd, int nadj)
"

Generate a augmented DAE system with nfwd forward sensitivities and nadj
adjoint sensitivities.

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::Integrator::reset() "

Reset the forward problem Time will be set to t0 and state to
input(INTEGRATOR_X0)

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::IdasIntegrator::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::Integrator::printStats(std::ostream
&stream=std::cout) const  "

Print solver statistics.

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::Integrator::resetB() "

Reset the backward problem.

Time will be set to tf and backward state to input(INTEGRATOR_RX0)

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::IdasIntegrator "

Interface to IDAS from the Sundials suite.

Base class for integrators. Solves an initial value problem (IVP) coupled to
a terminal value problem with differential equation given as an implicit ODE
coupled to an algebraic equation and a set of quadratures: Initial
conditions at t=t0  x(t0)  = x0  q(t0)  = 0   Forward integration from t=t0
to t=tf  der(x) = function(x,z,p,t) Forward ODE  0 = fz(x,z,p,t)
Forward algebraic equations  der(q) = fq(x,z,p,t)                  Forward
quadratures Terminal conditions at t=tf  rx(tf)  = rx0  rq(tf)  = 0
Backward integration from t=tf to t=t0  der(rx) = gx(rx,rz,rp,x,z,p,t)
Backward ODE  0 = gz(rx,rz,rp,x,z,p,t)        Backward algebraic equations
der(rq) = gq(rx,rz,rp,x,z,p,t)        Backward quadratures where we assume
that both the forward and backwards integrations are index-1  (i.e. dfz/dz,
dgz/drz are invertible) and furthermore that gx, gz and gq have a linear
dependency on rx, rz and rp.

Joel Andersson

>Input scheme: casadi::IntegratorInput (INTEGRATOR_NUM_IN = 7) [integratorIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_X0          | x0                     | Differential state at  |
|                        |                        | the initial time .     |
+------------------------+------------------------+------------------------+
| INTEGRATOR_P           | p                      | Parameters .           |
+------------------------+------------------------+------------------------+
| INTEGRATOR_Z0          | z0                     | Initial guess for the  |
|                        |                        | algebraic variable .   |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RX0         | rx0                    | Backward differential  |
|                        |                        | state at the final     |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RP          | rp                     | Backward parameter     |
|                        |                        | vector .               |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZ0         | rz0                    | Initial guess for the  |
|                        |                        | backwards algebraic    |
|                        |                        | variable .             |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::IntegratorOutput (INTEGRATOR_NUM_OUT = 7) [integratorOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_XF          | xf                     | Differential state at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_QF          | qf                     | Quadrature state at    |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_ZF          | zf                     | Algebraic variable at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RXF         | rxf                    | Backward differential  |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RQF         | rqf                    | Backward quadrature    |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZF         | rzf                    | Backward algebraic     |
|                        |                        | variable at the        |
|                        |                        | initial time .         |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| abstolv      | OT_REALVECTO |              |              | casadi::Idas |
|              | R            |              |              | Internal     |
+--------------+--------------+--------------+--------------+--------------+
| artol        | OT_REAL      | 0.000        | tolerance as | casadi::Inte |
|              |              |              | provided     | gratorIntern |
|              |              |              | with         | al           |
|              |              |              | setArTol to  |              |
|              |              |              | OOQP         |              |
+--------------+--------------+--------------+--------------+--------------+
| calc_icB     | OT_BOOLEAN   | GenericType( | backwards    | casadi::Idas |
|              |              | )            | system       | Internal     |
|              |              |              | [default:    |              |
|              |              |              | equal to     |              |
|              |              |              | calc_ic].    |              |
+--------------+--------------+--------------+--------------+--------------+
| constraints  | OT_INTEGERVE | GenericType( | 1: ui >=     | casadi::Idas |
|              | CTOR         | )            | 0.0, -1: ui  | Internal     |
|              |              |              | <= 0.0, 2:   |              |
|              |              |              | ui > 0.0,    |              |
|              |              |              | -2: ui <     |              |
|              |              |              | 0.0.         |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| exact_jacobi | OT_BOOLEAN   | GenericType( | [default:    | casadi::Sund |
| anB          |              | )            | equal to exa | ialsInternal |
|              |              |              | ct_jacobian] |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_augme | OT_BOOLEAN   | true         | DAE callback | casadi::Inte |
| nted         |              |              | function     | gratorIntern |
|              |              |              | also be      | al           |
|              |              |              | SXFunction . |              |
+--------------+--------------+--------------+--------------+--------------+
| fsens_abstol | OT_REALVECTO |              |              | casadi::Idas |
| v            | R            |              |              | Internal     |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_LINEARSOL | GenericType( | [default:    | casadi::Sund |
| rB           | VER          | )            | equal to lin | ialsInternal |
|              |              |              | ear_solver]  |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_DICTIONAR | GenericType( | [default:    | casadi::Sund |
| r_optionsB   | Y            | )            | equal to lin | ialsInternal |
|              |              |              | ear_solver_o |              |
|              |              |              | ptions]      |              |
+--------------+--------------+--------------+--------------+--------------+
| lower_bandwi | OT_INTEGER   | GenericType( | [default:    | casadi::Sund |
| dthB         |              | )            | equal to low | ialsInternal |
|              |              |              | er_bandwidth |              |
|              |              |              | ]            |              |
+--------------+--------------+--------------+--------------+--------------+
| max_multiste | OT_INTEGER   | 5            |              | casadi::Sund |
| p_order      |              |              |              | ialsInternal |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | (eval_f|eval | casadi::Sund |
|              | TOR          | )            | _djac)       | ialsInternal |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| upper_bandwi | OT_INTEGER   | GenericType( | [default:    | casadi::Sund |
| dthB         |              | )            | equal to upp | ialsInternal |
|              |              |              | er_bandwidth |              |
|              |              |              | ]            |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available stats
+-------------+----------------------+
|     Id      |       Used in        |
+=============+======================+
| nlinsetups  | casadi::IdasInternal |
+-------------+----------------------+
| nlinsetupsB | casadi::IdasInternal |
+-------------+----------------------+
| nsteps      | casadi::IdasInternal |
+-------------+----------------------+
| nstepsB     | casadi::IdasInternal |
+-------------+----------------------+

Diagrams

C++ includes: idas_integrator.hpp ";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::SundialsIntegrator::setStopTime(double tf) "

Set a stop time for the forward integration.

";

%feature("docstring") casadi::IdasIntegrator::IdasIntegrator() "

Default constructor.

";

%feature("docstring") casadi::IdasIntegrator::IdasIntegrator(const Function
&f, const Function &g=Function()) "

Create an integrator for a fully implicit DAE with quadrature states ( nz is
the number of states not to be included in the state vector)

Parameters:
-----------

f:  dynamical system

>Input scheme: casadi::DAEInput (DAE_NUM_IN = 5) [daeIn]
+-----------+-------+----------------------------+
| Full name | Short |        Description         |
+===========+=======+============================+
| DAE_X     | x     | Differential state .       |
+-----------+-------+----------------------------+
| DAE_Z     | z     | Algebraic state .          |
+-----------+-------+----------------------------+
| DAE_P     | p     | Parameter .                |
+-----------+-------+----------------------------+
| DAE_T     | t     | Explicit time dependence . |
+-----------+-------+----------------------------+

>Output scheme: casadi::DAEOutput (DAE_NUM_OUT = 4) [daeOut]
+-----------+-------+--------------------------------------------+
| Full name | Short |                Description                 |
+===========+=======+============================================+
| DAE_ODE   | ode   | Right hand side of the implicit ODE .      |
+-----------+-------+--------------------------------------------+
| DAE_ALG   | alg   | Right hand side of algebraic equations .   |
+-----------+-------+--------------------------------------------+
| DAE_QUAD  | quad  | Right hand side of quadratures equations . |
+-----------+-------+--------------------------------------------+

Parameters:
-----------

g:  backwards system

>Input scheme: casadi::RDAEInput (RDAE_NUM_IN = 8) [rdaeIn]
+-----------+-------+-------------------------------+
| Full name | Short |          Description          |
+===========+=======+===============================+
| RDAE_RX   | rx    | Backward differential state . |
+-----------+-------+-------------------------------+
| RDAE_RZ   | rz    | Backward algebraic state .    |
+-----------+-------+-------------------------------+
| RDAE_RP   | rp    | Backward parameter vector .   |
+-----------+-------+-------------------------------+
| RDAE_X    | x     | Forward differential state .  |
+-----------+-------+-------------------------------+
| RDAE_Z    | z     | Forward algebraic state .     |
+-----------+-------+-------------------------------+
| RDAE_P    | p     | Parameter vector .            |
+-----------+-------+-------------------------------+
| RDAE_T    | t     | Explicit time dependence .    |
+-----------+-------+-------------------------------+

>Output scheme: casadi::RDAEOutput (RDAE_NUM_OUT = 4) [rdaeOut]
+-----------+-------+-------------------------------------------+
| Full name | Short |                Description                |
+===========+=======+===========================================+
| RDAE_ODE  | ode   | Right hand side of ODE. .                 |
+-----------+-------+-------------------------------------------+
| RDAE_ALG  | alg   | Right hand side of algebraic equations. . |
+-----------+-------+-------------------------------------------+
| RDAE_QUAD | quad  | Right hand side of quadratures. .         |
+-----------+-------+-------------------------------------------+

";

%feature("docstring")  casadi::Integrator::clone() const  "

Clone.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Integrator::integrateB(double t_out) "

Integrate backward until a specified time point.

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Integrator::getDAE() "

Get the DAE.

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")  casadi::IdasIntegrator::correctInitialConditions() "

Correct the initial value for yp and z after resetting the solver.

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";


// File: classcasadi_1_1ImplicitFixedStepIntegrator.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::OptionsFunctionality::getOptionType(const std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::Integrator::printStats(std::ostream
&stream=std::cout) const  "

Print solver statistics.

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator "

Base class for implicit fixed step integrators.

Joel Andersson

>Input scheme: casadi::IntegratorInput (INTEGRATOR_NUM_IN = 7) [integratorIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_X0          | x0                     | Differential state at  |
|                        |                        | the initial time .     |
+------------------------+------------------------+------------------------+
| INTEGRATOR_P           | p                      | Parameters .           |
+------------------------+------------------------+------------------------+
| INTEGRATOR_Z0          | z0                     | Initial guess for the  |
|                        |                        | algebraic variable .   |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RX0         | rx0                    | Backward differential  |
|                        |                        | state at the final     |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RP          | rp                     | Backward parameter     |
|                        |                        | vector .               |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZ0         | rz0                    | Initial guess for the  |
|                        |                        | backwards algebraic    |
|                        |                        | variable .             |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::IntegratorOutput (INTEGRATOR_NUM_OUT = 7) [integratorOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_XF          | xf                     | Differential state at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_QF          | qf                     | Quadrature state at    |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_ZF          | zf                     | Algebraic variable at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RXF         | rxf                    | Backward differential  |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RQF         | rqf                    | Backward quadrature    |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZF         | rzf                    | Backward algebraic     |
|                        |                        | variable at the        |
|                        |                        | initial time .         |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| artol        | OT_REAL      | 0.000        | tolerance as | casadi::Inte |
|              |              |              | provided     | gratorIntern |
|              |              |              | with         | al           |
|              |              |              | setArTol to  |              |
|              |              |              | OOQP         |              |
+--------------+--------------+--------------+--------------+--------------+
| barrier_maxi | OT_INTEGER   | 2.100e+09    | Maximum      | casadi::Impl |
| ter          |              |              | number of    | icitFixedSte |
|              |              |              | barrier      | pIntegratorI |
|              |              |              | iterations.  | nternal      |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_augme | OT_BOOLEAN   | true         | DAE callback | casadi::Inte |
| nted         |              |              | function     | gratorIntern |
|              |              |              | also be      | al           |
|              |              |              | SXFunction . |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| number_of_fi | OT_INTEGER   | 20           | Number of    | casadi::Fixe |
| nite_element |              |              | finite       | dStepIntegra |
| s            |              |              | elements     | torInternal  |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: implicit_fixed_step_integrator.hpp ";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::Integrator::reset() "

Reset the forward problem Time will be set to t0 and state to
input(INTEGRATOR_X0)

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::Integrator::integrate(double t_out) "

Integrate forward until a specified time point.

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::ImplicitFixedStepIntegrator::checkNode()
const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::Integrator::getDAE() "

Get the DAE.

";

%feature("docstring")  casadi::Integrator::clone() const  "

Clone.

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::Integrator::getAugmented(int nfwd, int nadj)
"

Generate a augmented DAE system with nfwd forward sensitivities and nadj
adjoint sensitivities.

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::Integrator::integrateB(double t_out) "

Integrate backward until a specified time point.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::Integrator::resetB() "

Reset the backward problem.

Time will be set to tf and backward state to input(INTEGRATOR_RX0)

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::ImplicitFixedStepIntegrator() "

Default constructor.

";


// File: classcasadi_1_1ImplicitFunction.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")  casadi::IOInterface<
Function  >::getInput(int iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::ImplicitFunction "

Abstract base class for the implicit function classes.

The equation:

F(z, x1, x2, ..., xn) == 0

where d_F/dz is invertible, implicitly defines the equation:

z := G(x1, x2, ..., xn)

F should be an Function mapping from (n+1) inputs to m outputs. The first
output is the residual that should be zero.

ImplicitFunction (G) is an Function mapping from n inputs to m outputs. n
may be zero. The first output is the solved for z.

You can provide an initial guess for z by setting output(0) of
ImplicitFunction.

Joel Andersson

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| constraints  | OT_INTEGERVE | GenericType( | 1: ui >=     | casadi::Impl |
|              | CTOR         | )            | 0.0, -1: ui  | icitFunction |
|              |              |              | <= 0.0, 2:   | Internal     |
|              |              |              | ui > 0.0,    |              |
|              |              |              | -2: ui <     |              |
|              |              |              | 0.0.         |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| parallelizat | OT_STRING    | GenericType( | Passed on to | casadi::Impl |
| ion          |              | )            | casadi::Para | icitFunction |
|              |              |              | llelizer     | Internal     |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: implicit_function.hpp ";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::ImplicitFunction::getLinsol() "

Access linear solver.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::ImplicitFunction::getF() "

Access F.

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::ImplicitFunction::getJac() "

Access Jacobian.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")  casadi::ImplicitFunction::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";


// File: classcasadi_1_1IndexList.xml
%feature("docstring") casadi::IndexList::IndexList() "[INTERNAL]
Constructor.

";

%feature("docstring") casadi::IndexList::IndexList(int i) " [INTERNAL] ";

%feature("docstring") casadi::IndexList::IndexList(const std::vector< int >
&i) " [INTERNAL] ";

%feature("docstring") casadi::IndexList::IndexList(const Slice &i) "
[INTERNAL] ";

%feature("docstring") casadi::IndexList "[INTERNAL]  Class representing a
non-regular (and thus non-slice) index list

C++ includes: slice.hpp ";

%feature("docstring")  casadi::IndexList::getAll(int len) const  "
[INTERNAL]  Get a vector of indices.

";


// File: classcasadi_1_1InfSX.xml
%feature("docstring") casadi::InfSX::InfSX() "[INTERNAL] ";

%feature("docstring")  casadi::SXNode::isSymbolic() const  " [INTERNAL]
check properties of a node

";

%feature("docstring")  casadi::SXNode::isMinusOne() const  " [INTERNAL]
check properties of a node

";

%feature("docstring")  casadi::SXNode::getIntValue() const  " [INTERNAL]
Get value of a constant node.

";

%feature("docstring")  casadi::SXNode::getName() const  " [INTERNAL] ";

%feature("docstring")  casadi::ConstantSX::getOp() const  " [INTERNAL]  Get
the operation.

";

%feature("docstring")  casadi::SXNode::mark() "[INTERNAL] ";

%feature("docstring")  casadi::SXNode::hasDep() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring")  casadi::SXNode::isOne() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring")  casadi::SXNode::init() "[INTERNAL]  Initialize the
node (currently used only to give a similar interface to MXNode)

";

%feature("docstring")  casadi::SXNode::print(std::ostream &stream) const  "
[INTERNAL]  print

";

%feature("docstring")  casadi::SXNode::isAlmostZero(double tol) const  "
[INTERNAL]  check properties of a node

";

%feature("docstring")  casadi::SXNode::isNan() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring")  casadi::SXNode::ndep() const  " [INTERNAL]  Number of
dependencies.

";

%feature("docstring")  casadi::ConstantSX::isConstant() const  " [INTERNAL]
Properties.

";

%feature("docstring")  casadi::SXNode::isInteger() const  " [INTERNAL]
check properties of a node

";

%feature("docstring")  casadi::ConstantSX::isEqual(const SXNode *node, int
depth) const  " [INTERNAL]  Check if two nodes are equivalent up to a given
depth.

";

%feature("docstring")  casadi::SXNode::dep(int i) const  " [INTERNAL]  get
the reference of a child

";

%feature("docstring")  casadi::SXNode::dep(int i) " [INTERNAL]  get the
reference of a child

";

%feature("docstring")  casadi::SXNode::isSmooth() const  " [INTERNAL]  Check
if smooth.

";

%feature("docstring")  casadi::InfSX::getValue() const  " [INTERNAL]  Get
the value.

";

%feature("docstring")  casadi::SXNode::isZero() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring")  casadi::SXNode::isMinusInf() const  " [INTERNAL]
check properties of a node

";

%feature("docstring")  casadi::SXNode::marked() const  " [INTERNAL] ";

%feature("docstring") casadi::InfSX::~InfSX "[INTERNAL] ";

%feature("docstring") casadi::InfSX "[INTERNAL]  Represents an infinity SX.

Joel Andersson

C++ includes: constant_sx.hpp ";

%feature("docstring")  casadi::InfSX::isInf() const  " [INTERNAL]
Properties.

";


// File: classcasadi_1_1InnerProd.xml
%feature("docstring")  casadi::InnerProd::propagateSparsity(DMatrixPtrV
&input, DMatrixPtrV &output, bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp,
bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::getInverse() const  " [INTERNAL]
Inverse.

";

%feature("docstring")  casadi::MXNode::getFunctionOutput() const  "
[INTERNAL]  Get function output.

";

%feature("docstring")  casadi::MXNode::getBinary(int op, const MX &y, bool
scX, bool scY) const  " [INTERNAL]  Get a binary operation operation
(matrix-matrix)

";

%feature("docstring") casadi::InnerProd::InnerProd(const MX &x, const MX &y)
" [INTERNAL]  Constructor.

";

%feature("docstring")  casadi::MXNode::sameOpAndDeps(const MXNode *node, int
depth) const  " [INTERNAL]  Checks if two nodes have the same operation and
have equivalent dependencies up to a given depth.

";

%feature("docstring")  casadi::MXNode::size2() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getOutput(int oind) const  "
[INTERNAL]  Get an output.

";

%feature("docstring")  casadi::InnerProd::getOp() const  " [INTERNAL]  Get
the operation.

";

%feature("docstring")  casadi::MXNode::hasDep() const  " [INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring")  casadi::MXNode::getDeterminant() const  " [INTERNAL]
Determinant.

";

%feature("docstring")  casadi::MXNode::getVertcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a vertical concatenation node (vectors only)

";

%feature("docstring")  casadi::MXNode::shape() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::isOutputNode() const  " [INTERNAL]
Check if evaluation output.

";

%feature("docstring")  casadi::MXNode::sparsity() const  " [INTERNAL]  Get
the sparsity.

";

%feature("docstring")  casadi::MXNode::sparsity(int oind) const  "
[INTERNAL]  Get the sparsity of output oind.

";

%feature("docstring")  casadi::MXNode::addDependency(const MX &dep) "
[INTERNAL]  Add a dependency.

";

%feature("docstring")  casadi::InnerProd::evaluateGen(const MatV &input,
MatV &output, std::vector< int > &itmp, std::vector< T > &rtmp) " [INTERNAL]
Evaluate the function (template)

";

%feature("docstring")  casadi::MXNode::getSetNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Assign the nonzeros of a matrix
to another matrix.

";

%feature("docstring")  casadi::MXNode::getMultiplication(const MX &y, const
Sparsity &sp_z=Sparsity()) const  " [INTERNAL]   Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring")  casadi::MXNode::setSparsity(const Sparsity &sparsity)
" [INTERNAL]  Set the sparsity.

";

%feature("docstring")  casadi::InnerProd::printPart(std::ostream &stream,
int part) const  " [INTERNAL]  Print a part of the expression */.

";

%feature("docstring")  casadi::MXNode::isUnaryOp() const  " [INTERNAL]
Check if unary operation.

";

%feature("docstring")  casadi::MXNode::mapping() const  " [INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring")  casadi::MXNode::getTranspose() const  " [INTERNAL]
Transpose.

";

%feature("docstring")  casadi::MXNode::numInplace() const  " [INTERNAL]  Can
the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring")  casadi::MXNode::isValue(double val) const  "
[INTERNAL]  Check if a certain value.

";

%feature("docstring")  casadi::SharedObjectNode::getCount() const  "
[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::MXNode::isIdentity() const  " [INTERNAL]
Check if identity matrix.

";

%feature("docstring")  casadi::MXNode::getHorzcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a horizontal concatenation node.

";

%feature("docstring")  casadi::MXNode::isZero() const  " [INTERNAL]  Check
if identically zero.

";

%feature("docstring")  casadi::MXNode::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied) " [INTERNAL]  Deep copy
data members.

";

%feature("docstring")  casadi::MXNode::getUnary(int op) const  " [INTERNAL]
Get a unary operation.

";

%feature("docstring")  casadi::MXNode::getHorzsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a horizontal split node.

";

%feature("docstring")  casadi::MXNode::numel() const  " [INTERNAL]  Get
shape.

";

%feature("docstring")  casadi::InnerProd::generateOperation(std::ostream
&stream, const std::vector< std::string > &arg, const std::vector<
std::string > &res, CodeGenerator &gen) const  " [INTERNAL]  Generate code
for the operation.

";

%feature("docstring")  casadi::InnerProd::clone() const  " [INTERNAL]  Clone
function.

";

%feature("docstring")  casadi::MXNode::getNormF() const  " [INTERNAL]
Frobenius norm.

";

%feature("docstring")  casadi::MXNode::getInnerProd(const MX &y) const  "
[INTERNAL]  Inner product.

";

%feature("docstring")  casadi::MXNode::getAddNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Add the nonzeros of a matrix to
another matrix.

";

%feature("docstring")  casadi::MXNode::getMatrixValue() const  " [INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring")  casadi::MXNode::getSubAssign(const MX &y, const Slice
&i, const Slice &j) const  " [INTERNAL]  Get submatrix assignment.

";

%feature("docstring")  casadi::MXNode::getFunctionInput() const  "
[INTERNAL]  Get function input.

";

%feature("docstring")  casadi::InnerProd::evaluateD(const DMatrixPtrV
&input, DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double >
&rtmp) " [INTERNAL]  Evaluate the function numerically.

";

%feature("docstring") casadi::InnerProd "[INTERNAL]   Matrix inner_prod.

Joel Andersson

C++ includes: inner_prod.hpp ";

%feature("docstring")  casadi::MXNode::repr(std::ostream &stream) const  "
[INTERNAL]  Print a representation.

";

%feature("docstring")  casadi::MXNode::getName() const  " [INTERNAL]  Get
the name.

";

%feature("docstring")  casadi::MXNode::isMultipleOutput() const  "
[INTERNAL]  Check if a multiple output node.

";

%feature("docstring")  casadi::SharedObjectNode::assertInit() const  "
[INTERNAL]  Assert that the object has been initialized.

";

%feature("docstring")  casadi::MXNode::getNumOutputs() const  " [INTERNAL]
Number of outputs.

";

%feature("docstring")  casadi::MXNode::isEqual(const MXNode *node, int
depth) const  " [INTERNAL]  Check if two nodes are equivalent up to a given
depth.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep) "
[INTERNAL]  Set unary dependency.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2) " [INTERNAL]  Set binary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2, const MX &dep3) " [INTERNAL]  Set ternary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const std::vector< MX
> &dep) " [INTERNAL]  Set multiple dependencies.

";

%feature("docstring")  casadi::MXNode::getSolve(const MX &r, bool tr, const
LinearSolver &linear_solver) const  " [INTERNAL]   Solve a system of linear
equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring")  casadi::SharedObjectNode::isInit() const  "
[INTERNAL]  Check if the object has been initialized.

";

%feature("docstring")  casadi::MXNode::size1() const  " [INTERNAL] ";

%feature("docstring")  casadi::SharedObjectNode::init() "[INTERNAL]
Initialize the object.

";

%feature("docstring")  casadi::MXNode::simplifyMe(MX &ex) " [INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream) const  "
[INTERNAL]  Print a description.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream, long
&remaining_calls) const  " [INTERNAL]  Print expression (make sure number of
calls is not exceeded)

";

%feature("docstring")  casadi::InnerProd::evaluateMX(const MXPtrV &input,
MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV
&adjSeed, MXPtrVV &adjSens, bool output_given) " [INTERNAL]  Evaluate the
function symbolically ( MX)

";

%feature("docstring")  casadi::MXNode::evaluateMX(const MXPtrV &input,
MXPtrV &output) " [INTERNAL]  Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") casadi::InnerProd::~InnerProd "[INTERNAL]
Destructor.

";

%feature("docstring")  casadi::MXNode::nTmp(size_t &ni, size_t &nr) "
[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::MXNode::getSubRef(const Slice &i, const Slice
&j) const  " [INTERNAL]  Get submatrix reference.

";

%feature("docstring")  casadi::MXNode::getValue() const  " [INTERNAL]  Get
the value (only for scalar constant nodes)

";

%feature("docstring")  casadi::MXNode::ndep() const  " [INTERNAL]  Number of
dependencies.

";

%feature("docstring") casadi::InnerProd::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring")  casadi::MXNode::getFunction() "[INTERNAL]  Get
function reference.

";

%feature("docstring")  casadi::MXNode::getFunction() const  " [INTERNAL]
Get function reference.

";

%feature("docstring")  casadi::MXNode::isNonLinear() "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) const  " [INTERNAL]
dependencies - functions that have to be evaluated before this one

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getAssertion(const MX &y, const
std::string &fail_message="") const  " [INTERNAL]   Assertion.

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, const std::vector< int > &onz, bool add=false) "
[INTERNAL]  Assign nonzeros (mapping matrix)

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, bool add=false) " [INTERNAL]  Assign nonzeros
(mapping matrix), output indices sequential.

";

%feature("docstring")  casadi::MXNode::getGetNonzeros(const Sparsity &sp,
const std::vector< int > &nz) const  " [INTERNAL]  Get the nonzeros of
matrix.

";

%feature("docstring")  casadi::MXNode::size() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getReshape(const Sparsity &sp) const
" [INTERNAL]   Reshape.

";

%feature("docstring")  casadi::SharedObjectNode::weak() "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring")  casadi::MXNode::getNorm1() const  " [INTERNAL]
1-norm

";

%feature("docstring")  casadi::MXNode::getBinarySwitch(int op, const MX &y)
const  " [INTERNAL]  Get a binary operation operation.

";

%feature("docstring")  casadi::MXNode::isOne() const  " [INTERNAL]  Check if
identically one.

";

%feature("docstring")  casadi::InnerProd::evaluateSX(const SXPtrV &input,
SXPtrV &output, std::vector< int > &itmp, std::vector< SXElement > &rtmp) "
[INTERNAL]  Evaluate the function symbolically (SX)

";

%feature("docstring")  casadi::MXNode::getNormInf() const  " [INTERNAL]
Infinity norm.

";

%feature("docstring")  casadi::MXNode::getSetSparse(const Sparsity &sp)
const  " [INTERNAL]  Create set sparse.

";

%feature("docstring")  casadi::MXNode::getVertsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a vertical split node (vectors
only)

";

%feature("docstring")  casadi::MXNode::getNorm2() const  " [INTERNAL]
Spectral norm.

";

%feature("docstring")  casadi::MXNode::isBinaryOp() const  " [INTERNAL]
Check if binary operation.

";


// File: classcasadi_1_1IntegerSX.xml
%feature("docstring")  casadi::SXNode::init() "[INTERNAL]  Initialize the
node (currently used only to give a similar interface to MXNode)

";

%feature("docstring")  casadi::SXNode::print(std::ostream &stream) const  "
[INTERNAL]  print

";

%feature("docstring")  casadi::ConstantSX::getOp() const  " [INTERNAL]  Get
the operation.

";

%feature("docstring")  casadi::SXNode::isSmooth() const  " [INTERNAL]  Check
if smooth.

";

%feature("docstring")  casadi::IntegerSX::isInteger() const  " [INTERNAL]
Properties.

";

%feature("docstring")  casadi::IntegerSX::getValue() const  " [INTERNAL]
evaluate function

";

%feature("docstring") casadi::IntegerSX "[INTERNAL]  Represents a constant
integer SX.

Joel Andersson

C++ includes: constant_sx.hpp ";

%feature("docstring") casadi::IntegerSX::~IntegerSX "[INTERNAL]
Destructor.

";

%feature("docstring")  casadi::SXNode::isMinusInf() const  " [INTERNAL]
check properties of a node

";

%feature("docstring")  casadi::SXNode::mark() "[INTERNAL] ";

%feature("docstring")  casadi::SXNode::isMinusOne() const  " [INTERNAL]
check properties of a node

";

%feature("docstring")  casadi::ConstantSX::isConstant() const  " [INTERNAL]
Properties.

";

%feature("docstring")  casadi::ConstantSX::isEqual(const SXNode *node, int
depth) const  " [INTERNAL]  Check if two nodes are equivalent up to a given
depth.

";

%feature("docstring")  casadi::SXNode::isNan() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring")  casadi::SXNode::isSymbolic() const  " [INTERNAL]
check properties of a node

";

%feature("docstring")  casadi::SXNode::isZero() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring")  casadi::SXNode::isInf() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring")  casadi::SXNode::ndep() const  " [INTERNAL]  Number of
dependencies.

";

%feature("docstring")  casadi::IntegerSX::getIntValue() const  " [INTERNAL]
evaluate function

";

%feature("docstring")  casadi::SXNode::getName() const  " [INTERNAL] ";

%feature("docstring")  casadi::SXNode::isOne() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring")  casadi::SXNode::dep(int i) const  " [INTERNAL]  get
the reference of a child

";

%feature("docstring")  casadi::SXNode::dep(int i) " [INTERNAL]  get the
reference of a child

";

%feature("docstring")  casadi::SXNode::hasDep() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring")  casadi::SXNode::marked() const  " [INTERNAL] ";

%feature("docstring")  casadi::SXNode::isAlmostZero(double tol) const  "
[INTERNAL]  check properties of a node

";


// File: classcasadi_1_1Integrator.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::Function::spCanEvaluate(bool fwd) " [INTERNAL]  Is the class able to
propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::Integrator::clone() const  "

Clone.

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Integrator::resetB() "

Reset the backward problem.

Time will be set to tf and backward state to input(INTEGRATOR_RX0)

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Integrator::getDAE() "

Get the DAE.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring") casadi::Integrator::Integrator() "

Default constructor.

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring") casadi::Integrator "

Base class for integrators.

Integrator abstract base class

Solves an initial value problem (IVP) coupled to a terminal value problem
with differential equation given as an implicit ODE coupled to an algebraic
equation and a set of quadratures: Initial conditions at t=t0  x(t0)  = x0
q(t0)  = 0   Forward integration from t=t0 to t=tf  der(x) =
function(x,z,p,t) Forward ODE  0 = fz(x,z,p,t)                  Forward
algebraic equations  der(q) = fq(x,z,p,t)                  Forward
quadratures Terminal conditions at t=tf  rx(tf)  = rx0  rq(tf)  = 0
Backward integration from t=tf to t=t0  der(rx) = gx(rx,rz,rp,x,z,p,t)
Backward ODE  0 = gz(rx,rz,rp,x,z,p,t)        Backward algebraic equations
der(rq) = gq(rx,rz,rp,x,z,p,t)        Backward quadratures where we assume
that both the forward and backwards integrations are index-1  (i.e. dfz/dz,
dgz/drz are invertible) and furthermore that gx, gz and gq have a linear
dependency on rx, rz and rp.

The Integrator class provides some additional functionality, such as getting
the value of the state and/or sensitivities at certain time points.

The class does not specify the method used for the integration. This is
defined in derived classes.

Joel Andersson

>Input scheme: casadi::IntegratorInput (INTEGRATOR_NUM_IN = 7) [integratorIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_X0          | x0                     | Differential state at  |
|                        |                        | the initial time .     |
+------------------------+------------------------+------------------------+
| INTEGRATOR_P           | p                      | Parameters .           |
+------------------------+------------------------+------------------------+
| INTEGRATOR_Z0          | z0                     | Initial guess for the  |
|                        |                        | algebraic variable .   |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RX0         | rx0                    | Backward differential  |
|                        |                        | state at the final     |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RP          | rp                     | Backward parameter     |
|                        |                        | vector .               |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZ0         | rz0                    | Initial guess for the  |
|                        |                        | backwards algebraic    |
|                        |                        | variable .             |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::IntegratorOutput (INTEGRATOR_NUM_OUT = 7) [integratorOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_XF          | xf                     | Differential state at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_QF          | qf                     | Quadrature state at    |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_ZF          | zf                     | Algebraic variable at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RXF         | rxf                    | Backward differential  |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RQF         | rqf                    | Backward quadrature    |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZF         | rzf                    | Backward algebraic     |
|                        |                        | variable at the        |
|                        |                        | initial time .         |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| artol        | OT_REAL      | 0.000        | tolerance as | casadi::Inte |
|              |              |              | provided     | gratorIntern |
|              |              |              | with         | al           |
|              |              |              | setArTol to  |              |
|              |              |              | OOQP         |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_augme | OT_BOOLEAN   | true         | DAE callback | casadi::Inte |
| nted         |              |              | function     | gratorIntern |
|              |              |              | also be      | al           |
|              |              |              | SXFunction . |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: integrator.hpp ";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Integrator::getAugmented(int nfwd, int nadj)
"

Generate a augmented DAE system with nfwd forward sensitivities and nadj
adjoint sensitivities.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::Integrator::integrateB(double t_out) "

Integrate backward until a specified time point.

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::Integrator::integrate(double t_out) "

Integrate forward until a specified time point.

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::Integrator::reset() "

Reset the forward problem Time will be set to t0 and state to
input(INTEGRATOR_X0)

";

%feature("docstring")  casadi::Integrator::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::Integrator::printStats(std::ostream
&stream=std::cout) const  "

Print solver statistics.

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";


// File: classcasadi_1_1IntegratorInputIOSchemeVector.xml
%feature("docstring") casadi::IntegratorInputIOSchemeVector "[INTERNAL]
Helper function for 'IntegratorInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring")  casadi::IOSchemeVector< M  >::repr(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "
[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::IOSchemeVector< M  >::vector() const "
[INTERNAL] ";

%feature("docstring") casadi::IntegratorInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::IntegratorInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring")  casadi::IOSchemeVector< M  >::print(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "
[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::IntegratorInputIOSchemeVector< M
>::IntegratorInputIOSchemeVector(const std::vector< M > &t) " [INTERNAL] ";

%feature("docstring") casadi::IntegratorInputIOSchemeVector::__len__ "[INTERNAL] ";


// File: classcasadi_1_1IntegratorOutputIOSchemeVector.xml
%feature("docstring") casadi::IntegratorOutputIOSchemeVector "[INTERNAL]
Helper function for 'IntegratorOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "
[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::IOSchemeVector< M  >::repr(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a representation of the object.

";

%feature("docstring") casadi::IntegratorOutputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring") casadi::IntegratorOutputIOSchemeVector< M
>::IntegratorOutputIOSchemeVector(const std::vector< M > &t) " [INTERNAL] ";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "
[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::IntegratorOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::IntegratorOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring")  casadi::IOSchemeVector< M  >::vector() const "
[INTERNAL] ";

%feature("docstring")  casadi::IOSchemeVector< M  >::print(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a description of the object.

";


// File: classcasadi_1_1Inverse.xml
%feature("docstring")  casadi::MXNode::getFunctionInput() const  "
[INTERNAL]  Get function input.

";

%feature("docstring")  casadi::MXNode::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp,
bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, bool fwd) " [INTERNAL]  Propagate sparsity, no work.

";

%feature("docstring")  casadi::SharedObjectNode::assertInit() const  "
[INTERNAL]  Assert that the object has been initialized.

";

%feature("docstring")  casadi::MXNode::ndep() const  " [INTERNAL]  Number of
dependencies.

";

%feature("docstring")  casadi::SharedObjectNode::init() "[INTERNAL]
Initialize the object.

";

%feature("docstring")  casadi::Inverse::evaluateMX(const MXPtrV &input,
MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV
&adjSeed, MXPtrVV &adjSens, bool output_given) " [INTERNAL]  Evaluate the
function symbolically ( MX)

";

%feature("docstring")  casadi::MXNode::evaluateMX(const MXPtrV &input,
MXPtrV &output) " [INTERNAL]  Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") casadi::Inverse "[INTERNAL]   Matrix inverse.

Joel Andersson

C++ includes: inverse.hpp ";

%feature("docstring") casadi::Inverse::Inverse(const MX &x) " [INTERNAL]
Constructor.

";

%feature("docstring")  casadi::MXNode::getHorzsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a horizontal split node.

";

%feature("docstring")  casadi::MXNode::evaluateD(const DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp)
" [INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::SharedObjectNode::getCount() const  "
[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::MXNode::numInplace() const  " [INTERNAL]  Can
the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring")  casadi::MXNode::getBinary(int op, const MX &y, bool
scX, bool scY) const  " [INTERNAL]  Get a binary operation operation
(matrix-matrix)

";

%feature("docstring")  casadi::MXNode::isZero() const  " [INTERNAL]  Check
if identically zero.

";

%feature("docstring")  casadi::MXNode::hasDep() const  " [INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring")  casadi::MXNode::size() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getSetNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Assign the nonzeros of a matrix
to another matrix.

";

%feature("docstring")  casadi::MXNode::sameOpAndDeps(const MXNode *node, int
depth) const  " [INTERNAL]  Checks if two nodes have the same operation and
have equivalent dependencies up to a given depth.

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) const  " [INTERNAL]
dependencies - functions that have to be evaluated before this one

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::repr(std::ostream &stream) const  "
[INTERNAL]  Print a representation.

";

%feature("docstring")  casadi::MXNode::getReshape(const Sparsity &sp) const
" [INTERNAL]   Reshape.

";

%feature("docstring")  casadi::MXNode::getInnerProd(const MX &y) const  "
[INTERNAL]  Inner product.

";

%feature("docstring") casadi::Inverse::~Inverse "[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::Inverse::getOp() const  " [INTERNAL]  Get the
operation.

";

%feature("docstring")  casadi::MXNode::getAddNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Add the nonzeros of a matrix to
another matrix.

";

%feature("docstring")  casadi::MXNode::getNormF() const  " [INTERNAL]
Frobenius norm.

";

%feature("docstring")  casadi::MXNode::nTmp(size_t &ni, size_t &nr) "
[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::MXNode::getMultiplication(const MX &y, const
Sparsity &sp_z=Sparsity()) const  " [INTERNAL]   Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring")  casadi::MXNode::addDependency(const MX &dep) "
[INTERNAL]  Add a dependency.

";

%feature("docstring")  casadi::MXNode::isIdentity() const  " [INTERNAL]
Check if identity matrix.

";

%feature("docstring")  casadi::MXNode::getOutput(int oind) const  "
[INTERNAL]  Get an output.

";

%feature("docstring")  casadi::MXNode::getNorm1() const  " [INTERNAL]
1-norm

";

%feature("docstring")  casadi::MXNode::isValue(double val) const  "
[INTERNAL]  Check if a certain value.

";

%feature("docstring")  casadi::MXNode::getTranspose() const  " [INTERNAL]
Transpose.

";

%feature("docstring")  casadi::MXNode::numel() const  " [INTERNAL]  Get
shape.

";

%feature("docstring")  casadi::MXNode::getNumOutputs() const  " [INTERNAL]
Number of outputs.

";

%feature("docstring")  casadi::MXNode::size1() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getGetNonzeros(const Sparsity &sp,
const std::vector< int > &nz) const  " [INTERNAL]  Get the nonzeros of
matrix.

";

%feature("docstring")  casadi::MXNode::getSolve(const MX &r, bool tr, const
LinearSolver &linear_solver) const  " [INTERNAL]   Solve a system of linear
equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring")  casadi::MXNode::getVertsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a vertical split node (vectors
only)

";

%feature("docstring")  casadi::MXNode::getSetSparse(const Sparsity &sp)
const  " [INTERNAL]  Create set sparse.

";

%feature("docstring")  casadi::MXNode::getValue() const  " [INTERNAL]  Get
the value (only for scalar constant nodes)

";

%feature("docstring")  casadi::MXNode::getName() const  " [INTERNAL]  Get
the name.

";

%feature("docstring")  casadi::MXNode::getNormInf() const  " [INTERNAL]
Infinity norm.

";

%feature("docstring")  casadi::MXNode::getSubAssign(const MX &y, const Slice
&i, const Slice &j) const  " [INTERNAL]  Get submatrix assignment.

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, const std::vector< int > &onz, bool add=false) "
[INTERNAL]  Assign nonzeros (mapping matrix)

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, bool add=false) " [INTERNAL]  Assign nonzeros
(mapping matrix), output indices sequential.

";

%feature("docstring")  casadi::MXNode::getBinarySwitch(int op, const MX &y)
const  " [INTERNAL]  Get a binary operation operation.

";

%feature("docstring")  casadi::MXNode::getDeterminant() const  " [INTERNAL]
Determinant.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep) "
[INTERNAL]  Set unary dependency.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2) " [INTERNAL]  Set binary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2, const MX &dep3) " [INTERNAL]  Set ternary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const std::vector< MX
> &dep) " [INTERNAL]  Set multiple dependencies.

";

%feature("docstring")  casadi::MXNode::isNonLinear() "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring")  casadi::MXNode::getFunctionOutput() const  "
[INTERNAL]  Get function output.

";

%feature("docstring") casadi::Inverse::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring")  casadi::MXNode::evaluateSX(const SXPtrV &input,
SXPtrV &output, std::vector< int > &itmp, std::vector< SXElement > &rtmp) "
[INTERNAL]  Evaluate symbolically (SX)

";

%feature("docstring")  casadi::MXNode::getFunction() "[INTERNAL]  Get
function reference.

";

%feature("docstring")  casadi::MXNode::getFunction() const  " [INTERNAL]
Get function reference.

";

%feature("docstring")  casadi::MXNode::isEqual(const MXNode *node, int
depth) const  " [INTERNAL]  Check if two nodes are equivalent up to a given
depth.

";

%feature("docstring")  casadi::MXNode::getUnary(int op) const  " [INTERNAL]
Get a unary operation.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream) const  "
[INTERNAL]  Print a description.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream, long
&remaining_calls) const  " [INTERNAL]  Print expression (make sure number of
calls is not exceeded)

";

%feature("docstring")  casadi::MXNode::getVertcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a vertical concatenation node (vectors only)

";

%feature("docstring")  casadi::MXNode::getNorm2() const  " [INTERNAL]
Spectral norm.

";

%feature("docstring")  casadi::MXNode::isBinaryOp() const  " [INTERNAL]
Check if binary operation.

";

%feature("docstring")  casadi::Inverse::printPart(std::ostream &stream, int
part) const  " [INTERNAL]  Print a part of the expression */.

";

%feature("docstring")  casadi::MXNode::sparsity() const  " [INTERNAL]  Get
the sparsity.

";

%feature("docstring")  casadi::MXNode::sparsity(int oind) const  "
[INTERNAL]  Get the sparsity of output oind.

";

%feature("docstring")  casadi::MXNode::shape() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::size2() const  " [INTERNAL] ";

%feature("docstring")  casadi::SharedObjectNode::weak() "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring")  casadi::MXNode::generateOperation(std::ostream
&stream, const std::vector< std::string > &arg, const std::vector<
std::string > &res, CodeGenerator &gen) const  " [INTERNAL]  Generate code
for the operation.

";

%feature("docstring")  casadi::MXNode::setSparsity(const Sparsity &sparsity)
" [INTERNAL]  Set the sparsity.

";

%feature("docstring")  casadi::MXNode::isMultipleOutput() const  "
[INTERNAL]  Check if a multiple output node.

";

%feature("docstring")  casadi::MXNode::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied) " [INTERNAL]  Deep copy
data members.

";

%feature("docstring")  casadi::MXNode::getAssertion(const MX &y, const
std::string &fail_message="") const  " [INTERNAL]   Assertion.

";

%feature("docstring")  casadi::MXNode::getHorzcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a horizontal concatenation node.

";

%feature("docstring")  casadi::MXNode::isUnaryOp() const  " [INTERNAL]
Check if unary operation.

";

%feature("docstring")  casadi::MXNode::getInverse() const  " [INTERNAL]
Inverse.

";

%feature("docstring")  casadi::MXNode::isOne() const  " [INTERNAL]  Check if
identically one.

";

%feature("docstring")  casadi::MXNode::getSubRef(const Slice &i, const Slice
&j) const  " [INTERNAL]  Get submatrix reference.

";

%feature("docstring")  casadi::MXNode::isOutputNode() const  " [INTERNAL]
Check if evaluation output.

";

%feature("docstring")  casadi::SharedObjectNode::isInit() const  "
[INTERNAL]  Check if the object has been initialized.

";

%feature("docstring")  casadi::MXNode::mapping() const  " [INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring")  casadi::Inverse::clone() const  " [INTERNAL]  Clone
function.

";

%feature("docstring")  casadi::MXNode::getMatrixValue() const  " [INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring")  casadi::MXNode::simplifyMe(MX &ex) " [INTERNAL]
Simplify the expression (ex is a reference to the node)

";


// File: classcasadi_1_1IOInterface.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */ %feature("docstring")  casadi::IOInterface< Derived
>::input(int iind=0) const  "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Derived >::input(const
std::string &iname) const  "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Derived >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Derived >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Derived >::getInputScheme()
const  "

Get input scheme.

";

%feature("docstring")  casadi::IOInterface< Derived >::output(int oind=0)
const  "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Derived >::output(const
std::string &oname) const  "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Derived >::output(int oind=0) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Derived >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Derived >::getInput(int iind=0)
const  "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Derived >::getInput(const
std::string &iname) const  "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Derived >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Derived >::getInput(T val, const
std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Derived >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::IOInterface< Derived >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Derived >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")  casadi::IOInterface< Derived >::getNumOutputs() const
"

Get the number of function outputs.

";

%feature("docstring")  casadi::IOInterface< Derived >::setOutput(T val, int
oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Derived >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Derived >::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::IOInterface< Derived >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::IOInterface< Derived >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const  "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::IOInterface< Derived >::getNumInputs() const
"

Get the number of function inputs.

";

%feature("docstring") casadi::IOInterface "

Interface for accessing input and output data structures.

Joel Andersson

C++ includes: io_interface.hpp ";

%feature("docstring")  casadi::IOInterface< Derived >::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")  casadi::IOInterface< Derived >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Derived >::setInput(T val, const
std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Derived >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Derived >::outputS(int i) const
" [INTERNAL]  Const access an output.

";

%feature("docstring")  casadi::IOInterface< Derived
>::outputSchemeEntry(const std::string &name) const  " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::IOInterface< Derived >::getOutput(int oind=0)
const  "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Derived >::getOutput(const
std::string &oname) const  "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Derived >::getOutput(T val, int
oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Derived >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Derived
>::inputSchemeEntry(const std::string &name) const  " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::IOInterface< Derived >::getOutputScheme()
const  "

Get output scheme.

";


// File: classcasadi_1_1IOScheme.xml
%feature("docstring")  casadi::IOScheme::describeOutput(int i) const  "

Describe the index as an output.

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::IOScheme::describe(int i) const  "

Describe the index.

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::IOScheme::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::IOScheme::entry(int i) const  "

Get the entry name by index.

";

%feature("docstring")  casadi::IOScheme::index(const std::string &name)
const  "

Get index by entry name.

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring") casadi::IOScheme "

Class with mapping between names and indices.

Joris Gillis

C++ includes: io_scheme.hpp ";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::IOScheme::repr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a representation of the
object.

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::IOScheme::compatibleSize(int size) const  "

Check whether this scheme is compatible with the given size.

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::IOScheme::entryEnum(int i) const  "

Get the entry enum name by index.

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::IOScheme::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring") casadi::IOScheme::IOScheme() "

Default constructor.

";

%feature("docstring") casadi::IOScheme::IOScheme(InputOutputScheme scheme) "

Constructor with enum.

";

%feature("docstring") casadi::IOScheme::IOScheme(const std::vector<
std::string > &entries, const std::vector< std::string >
&descriptions=std::vector< std::string >()) "

Constructor with entry names.

";

%feature("docstring") casadi::IOScheme::IOScheme(const std::string &arg_s0,
const std::string &arg_s1="", const std::string &arg_s2="", const
std::string &arg_s3="", const std::string &arg_s4="", const std::string
&arg_s5="", const std::string &arg_s6="", const std::string &arg_s7="",
const std::string &arg_s8="", const std::string &arg_s9="", const
std::string &arg_s10="", const std::string &arg_s11="", const std::string
&arg_s12="", const std::string &arg_s13="", const std::string &arg_s14="",
const std::string &arg_s15="", const std::string &arg_s16="", const
std::string &arg_s17="", const std::string &arg_s18="", const std::string
&arg_s19="") " ";

%feature("docstring")  casadi::IOScheme::name() const  "

Name of the scheme.

";

%feature("docstring")  casadi::IOScheme::describeInput(int i) const  "

Describe the index as an input.

";

%feature("docstring")  casadi::IOScheme::size() const  "

Number of entries.

";

%feature("docstring")  casadi::IOScheme::entryNames() const  "

List available entries.

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::IOScheme::known() const  "

Check whether the scheme is known.

";

%feature("docstring")  casadi::IOScheme::entryLabel(int i) const  "

Get the entry label by index If scheme is unknown, returns the index as a
string.

";


// File: classcasadi_1_1IOSchemeVector.xml
%feature("docstring") casadi::IOSchemeVector::__len__ "";

%feature("docstring")  casadi::IOSchemeVector< T >::repr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a representation of the
object.

";

%feature("docstring") casadi::IOSchemeVector< T >::IOSchemeVector(const
std::vector< T > &d=std::vector< T >(), const IOScheme &s=IOScheme()) " ";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::IOSchemeVector "

A vector container with associated IOScheme A class.

C++ includes: io_scheme_vector.hpp ";

%feature("docstring")  casadi::IOSchemeVector< T >::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring") casadi::IOSchemeVector::__getitem__ "";

%feature("docstring") casadi::IOSchemeVector::__getitem__ "";

%feature("docstring")  casadi::IOSchemeVector< T >::vector() const  " ";


// File: classcasadi_1_1IpoptSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::Function::outputScheme() const  " [INTERNAL]  Access input/output
scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::NLPSolver::nlp() "

Access the NLP.

>Input scheme: casadi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")  casadi::NLPSolver::hessLag() "

Access the Hessian of the Lagrangian function.

>Input scheme: casadi::JacGInput (JACG_NUM_IN = 3) [jacGIn]
+-----------+-------+---------------------+
| Full name | Short |     Description     |
+===========+=======+=====================+
| JACG_X    | x     | Decision variable . |
+-----------+-------+---------------------+
| JACG_P    | p     | Fixed parameter .   |
+-----------+-------+---------------------+

>Output scheme: casadi::JacGOutput (JACG_NUM_OUT = 4) [jacGOut]
+-----------+-------+-------------------------------+
| Full name | Short |          Description          |
+===========+=======+===============================+
| JACG_JAC  | jac   | Jacobian of the constraints . |
+-----------+-------+-------------------------------+
| JACG_F    | f     | Objective function .          |
+-----------+-------+-------------------------------+
| JACG_G    | g     | Constraint function .         |
+-----------+-------+-------------------------------+

";

%feature("docstring")  casadi::NLPSolver::reportConstraints(std::ostream
&stream=std::cout) "

Prints out a human readable report about possible constraint violations,
after solving.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::IpoptSolver "

interface to IPOPT NLP solver

Solves the following parametric nonlinear program (NLP):min          F(x,p)
x  subject to             LBX <=   x    <= UBX LBG <= G(x,p) <= UBG
p  == P      nx: number of decision variables     ng: number of constraints
np: number of parameters

When in warmstart mode, output NLP_SOLVER_LAM_X may be used as input

NOTE: Even when max_iter == 0, it is not guaranteed that
input(NLP_SOLVER_X0) == output(NLP_SOLVER_X). Indeed if bounds on X or
constraints are unmet, they will differ.

For a good tutorial on IPOPT,
seehttp://drops.dagstuhl.de/volltexte/2009/2089/pdf/09061.WaechterAndreas.Paper.2089.pdf

A good resource about the algorithms in IPOPT is: Wachter and L. T. Biegler,
On the Implementation of an Interior-Point Filter Line-Search Algorithm for
Large-Scale Nonlinear Programming, Mathematical Programming 106(1), pp.
25-57, 2006 (As Research Report RC 23149, IBM T. J. Watson Research Center,
Yorktown, USA

Caveats: with default options, multipliers for the decision variables are
wrong for equality constraints. Change the 'fixed_variable_treatment' to
'make_constraint' or 'relax_bounds' to obtain correct results.

>Input scheme: casadi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| accept_after | OT_INTEGER   | -1           | Accept a     | casadi::Ipop |
| _max_steps   |              |              | trial point  | tInternal    |
|              |              |              | after        |              |
|              |              |              | maximal this |              |
|              |              |              | number of    |              |
|              |              |              | steps. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| accept_every | OT_STRING    | no           | Always       | casadi::Ipop |
| _trial_step  |              |              | accept the   | tInternal    |
|              |              |              | first trial  |              |
|              |              |              | step. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| acceptable_c | OT_REAL      | 0.010        | \"Acceptance\" | casadi::Ipop |
| ompl_inf_tol |              |              | threshold    | tInternal    |
|              |              |              | for the comp |              |
|              |              |              | lementarity  |              |
|              |              |              | conditions.  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| acceptable_c | OT_REAL      | 0.010        | \"Acceptance\" | casadi::Ipop |
| onstr_viol_t |              |              | threshold    | tInternal    |
| ol           |              |              | for the      |              |
|              |              |              | constraint   |              |
|              |              |              | violation.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| acceptable_d | OT_REAL      | 1.000e+10    | \"Acceptance\" | casadi::Ipop |
| ual_inf_tol  |              |              | threshold    | tInternal    |
|              |              |              | for the dual |              |
|              |              |              | infeasibilit |              |
|              |              |              | y. (see      |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| acceptable_i | OT_INTEGER   | 15           | Number of    | casadi::Ipop |
| ter          |              |              | \"acceptable\" | tInternal    |
|              |              |              | iterates     |              |
|              |              |              | before       |              |
|              |              |              | triggering   |              |
|              |              |              | termination. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| acceptable_o | OT_REAL      | 1.000e+20    | \"Acceptance\" | casadi::Ipop |
| bj_change_to |              |              | stopping     | tInternal    |
| l            |              |              | criterion    |              |
|              |              |              | based on     |              |
|              |              |              | objective    |              |
|              |              |              | function     |              |
|              |              |              | change. (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| acceptable_t | OT_REAL      | 0.000        | \"Acceptable\" | casadi::Ipop |
| ol           |              |              | convergence  | tInternal    |
|              |              |              | tolerance    |              |
|              |              |              | (relative).  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ad_mode      | OT_STRING    | automatic    | How to       | casadi::Ipop |
|              |              |              | calculate    | tInternal    |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
+--------------+--------------+--------------+--------------+--------------+
| adaptive_mu_ | OT_STRING    | obj-constr-  | Globalizatio | casadi::Ipop |
| globalizatio |              | filter       | n strategy   | tInternal    |
| n            |              |              | for the      |              |
|              |              |              | adaptive mu  |              |
|              |              |              | selection    |              |
|              |              |              | mode. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| adaptive_mu_ | OT_STRING    | 2-norm-      | Norm used    | casadi::Ipop |
| kkt_norm_typ |              | squared      | for the KKT  | tInternal    |
| e            |              |              | error in the |              |
|              |              |              | adaptive mu  |              |
|              |              |              | globalizatio |              |
|              |              |              | n            |              |
|              |              |              | strategies.  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| adaptive_mu_ | OT_REAL      | 1.000        | Sufficient   | casadi::Ipop |
| kkterror_red |              |              | decrease     | tInternal    |
| _fact        |              |              | factor for   |              |
|              |              |              | \"kkt-error\"  |              |
|              |              |              | globalizatio |              |
|              |              |              | n strategy.  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| adaptive_mu_ | OT_INTEGER   | 4            | Maximum      | casadi::Ipop |
| kkterror_red |              |              | number of    | tInternal    |
| _iters       |              |              | iterations   |              |
|              |              |              | requiring    |              |
|              |              |              | sufficient   |              |
|              |              |              | progress.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| adaptive_mu_ | OT_REAL      | 0.800        | Determines   | casadi::Ipop |
| monotone_ini |              |              | the initial  | tInternal    |
| t_factor     |              |              | value of the |              |
|              |              |              | barrier      |              |
|              |              |              | parameter    |              |
|              |              |              | when         |              |
|              |              |              | switching to |              |
|              |              |              | the monotone |              |
|              |              |              | mode. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| adaptive_mu_ | OT_STRING    | no           | Indicates if | casadi::Ipop |
| restore_prev |              |              | the previous | tInternal    |
| ious_iterate |              |              | iterate      |              |
|              |              |              | should be    |              |
|              |              |              | restored if  |              |
|              |              |              | the monotone |              |
|              |              |              | mode is      |              |
|              |              |              | entered.     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| adaptive_mu_ | OT_REAL      | 0            | (see IPOPT d | casadi::Ipop |
| safeguard_fa |              |              | ocumentation | tInternal    |
| ctor         |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| alpha_for_y  | OT_STRING    | primal       | Method to    | casadi::Ipop |
|              |              |              | determine    | tInternal    |
|              |              |              | the step     |              |
|              |              |              | size for     |              |
|              |              |              | constraint   |              |
|              |              |              | multipliers. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| alpha_for_y_ | OT_REAL      | 10           | Tolerance    | casadi::Ipop |
| tol          |              |              | for          | tInternal    |
|              |              |              | switching to |              |
|              |              |              | full         |              |
|              |              |              | equality     |              |
|              |              |              | multiplier   |              |
|              |              |              | steps. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| alpha_min_fr | OT_REAL      | 0.050        | Safety       | casadi::Ipop |
| ac           |              |              | factor for   | tInternal    |
|              |              |              | the minimal  |              |
|              |              |              | step size    |              |
|              |              |              | (before      |              |
|              |              |              | switching to |              |
|              |              |              | restoration  |              |
|              |              |              | phase). (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| alpha_red_fa | OT_REAL      | 0.500        | Fractional   | casadi::Ipop |
| ctor         |              |              | reduction of | tInternal    |
|              |              |              | the trial    |              |
|              |              |              | step size in |              |
|              |              |              | the          |              |
|              |              |              | backtracking |              |
|              |              |              | line search. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| barrier_tol_ | OT_REAL      | 10           | Factor for   | casadi::Ipop |
| factor       |              |              | mu in        | tInternal    |
|              |              |              | barrier stop |              |
|              |              |              | test. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| bound_frac   | OT_REAL      | 0.010        | Desired      | casadi::Ipop |
|              |              |              | minimum      | tInternal    |
|              |              |              | relative     |              |
|              |              |              | distance     |              |
|              |              |              | from the     |              |
|              |              |              | initial      |              |
|              |              |              | point to     |              |
|              |              |              | bound. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| bound_mult_i | OT_STRING    | constant     | Initializati | casadi::Ipop |
| nit_method   |              |              | on method    | tInternal    |
|              |              |              | for bound    |              |
|              |              |              | multipliers  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| bound_mult_i | OT_REAL      | 1            | Initial      | casadi::Ipop |
| nit_val      |              |              | value for    | tInternal    |
|              |              |              | the bound    |              |
|              |              |              | multipliers. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| bound_mult_r | OT_REAL      | 1000         | Threshold    | casadi::Ipop |
| eset_thresho |              |              | for          | tInternal    |
| ld           |              |              | resetting    |              |
|              |              |              | bound        |              |
|              |              |              | multipliers  |              |
|              |              |              | after the    |              |
|              |              |              | restoration  |              |
|              |              |              | phase. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| bound_push   | OT_REAL      | 0.010        | Desired      | casadi::Ipop |
|              |              |              | minimum      | tInternal    |
|              |              |              | absolute     |              |
|              |              |              | distance     |              |
|              |              |              | from the     |              |
|              |              |              | initial      |              |
|              |              |              | point to     |              |
|              |              |              | bound. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| bound_relax_ | OT_REAL      | 0.000        | Factor for   | casadi::Ipop |
| factor       |              |              | initial      | tInternal    |
|              |              |              | relaxation   |              |
|              |              |              | of the       |              |
|              |              |              | bounds. (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| check_deriva | OT_STRING    | no           | Indicates    | casadi::Ipop |
| tives_for_na |              |              | whether it   | tInternal    |
| ninf         |              |              | is desired   |              |
|              |              |              | to check for |              |
|              |              |              | Nan/Inf in   |              |
|              |              |              | derivative   |              |
|              |              |              | matrices     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| chi_cup      | OT_REAL      | 1.500        | LIFENG       | casadi::Ipop |
|              |              |              | WRITES THIS. | tInternal    |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| chi_hat      | OT_REAL      | 2            | LIFENG       | casadi::Ipop |
|              |              |              | WRITES THIS. | tInternal    |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| chi_tilde    | OT_REAL      | 5            | LIFENG       | casadi::Ipop |
|              |              |              | WRITES THIS. | tInternal    |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| compl_inf_to | OT_REAL      | 0.000        | Desired      | casadi::Ipop |
| l            |              |              | threshold    | tInternal    |
|              |              |              | for the comp |              |
|              |              |              | lementarity  |              |
|              |              |              | conditions.  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| con_integer_ | OT_DICTIONAR | None         | Integer      | casadi::Ipop |
| md           | Y            |              | metadata (a  | tInternal    |
|              |              |              | dictionary   |              |
|              |              |              | with lists   |              |
|              |              |              | of integers) |              |
|              |              |              | about        |              |
|              |              |              | constraints  |              |
|              |              |              | to be passed |              |
|              |              |              | to IPOPT     |              |
+--------------+--------------+--------------+--------------+--------------+
| con_numeric_ | OT_DICTIONAR | GenericType( | constraints  | casadi::Ipop |
| md           | Y            | )            | to be passed | tInternal    |
|              |              |              | to IPOPT     |              |
+--------------+--------------+--------------+--------------+--------------+
| con_string_m | OT_DICTIONAR | None         | String       | casadi::Ipop |
| d            | Y            |              | metadata (a  | tInternal    |
|              |              |              | dictionary   |              |
|              |              |              | with lists   |              |
|              |              |              | of strings)  |              |
|              |              |              | about        |              |
|              |              |              | constraints  |              |
|              |              |              | to be passed |              |
|              |              |              | to IPOPT     |              |
+--------------+--------------+--------------+--------------+--------------+
| constr_mult_ | OT_REAL      | 1000         | Maximum      | casadi::Ipop |
| init_max     |              |              | allowed      | tInternal    |
|              |              |              | least-square |              |
|              |              |              | guess of     |              |
|              |              |              | constraint   |              |
|              |              |              | multipliers. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| constr_mult_ | OT_REAL      | 0            | Threshold    | casadi::Ipop |
| reset_thresh |              |              | for          | tInternal    |
| old          |              |              | resetting    |              |
|              |              |              | equality and |              |
|              |              |              | inequality   |              |
|              |              |              | multipliers  |              |
|              |              |              | after        |              |
|              |              |              | restoration  |              |
|              |              |              | phase. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| constr_viol_ | OT_REAL      | 0.000        | Desired      | casadi::Ipop |
| tol          |              |              | threshold    | tInternal    |
|              |              |              | for the      |              |
|              |              |              | constraint   |              |
|              |              |              | violation.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| constraint_v | OT_STRING    | 1-norm       | Norm to be   | casadi::Ipop |
| iolation_nor |              |              | used for the | tInternal    |
| m_type       |              |              | constraint   |              |
|              |              |              | violation in |              |
|              |              |              | the line     |              |
|              |              |              | search. (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| corrector_co | OT_REAL      | 1            | Complementar | casadi::Ipop |
| mpl_avrg_red |              |              | ity          | tInternal    |
| _fact        |              |              | tolerance    |              |
|              |              |              | factor for   |              |
|              |              |              | accepting    |              |
|              |              |              | corrector    |              |
|              |              |              | step (unsupp |              |
|              |              |              | orted!).     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| corrector_ty | OT_STRING    | none         | The type of  | casadi::Ipop |
| pe           |              |              | corrector    | tInternal    |
|              |              |              | steps that   |              |
|              |              |              | should be    |              |
|              |              |              | taken (unsup |              |
|              |              |              | ported!).    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| delta        | OT_REAL      | 1            | Multiplier   | casadi::Ipop |
|              |              |              | for          | tInternal    |
|              |              |              | constraint   |              |
|              |              |              | violation in |              |
|              |              |              | the          |              |
|              |              |              | switching    |              |
|              |              |              | rule. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| delta_y_max  | OT_REAL      | 1.000e+12    | a parameter  | casadi::Ipop |
|              |              |              | used to      | tInternal    |
|              |              |              | check if the |              |
|              |              |              | fast         |              |
|              |              |              | direction    |              |
|              |              |              | can be used  |              |
|              |              |              | asthe line   |              |
|              |              |              | search       |              |
|              |              |              | direction    |              |
|              |              |              | (for Chen-   |              |
|              |              |              | Goldfarb     |              |
|              |              |              | line         |              |
|              |              |              | search).     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| dependency_d | OT_STRING    | no           | Indicates if | casadi::Ipop |
| etection_wit |              |              | the right    | tInternal    |
| h_rhs        |              |              | hand sides   |              |
|              |              |              | of the       |              |
|              |              |              | constraints  |              |
|              |              |              | should be    |              |
|              |              |              | considered   |              |
|              |              |              | during       |              |
|              |              |              | dependency   |              |
|              |              |              | detection    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| dependency_d | OT_STRING    | none         | Indicates    | casadi::Ipop |
| etector      |              |              | which linear | tInternal    |
|              |              |              | solver       |              |
|              |              |              | should be    |              |
|              |              |              | used to      |              |
|              |              |              | detect       |              |
|              |              |              | linearly     |              |
|              |              |              | dependent    |              |
|              |              |              | equality     |              |
|              |              |              | constraints. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_t | OT_STRING    | none         | Enable       | casadi::Ipop |
| est          |              |              | derivative   | tInternal    |
|              |              |              | checker (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_t | OT_INTEGER   | -2           | Index of     | casadi::Ipop |
| est_first_in |              |              | first        | tInternal    |
| dex          |              |              | quantity to  |              |
|              |              |              | be checked   |              |
|              |              |              | by           |              |
|              |              |              | derivative   |              |
|              |              |              | checker (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_t | OT_REAL      | 0.000        | Size of the  | casadi::Ipop |
| est_perturba |              |              | finite       | tInternal    |
| tion         |              |              | difference   |              |
|              |              |              | perturbation |              |
|              |              |              | in           |              |
|              |              |              | derivative   |              |
|              |              |              | test. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_t | OT_STRING    | no           | Indicates    | casadi::Ipop |
| est_print_al |              |              | whether      | tInternal    |
| l            |              |              | information  |              |
|              |              |              | for all      |              |
|              |              |              | estimated    |              |
|              |              |              | derivatives  |              |
|              |              |              | should be    |              |
|              |              |              | printed.     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_t | OT_REAL      | 0.000        | Threshold    | casadi::Ipop |
| est_tol      |              |              | for          | tInternal    |
|              |              |              | indicating   |              |
|              |              |              | wrong        |              |
|              |              |              | derivative.  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| diverging_it | OT_REAL      | 1.000e+20    | Threshold    | casadi::Ipop |
| erates_tol   |              |              | for maximal  | tInternal    |
|              |              |              | value of     |              |
|              |              |              | primal       |              |
|              |              |              | iterates.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| dual_inf_tol | OT_REAL      | 1            | Desired      | casadi::Ipop |
|              |              |              | threshold    | tInternal    |
|              |              |              | for the dual |              |
|              |              |              | infeasibilit |              |
|              |              |              | y. (see      |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| epsilon_c    | OT_REAL      | 0.010        | LIFENG       | casadi::Ipop |
|              |              |              | WRITES THIS. | tInternal    |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| eta_min      | OT_REAL      | 10           | LIFENG       | casadi::Ipop |
|              |              |              | WRITES THIS. | tInternal    |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| eta_penalty  | OT_REAL      | 0.000        | Relaxation   | casadi::Ipop |
|              |              |              | factor in    | tInternal    |
|              |              |              | the Armijo   |              |
|              |              |              | condition    |              |
|              |              |              | for the      |              |
|              |              |              | penalty      |              |
|              |              |              | function.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| eta_phi      | OT_REAL      | 0.000        | Relaxation   | casadi::Ipop |
|              |              |              | factor in    | tInternal    |
|              |              |              | the Armijo   |              |
|              |              |              | condition.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| evaluate_ori | OT_STRING    | yes          | Determines   | casadi::Ipop |
| g_obj_at_res |              |              | if the       | tInternal    |
| to_trial     |              |              | original     |              |
|              |              |              | objective    |              |
|              |              |              | function     |              |
|              |              |              | should be    |              |
|              |              |              | evaluated at |              |
|              |              |              | restoration  |              |
|              |              |              | phase trial  |              |
|              |              |              | points. (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| expand       | OT_BOOLEAN   | False        | Expand the   | casadi::Ipop |
|              |              |              | NLP function | tInternal    |
|              |              |              | in terms of  |              |
|              |              |              | scalar       |              |
|              |              |              | operations,  |              |
|              |              |              | i.e. MX->SX  |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_f     | OT_BOOLEAN   | GenericType( | Deprecated,  | casadi::NLPS |
|              |              | )            | use \"expand\" | olverInterna |
|              |              |              | instead.     | l            |
+--------------+--------------+--------------+--------------+--------------+
| expand_g     | OT_BOOLEAN   | GenericType( | Deprecated,  | casadi::NLPS |
|              |              | )            | use \"expand\" | olverInterna |
|              |              |              | instead.     | l            |
+--------------+--------------+--------------+--------------+--------------+
| expect_infea | OT_STRING    | no           | Enable       | casadi::Ipop |
| sible_proble |              |              | heuristics   | tInternal    |
| m            |              |              | to quickly   |              |
|              |              |              | detect an    |              |
|              |              |              | infeasible   |              |
|              |              |              | problem.     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| expect_infea | OT_REAL      | 0.001        | Threshold    | casadi::Ipop |
| sible_proble |              |              | for          | tInternal    |
| m_ctol       |              |              | disabling \"e |              |
|              |              |              | xpect_infeas |              |
|              |              |              | ible_problem |              |
|              |              |              | \" option.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| expect_infea | OT_REAL      | 100000000    | Multiplier   | casadi::Ipop |
| sible_proble |              |              | threshold    | tInternal    |
| m_ytol       |              |              | for          |              |
|              |              |              | activating \" |              |
|              |              |              | expect_infea |              |
|              |              |              | sible_proble |              |
|              |              |              | m\" option.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| fast_des_fac | OT_REAL      | 0.100        | a parameter  | casadi::Ipop |
| t            |              |              | used to      | tInternal    |
|              |              |              | check if the |              |
|              |              |              | fast         |              |
|              |              |              | direction    |              |
|              |              |              | can be used  |              |
|              |              |              | asthe line   |              |
|              |              |              | search       |              |
|              |              |              | direction    |              |
|              |              |              | (for Chen-   |              |
|              |              |              | Goldfarb     |              |
|              |              |              | line         |              |
|              |              |              | search).     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| fast_step_co | OT_STRING    | no           | Indicates if | casadi::Ipop |
| mputation    |              |              | the linear   | tInternal    |
|              |              |              | system       |              |
|              |              |              | should be    |              |
|              |              |              | solved       |              |
|              |              |              | quickly.     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| file_print_l | OT_INTEGER   | 5            | Verbosity    | casadi::Ipop |
| evel         |              |              | level for    | tInternal    |
|              |              |              | output file. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| filter_margi | OT_REAL      | 0.000        | Factor       | casadi::Ipop |
| n_fact       |              |              | determining  | tInternal    |
|              |              |              | width of     |              |
|              |              |              | margin for   |              |
|              |              |              | obj-constr-  |              |
|              |              |              | filter       |              |
|              |              |              | adaptive glo |              |
|              |              |              | balization   |              |
|              |              |              | strategy.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| filter_max_m | OT_REAL      | 1            | Maximum      | casadi::Ipop |
| argin        |              |              | width of     | tInternal    |
|              |              |              | margin in    |              |
|              |              |              | obj-constr-  |              |
|              |              |              | filter       |              |
|              |              |              | adaptive glo |              |
|              |              |              | balization   |              |
|              |              |              | strategy.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| filter_reset | OT_INTEGER   | 5            | Number of    | casadi::Ipop |
| _trigger     |              |              | iterations   | tInternal    |
|              |              |              | that trigger |              |
|              |              |              | the filter   |              |
|              |              |              | reset. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| findiff_pert | OT_REAL      | 0.000        | Size of the  | casadi::Ipop |
| urbation     |              |              | finite       | tInternal    |
|              |              |              | difference   |              |
|              |              |              | perturbation |              |
|              |              |              | for          |              |
|              |              |              | derivative a |              |
|              |              |              | pproximation |              |
|              |              |              | . (see IPOPT |              |
|              |              |              | documentatio |              |
|              |              |              | n)           |              |
+--------------+--------------+--------------+--------------+--------------+
| first_hessia | OT_REAL      | 0.000        | Size of      | casadi::Ipop |
| n_perturbati |              |              | first x-s    | tInternal    |
| on           |              |              | perturbation |              |
|              |              |              | tried. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| fixed_mu_ora | OT_STRING    | average_comp | Oracle for   | casadi::Ipop |
| cle          |              | l            | the barrier  | tInternal    |
|              |              |              | parameter    |              |
|              |              |              | when         |              |
|              |              |              | switching to |              |
|              |              |              | fixed mode.  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| fixed_variab | OT_STRING    | make_paramet | Determines   | casadi::Ipop |
| le_treatment |              | er           | how fixed    | tInternal    |
|              |              |              | variables    |              |
|              |              |              | should be    |              |
|              |              |              | handled.     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| gamma_hat    | OT_REAL      | 0.040        | LIFENG       | casadi::Ipop |
|              |              |              | WRITES THIS. | tInternal    |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| gamma_phi    | OT_REAL      | 0.000        | Relaxation   | casadi::Ipop |
|              |              |              | factor in    | tInternal    |
|              |              |              | the filter   |              |
|              |              |              | margin for   |              |
|              |              |              | the barrier  |              |
|              |              |              | function.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| gamma_theta  | OT_REAL      | 0.000        | Relaxation   | casadi::Ipop |
|              |              |              | factor in    | tInternal    |
|              |              |              | the filter   |              |
|              |              |              | margin for   |              |
|              |              |              | the          |              |
|              |              |              | constraint   |              |
|              |              |              | violation.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| gamma_tilde  | OT_REAL      | 4            | LIFENG       | casadi::Ipop |
|              |              |              | WRITES THIS. | tInternal    |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | False        | Flag to      | casadi::Ipop |
|              |              |              | indicate     | tInternal    |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| gauss_newton | OT_BOOLEAN   | None         | Deprecated   | casadi::Ipop |
|              |              |              | option. Use  | tInternal    |
|              |              |              | Gauss Newton |              |
|              |              |              | Hessian appr |              |
|              |              |              | oximation    |              |
+--------------+--------------+--------------+--------------+--------------+
| generate_gra | OT_BOOLEAN   | GenericType( | the gradient | casadi::NLPS |
| dient        |              | )            | of the       | olverInterna |
|              |              |              | objective.   | l            |
+--------------+--------------+--------------+--------------+--------------+
| generate_hes | OT_BOOLEAN   | None         | Deprecated   | casadi::Ipop |
| sian         |              |              | option.      | tInternal    |
|              |              |              | Generate an  |              |
|              |              |              | exact        |              |
|              |              |              | Hessian of   |              |
|              |              |              | the          |              |
|              |              |              | Lagrangian   |              |
|              |              |              | if not       |              |
|              |              |              | supplied.    |              |
+--------------+--------------+--------------+--------------+--------------+
| generate_jac | OT_BOOLEAN   | None         | Deprecated   | casadi::Ipop |
| obian        |              |              | option.      | tInternal    |
|              |              |              | Generate an  |              |
|              |              |              | exact        |              |
|              |              |              | Jacobian of  |              |
|              |              |              | the          |              |
|              |              |              | constraints  |              |
|              |              |              | if not       |              |
|              |              |              | supplied.    |              |
+--------------+--------------+--------------+--------------+--------------+
| grad_f       | OT_Function  | None         | Function for | casadi::Ipop |
|              |              |              | calculating  | tInternal    |
|              |              |              | the gradient |              |
|              |              |              | of the       |              |
|              |              |              | objective    |              |
|              |              |              | (column, aut |              |
|              |              |              | ogenerated   |              |
|              |              |              | by default)  |              |
+--------------+--------------+--------------+--------------+--------------+
| grad_lag     | OT_Function  | None         | Function for | casadi::Ipop |
|              |              |              | calculating  | tInternal    |
|              |              |              | the gradient |              |
|              |              |              | of the       |              |
|              |              |              | Lagrangian ( |              |
|              |              |              | autogenerate |              |
|              |              |              | d by         |              |
|              |              |              | default)     |              |
+--------------+--------------+--------------+--------------+--------------+
| hess_lag     | OT_Function  | None         | Function for | casadi::Ipop |
|              |              |              | calculating  | tInternal    |
|              |              |              | the Hessian  |              |
|              |              |              | of the       |              |
|              |              |              | Lagrangian ( |              |
|              |              |              | autogenerate |              |
|              |              |              | d by         |              |
|              |              |              | default)     |              |
+--------------+--------------+--------------+--------------+--------------+
| hessian_appr | OT_STRING    | exact        | Indicates    | casadi::Ipop |
| oximation    |              |              | what Hessian | tInternal    |
|              |              |              | information  |              |
|              |              |              | is to be     |              |
|              |              |              | used. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| hessian_appr | OT_STRING    | nonlinear-   | Indicates in | casadi::Ipop |
| oximation_sp |              | variables    | which        | tInternal    |
| ace          |              |              | subspace the |              |
|              |              |              | Hessian      |              |
|              |              |              | information  |              |
|              |              |              | is to be app |              |
|              |              |              | roximated.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| hessian_cons | OT_STRING    | no           | Indicates    | casadi::Ipop |
| tant         |              |              | whether the  | tInternal    |
|              |              |              | problem is a |              |
|              |              |              | quadratic    |              |
|              |              |              | problem (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| honor_origin | OT_STRING    | yes          | Indicates    | casadi::Ipop |
| al_bounds    |              |              | whether      | tInternal    |
|              |              |              | final points |              |
|              |              |              | should be    |              |
|              |              |              | projected    |              |
|              |              |              | into         |              |
|              |              |              | original     |              |
|              |              |              | bounds. (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| ignore_check | OT_BOOLEAN   | False        | If set to    | casadi::Ipop |
| _vec         |              |              | true, the    | tInternal    |
|              |              |              | input shape  |              |
|              |              |              | of F will    |              |
|              |              |              | not be       |              |
|              |              |              | checked.     |              |
+--------------+--------------+--------------+--------------+--------------+
| inf_pr_outpu | OT_STRING    | original     | Determines   | casadi::Ipop |
| t            |              |              | what value   | tInternal    |
|              |              |              | is printed   |              |
|              |              |              | in the       |              |
|              |              |              | \"inf_pr\"     |              |
|              |              |              | output       |              |
|              |              |              | column. (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | True         | Throw        | casadi::Ipop |
|              |              |              | exceptions   | tInternal    |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_CALLBACK  | GenericType( | Check docume | casadi::NLPS |
| llback       |              | )            | ntation of   | olverInterna |
|              |              |              | Callback .   | l            |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_BOOLEAN   | False        | If set to    | casadi::Ipop |
| llback_ignor |              |              | true, errors | tInternal    |
| e_errors     |              |              | thrown by it |              |
|              |              |              | eration_call |              |
|              |              |              | back will be |              |
|              |              |              | ignored.     |              |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_INTEGER   | 1            | Only call    | casadi::Ipop |
| llback_step  |              |              | the callback | tInternal    |
|              |              |              | function     |              |
|              |              |              | every few    |              |
|              |              |              | iterations.  |              |
+--------------+--------------+--------------+--------------+--------------+
| jac_c_consta | OT_STRING    | no           | Indicates    | casadi::Ipop |
| nt           |              |              | whether all  | tInternal    |
|              |              |              | equality     |              |
|              |              |              | constraints  |              |
|              |              |              | are linear   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| jac_d_consta | OT_STRING    | no           | Indicates    | casadi::Ipop |
| nt           |              |              | whether all  | tInternal    |
|              |              |              | inequality   |              |
|              |              |              | constraints  |              |
|              |              |              | are linear   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| jac_f        | OT_Function  | None         | Function for | casadi::Ipop |
|              |              |              | calculating  | tInternal    |
|              |              |              | the jacobian |              |
|              |              |              | of the       |              |
|              |              |              | objective    |              |
|              |              |              | (sparse row, |              |
|              |              |              | autogenerate |              |
|              |              |              | d by         |              |
|              |              |              | default)     |              |
+--------------+--------------+--------------+--------------+--------------+
| jac_g        | OT_Function  | None         | Function for | casadi::Ipop |
|              |              |              | calculating  | tInternal    |
|              |              |              | the Jacobian |              |
|              |              |              | of the       |              |
|              |              |              | constraints  |              |
|              |              |              | (autogenerat |              |
|              |              |              | ed by        |              |
|              |              |              | default)     |              |
+--------------+--------------+--------------+--------------+--------------+
| jacobian_app | OT_STRING    | exact        | Specifies    | casadi::Ipop |
| roximation   |              |              | technique to | tInternal    |
|              |              |              | compute      |              |
|              |              |              | constraint   |              |
|              |              |              | Jacobian     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| jacobian_reg | OT_REAL      | 0.250        | Exponent for | casadi::Ipop |
| ularization_ |              |              | mu in the re | tInternal    |
| exponent     |              |              | gularization |              |
|              |              |              | for rank-    |              |
|              |              |              | deficient    |              |
|              |              |              | constraint   |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| jacobian_reg | OT_REAL      | 0.000        | Size of the  | casadi::Ipop |
| ularization_ |              |              | regularizati | tInternal    |
| value        |              |              | on for rank- |              |
|              |              |              | deficient    |              |
|              |              |              | constraint   |              |
|              |              |              | Jacobians.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| kappa_d      | OT_REAL      | 0.000        | Weight for   | casadi::Ipop |
|              |              |              | linear       | tInternal    |
|              |              |              | damping term |              |
|              |              |              | (to handle   |              |
|              |              |              | one-sided    |              |
|              |              |              | bounds).     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| kappa_sigma  | OT_REAL      | 1.000e+10    | Factor       | casadi::Ipop |
|              |              |              | limiting the | tInternal    |
|              |              |              | deviation of |              |
|              |              |              | dual         |              |
|              |              |              | variables    |              |
|              |              |              | from primal  |              |
|              |              |              | estimates.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| kappa_soc    | OT_REAL      | 0.990        | Factor in    | casadi::Ipop |
|              |              |              | the          | tInternal    |
|              |              |              | sufficient   |              |
|              |              |              | reduction    |              |
|              |              |              | rule for     |              |
|              |              |              | second order |              |
|              |              |              | correction.  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| kappa_x_dis  | OT_REAL      | 100          | a parameter  | casadi::Ipop |
|              |              |              | used to      | tInternal    |
|              |              |              | check if the |              |
|              |              |              | fast         |              |
|              |              |              | direction    |              |
|              |              |              | can be used  |              |
|              |              |              | asthe line   |              |
|              |              |              | search       |              |
|              |              |              | direction    |              |
|              |              |              | (for Chen-   |              |
|              |              |              | Goldfarb     |              |
|              |              |              | line         |              |
|              |              |              | search).     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| kappa_y_dis  | OT_REAL      | 10000        | a parameter  | casadi::Ipop |
|              |              |              | used to      | tInternal    |
|              |              |              | check if the |              |
|              |              |              | fast         |              |
|              |              |              | direction    |              |
|              |              |              | can be used  |              |
|              |              |              | asthe line   |              |
|              |              |              | search       |              |
|              |              |              | direction    |              |
|              |              |              | (for Chen-   |              |
|              |              |              | Goldfarb     |              |
|              |              |              | line         |              |
|              |              |              | search).     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| least_square | OT_STRING    | no           | Least square | casadi::Ipop |
| _init_duals  |              |              | initializati | tInternal    |
|              |              |              | on of all    |              |
|              |              |              | dual         |              |
|              |              |              | variables    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| least_square | OT_STRING    | no           | Least square | casadi::Ipop |
| _init_primal |              |              | initializati | tInternal    |
|              |              |              | on of the    |              |
|              |              |              | primal       |              |
|              |              |              | variables    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| limited_memo | OT_STRING    | sherman-     | Strategy for | casadi::Ipop |
| ry_aug_solve |              | morrison     | solving the  | tInternal    |
| r            |              |              | augmented    |              |
|              |              |              | system for   |              |
|              |              |              | low-rank     |              |
|              |              |              | Hessian.     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| limited_memo | OT_REAL      | 1            | Value for B0 | casadi::Ipop |
| ry_init_val  |              |              | in low-rank  | tInternal    |
|              |              |              | update. (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| limited_memo | OT_REAL      | 100000000    | Upper bound  | casadi::Ipop |
| ry_init_val_ |              |              | on value for | tInternal    |
| max          |              |              | B0 in low-   |              |
|              |              |              | rank update. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| limited_memo | OT_REAL      | 0.000        | Lower bound  | casadi::Ipop |
| ry_init_val_ |              |              | on value for | tInternal    |
| min          |              |              | B0 in low-   |              |
|              |              |              | rank update. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| limited_memo | OT_STRING    | scalar1      | Initializati | casadi::Ipop |
| ry_initializ |              |              | on strategy  | tInternal    |
| ation        |              |              | for the      |              |
|              |              |              | limited      |              |
|              |              |              | memory       |              |
|              |              |              | quasi-Newton |              |
|              |              |              | approximatio |              |
|              |              |              | n. (see      |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| limited_memo | OT_INTEGER   | 6            | Maximum size | casadi::Ipop |
| ry_max_histo |              |              | of the       | tInternal    |
| ry           |              |              | history for  |              |
|              |              |              | the limited  |              |
|              |              |              | quasi-Newton |              |
|              |              |              | Hessian appr |              |
|              |              |              | oximation.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| limited_memo | OT_INTEGER   | 2            | Threshold    | casadi::Ipop |
| ry_max_skipp |              |              | for          | tInternal    |
| ing          |              |              | successive   |              |
|              |              |              | iterations   |              |
|              |              |              | where update |              |
|              |              |              | is skipped.  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| limited_memo | OT_STRING    | no           | Determines   | casadi::Ipop |
| ry_special_f |              |              | if the       | tInternal    |
| or_resto     |              |              | quasi-Newton |              |
|              |              |              | updates      |              |
|              |              |              | should be    |              |
|              |              |              | special      |              |
|              |              |              | during the   |              |
|              |              |              | restoration  |              |
|              |              |              | phase. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| limited_memo | OT_STRING    | bfgs         | Quasi-Newton | casadi::Ipop |
| ry_update_ty |              |              | update       | tInternal    |
| pe           |              |              | formula for  |              |
|              |              |              | the limited  |              |
|              |              |              | memory appro |              |
|              |              |              | ximation.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| line_search_ | OT_STRING    | filter       | Globalizatio | casadi::Ipop |
| method       |              |              | n method     | tInternal    |
|              |              |              | used in      |              |
|              |              |              | backtracking |              |
|              |              |              | line search  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_scali | OT_STRING    | yes          | Flag         | casadi::Ipop |
| ng_on_demand |              |              | indicating   | tInternal    |
|              |              |              | that linear  |              |
|              |              |              | scaling is   |              |
|              |              |              | only done if |              |
|              |              |              | it seems     |              |
|              |              |              | required.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_STRING    | ma27         | Linear       | casadi::Ipop |
| r            |              |              | solver used  | tInternal    |
|              |              |              | for step com |              |
|              |              |              | putations.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_syste | OT_STRING    | mc19         | Method for   | casadi::Ipop |
| m_scaling    |              |              | scaling the  | tInternal    |
|              |              |              | linear       |              |
|              |              |              | system. (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| ma27_ignore_ | OT_STRING    | no           | Enables      | casadi::Ipop |
| singularity  |              |              | MA27's       | tInternal    |
|              |              |              | ability to   |              |
|              |              |              | solve a      |              |
|              |              |              | linear       |              |
|              |              |              | system even  |              |
|              |              |              | if the       |              |
|              |              |              | matrix is    |              |
|              |              |              | singular.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma27_la_init | OT_REAL      | 5            | Real         | casadi::Ipop |
| _factor      |              |              | workspace    | tInternal    |
|              |              |              | memory for   |              |
|              |              |              | MA27. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| ma27_liw_ini | OT_REAL      | 5            | Integer      | casadi::Ipop |
| t_factor     |              |              | workspace    | tInternal    |
|              |              |              | memory for   |              |
|              |              |              | MA27. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| ma27_meminc_ | OT_REAL      | 10           | Increment    | casadi::Ipop |
| factor       |              |              | factor for   | tInternal    |
|              |              |              | workspace    |              |
|              |              |              | size for     |              |
|              |              |              | MA27. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| ma27_pivtol  | OT_REAL      | 0.000        | Pivot        | casadi::Ipop |
|              |              |              | tolerance    | tInternal    |
|              |              |              | for the      |              |
|              |              |              | linear       |              |
|              |              |              | solver MA27. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma27_pivtolm | OT_REAL      | 0.000        | Maximum      | casadi::Ipop |
| ax           |              |              | pivot        | tInternal    |
|              |              |              | tolerance    |              |
|              |              |              | for the      |              |
|              |              |              | linear       |              |
|              |              |              | solver MA27. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma27_skip_in | OT_STRING    | no           | Always       | casadi::Ipop |
| ertia_check  |              |              | pretend      | tInternal    |
|              |              |              | inertia is   |              |
|              |              |              | correct.     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma28_pivtol  | OT_REAL      | 0.010        | Pivot        | casadi::Ipop |
|              |              |              | tolerance    | tInternal    |
|              |              |              | for linear   |              |
|              |              |              | solver MA28. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma57_automat | OT_STRING    | yes          | Controls     | casadi::Ipop |
| ic_scaling   |              |              | MA57         | tInternal    |
|              |              |              | automatic    |              |
|              |              |              | scaling (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| ma57_block_s | OT_INTEGER   | 16           | Controls     | casadi::Ipop |
| ize          |              |              | block size   | tInternal    |
|              |              |              | used by      |              |
|              |              |              | Level 3 BLAS |              |
|              |              |              | in MA57BD    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma57_node_am | OT_INTEGER   | 16           | Node         | casadi::Ipop |
| algamation   |              |              | amalgamation | tInternal    |
|              |              |              | parameter    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma57_pivot_o | OT_INTEGER   | 5            | Controls     | casadi::Ipop |
| rder         |              |              | pivot order  | tInternal    |
|              |              |              | in MA57 (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| ma57_pivtol  | OT_REAL      | 0.000        | Pivot        | casadi::Ipop |
|              |              |              | tolerance    | tInternal    |
|              |              |              | for the      |              |
|              |              |              | linear       |              |
|              |              |              | solver MA57. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma57_pivtolm | OT_REAL      | 0.000        | Maximum      | casadi::Ipop |
| ax           |              |              | pivot        | tInternal    |
|              |              |              | tolerance    |              |
|              |              |              | for the      |              |
|              |              |              | linear       |              |
|              |              |              | solver MA57. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma57_pre_all | OT_REAL      | 1.050        | Safety       | casadi::Ipop |
| oc           |              |              | factor for   | tInternal    |
|              |              |              | work space   |              |
|              |              |              | memory       |              |
|              |              |              | allocation   |              |
|              |              |              | for the      |              |
|              |              |              | linear       |              |
|              |              |              | solver MA57. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma57_small_p | OT_INTEGER   | 0            | If set to 1, | casadi::Ipop |
| ivot_flag    |              |              | then when    | tInternal    |
|              |              |              | small        |              |
|              |              |              | entries      |              |
|              |              |              | defined by   |              |
|              |              |              | CNTL(2) are  |              |
|              |              |              | detected     |              |
|              |              |              | they are     |              |
|              |              |              | removed and  |              |
|              |              |              | the correspo |              |
|              |              |              | nding pivots |              |
|              |              |              | placed at    |              |
|              |              |              | the end of   |              |
|              |              |              | the factoriz |              |
|              |              |              | ation. This  |              |
|              |              |              | can be       |              |
|              |              |              | particularly |              |
|              |              |              | efficient if |              |
|              |              |              | the matrix   |              |
|              |              |              | is highly    |              |
|              |              |              | rank         |              |
|              |              |              | deficient.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma86_nemin   | OT_INTEGER   | 32           | Node         | casadi::Ipop |
|              |              |              | Amalgamation | tInternal    |
|              |              |              | parameter    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma86_print_l | OT_INTEGER   | 0            | Debug        | casadi::Ipop |
| evel         |              |              | printing     | tInternal    |
|              |              |              | level for    |              |
|              |              |              | the linear   |              |
|              |              |              | solver MA86  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma86_small   | OT_REAL      | 0.000        | Zero Pivot   | casadi::Ipop |
|              |              |              | Threshold    | tInternal    |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma86_static  | OT_REAL      | 0            | Static       | casadi::Ipop |
|              |              |              | Pivoting     | tInternal    |
|              |              |              | Threshold    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma86_u       | OT_REAL      | 0.000        | Pivoting     | casadi::Ipop |
|              |              |              | Threshold    | tInternal    |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| ma86_umax    | OT_REAL      | 0.000        | Maximum      | casadi::Ipop |
|              |              |              | Pivoting     | tInternal    |
|              |              |              | Threshold    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| magic_steps  | OT_STRING    | no           | Enables      | casadi::Ipop |
|              |              |              | magic steps. | tInternal    |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| max_cpu_time | OT_REAL      | 1000000      | Maximum      | casadi::Ipop |
|              |              |              | number of    | tInternal    |
|              |              |              | CPU seconds. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| max_filter_r | OT_INTEGER   | 5            | Maximal      | casadi::Ipop |
| esets        |              |              | allowed      | tInternal    |
|              |              |              | number of    |              |
|              |              |              | filter       |              |
|              |              |              | resets (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| max_hessian_ | OT_REAL      | 1.000e+20    | Maximum      | casadi::Ipop |
| perturbation |              |              | value of reg | tInternal    |
|              |              |              | ularization  |              |
|              |              |              | parameter    |              |
|              |              |              | for handling |              |
|              |              |              | negative     |              |
|              |              |              | curvature.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| max_iter     | OT_INTEGER   | 3000         | Maximum      | casadi::Ipop |
|              |              |              | number of    | tInternal    |
|              |              |              | iterations.  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| max_refineme | OT_INTEGER   | 10           | Maximum      | casadi::Ipop |
| nt_steps     |              |              | number of    | tInternal    |
|              |              |              | iterative    |              |
|              |              |              | refinement   |              |
|              |              |              | steps per    |              |
|              |              |              | linear       |              |
|              |              |              | system       |              |
|              |              |              | solve. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| max_resto_it | OT_INTEGER   | 3000000      | Maximum      | casadi::Ipop |
| er           |              |              | number of    | tInternal    |
|              |              |              | successive   |              |
|              |              |              | iterations   |              |
|              |              |              | in           |              |
|              |              |              | restoration  |              |
|              |              |              | phase. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| max_soc      | OT_INTEGER   | 4            | Maximum      | casadi::Ipop |
|              |              |              | number of    | tInternal    |
|              |              |              | second order |              |
|              |              |              | correction   |              |
|              |              |              | trial steps  |              |
|              |              |              | at each      |              |
|              |              |              | iteration.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| max_soft_res | OT_INTEGER   | 10           | Maximum      | casadi::Ipop |
| to_iters     |              |              | number of    | tInternal    |
|              |              |              | iterations   |              |
|              |              |              | performed    |              |
|              |              |              | successively |              |
|              |              |              | in soft      |              |
|              |              |              | restoration  |              |
|              |              |              | phase. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| mehrotra_alg | OT_STRING    | no           | Indicates if | casadi::Ipop |
| orithm       |              |              | we want to   | tInternal    |
|              |              |              | do           |              |
|              |              |              | Mehrotra's   |              |
|              |              |              | algorithm.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| min_alpha_pr | OT_REAL      | 0.000        | LIFENG       | casadi::Ipop |
| imal         |              |              | WRITES THIS. | tInternal    |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| min_hessian_ | OT_REAL      | 0.000        | Smallest     | casadi::Ipop |
| perturbation |              |              | perturbation | tInternal    |
|              |              |              | of the       |              |
|              |              |              | Hessian      |              |
|              |              |              | block. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| min_refineme | OT_INTEGER   | 1            | Minimum      | casadi::Ipop |
| nt_steps     |              |              | number of    | tInternal    |
|              |              |              | iterative    |              |
|              |              |              | refinement   |              |
|              |              |              | steps per    |              |
|              |              |              | linear       |              |
|              |              |              | system       |              |
|              |              |              | solve. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | None         | Monitors to  | casadi::Ipop |
|              | TOR          |              | be activated | tInternal    |
+--------------+--------------+--------------+--------------+--------------+
| mu_allow_fas | OT_STRING    | yes          | Allow        | casadi::Ipop |
| t_monotone_d |              |              | skipping of  | tInternal    |
| ecrease      |              |              | barrier      |              |
|              |              |              | problem if   |              |
|              |              |              | barrier test |              |
|              |              |              | is already   |              |
|              |              |              | met. (see    |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| mu_init      | OT_REAL      | 0.100        | Initial      | casadi::Ipop |
|              |              |              | value for    | tInternal    |
|              |              |              | the barrier  |              |
|              |              |              | parameter.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| mu_linear_de | OT_REAL      | 0.200        | Determines   | casadi::Ipop |
| crease_facto |              |              | linear       | tInternal    |
| r            |              |              | decrease     |              |
|              |              |              | rate of      |              |
|              |              |              | barrier      |              |
|              |              |              | parameter.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| mu_max       | OT_REAL      | 100000       | Maximum      | casadi::Ipop |
|              |              |              | value for    | tInternal    |
|              |              |              | barrier      |              |
|              |              |              | parameter.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| mu_max_fact  | OT_REAL      | 1000         | Factor for i | casadi::Ipop |
|              |              |              | nitializatio | tInternal    |
|              |              |              | n of maximum |              |
|              |              |              | value for    |              |
|              |              |              | barrier      |              |
|              |              |              | parameter.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| mu_min       | OT_REAL      | 0.000        | Minimum      | casadi::Ipop |
|              |              |              | value for    | tInternal    |
|              |              |              | barrier      |              |
|              |              |              | parameter.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| mu_oracle    | OT_STRING    | quality-     | Oracle for a | casadi::Ipop |
|              |              | function     | new barrier  | tInternal    |
|              |              |              | parameter in |              |
|              |              |              | the adaptive |              |
|              |              |              | strategy.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| mu_strategy  | OT_STRING    | monotone     | Update       | casadi::Ipop |
|              |              |              | strategy for | tInternal    |
|              |              |              | barrier      |              |
|              |              |              | parameter.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| mu_superline | OT_REAL      | 1.500        | Determines   | casadi::Ipop |
| ar_decrease_ |              |              | superlinear  | tInternal    |
| power        |              |              | decrease     |              |
|              |              |              | rate of      |              |
|              |              |              | barrier      |              |
|              |              |              | parameter.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| mu_target    | OT_REAL      | 0            | Desired      | casadi::Ipop |
|              |              |              | value of com | tInternal    |
|              |              |              | plementarity |              |
|              |              |              | . (see IPOPT |              |
|              |              |              | documentatio |              |
|              |              |              | n)           |              |
+--------------+--------------+--------------+--------------+--------------+
| mult_diverg_ | OT_REAL      | 0.000        | tolerance    | casadi::Ipop |
| feasibility_ |              |              | for deciding | tInternal    |
| tol          |              |              | if the       |              |
|              |              |              | multipliers  |              |
|              |              |              | are          |              |
|              |              |              | diverging    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| mult_diverg_ | OT_REAL      | 100000000    | tolerance    | casadi::Ipop |
| y_tol        |              |              | for deciding | tInternal    |
|              |              |              | if the       |              |
|              |              |              | multipliers  |              |
|              |              |              | are          |              |
|              |              |              | diverging    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| mumps_dep_to | OT_REAL      | -1           | Pivot        | casadi::Ipop |
| l            |              |              | threshold    | tInternal    |
|              |              |              | for          |              |
|              |              |              | detection of |              |
|              |              |              | linearly     |              |
|              |              |              | dependent    |              |
|              |              |              | constraints  |              |
|              |              |              | in MUMPS.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| mumps_mem_pe | OT_INTEGER   | 1000         | Percentage   | casadi::Ipop |
| rcent        |              |              | increase in  | tInternal    |
|              |              |              | the          |              |
|              |              |              | estimated    |              |
|              |              |              | working      |              |
|              |              |              | space for    |              |
|              |              |              | MUMPS. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| mumps_permut | OT_INTEGER   | 7            | Controls     | casadi::Ipop |
| ing_scaling  |              |              | permuting    | tInternal    |
|              |              |              | and scaling  |              |
|              |              |              | in MUMPS     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| mumps_pivot_ | OT_INTEGER   | 7            | Controls     | casadi::Ipop |
| order        |              |              | pivot order  | tInternal    |
|              |              |              | in MUMPS     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| mumps_pivtol | OT_REAL      | 0.000        | Pivot        | casadi::Ipop |
|              |              |              | tolerance    | tInternal    |
|              |              |              | for the      |              |
|              |              |              | linear       |              |
|              |              |              | solver       |              |
|              |              |              | MUMPS. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| mumps_pivtol | OT_REAL      | 0.100        | Maximum      | casadi::Ipop |
| max          |              |              | pivot        | tInternal    |
|              |              |              | tolerance    |              |
|              |              |              | for the      |              |
|              |              |              | linear       |              |
|              |              |              | solver       |              |
|              |              |              | MUMPS. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| mumps_scalin | OT_INTEGER   | 77           | Controls     | casadi::Ipop |
| g            |              |              | scaling in   | tInternal    |
|              |              |              | MUMPS (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| neg_curv_tes | OT_REAL      | 0            | Tolerance    | casadi::Ipop |
| t_tol        |              |              | for          | tInternal    |
|              |              |              | heuristic to |              |
|              |              |              | ignore wrong |              |
|              |              |              | inertia.     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| never_use_fa | OT_STRING    | no           | Toggle to    | casadi::Ipop |
| ct_cgpen_dir |              |              | switch off   | tInternal    |
| ection       |              |              | the fast     |              |
|              |              |              | Chen-        |              |
|              |              |              | Goldfarb     |              |
|              |              |              | direction    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| never_use_pi | OT_STRING    | no           | Toggle to    | casadi::Ipop |
| ecewise_pena |              |              | switch off   | tInternal    |
| lty_ls       |              |              | the          |              |
|              |              |              | piecewise    |              |
|              |              |              | penalty      |              |
|              |              |              | method (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| nlp_lower_bo | OT_REAL      | -1.000e+19   | any bound    | casadi::Ipop |
| und_inf      |              |              | less or      | tInternal    |
|              |              |              | equal this   |              |
|              |              |              | value will   |              |
|              |              |              | be           |              |
|              |              |              | considered   |              |
|              |              |              | -inf (i.e.   |              |
|              |              |              | not lower    |              |
|              |              |              | bounded).    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| nlp_scaling_ | OT_REAL      | 0            | Target value | casadi::Ipop |
| constr_targe |              |              | for          | tInternal    |
| t_gradient   |              |              | constraint   |              |
|              |              |              | function     |              |
|              |              |              | gradient     |              |
|              |              |              | size. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| nlp_scaling_ | OT_REAL      | 100          | Maximum      | casadi::Ipop |
| max_gradient |              |              | gradient     | tInternal    |
|              |              |              | after NLP    |              |
|              |              |              | scaling.     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| nlp_scaling_ | OT_STRING    | gradient-    | Select the   | casadi::Ipop |
| method       |              | based        | technique    | tInternal    |
|              |              |              | used for     |              |
|              |              |              | scaling the  |              |
|              |              |              | NLP. (see    |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| nlp_scaling_ | OT_REAL      | 0.000        | Minimum      | casadi::Ipop |
| min_value    |              |              | value of     | tInternal    |
|              |              |              | gradient-    |              |
|              |              |              | based        |              |
|              |              |              | scaling      |              |
|              |              |              | values. (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| nlp_scaling_ | OT_REAL      | 0            | Target value | casadi::Ipop |
| obj_target_g |              |              | for          | tInternal    |
| radient      |              |              | objective    |              |
|              |              |              | function     |              |
|              |              |              | gradient     |              |
|              |              |              | size. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| nlp_upper_bo | OT_REAL      | 1.000e+19    | any bound    | casadi::Ipop |
| und_inf      |              |              | greater or   | tInternal    |
|              |              |              | this value   |              |
|              |              |              | will be      |              |
|              |              |              | considered   |              |
|              |              |              | +inf (i.e.   |              |
|              |              |              | not upper    |              |
|              |              |              | bounded).    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| nu_inc       | OT_REAL      | 0.000        | Increment of | casadi::Ipop |
|              |              |              | the penalty  | tInternal    |
|              |              |              | parameter.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| nu_init      | OT_REAL      | 0.000        | Initial      | casadi::Ipop |
|              |              |              | value of the | tInternal    |
|              |              |              | penalty      |              |
|              |              |              | parameter.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| num_linear_v | OT_INTEGER   | 0            | Number of    | casadi::Ipop |
| ariables     |              |              | linear       | tInternal    |
|              |              |              | variables    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| obj_max_inc  | OT_REAL      | 5            | Determines   | casadi::Ipop |
|              |              |              | the upper    | tInternal    |
|              |              |              | bound on the |              |
|              |              |              | acceptable   |              |
|              |              |              | increase of  |              |
|              |              |              | barrier      |              |
|              |              |              | objective    |              |
|              |              |              | function.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| obj_scaling_ | OT_REAL      | 1            | Scaling      | casadi::Ipop |
| factor       |              |              | factor for   | tInternal    |
|              |              |              | the          |              |
|              |              |              | objective    |              |
|              |              |              | function.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| option_file_ | OT_STRING    |              | File name of | casadi::Ipop |
| name         |              |              | options file | tInternal    |
|              |              |              | (to          |              |
|              |              |              | overwrite    |              |
|              |              |              | default).    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| output_file  | OT_STRING    |              | File name of | casadi::Ipop |
|              |              |              | desired      | tInternal    |
|              |              |              | output file  |              |
|              |              |              | (leave unset |              |
|              |              |              | for no file  |              |
|              |              |              | output).     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| parametric   | OT_BOOLEAN   | GenericType( | input        | casadi::NLPS |
|              |              | )            | argument     | olverInterna |
|              |              |              | appended at  | l            |
|              |              |              | the end,     |              |
|              |              |              | denoting     |              |
|              |              |              | fixed        |              |
|              |              |              | parameters.  |              |
+--------------+--------------+--------------+--------------+--------------+
| pardiso_iter | OT_INTEGER   | 5000         | Maximum Size | casadi::Ipop |
| _coarse_size |              |              | of Coarse    | tInternal    |
|              |              |              | Grid Matrix  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| pardiso_iter | OT_REAL      | 0.500        | dropping     | casadi::Ipop |
| _dropping_fa |              |              | value for    | tInternal    |
| ctor         |              |              | incomplete   |              |
|              |              |              | factor (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| pardiso_iter | OT_REAL      | 0.100        | dropping     | casadi::Ipop |
| _dropping_sc |              |              | value for    | tInternal    |
| hur          |              |              | sparsify     |              |
|              |              |              | schur        |              |
|              |              |              | complement   |              |
|              |              |              | factor (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| pardiso_iter | OT_REAL      | 5000000      | (see IPOPT d | casadi::Ipop |
| _inverse_nor |              |              | ocumentation | tInternal    |
| m_factor     |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| pardiso_iter | OT_INTEGER   | 10           | Maximum Size | casadi::Ipop |
| _max_levels  |              |              | of Grid      | tInternal    |
|              |              |              | Levels (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| pardiso_iter | OT_INTEGER   | 10000000     | max fill for | casadi::Ipop |
| _max_row_fil |              |              | each row     | tInternal    |
| l            |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| pardiso_iter | OT_REAL      | 0.000        | Relative     | casadi::Ipop |
| _relative_to |              |              | Residual     | tInternal    |
| l            |              |              | Convergence  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| pardiso_iter | OT_STRING    | no           | Switch on    | casadi::Ipop |
| ative        |              |              | iterative    | tInternal    |
|              |              |              | solver in    |              |
|              |              |              | Pardiso      |              |
|              |              |              | library (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| pardiso_matc | OT_STRING    | complete+2x2 | Matching     | casadi::Ipop |
| hing_strateg |              |              | strategy to  | tInternal    |
| y            |              |              | be used by   |              |
|              |              |              | Pardiso (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| pardiso_max_ | OT_INTEGER   | 4            | Maximal      | casadi::Ipop |
| droptol_corr |              |              | number of    | tInternal    |
| ections      |              |              | decreases of |              |
|              |              |              | drop         |              |
|              |              |              | tolerance    |              |
|              |              |              | during one   |              |
|              |              |              | solve. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| pardiso_max_ | OT_INTEGER   | 500          | Maximum      | casadi::Ipop |
| iter         |              |              | number of    | tInternal    |
|              |              |              | Krylov-      |              |
|              |              |              | Subspace     |              |
|              |              |              | Iteration    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| pardiso_msgl | OT_INTEGER   | 0            | Pardiso      | casadi::Ipop |
| vl           |              |              | message      | tInternal    |
|              |              |              | level (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| pardiso_out_ | OT_INTEGER   | 0            | Enables out- | casadi::Ipop |
| of_core_powe |              |              | of-core      | tInternal    |
| r            |              |              | variant of   |              |
|              |              |              | Pardiso (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| pardiso_redo | OT_STRING    | no           | Toggle for   | casadi::Ipop |
| _symbolic_fa |              |              | handling     | tInternal    |
| ct_only_if_i |              |              | case when    |              |
| nertia_wrong |              |              | elements     |              |
|              |              |              | were         |              |
|              |              |              | perturbed by |              |
|              |              |              | Pardiso.     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| pardiso_repe | OT_STRING    | no           | Interpretati | casadi::Ipop |
| ated_perturb |              |              | on of        | tInternal    |
| ation_means_ |              |              | perturbed    |              |
| singular     |              |              | elements.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| pardiso_skip | OT_STRING    | no           | Always       | casadi::Ipop |
| _inertia_che |              |              | pretend      | tInternal    |
| ck           |              |              | inertia is   |              |
|              |              |              | correct.     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| pass_nonline | OT_BOOLEAN   | False        | n/a          | casadi::Ipop |
| ar_variables |              |              |              | tInternal    |
+--------------+--------------+--------------+--------------+--------------+
| pen_des_fact | OT_REAL      | 0.200        | a parameter  | casadi::Ipop |
|              |              |              | used in      | tInternal    |
|              |              |              | penalty      |              |
|              |              |              | parameter    |              |
|              |              |              | computation  |              |
|              |              |              | (for Chen-   |              |
|              |              |              | Goldfarb     |              |
|              |              |              | line         |              |
|              |              |              | search).     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| pen_init_fac | OT_REAL      | 50           | a parameter  | casadi::Ipop |
|              |              |              | used to      | tInternal    |
|              |              |              | choose       |              |
|              |              |              | initial      |              |
|              |              |              | penalty para |              |
|              |              |              | meterswhen   |              |
|              |              |              | the          |              |
|              |              |              | regularized  |              |
|              |              |              | Newton       |              |
|              |              |              | method is    |              |
|              |              |              | used. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| pen_theta_ma | OT_REAL      | 10000        | Determines   | casadi::Ipop |
| x_fact       |              |              | upper bound  | tInternal    |
|              |              |              | for          |              |
|              |              |              | constraint   |              |
|              |              |              | violation in |              |
|              |              |              | the filter.  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| penalty_init | OT_REAL      | 100000       | Maximal      | casadi::Ipop |
| _max         |              |              | value for    | tInternal    |
|              |              |              | the intial   |              |
|              |              |              | penalty      |              |
|              |              |              | parameter    |              |
|              |              |              | (for Chen-   |              |
|              |              |              | Goldfarb     |              |
|              |              |              | line         |              |
|              |              |              | search).     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| penalty_init | OT_REAL      | 1            | Minimal      | casadi::Ipop |
| _min         |              |              | value for    | tInternal    |
|              |              |              | the intial   |              |
|              |              |              | penalty      |              |
|              |              |              | parameter    |              |
|              |              |              | for line     |              |
|              |              |              | search(for   |              |
|              |              |              | Chen-        |              |
|              |              |              | Goldfarb     |              |
|              |              |              | line         |              |
|              |              |              | search).     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| penalty_max  | OT_REAL      | 1.000e+30    | Maximal      | casadi::Ipop |
|              |              |              | value for    | tInternal    |
|              |              |              | the penalty  |              |
|              |              |              | parameter    |              |
|              |              |              | (for Chen-   |              |
|              |              |              | Goldfarb     |              |
|              |              |              | line         |              |
|              |              |              | search).     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| penalty_upda | OT_REAL      | 10           | LIFENG       | casadi::Ipop |
| te_compl_tol |              |              | WRITES THIS. | tInternal    |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| penalty_upda | OT_REAL      | 0.000        | Threshold    | casadi::Ipop |
| te_infeasibi |              |              | for infeasib | tInternal    |
| lity_tol     |              |              | ility in     |              |
|              |              |              | penalty      |              |
|              |              |              | parameter    |              |
|              |              |              | update test. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| perturb_alwa | OT_STRING    | no           | Active       | casadi::Ipop |
| ys_cd        |              |              | permanent    | tInternal    |
|              |              |              | perturbation |              |
|              |              |              | of           |              |
|              |              |              | constraint l |              |
|              |              |              | inearization |              |
|              |              |              | . (see IPOPT |              |
|              |              |              | documentatio |              |
|              |              |              | n)           |              |
+--------------+--------------+--------------+--------------+--------------+
| perturb_dec_ | OT_REAL      | 0.333        | Decrease     | casadi::Ipop |
| fact         |              |              | factor for   | tInternal    |
|              |              |              | x-s perturba |              |
|              |              |              | tion. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| perturb_inc_ | OT_REAL      | 8            | Increase     | casadi::Ipop |
| fact         |              |              | factor for   | tInternal    |
|              |              |              | x-s perturba |              |
|              |              |              | tion. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| perturb_inc_ | OT_REAL      | 100          | Increase     | casadi::Ipop |
| fact_first   |              |              | factor for   | tInternal    |
|              |              |              | x-s          |              |
|              |              |              | perturbation |              |
|              |              |              | for very     |              |
|              |              |              | first pertur |              |
|              |              |              | bation. (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| piecewisepen | OT_REAL      | 0.000        | LIFENG       | casadi::Ipop |
| alty_gamma_i |              |              | WRITES THIS. | tInternal    |
| nfeasi       |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| piecewisepen | OT_REAL      | 0.000        | LIFENG       | casadi::Ipop |
| alty_gamma_o |              |              | WRITES THIS. | tInternal    |
| bj           |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| point_pertur | OT_REAL      | 10           | Maximal      | casadi::Ipop |
| bation_radiu |              |              | perturbation | tInternal    |
| s            |              |              | of an        |              |
|              |              |              | evaluation   |              |
|              |              |              | point. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| print_info_s | OT_STRING    | no           | Enables      | casadi::Ipop |
| tring        |              |              | printing of  | tInternal    |
|              |              |              | additional   |              |
|              |              |              | info string  |              |
|              |              |              | at end of    |              |
|              |              |              | iteration    |              |
|              |              |              | output. (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| print_level  | OT_INTEGER   | 5            | Output       | casadi::Ipop |
|              |              |              | verbosity    | tInternal    |
|              |              |              | level. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| print_option | OT_STRING    | no           | Switch to    | casadi::Ipop |
| s_documentat |              |              | print all    | tInternal    |
| ion          |              |              | algorithmic  |              |
|              |              |              | options.     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| print_option | OT_STRING    | no           | Undocumented | casadi::Ipop |
| s_latex_mode |              |              | (see IPOPT d | tInternal    |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| print_time   | OT_BOOLEAN   | True         | print        | casadi::Ipop |
|              |              |              | information  | tInternal    |
|              |              |              | about        |              |
|              |              |              | execution    |              |
|              |              |              | time         |              |
+--------------+--------------+--------------+--------------+--------------+
| print_timing | OT_STRING    | no           | Switch to    | casadi::Ipop |
| _statistics  |              |              | print timing | tInternal    |
|              |              |              | statistics.  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| print_user_o | OT_STRING    | no           | Print all    | casadi::Ipop |
| ptions       |              |              | options set  | tInternal    |
|              |              |              | by the user. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| quality_func | OT_STRING    | none         | The          | casadi::Ipop |
| tion_balanci |              |              | balancing    | tInternal    |
| ng_term      |              |              | term         |              |
|              |              |              | included in  |              |
|              |              |              | the quality  |              |
|              |              |              | function for |              |
|              |              |              | centrality.  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| quality_func | OT_STRING    | none         | The penalty  | casadi::Ipop |
| tion_central |              |              | term for     | tInternal    |
| ity          |              |              | centrality   |              |
|              |              |              | that is      |              |
|              |              |              | included in  |              |
|              |              |              | quality      |              |
|              |              |              | function.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| quality_func | OT_INTEGER   | 8            | Maximum      | casadi::Ipop |
| tion_max_sec |              |              | number of    | tInternal    |
| tion_steps   |              |              | search steps |              |
|              |              |              | during       |              |
|              |              |              | direct       |              |
|              |              |              | search       |              |
|              |              |              | procedure    |              |
|              |              |              | determining  |              |
|              |              |              | the optimal  |              |
|              |              |              | centering    |              |
|              |              |              | parameter.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| quality_func | OT_STRING    | 2-norm-      | Norm used    | casadi::Ipop |
| tion_norm_ty |              | squared      | for          | tInternal    |
| pe           |              |              | components   |              |
|              |              |              | of the       |              |
|              |              |              | quality      |              |
|              |              |              | function.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| quality_func | OT_REAL      | 0            | Tolerance    | casadi::Ipop |
| tion_section |              |              | for the      | tInternal    |
| _qf_tol      |              |              | golden       |              |
|              |              |              | section      |              |
|              |              |              | search       |              |
|              |              |              | procedure    |              |
|              |              |              | determining  |              |
|              |              |              | the optimal  |              |
|              |              |              | centering    |              |
|              |              |              | parameter    |              |
|              |              |              | (in the      |              |
|              |              |              | function     |              |
|              |              |              | value        |              |
|              |              |              | space). (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| quality_func | OT_REAL      | 0.010        | Tolerance    | casadi::Ipop |
| tion_section |              |              | for the      | tInternal    |
| _sigma_tol   |              |              | section      |              |
|              |              |              | search       |              |
|              |              |              | procedure    |              |
|              |              |              | determining  |              |
|              |              |              | the optimal  |              |
|              |              |              | centering    |              |
|              |              |              | parameter    |              |
|              |              |              | (in sigma    |              |
|              |              |              | space). (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| recalc_y     | OT_STRING    | no           | Tells the    | casadi::Ipop |
|              |              |              | algorithm to | tInternal    |
|              |              |              | recalculate  |              |
|              |              |              | the equality |              |
|              |              |              | and          |              |
|              |              |              | inequality   |              |
|              |              |              | multipliers  |              |
|              |              |              | as least     |              |
|              |              |              | square       |              |
|              |              |              | estimates.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| recalc_y_fea | OT_REAL      | 0.000        | Feasibility  | casadi::Ipop |
| s_tol        |              |              | threshold    | tInternal    |
|              |              |              | for recomput |              |
|              |              |              | ation of     |              |
|              |              |              | multipliers. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | True         | Throw        | casadi::Ipop |
| heck         |              |              | exceptions   | tInternal    |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| replace_boun | OT_STRING    | no           | Indicates if | casadi::Ipop |
| ds           |              |              | all variable | tInternal    |
|              |              |              | bounds       |              |
|              |              |              | should be    |              |
|              |              |              | replaced by  |              |
|              |              |              | inequality   |              |
|              |              |              | constraints  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| required_inf | OT_REAL      | 0.900        | Required     | casadi::Ipop |
| easibility_r |              |              | reduction of | tInternal    |
| eduction     |              |              | infeasibilit |              |
|              |              |              | y before     |              |
|              |              |              | leaving      |              |
|              |              |              | restoration  |              |
|              |              |              | phase. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| residual_imp | OT_REAL      | 1.000        | Minimal      | casadi::Ipop |
| rovement_fac |              |              | required     | tInternal    |
| tor          |              |              | reduction of |              |
|              |              |              | residual     |              |
|              |              |              | test ratio   |              |
|              |              |              | in iterative |              |
|              |              |              | refinement.  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| residual_rat | OT_REAL      | 0.000        | Iterative    | casadi::Ipop |
| io_max       |              |              | refinement   | tInternal    |
|              |              |              | tolerance    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| residual_rat | OT_REAL      | 0.000        | Threshold    | casadi::Ipop |
| io_singular  |              |              | for          | tInternal    |
|              |              |              | declaring    |              |
|              |              |              | linear       |              |
|              |              |              | system       |              |
|              |              |              | singular     |              |
|              |              |              | after failed |              |
|              |              |              | iterative    |              |
|              |              |              | refinement.  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| resto_failur | OT_REAL      | 0            | Threshold    | casadi::Ipop |
| e_feasibilit |              |              | for primal i | tInternal    |
| y_threshold  |              |              | nfeasibility |              |
|              |              |              | to declare   |              |
|              |              |              | failure of   |              |
|              |              |              | restoration  |              |
|              |              |              | phase. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| resto_penalt | OT_REAL      | 1000         | Penalty      | casadi::Ipop |
| y_parameter  |              |              | parameter in | tInternal    |
|              |              |              | the          |              |
|              |              |              | restoration  |              |
|              |              |              | phase        |              |
|              |              |              | objective    |              |
|              |              |              | function.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| resto_proxim | OT_REAL      | 1            | Weighting    | casadi::Ipop |
| ity_weight   |              |              | factor for   | tInternal    |
|              |              |              | the          |              |
|              |              |              | proximity    |              |
|              |              |              | term in      |              |
|              |              |              | restoration  |              |
|              |              |              | phase        |              |
|              |              |              | objective.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| rho          | OT_REAL      | 0.100        | Value in     | casadi::Ipop |
|              |              |              | penalty      | tInternal    |
|              |              |              | parameter    |              |
|              |              |              | update       |              |
|              |              |              | formula.     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| s_max        | OT_REAL      | 100          | Scaling      | casadi::Ipop |
|              |              |              | threshold    | tInternal    |
|              |              |              | for the NLP  |              |
|              |              |              | error. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| s_phi        | OT_REAL      | 2.300        | Exponent for | casadi::Ipop |
|              |              |              | linear       | tInternal    |
|              |              |              | barrier      |              |
|              |              |              | function     |              |
|              |              |              | model in the |              |
|              |              |              | switching    |              |
|              |              |              | rule. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| s_theta      | OT_REAL      | 1.100        | Exponent for | casadi::Ipop |
|              |              |              | current      | tInternal    |
|              |              |              | constraint   |              |
|              |              |              | violation in |              |
|              |              |              | the          |              |
|              |              |              | switching    |              |
|              |              |              | rule. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| sb           | OT_STRING    | no           | (see IPOPT d | casadi::Ipop |
|              |              |              | ocumentation | tInternal    |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| sigma_max    | OT_REAL      | 100          | Maximum      | casadi::Ipop |
|              |              |              | value of the | tInternal    |
|              |              |              | centering    |              |
|              |              |              | parameter.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| sigma_min    | OT_REAL      | 0.000        | Minimum      | casadi::Ipop |
|              |              |              | value of the | tInternal    |
|              |              |              | centering    |              |
|              |              |              | parameter.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| skip_corr_if | OT_STRING    | yes          | Skip the     | casadi::Ipop |
| _neg_curv    |              |              | corrector    | tInternal    |
|              |              |              | step in      |              |
|              |              |              | negative     |              |
|              |              |              | curvature    |              |
|              |              |              | iteration (u |              |
|              |              |              | nsupported!) |              |
|              |              |              | . (see IPOPT |              |
|              |              |              | documentatio |              |
|              |              |              | n)           |              |
+--------------+--------------+--------------+--------------+--------------+
| skip_corr_in | OT_STRING    | yes          | Skip the     | casadi::Ipop |
| _monotone_mo |              |              | corrector    | tInternal    |
| de           |              |              | step during  |              |
|              |              |              | monotone     |              |
|              |              |              | barrier      |              |
|              |              |              | parameter    |              |
|              |              |              | mode (unsupp |              |
|              |              |              | orted!).     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| skip_finaliz | OT_STRING    | no           | Indicates if | casadi::Ipop |
| e_solution_c |              |              | call to NLP: | tInternal    |
| all          |              |              | :FinalizeSol |              |
|              |              |              | ution after  |              |
|              |              |              | optimization |              |
|              |              |              | should be    |              |
|              |              |              | suppressed   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| slack_bound_ | OT_REAL      | 0.010        | Desired      | casadi::Ipop |
| frac         |              |              | minimum      | tInternal    |
|              |              |              | relative     |              |
|              |              |              | distance     |              |
|              |              |              | from the     |              |
|              |              |              | initial      |              |
|              |              |              | slack to     |              |
|              |              |              | bound. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| slack_bound_ | OT_REAL      | 0.010        | Desired      | casadi::Ipop |
| push         |              |              | minimum      | tInternal    |
|              |              |              | absolute     |              |
|              |              |              | distance     |              |
|              |              |              | from the     |              |
|              |              |              | initial      |              |
|              |              |              | slack to     |              |
|              |              |              | bound. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| slack_move   | OT_REAL      | 0.000        | Correction   | casadi::Ipop |
|              |              |              | size for     | tInternal    |
|              |              |              | very small   |              |
|              |              |              | slacks. (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| soft_resto_p | OT_REAL      | 1.000        | Required     | casadi::Ipop |
| derror_reduc |              |              | reduction in | tInternal    |
| tion_factor  |              |              | primal-dual  |              |
|              |              |              | error in the |              |
|              |              |              | soft         |              |
|              |              |              | restoration  |              |
|              |              |              | phase. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| start_with_r | OT_STRING    | no           | Tells        | casadi::Ipop |
| esto         |              |              | algorithm to | tInternal    |
|              |              |              | switch to    |              |
|              |              |              | restoration  |              |
|              |              |              | phase in     |              |
|              |              |              | first        |              |
|              |              |              | iteration.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| suppress_all | OT_STRING    | no           | Undocumented | casadi::Ipop |
| _output      |              |              | (see IPOPT d | tInternal    |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| tau_min      | OT_REAL      | 0.990        | Lower bound  | casadi::Ipop |
|              |              |              | on fraction- | tInternal    |
|              |              |              | to-the-      |              |
|              |              |              | boundary     |              |
|              |              |              | parameter    |              |
|              |              |              | tau. (see    |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| theta_max_fa | OT_REAL      | 10000        | Determines   | casadi::Ipop |
| ct           |              |              | upper bound  | tInternal    |
|              |              |              | for          |              |
|              |              |              | constraint   |              |
|              |              |              | violation in |              |
|              |              |              | the filter.  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| theta_min    | OT_REAL      | 0.000        | LIFENG       | casadi::Ipop |
|              |              |              | WRITES THIS. | tInternal    |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| theta_min_fa | OT_REAL      | 0.000        | Determines   | casadi::Ipop |
| ct           |              |              | constraint   | tInternal    |
|              |              |              | violation    |              |
|              |              |              | threshold in |              |
|              |              |              | the          |              |
|              |              |              | switching    |              |
|              |              |              | rule. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| tiny_step_to | OT_REAL      | 0.000        | Tolerance    | casadi::Ipop |
| l            |              |              | for          | tInternal    |
|              |              |              | detecting    |              |
|              |              |              | numerically  |              |
|              |              |              | insignifican |              |
|              |              |              | t steps.     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| tiny_step_y_ | OT_REAL      | 0.010        | Tolerance    | casadi::Ipop |
| tol          |              |              | for quitting | tInternal    |
|              |              |              | because of   |              |
|              |              |              | numerically  |              |
|              |              |              | insignifican |              |
|              |              |              | t steps.     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| tol          | OT_REAL      | 0.000        | Desired      | casadi::Ipop |
|              |              |              | convergence  | tInternal    |
|              |              |              | tolerance    |              |
|              |              |              | (relative).  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| var_integer_ | OT_DICTIONAR | None         | Integer      | casadi::Ipop |
| md           | Y            |              | metadata (a  | tInternal    |
|              |              |              | dictionary   |              |
|              |              |              | with lists   |              |
|              |              |              | of integers) |              |
|              |              |              | about        |              |
|              |              |              | variables to |              |
|              |              |              | be passed to |              |
|              |              |              | IPOPT        |              |
+--------------+--------------+--------------+--------------+--------------+
| var_numeric_ | OT_DICTIONAR | None         | Numeric      | casadi::Ipop |
| md           | Y            |              | metadata (a  | tInternal    |
|              |              |              | dictionary   |              |
|              |              |              | with lists   |              |
|              |              |              | of reals)    |              |
|              |              |              | about        |              |
|              |              |              | variables to |              |
|              |              |              | be passed to |              |
|              |              |              | IPOPT        |              |
+--------------+--------------+--------------+--------------+--------------+
| var_string_m | OT_DICTIONAR | None         | String       | casadi::Ipop |
| d            | Y            |              | metadata (a  | tInternal    |
|              |              |              | dictionary   |              |
|              |              |              | with lists   |              |
|              |              |              | of strings)  |              |
|              |              |              | about        |              |
|              |              |              | variables to |              |
|              |              |              | be passed to |              |
|              |              |              | IPOPT        |              |
+--------------+--------------+--------------+--------------+--------------+
| vartheta     | OT_REAL      | 0.500        | a parameter  | casadi::Ipop |
|              |              |              | used to      | tInternal    |
|              |              |              | check if the |              |
|              |              |              | fast         |              |
|              |              |              | direction    |              |
|              |              |              | can be used  |              |
|              |              |              | asthe line   |              |
|              |              |              | search       |              |
|              |              |              | direction    |              |
|              |              |              | (for Chen-   |              |
|              |              |              | Goldfarb     |              |
|              |              |              | line         |              |
|              |              |              | search).     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | False        | Verbose      | casadi::Ipop |
|              |              |              | evaluation   | tInternal    |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+
| warm_start_b | OT_REAL      | 0.001        | same as      | casadi::Ipop |
| ound_frac    |              |              | bound_frac   | tInternal    |
|              |              |              | for the      |              |
|              |              |              | regular      |              |
|              |              |              | initializer. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| warm_start_b | OT_REAL      | 0.001        | same as      | casadi::Ipop |
| ound_push    |              |              | bound_push   | tInternal    |
|              |              |              | for the      |              |
|              |              |              | regular      |              |
|              |              |              | initializer. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| warm_start_e | OT_STRING    | no           | Tells        | casadi::Ipop |
| ntire_iterat |              |              | algorithm    | tInternal    |
| e            |              |              | whether to   |              |
|              |              |              | use the GetW |              |
|              |              |              | armStartIter |              |
|              |              |              | ate method   |              |
|              |              |              | in the NLP.  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| warm_start_i | OT_STRING    | no           | Warm-start   | casadi::Ipop |
| nit_point    |              |              | for initial  | tInternal    |
|              |              |              | point (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| warm_start_m | OT_REAL      | 0.001        | same as mult | casadi::Ipop |
| ult_bound_pu |              |              | _bound_push  | tInternal    |
| sh           |              |              | for the      |              |
|              |              |              | regular      |              |
|              |              |              | initializer. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| warm_start_m | OT_REAL      | 1000000      | Maximum      | casadi::Ipop |
| ult_init_max |              |              | initial      | tInternal    |
|              |              |              | value for    |              |
|              |              |              | the equality |              |
|              |              |              | multipliers. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| warm_start_s | OT_STRING    | no           | Indicates    | casadi::Ipop |
| ame_structur |              |              | whether a    | tInternal    |
| e            |              |              | problem with |              |
|              |              |              | a structure  |              |
|              |              |              | identical to |              |
|              |              |              | the previous |              |
|              |              |              | one is to be |              |
|              |              |              | solved. (see |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| warm_start_s | OT_REAL      | 0.001        | same as slac | casadi::Ipop |
| lack_bound_f |              |              | k_bound_frac | tInternal    |
| rac          |              |              | for the      |              |
|              |              |              | regular      |              |
|              |              |              | initializer. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| warm_start_s | OT_REAL      | 0.001        | same as slac | casadi::Ipop |
| lack_bound_p |              |              | k_bound_push | tInternal    |
| ush          |              |              | for the      |              |
|              |              |              | regular      |              |
|              |              |              | initializer. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| warm_start_t | OT_REAL      | 0            | Unsupported! | casadi::Ipop |
| arget_mu     |              |              | (see IPOPT d | tInternal    |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| warn_initial | OT_BOOLEAN   | False        | Warn if the  | casadi::Ipop |
| _bounds      |              |              | initial      | tInternal    |
|              |              |              | guess does   |              |
|              |              |              | not satisfy  |              |
|              |              |              | LBX and UBX  |              |
+--------------+--------------+--------------+--------------+--------------+
| watchdog_sho | OT_INTEGER   | 10           | Number of    | casadi::Ipop |
| rtened_iter_ |              |              | shortened    | tInternal    |
| trigger      |              |              | iterations   |              |
|              |              |              | that trigger |              |
|              |              |              | the          |              |
|              |              |              | watchdog.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| watchdog_tri | OT_INTEGER   | 3            | Maximum      | casadi::Ipop |
| al_iter_max  |              |              | number of    | tInternal    |
|              |              |              | watchdog     |              |
|              |              |              | iterations.  |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| wsmp_inexact | OT_REAL      | 0            | Drop         | casadi::Ipop |
| _droptol     |              |              | tolerance    | tInternal    |
|              |              |              | for inexact  |              |
|              |              |              | factorizatio |              |
|              |              |              | n preconditi |              |
|              |              |              | oner in      |              |
|              |              |              | WISMP. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| wsmp_inexact | OT_REAL      | 0            | Fill-in      | casadi::Ipop |
| _fillin_limi |              |              | limit for    | tInternal    |
| t            |              |              | inexact fact |              |
|              |              |              | orization pr |              |
|              |              |              | econditioner |              |
|              |              |              | in WISMP.    |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| wsmp_iterati | OT_STRING    | no           | Switches to  | casadi::Ipop |
| ve           |              |              | iterative    | tInternal    |
|              |              |              | solver in    |              |
|              |              |              | WSMP. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| wsmp_max_ite | OT_INTEGER   | 1000         | Maximal      | casadi::Ipop |
| r            |              |              | number of    | tInternal    |
|              |              |              | iterations   |              |
|              |              |              | in iterative |              |
|              |              |              | WISMP (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| wsmp_no_pivo | OT_STRING    | no           | Use the      | casadi::Ipop |
| ting         |              |              | static       | tInternal    |
|              |              |              | pivoting     |              |
|              |              |              | option of    |              |
|              |              |              | WSMP. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| wsmp_num_thr | OT_INTEGER   | 1            | Number of    | casadi::Ipop |
| eads         |              |              | threads to   | tInternal    |
|              |              |              | be used in   |              |
|              |              |              | WSMP (see    |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| wsmp_orderin | OT_INTEGER   | 1            | Determines   | casadi::Ipop |
| g_option     |              |              | how ordering | tInternal    |
|              |              |              | is done in   |              |
|              |              |              | WSMP         |              |
|              |              |              | (IPARM(16)   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| wsmp_orderin | OT_INTEGER   | 1            | Determines   | casadi::Ipop |
| g_option2    |              |              | how ordering | tInternal    |
|              |              |              | is done in   |              |
|              |              |              | WSMP         |              |
|              |              |              | (IPARM(20)   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| wsmp_pivtol  | OT_REAL      | 0.000        | Pivot        | casadi::Ipop |
|              |              |              | tolerance    | tInternal    |
|              |              |              | for the      |              |
|              |              |              | linear       |              |
|              |              |              | solver WSMP. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| wsmp_pivtolm | OT_REAL      | 0.100        | Maximum      | casadi::Ipop |
| ax           |              |              | pivot        | tInternal    |
|              |              |              | tolerance    |              |
|              |              |              | for the      |              |
|              |              |              | linear       |              |
|              |              |              | solver WSMP. |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| wsmp_scaling | OT_INTEGER   | 0            | Determines   | casadi::Ipop |
|              |              |              | how the      | tInternal    |
|              |              |              | matrix is    |              |
|              |              |              | scaled by    |              |
|              |              |              | WSMP. (see   |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+
| wsmp_singula | OT_REAL      | 0.000        | WSMP's       | casadi::Ipop |
| rity_thresho |              |              | singularity  | tInternal    |
| ld           |              |              | threshold.   |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| wsmp_skip_in | OT_STRING    | no           | Always       | casadi::Ipop |
| ertia_check  |              |              | pretent      | tInternal    |
|              |              |              | inertia is   |              |
|              |              |              | correct.     |              |
|              |              |              | (see IPOPT d |              |
|              |              |              | ocumentation |              |
|              |              |              | )            |              |
+--------------+--------------+--------------+--------------+--------------+
| wsmp_write_m | OT_INTEGER   | -1           | Iteration in | casadi::Ipop |
| atrix_iterat |              |              | which the    | tInternal    |
| ion          |              |              | matrices are |              |
|              |              |              | written to   |              |
|              |              |              | files. (see  |              |
|              |              |              | IPOPT docume |              |
|              |              |              | ntation)     |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available stats
+--------------------+-----------------------+
|         Id         |        Used in        |
+====================+=======================+
| con_integer_md     | casadi::IpoptInternal |
+--------------------+-----------------------+
| con_numeric_md     | casadi::IpoptInternal |
+--------------------+-----------------------+
| con_string_md      | casadi::IpoptInternal |
+--------------------+-----------------------+
| iter_count         | casadi::IpoptInternal |
+--------------------+-----------------------+
| iteration          | casadi::IpoptInternal |
+--------------------+-----------------------+
| iterations         | casadi::IpoptInternal |
+--------------------+-----------------------+
| n_eval_f           | casadi::IpoptInternal |
+--------------------+-----------------------+
| n_eval_g           | casadi::IpoptInternal |
+--------------------+-----------------------+
| n_eval_grad_f      | casadi::IpoptInternal |
+--------------------+-----------------------+
| n_eval_h           | casadi::IpoptInternal |
+--------------------+-----------------------+
| n_eval_jac_g       | casadi::IpoptInternal |
+--------------------+-----------------------+
| return_status      | casadi::IpoptInternal |
+--------------------+-----------------------+
| t_callback_fun     | casadi::IpoptInternal |
+--------------------+-----------------------+
| t_callback_prepare | casadi::IpoptInternal |
+--------------------+-----------------------+
| t_eval_f           | casadi::IpoptInternal |
+--------------------+-----------------------+
| t_eval_g           | casadi::IpoptInternal |
+--------------------+-----------------------+
| t_eval_grad_f      | casadi::IpoptInternal |
+--------------------+-----------------------+
| t_eval_h           | casadi::IpoptInternal |
+--------------------+-----------------------+
| t_eval_jac_g       | casadi::IpoptInternal |
+--------------------+-----------------------+
| t_mainloop         | casadi::IpoptInternal |
+--------------------+-----------------------+
| var_integer_md     | casadi::IpoptInternal |
+--------------------+-----------------------+
| var_numeric_md     | casadi::IpoptInternal |
+--------------------+-----------------------+
| var_string_md      | casadi::IpoptInternal |
+--------------------+-----------------------+

Diagrams

C++ includes: ipopt_solver.hpp ";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")  casadi::NLPSolver::gradF() "

Access the objective gradient function>Input scheme: casadi::GradFInput
(GRADF_NUM_IN = 3) [gradFIn] +-----------+-------+---------------------+ |
Full name | Short |     Description     |
+===========+=======+=====================+ | GRADF_X   | x     | Decision
variable . | +-----------+-------+---------------------+ | GRADF_P   | p
| Fixed parameter .   | +-----------+-------+---------------------+

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::NLPSolver::setQPOptions() "

Set options that make the NLP solver more suitable for solving QPs.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") casadi::IpoptSolver::IpoptSolver() "

Default constructor.

";

%feature("docstring") casadi::IpoptSolver::IpoptSolver(const Function &nlp)
"

Create an NLP solver instance.

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::NLPSolver::getReportConstraints() "";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::IpoptSolver::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::IpoptSolver::getReducedHessian() "

Get the reduced Hessian. Requires a patched sIPOPT installation, see CasADi
documentation.

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::NLPSolver::jacG() "

Access the Jacobian of the constraint function.

>Input scheme: casadi::HessLagInput (HESSLAG_NUM_IN = 5) [hessLagIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| HESSLAG_X              | x                      | Decision variable .    |
+------------------------+------------------------+------------------------+
| HESSLAG_P              | p                      | Fixed parameter .      |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_F          | lam_f                  | Multiplier for f. Just |
|                        |                        | a scalar factor for    |
|                        |                        | the objective that the |
|                        |                        | NLP solver might use   |
|                        |                        | to scale the           |
|                        |                        | objective.             |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_G          | lam_g                  | Multiplier for g .     |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::HessLagOutput (HESSLAG_NUM_OUT = 6) [hessLagOut]
+----------------+--------+------------------------------------------------+
|   Full name    | Short  |                  Description                   |
+================+========+================================================+
| HESSLAG_HESS   | hess   | Hessian of the Lagrangian .                    |
+----------------+--------+------------------------------------------------+
| HESSLAG_F      | f      | Objective function .                           |
+----------------+--------+------------------------------------------------+
| HESSLAG_G      | g      | Constraint function .                          |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_X | grad_x | Gradient of the Lagrangian with respect to x . |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_P | grad_p | Gradient of the Lagrangian with respect to p . |
+----------------+--------+------------------------------------------------+

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";


// File: classcasadi_1_1IpoptUserClass.xml
%feature("docstring")  casadi::IpoptUserClass::get_starting_point(Index n,
bool init_x, Number *x, bool init_z, Number *z_L, Number *z_U, Index m, bool
init_lambda, Number *lambda) " [INTERNAL]  Method to return the starting
point for the algorithm

";

%feature("docstring")
casadi::IpoptUserClass::finalize_solution(SolverReturn status, Index n,
const Number *x, const Number *z_L, const Number *z_U, Index m, const Number
*g, const Number *lambda, Number obj_value, const IpoptData *ip_data,
IpoptCalculatedQuantities *ip_cq) " [INTERNAL]  This method is called when
the algorithm is complete so the TNLP can store/write the solution

";

%feature("docstring") casadi::IpoptUserClass "[INTERNAL] C++ includes:
ipopt_nlp.hpp ";

%feature("docstring")
casadi::IpoptUserClass::get_list_of_nonlinear_variables(Index
num_nonlin_vars, Index *pos_nonlin_vars) " [INTERNAL]  Specify which
variables that appear in the Hessian

";

%feature("docstring")  casadi::IpoptUserClass::eval_grad_f(Index n, const
Number *x, bool new_x, Number *grad_f) " [INTERNAL]  Method to return the
gradient of the objective

";

%feature("docstring")  casadi::IpoptUserClass::get_var_con_metadata(Index n,
StringMetaDataMapType &var_string_md, IntegerMetaDataMapType
&var_integer_md, NumericMetaDataMapType &var_numeric_md, Index m,
StringMetaDataMapType &con_string_md, IntegerMetaDataMapType
&con_integer_md, NumericMetaDataMapType &con_numeric_md) " [INTERNAL]
Allows setting information about variables and constraints

";

%feature("docstring") casadi::IpoptUserClass::~IpoptUserClass "[INTERNAL]
";

%feature("docstring")  casadi::IpoptUserClass::eval_g(Index n, const Number
*x, bool new_x, Index m, Number *g) " [INTERNAL]  Method to return the
constraint residuals

";

%feature("docstring")  casadi::IpoptUserClass::get_nlp_info(Index &n, Index
&m, Index &nnz_jac_g, Index &nnz_h_lag, IndexStyleEnum &index_style) "
[INTERNAL]  Method to return some info about the nlp

";

%feature("docstring")  casadi::IpoptUserClass::eval_f(Index n, const Number
*x, bool new_x, Number &obj_value) " [INTERNAL]  Method to return the
objective value

";

%feature("docstring")
casadi::IpoptUserClass::get_number_of_nonlinear_variables() "[INTERNAL]
Specify the number of variables that appear in the Hessian

";

%feature("docstring")  casadi::IpoptUserClass::eval_jac_g(Index n, const
Number *x, bool new_x, Index m, Index nele_jac, Index *iRow, Index *jCol,
Number *values) " [INTERNAL]  Method to return: 1) The structure of the
Jacobian (if \"values\" is NULL) 2) The values of the Jacobian (if
\"values\" is not NULL)

";

%feature("docstring")  casadi::IpoptUserClass::finalize_metadata(Index n,
const StringMetaDataMapType &var_string_md, const IntegerMetaDataMapType
&var_integer_md, const NumericMetaDataMapType &var_numeric_md, Index m,
const StringMetaDataMapType &con_string_md, const IntegerMetaDataMapType
&con_integer_md, const NumericMetaDataMapType &con_numeric_md) " [INTERNAL]
Retrieve information about variables and constraints

";

%feature("docstring")  casadi::IpoptUserClass::get_bounds_info(Index n,
Number *x_l, Number *x_u, Index m, Number *g_l, Number *g_u) " [INTERNAL]
Method to return the bounds for my problem

";

%feature("docstring")  casadi::IpoptUserClass::eval_h(Index n, const Number
*x, bool new_x, Number obj_factor, Index m, const Number *lambda, bool
new_lambda, Index nele_hess, Index *iRow, Index *jCol, Number *values) "
[INTERNAL]  Method to return: 1) The structure of the hessian of the
Lagrangian (if \"values\" is NULL) 2) The values of the hessian of the
Lagrangian (if \"values\" is not NULL)

";

%feature("docstring")
casadi::IpoptUserClass::intermediate_callback(AlgorithmMode mode, Index
iter, Number obj_value, Number inf_pr, Number inf_du, Number mu, Number
d_norm, Number regularization_size, Number alpha_du, Number alpha_pr, Index
ls_trials, const IpoptData *ip_data, IpoptCalculatedQuantities *ip_cq) "
[INTERNAL]  This method is called at every iteration

Code copied from TNLPAdapter::FinalizeSolution See also:http://list.coin-
or.org/pipermail/ipopt/2010-July/002078.html ";

%feature("docstring") casadi::IpoptUserClass::IpoptUserClass(IpoptInternal
*ipoptInterface) " [INTERNAL] ";


// File: classcasadi_1_1JacGInputIOSchemeVector.xml
%feature("docstring") casadi::JacGInputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring")  casadi::IOSchemeVector< M  >::print(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::IOSchemeVector< M  >::repr(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a representation of the object.

";

%feature("docstring") casadi::JacGInputIOSchemeVector< M
>::JacGInputIOSchemeVector(const std::vector< M > &t) " [INTERNAL] ";

%feature("docstring") casadi::JacGInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::JacGInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "
[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::JacGInputIOSchemeVector "[INTERNAL]  Helper
function for 'JacGInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "
[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::IOSchemeVector< M  >::vector() const "
[INTERNAL] ";


// File: classcasadi_1_1JacGOutputIOSchemeVector.xml
%feature("docstring")  casadi::IOSchemeVector< M  >::print(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a description of the object.

";

%feature("docstring") casadi::JacGOutputIOSchemeVector "[INTERNAL]  Helper
function for 'JacGOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "
[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "
[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::IOSchemeVector< M  >::vector() const "
[INTERNAL] ";

%feature("docstring") casadi::JacGOutputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring")  casadi::IOSchemeVector< M  >::repr(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a representation of the object.

";

%feature("docstring") casadi::JacGOutputIOSchemeVector< M
>::JacGOutputIOSchemeVector(const std::vector< M > &t) " [INTERNAL] ";

%feature("docstring") casadi::JacGOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::JacGOutputIOSchemeVector::__getitem__ "[INTERNAL] ";


// File: classcasadi_1_1KinsolSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::Function::generateCode(const std::string &filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::KinsolSolver::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::ImplicitFunction::getF() "

Access F.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::KinsolSolver::KinsolSolver() "

Default constructor.

";

%feature("docstring") casadi::KinsolSolver::KinsolSolver(const Function &f,
const Function &jac=Function(), const LinearSolver &linsol=LinearSolver()) "

Create an KINSOL instance.

Parameters:
-----------

f:   Function mapping from (n+1) inputs to 1 output

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring") casadi::KinsolSolver "

Kinsol solver class.

The equation:

F(z, x1, x2, ..., xn) == 0

where d_F/dz is invertible, implicitly defines the equation:

z := G(x1, x2, ..., xn)

F should be an Function mapping from (n+1) inputs to m outputs. The first
output is the residual that should be zero.

ImplicitFunction (G) is an Function mapping from n inputs to m outputs. n
may be zero. The first output is the solved for z.

You can provide an initial guess for z by setting output(0) of
ImplicitFunction. You can provide an initial guess by setting output(0).  A
good initial guess may be needed to avoid errors like \"The linear solver's
setup function failed in an unrecoverable manner.\"

The constraints option expects an integer entry for each variable u:  0 then
no constraint is imposed on ui. 1 then ui will be constrained to be ui >=
0.0. 1 then ui will be constrained to be ui <= 0.0. 2 then ui will be
constrained to be ui > 0.0. 2 then ui will be constrained to be ui < 0.0.

See:   ImplicitFunction for more information

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| abstol       | OT_REAL      | 0.000        | Stopping     | casadi::Kins |
|              |              |              | criterion    | olInternal   |
|              |              |              | tolerance    |              |
+--------------+--------------+--------------+--------------+--------------+
| constraints  | OT_INTEGERVE | GenericType( | 1: ui >=     | casadi::Impl |
|              | CTOR         | )            | 0.0, -1: ui  | icitFunction |
|              |              |              | <= 0.0, 2:   | Internal     |
|              |              |              | ui > 0.0,    |              |
|              |              |              | -2: ui <     |              |
|              |              |              | 0.0.         |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| exact_jacobi | OT_BOOLEAN   | true         |              | casadi::Kins |
| an           |              |              |              | olInternal   |
+--------------+--------------+--------------+--------------+--------------+
| f_scale      | OT_REALVECTO |              |              | casadi::Kins |
|              | R            |              |              | olInternal   |
+--------------+--------------+--------------+--------------+--------------+
| iterative_so | OT_STRING    | \"gmres\"      | gmres|bcgsta | casadi::Kins |
| lver         |              |              | b|tfqmr      | olInternal   |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_STRING    | \"dense\"      | dense|banded | casadi::Kins |
| r_type       |              |              | |iterative|u | olInternal   |
|              |              |              | ser_defined  |              |
+--------------+--------------+--------------+--------------+--------------+
| lower_bandwi | OT_INTEGER   |              |              | casadi::Kins |
| dth          |              |              |              | olInternal   |
+--------------+--------------+--------------+--------------+--------------+
| max_krylov   | OT_INTEGER   | 0            |              | casadi::Kins |
|              |              |              |              | olInternal   |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | (eval_f|eval | casadi::Kins |
|              | TOR          | )            | _djac)       | olInternal   |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| parallelizat | OT_STRING    | GenericType( | Passed on to | casadi::Impl |
| ion          |              | )            | casadi::Para | icitFunction |
|              |              |              | llelizer     | Internal     |
+--------------+--------------+--------------+--------------+--------------+
| pretype      | OT_STRING    | \"none\"       | (none|left|r | casadi::Kins |
|              |              |              | ight|both)   | olInternal   |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| u_scale      | OT_REALVECTO |              |              | casadi::Kins |
|              | R            |              |              | olInternal   |
+--------------+--------------+--------------+--------------+--------------+
| upper_bandwi | OT_INTEGER   |              |              | casadi::Kins |
| dth          |              |              |              | olInternal   |
+--------------+--------------+--------------+--------------+--------------+
| use_precondi | OT_BOOLEAN   | false        | precondition | casadi::Kins |
| tioner       |              |              | an iterative | olInternal   |
|              |              |              | solver       |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available monitors
+-----------+------------------------+
|    Id     |        Used in         |
+===========+========================+
| F         | casadi::KinsolInternal |
+-----------+------------------------+
| J         | casadi::KinsolInternal |
+-----------+------------------------+
| eval_djac | casadi::KinsolInternal |
+-----------+------------------------+
| eval_f    | casadi::KinsolInternal |
+-----------+------------------------+
| normF     | casadi::KinsolInternal |
+-----------+------------------------+
| step      | casadi::KinsolInternal |
+-----------+------------------------+
| stepsize  | casadi::KinsolInternal |
+-----------+------------------------+

Diagrams

C++ includes: kinsol_solver.hpp ";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::ImplicitFunction::getLinsol() "

Access linear solver.

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::ImplicitFunction::getJac() "

Access Jacobian.

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";


// File: classcasadi_1_1KnitroSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::KnitroSolver::KnitroSolver() "

Default constructor.

";

%feature("docstring") casadi::KnitroSolver::KnitroSolver(const Function
&nlp) "

Create an NLP solver instance.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::KnitroSolver::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::NLPSolver::jacG() "

Access the Jacobian of the constraint function.

>Input scheme: casadi::HessLagInput (HESSLAG_NUM_IN = 5) [hessLagIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| HESSLAG_X              | x                      | Decision variable .    |
+------------------------+------------------------+------------------------+
| HESSLAG_P              | p                      | Fixed parameter .      |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_F          | lam_f                  | Multiplier for f. Just |
|                        |                        | a scalar factor for    |
|                        |                        | the objective that the |
|                        |                        | NLP solver might use   |
|                        |                        | to scale the           |
|                        |                        | objective.             |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_G          | lam_g                  | Multiplier for g .     |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::HessLagOutput (HESSLAG_NUM_OUT = 6) [hessLagOut]
+----------------+--------+------------------------------------------------+
|   Full name    | Short  |                  Description                   |
+================+========+================================================+
| HESSLAG_HESS   | hess   | Hessian of the Lagrangian .                    |
+----------------+--------+------------------------------------------------+
| HESSLAG_F      | f      | Objective function .                           |
+----------------+--------+------------------------------------------------+
| HESSLAG_G      | g      | Constraint function .                          |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_X | grad_x | Gradient of the Lagrangian with respect to x . |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_P | grad_p | Gradient of the Lagrangian with respect to p . |
+----------------+--------+------------------------------------------------+

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::KnitroSolver::setStringParam(const
std::string &name, const std::string &val) "

Set KNITRO string parameters.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring") casadi::KnitroSolver "

Interface to the Knitro NLP solver.

Solves the following parametric nonlinear program (NLP):min          F(x,p)
x  subject to             LBX <=   x    <= UBX LBG <= G(x,p) <= UBG
p  == P      nx: number of decision variables     ng: number of constraints
np: number of parameters

>Input scheme: casadi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| BarRule      | OT_INTEGER   | 0            | Barrier Rule | casadi::Knit |
|              |              |              |              | roInternal   |
+--------------+--------------+--------------+--------------+--------------+
| Debug        | OT_INTEGER   | 0            | Debug level  | casadi::Knit |
|              |              |              |              | roInternal   |
+--------------+--------------+--------------+--------------+--------------+
| Delta        | OT_REAL      | 1            | Initial      | casadi::Knit |
|              |              |              | region       | roInternal   |
|              |              |              | scaling      |              |
|              |              |              | factor       |              |
+--------------+--------------+--------------+--------------+--------------+
| FeasModeTol  | OT_REAL      | 0.000        | Feasible     | casadi::Knit |
|              |              |              | mode         | roInternal   |
|              |              |              | tolerance    |              |
+--------------+--------------+--------------+--------------+--------------+
| FeasTol      | OT_REAL      | 0.000        | Feasible     | casadi::Knit |
|              |              |              | tolerance    | roInternal   |
+--------------+--------------+--------------+--------------+--------------+
| FeasTolAbs   | OT_REAL      | 1            | Absolute     | casadi::Knit |
|              |              |              | feasible     | roInternal   |
|              |              |              | tolerance    |              |
+--------------+--------------+--------------+--------------+--------------+
| Feasible     | OT_BOOLEAN   | 0            | Allow        | casadi::Knit |
|              |              |              | infeasible   | roInternal   |
|              |              |              | iterations   |              |
+--------------+--------------+--------------+--------------+--------------+
| GradOpt      | OT_INTEGER   | 1            | Gradient     | casadi::Knit |
|              |              |              | calculation  | roInternal   |
|              |              |              | method       |              |
+--------------+--------------+--------------+--------------+--------------+
| HessOpt      | OT_INTEGER   | 1            | Hessian      | casadi::Knit |
|              |              |              | calculation  | roInternal   |
|              |              |              | method       |              |
+--------------+--------------+--------------+--------------+--------------+
| HonorBnds    | OT_BOOLEAN   | 0            | Enforce      | casadi::Knit |
|              |              |              | bounds       | roInternal   |
+--------------+--------------+--------------+--------------+--------------+
| InitPt       | OT_BOOLEAN   | 0            | Use initial  | casadi::Knit |
|              |              |              | point        | roInternal   |
|              |              |              | strategy     |              |
+--------------+--------------+--------------+--------------+--------------+
| LPSolver     | OT_BOOLEAN   | 0            | Use LPSolver | casadi::Knit |
|              |              |              |              | roInternal   |
+--------------+--------------+--------------+--------------+--------------+
| LmSize       | OT_INTEGER   | 10           | Memory       | casadi::Knit |
|              |              |              | pairsize     | roInternal   |
|              |              |              | limit        |              |
+--------------+--------------+--------------+--------------+--------------+
| MaxCgIt      | OT_INTEGER   | 0            | Maximum      | casadi::Knit |
|              |              |              | conjugate    | roInternal   |
|              |              |              | gradient     |              |
|              |              |              | iterations   |              |
+--------------+--------------+--------------+--------------+--------------+
| MaxIt        | OT_INTEGER   | 10000        | Iteration    | casadi::Knit |
|              |              |              | limit        | roInternal   |
+--------------+--------------+--------------+--------------+--------------+
| Mu           | OT_REAL      | 0.100        | Initial      | casadi::Knit |
|              |              |              | barrier      | roInternal   |
|              |              |              | parameter    |              |
+--------------+--------------+--------------+--------------+--------------+
| Multistart   | OT_BOOLEAN   | 0            | Use          | casadi::Knit |
|              |              |              | multistart   | roInternal   |
+--------------+--------------+--------------+--------------+--------------+
| NewPoint     | OT_BOOLEAN   | 0            | Select new-  | casadi::Knit |
|              |              |              | point        | roInternal   |
|              |              |              | feature      |              |
+--------------+--------------+--------------+--------------+--------------+
| ObjRange     | OT_REAL      | 0.000        | Maximum      | casadi::Knit |
|              |              |              | objective    | roInternal   |
|              |              |              | value        |              |
+--------------+--------------+--------------+--------------+--------------+
| OptTol       | OT_REAL      | 0.000        | Relative     | casadi::Knit |
|              |              |              | optimality   | roInternal   |
|              |              |              | tolerance    |              |
+--------------+--------------+--------------+--------------+--------------+
| OptTolAbs    | OT_REAL      | 0            | Absolute     | casadi::Knit |
|              |              |              | optimality   | roInternal   |
|              |              |              | tolerance    |              |
+--------------+--------------+--------------+--------------+--------------+
| OutLev       | OT_INTEGER   | 2            | Log output   | casadi::Knit |
|              |              |              | level        | roInternal   |
+--------------+--------------+--------------+--------------+--------------+
| Pivot        | OT_REAL      | 0.000        | Initial      | casadi::Knit |
|              |              |              | pivot        | roInternal   |
|              |              |              | threshold    |              |
+--------------+--------------+--------------+--------------+--------------+
| Scale        | OT_BOOLEAN   | 1            | Perform      | casadi::Knit |
|              |              |              | scaling      | roInternal   |
+--------------+--------------+--------------+--------------+--------------+
| ShiftInit    | OT_BOOLEAN   | 1            | Interior-    | casadi::Knit |
|              |              |              | point        | roInternal   |
|              |              |              | shifting     |              |
|              |              |              | initial      |              |
|              |              |              | point        |              |
+--------------+--------------+--------------+--------------+--------------+
| Soc          | OT_INTEGER   | 1            | Second order | casadi::Knit |
|              |              |              | correction   | roInternal   |
+--------------+--------------+--------------+--------------+--------------+
| XTol         | OT_REAL      | 0.000        | Relative     | casadi::Knit |
|              |              |              | solution     | roInternal   |
|              |              |              | change       |              |
|              |              |              | tolerance    |              |
+--------------+--------------+--------------+--------------+--------------+
| codegen      | OT_BOOLEAN   | false        | C-code       | casadi::Knit |
|              |              |              | generation   | roInternal   |
+--------------+--------------+--------------+--------------+--------------+
| con_numeric_ | OT_DICTIONAR | GenericType( | constraints  | casadi::NLPS |
| md           | Y            | )            | to be passed | olverInterna |
|              |              |              | to IPOPT     | l            |
+--------------+--------------+--------------+--------------+--------------+
| contype      | OT_INTEGERVE |              |              | casadi::Knit |
|              | CTOR         |              |              | roInternal   |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_f     | OT_BOOLEAN   | GenericType( | Deprecated,  | casadi::NLPS |
|              |              | )            | use \"expand\" | olverInterna |
|              |              |              | instead.     | l            |
+--------------+--------------+--------------+--------------+--------------+
| expand_g     | OT_BOOLEAN   | GenericType( | Deprecated,  | casadi::NLPS |
|              |              | )            | use \"expand\" | olverInterna |
|              |              |              | instead.     | l            |
+--------------+--------------+--------------+--------------+--------------+
| generate_gra | OT_BOOLEAN   | GenericType( | the gradient | casadi::NLPS |
| dient        |              | )            | of the       | olverInterna |
|              |              |              | objective.   | l            |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_CALLBACK  | GenericType( | Check docume | casadi::NLPS |
| llback       |              | )            | ntation of   | olverInterna |
|              |              |              | Callback .   | l            |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| parametric   | OT_BOOLEAN   | GenericType( | input        | casadi::NLPS |
|              |              | )            | argument     | olverInterna |
|              |              |              | appended at  | l            |
|              |              |              | the end,     |              |
|              |              |              | denoting     |              |
|              |              |              | fixed        |              |
|              |              |              | parameters.  |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: knitro_solver.hpp ";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::NLPSolver::nlp() "

Access the NLP.

>Input scheme: casadi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::NLPSolver::gradF() "

Access the objective gradient function>Input scheme: casadi::GradFInput
(GRADF_NUM_IN = 3) [gradFIn] +-----------+-------+---------------------+ |
Full name | Short |     Description     |
+===========+=======+=====================+ | GRADF_X   | x     | Decision
variable . | +-----------+-------+---------------------+ | GRADF_P   | p
| Fixed parameter .   | +-----------+-------+---------------------+

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::NLPSolver::reportConstraints(std::ostream
&stream=std::cout) "

Prints out a human readable report about possible constraint violations,
after solving.

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::NLPSolver::hessLag() "

Access the Hessian of the Lagrangian function.

>Input scheme: casadi::JacGInput (JACG_NUM_IN = 3) [jacGIn]
+-----------+-------+---------------------+
| Full name | Short |     Description     |
+===========+=======+=====================+
| JACG_X    | x     | Decision variable . |
+-----------+-------+---------------------+
| JACG_P    | p     | Fixed parameter .   |
+-----------+-------+---------------------+

>Output scheme: casadi::JacGOutput (JACG_NUM_OUT = 4) [jacGOut]
+-----------+-------+-------------------------------+
| Full name | Short |          Description          |
+===========+=======+===============================+
| JACG_JAC  | jac   | Jacobian of the constraints . |
+-----------+-------+-------------------------------+
| JACG_F    | f     | Objective function .          |
+-----------+-------+-------------------------------+
| JACG_G    | g     | Constraint function .         |
+-----------+-------+-------------------------------+

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::KnitroSolver::setIntParam(const std::string
&name, int val) "

Set KNITRO integer parameters.

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::KnitroSolver::setDoubleParam(const
std::string &name, double val) "

Set KNITRO double parameters.

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::NLPSolver::setQPOptions() "

Set options that make the NLP solver more suitable for solving QPs.

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::NLPSolver::getReportConstraints() "";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";


// File: classcasadi_1_1LapackLUDense.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::LapackLUDense::LapackLUDense() "

Default (empty) constructor.

";

%feature("docstring") casadi::LapackLUDense::LapackLUDense(const Sparsity
&sparsity, int nrhs=1) "

Create a linear solver given a sparsity pattern.

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::LinearSolver::prepared() const  "

Check if prepared.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::LinearSolver::solve(bool transpose=false) "

Solve the system of equations, internal vector.

";

%feature("docstring")  casadi::LinearSolver::solve(double *x, int nrhs=1,
bool transpose=false) " [INTERNAL]   Solve the factorized system of
equations.

";

%feature("docstring")  casadi::LinearSolver::solve(const MX &A, const MX &B,
bool transpose=false) "

Create a solve node.

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::LinearSolver::spSolve(bvec_t *X, const bvec_t
*B, bool transpose=false) const  " [INTERNAL]  Propagate sparsity through a
linear solve

";

%feature("docstring")  casadi::LinearSolver::spSolve(DMatrix &X, const
DMatrix &B, bool transpose=false) const  " [INTERNAL]  Propagate sparsity
through a linear solve

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::LapackLUDense "

LU LinearSolver with Lapack Interface.

Solves the linear system A*X = B or A^T*X = B for X with A square and non-
singular

If A is structurally singular, an error will be thrown during init. If A is
numerically singular, the prepare step will fail.

This class solves the linear system A.x=b by making an LU factorization of
A: A = L.U, with L lower and U upper triangular

LapackLUDense is an casadi::Function mapping from 2 inputs [ A (matrix),b
(vector)] to one output [x (vector)].

The usual procedure to use LapackLUDense is:  init()

set the first input (A)

prepare()

set the second input (b)

solve()

Repeat steps 4 and 5 to work with other b vectors.

The method evaluate() combines the prepare() and solve() step and is
therefore more expensive if A is invariant.

>Input scheme: casadi::LinsolInput (LINSOL_NUM_IN = 3) [linsolIn]
+-----------+-------+------------------------------------------------+
| Full name | Short |                  Description                   |
+===========+=======+================================================+
| LINSOL_A  | A     | The square matrix A: sparse, (n x n). .        |
+-----------+-------+------------------------------------------------+
| LINSOL_B  | B     | The right-hand-side matrix b: dense, (n x m) . |
+-----------+-------+------------------------------------------------+

>Output scheme: casadi::LinsolOutput (LINSOL_NUM_OUT = 2) [linsolOut]
+-----------+-------+----------------------------------------------+
| Full name | Short |                 Description                  |
+===========+=======+==============================================+
| LINSOL_X  | X     | Solution to the linear system of equations . |
+-----------+-------+----------------------------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| allow_equili | OT_BOOLEAN   | false        |              | casadi::Lapa |
| bration_fail |              |              |              | ckLUDenseInt |
| ure          |              |              |              | ernal        |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| equilibratio | OT_BOOLEAN   | true         |              | casadi::Lapa |
| n            |              |              |              | ckLUDenseInt |
|              |              |              |              | ernal        |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: lapack_lu_dense.hpp ";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::LinearSolver::prepare() "

Factorize the matrix.

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::LinearSolver::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";


// File: classcasadi_1_1LapackQRDense.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")  casadi::IOInterface<
Function  >::getInput(int iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::LinearSolver::solve(bool transpose=false) "

Solve the system of equations, internal vector.

";

%feature("docstring")  casadi::LinearSolver::solve(double *x, int nrhs=1,
bool transpose=false) " [INTERNAL]   Solve the factorized system of
equations.

";

%feature("docstring")  casadi::LinearSolver::solve(const MX &A, const MX &B,
bool transpose=false) "

Create a solve node.

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::LinearSolver::prepared() const  "

Check if prepared.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::LapackQRDense "

QR LinearSolver with Lapack Interface.

Solves the linear system A*X = B or A^T*X = B for X with A square and non-
singular

If A is structurally singular, an error will be thrown during init. If A is
numerically singular, the prepare step will fail.

This class solves the linear system A.x=b by making an QR factorization of
A: A = Q.R, with Q orthogonal and R upper triangular

LapackQRDense is an casadi::Function mapping from 2 inputs [ A (matrix),b
(vector)] to one output [x (vector)].

The usual procedure to use LapackQRDense is:  init()

set the first input (A)

prepare()

set the second input (b)

solve()

Repeat steps 4 and 5 to work with other b vectors.

The method evaluate() combines the prepare() and solve() step and is
therefore more expensive if A is invariant.

>Input scheme: casadi::LinsolInput (LINSOL_NUM_IN = 3) [linsolIn]
+-----------+-------+------------------------------------------------+
| Full name | Short |                  Description                   |
+===========+=======+================================================+
| LINSOL_A  | A     | The square matrix A: sparse, (n x n). .        |
+-----------+-------+------------------------------------------------+
| LINSOL_B  | B     | The right-hand-side matrix b: dense, (n x m) . |
+-----------+-------+------------------------------------------------+

>Output scheme: casadi::LinsolOutput (LINSOL_NUM_OUT = 2) [linsolOut]
+-----------+-------+----------------------------------------------+
| Full name | Short |                 Description                  |
+===========+=======+==============================================+
| LINSOL_X  | X     | Solution to the linear system of equations . |
+-----------+-------+----------------------------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: lapack_qr_dense.hpp ";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring") casadi::LapackQRDense::LapackQRDense() "

Default (empty) constructor.

";

%feature("docstring") casadi::LapackQRDense::LapackQRDense(const Sparsity
&sparsity, int nrhs=1) "

Create a linear solver given a sparsity pattern.

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")  casadi::LinearSolver::spSolve(bvec_t *X, const bvec_t
*B, bool transpose=false) const  " [INTERNAL]  Propagate sparsity through a
linear solve

";

%feature("docstring")  casadi::LinearSolver::spSolve(DMatrix &X, const
DMatrix &B, bool transpose=false) const  " [INTERNAL]  Propagate sparsity
through a linear solve

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::LinearSolver::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::LinearSolver::prepare() "

Factorize the matrix.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";


// File: classcasadi_1_1LinearSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")  casadi::IOInterface<
Function  >::outputSchemeEntry(const std::string &name) const " [INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring") casadi::LinearSolver::LinearSolver() "[INTERNAL]
Default (empty) constructor

";

%feature("docstring") casadi::LinearSolver::LinearSolver(const Sparsity &sp,
int nrhs=1) "

Create a linear solver given a sparsity pattern (creates a dummy solver
only)

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::LinearSolver::prepare() "

Factorize the matrix.

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::LinearSolver::prepared() const  "

Check if prepared.

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::LinearSolver::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring") casadi::LinearSolver "

Base class for the linear solver classes.

Solves the linear system A*X = B or A^T*X = B for X with A square and non-
singular

If A is structurally singular, an error will be thrown during init. If A is
numerically singular, the prepare step will fail. Joel Andersson

>Input scheme: casadi::LinsolInput (LINSOL_NUM_IN = 3) [linsolIn]
+-----------+-------+------------------------------------------------+
| Full name | Short |                  Description                   |
+===========+=======+================================================+
| LINSOL_A  | A     | The square matrix A: sparse, (n x n). .        |
+-----------+-------+------------------------------------------------+
| LINSOL_B  | B     | The right-hand-side matrix b: dense, (n x m) . |
+-----------+-------+------------------------------------------------+

>Output scheme: casadi::LinsolOutput (LINSOL_NUM_OUT = 2) [linsolOut]
+-----------+-------+----------------------------------------------+
| Full name | Short |                 Description                  |
+===========+=======+==============================================+
| LINSOL_X  | X     | Solution to the linear system of equations . |
+-----------+-------+----------------------------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: linear_solver.hpp ";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::LinearSolver::spSolve(bvec_t *X, const bvec_t
*B, bool transpose=false) const  " [INTERNAL]  Propagate sparsity through a
linear solve

";

%feature("docstring")  casadi::LinearSolver::spSolve(DMatrix &X, const
DMatrix &B, bool transpose=false) const  " [INTERNAL]  Propagate sparsity
through a linear solve

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::LinearSolver::solve(bool transpose=false) "

Solve the system of equations, internal vector.

";

%feature("docstring")  casadi::LinearSolver::solve(double *x, int nrhs=1,
bool transpose=false) " [INTERNAL]   Solve the factorized system of
equations.

";

%feature("docstring")  casadi::LinearSolver::solve(const MX &A, const MX &B,
bool transpose=false) "

Create a solve node.

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";


// File: classcasadi_1_1LinsolInputIOSchemeVector.xml
%feature("docstring")  casadi::PrintableObject::getDescription() const  "
[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::LinsolInputIOSchemeVector "[INTERNAL]  Helper
function for 'LinsolInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring")  casadi::IOSchemeVector< M  >::repr(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "
[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::LinsolInputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring")  casadi::IOSchemeVector< M  >::print(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a description of the object.

";

%feature("docstring") casadi::LinsolInputIOSchemeVector< M
>::LinsolInputIOSchemeVector(const std::vector< M > &t) " [INTERNAL] ";

%feature("docstring")  casadi::IOSchemeVector< M  >::vector() const "
[INTERNAL] ";

%feature("docstring") casadi::LinsolInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::LinsolInputIOSchemeVector::__getitem__ "[INTERNAL] ";


// File: classcasadi_1_1LinsolOutputIOSchemeVector.xml
%feature("docstring")  casadi::IOSchemeVector< M  >::print(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a description of the object.

";

%feature("docstring") casadi::LinsolOutputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring") casadi::LinsolOutputIOSchemeVector< M
>::LinsolOutputIOSchemeVector(const std::vector< M > &t) " [INTERNAL] ";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "
[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::LinsolOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::LinsolOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::LinsolOutputIOSchemeVector "[INTERNAL]
Helper function for 'LinsolOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring")  casadi::IOSchemeVector< M  >::repr(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "
[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::IOSchemeVector< M  >::vector() const "
[INTERNAL] ";


// File: classcasadi_1_1LPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::OptionsFunctionality::hasOption(const std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::LPSolver::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring") casadi::LPSolver "

LPSolver.

Solves the following linear problem:

min          c' x  x  subject to             LBA <= A x <= UBA LBX <= x   <=
UBX      with x ( n x 1)          c ( n x 1 )          A sparse matrix ( nc
x n)          LBA, UBA dense vector (nc x 1) LBX, UBX dense vector (n x 1)
n: number of decision variables (x) nc: number of constraints (A)

Joris Gillis

>Input scheme: casadi::LPSolverInput (LP_SOLVER_NUM_IN = 7) [lpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| LP_SOLVER_C            | c                      | The vector c: dense (n |
|                        |                        | x 1) .                 |
+------------------------+------------------------+------------------------+
| LP_SOLVER_A            | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| LP_SOLVER_LBA          | lba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| LP_SOLVER_UBA          | uba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| LP_SOLVER_LBX          | lbx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| LP_SOLVER_UBX          | ubx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::LPSolverOutput (LP_SOLVER_NUM_OUT = 5) [lpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| LP_SOLVER_X            | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| LP_SOLVER_COST         | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| LP_SOLVER_LAM_A        | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| LP_SOLVER_LAM_X        | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: lp_solver.hpp ";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring") casadi::LPSolver::LPSolver() "

Default constructor.

";


// File: classcasadi_1_1LPSolverInputIOSchemeVector.xml
%feature("docstring") casadi::LPSolverInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::LPSolverInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::LPSolverInputIOSchemeVector< M
>::LPSolverInputIOSchemeVector(const std::vector< M > &t) " [INTERNAL] ";

%feature("docstring") casadi::LPSolverInputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring")  casadi::IOSchemeVector< M  >::print(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "
[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "
[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::IOSchemeVector< M  >::repr(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::IOSchemeVector< M  >::vector() const "
[INTERNAL] ";

%feature("docstring") casadi::LPSolverInputIOSchemeVector "[INTERNAL]
Helper function for 'LPSolverInput'

C++ includes: schemes_helpers.hpp ";


// File: classcasadi_1_1LPSolverOutputIOSchemeVector.xml
%feature("docstring") casadi::LPSolverOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::LPSolverOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::LPSolverOutputIOSchemeVector "[INTERNAL]
Helper function for 'LPSolverOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring")  casadi::IOSchemeVector< M  >::repr(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "
[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "
[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::IOSchemeVector< M  >::print(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a description of the object.

";

%feature("docstring") casadi::LPSolverOutputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring") casadi::LPSolverOutputIOSchemeVector< M
>::LPSolverOutputIOSchemeVector(const std::vector< M > &t) " [INTERNAL] ";

%feature("docstring")  casadi::IOSchemeVector< M  >::vector() const "
[INTERNAL] ";


// File: classcasadi_1_1LPStructIOSchemeVector.xml
%feature("docstring") casadi::LPStructIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::LPStructIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::LPStructIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring")  casadi::IOSchemeVector< M  >::repr(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "
[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "
[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::IOSchemeVector< M  >::print(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a description of the object.

";

%feature("docstring") casadi::LPStructIOSchemeVector "[INTERNAL]  Helper
function for 'LPStruct'

C++ includes: casadi_types.hpp ";

%feature("docstring")  casadi::IOSchemeVector< M  >::vector() const "
[INTERNAL] ";

%feature("docstring") casadi::LPStructIOSchemeVector< T
>::LPStructIOSchemeVector(const std::vector< M > &t) " [INTERNAL] ";


// File: classcasadi_1_1Matrix.xml


/*  Operations from the left  */

/* For Python

*/

/*  Construct symbolic primitives  */

/* The \"sym\" function is intended to work in a similar way as \"sym\" used
in the Symbolic Toolbox for Matlab but instead creating a CasADi symbolic
primitive.

*/ %feature("docstring")  casadi::Matrix< DataType >::sanityCheck(bool
complete=false) const  " [INTERNAL]  Check if the dimensions and colind,row
vectors are compatible.

Parameters:
-----------

complete:  set to true to also check elementwise throws an error as possible
result

";

%feature("docstring") casadi::Matrix::__truediv__ "[INTERNAL]  Elementwise
operations Octave/Python naming

";

%feature("docstring")  casadi::Matrix< DataType >::sign() const  "
[INTERNAL]  Operations defined in the standard namespace for unambiguous
access and Numpy compatibility

";

%feature("docstring")  casadi::Matrix< DataType >::repr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Printing

";

%feature("docstring")  casadi::Matrix< T >::getNZ(int k) const  "

Get a set of nonzeros

";

%feature("docstring")  casadi::Matrix< DataType >::getNZ(const std::vector<
int > &k) const  " [INTERNAL]  Get a set of nonzeros

";

%feature("docstring")  casadi::Matrix< T >::getNZ(const Slice &k) const  "

Get a set of nonzeros

";

%feature("docstring")  casadi::Matrix< DataType >::getNZ(const Matrix< int >
&k) const  " [INTERNAL]  Get a set of nonzeros

";

%feature("docstring") casadi::Matrix::__rsub__ "";

%feature("docstring")  casadi::Matrix< T >::hasNZ(int rr, int cc) const  "

Returns true if the matrix has a non-zero at location rr,cc.

";

%feature("docstring") casadi::Matrix::__le__ "[INTERNAL]  Elementwise
operations Octave/Python naming

";

%feature("docstring")  casadi::Matrix< DataType >::hasNonStructuralZeros()
const  " [INTERNAL]  Check if the matrix has any zero entries which are not
structural zeros.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< DataType >
>::isDense() const "

Check if the matrix expression is dense.

";

%feature("docstring")  casadi::Matrix< DataType >::exp() const  " [INTERNAL]
Operations defined in the standard namespace for unambiguous access and
Numpy compatibility

";

%feature("docstring") casadi::Matrix::__ge__ "

No need to have both <= and >=.

";

%feature("docstring")  casadi::Matrix< T >::nz_indexed_one_based(int k)
const  " [INTERNAL]  Indexing for interfaced languages get a non-zero

";

%feature("docstring")  casadi::Matrix< T >::nz_indexed_one_based(const
Matrix< int > &k) const  " [INTERNAL]  Indexing for interfaced languages get
a non-zero

";

%feature("docstring")  casadi::Matrix< DataType >::data() " [INTERNAL]
Access the non-zero elements.

";

%feature("docstring")  casadi::Matrix< DataType >::data() const  "
[INTERNAL]  Const access the non-zero elements.

";

%feature("docstring")  casadi::Matrix< DataType >::sinh() const  "
[INTERNAL]  Operations defined in the standard namespace for unambiguous
access and Numpy compatibility

";

%feature("docstring") casadi::Matrix::__copysign__ "[INTERNAL]  Operations
defined in the standard namespace for unambiguous access and Numpy
compatibility

";

%feature("docstring")  casadi::GenericMatrix< Matrix< DataType >
>::sparse(int nrow=1, int ncol=1) "

create a sparse matrix with all zeros

";

%feature("docstring")  casadi::GenericMatrix< Matrix< DataType >
>::sparse(const std::pair< int, int > &rc) "

create a sparse matrix with all zeros

";

%feature("docstring")  casadi::Matrix< DataType >::triplet(const
std::vector< int > &row, const std::vector< int > &col, const std::vector<
DataType > &d) " [INTERNAL] ";

%feature("docstring")  casadi::Matrix< DataType >::triplet(const
std::vector< int > &row, const std::vector< int > &col, const std::vector<
DataType > &d, int nrow, int ncol) " [INTERNAL] ";

%feature("docstring")  casadi::Matrix< DataType >::triplet(const
std::vector< int > &row, const std::vector< int > &col, const std::vector<
DataType > &d, const std::pair< int, int > &rc) " [INTERNAL] ";

%feature("docstring")  casadi::Matrix< T
>::indexed_zero_based_assignment(const Matrix< int > &k, const Matrix<
DataType > &m) " [INTERNAL]  Indexing for interfaced languages get a non-
zero

";

%feature("docstring")  casadi::Matrix< T
>::indexed_zero_based_assignment(int rr, int cc, const DataType &m) "
[INTERNAL]  Indexing for interfaced languages get a non-zero

";

%feature("docstring")  casadi::Matrix< T
>::indexed_zero_based_assignment(int rr, const DataType &m) " [INTERNAL] ";

%feature("docstring")  casadi::Matrix< DataType >::isZero() const  "
[INTERNAL]  check if the matrix is 0 (note that false negative answers are
possible)

";

%feature("docstring")  casadi::Matrix< DataType >::printDense(std::ostream
&stream=std::cout) const  " [INTERNAL]  Printing

";

%feature("docstring") casadi::Matrix::__req__ "";

%feature("docstring")  casadi::Matrix< DataType >::isIdentity() const  "
[INTERNAL]  check if the matrix is an identity matrix (note that false
negative answers are possible)

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::Matrix< DataType >::setNZ(int k, const
Matrix< DataType > &m) " [INTERNAL]  Set a set of nonzeros

";

%feature("docstring")  casadi::Matrix< DataType >::setNZ(const std::vector<
int > &k, const Matrix< DataType > &m) " [INTERNAL]  Set a set of nonzeros

";

%feature("docstring")  casadi::Matrix< T >::setNZ(const Slice &k, const
Matrix< DataType > &m) "

Set a set of nonzeros

";

%feature("docstring")  casadi::Matrix< DataType >::setNZ(const Matrix< int >
&k, const Matrix< DataType > &m) " [INTERNAL]  Set a set of nonzeros

";

%feature("docstring") casadi::Matrix::__add__ "[INTERNAL]  Elementwise
operations Octave/Python naming

";

%feature("docstring")  casadi::Matrix< DataType >::unary(int op, const
Matrix< DataType > &x) " [INTERNAL]  Create nodes by their ID.

";

%feature("docstring")  casadi::Matrix< DataType >::ceil() const  "
[INTERNAL]  Operations defined in the standard namespace for unambiguous
access and Numpy compatibility

";

%feature("docstring")  casadi::Matrix< DataType >::sparsityRef() "
[INTERNAL]  Access the sparsity, make a copy if there are multiple
references to it.

";

%feature("docstring") casadi::Matrix::__rdiv__ "";

%feature("docstring")  casadi::Matrix< T >::indexed(const Slice &rr, const
Slice &cc) const  " [INTERNAL]  Indexing for interfaced languages get a non-
zero

";

%feature("docstring")  casadi::Matrix< T >::indexed(const IndexList &rr,
const IndexList &cc) const  " [INTERNAL]  Indexing for interfaced languages
get a non-zero

";

%feature("docstring")  casadi::Matrix< T >::indexed(const Slice &rr, const
Matrix< int > &cc) const  " [INTERNAL]  Indexing for interfaced languages
get a non-zero

";

%feature("docstring")  casadi::Matrix< T >::indexed(const Matrix< int > &rr,
const IndexList &cc) const  " [INTERNAL]  Indexing for interfaced languages
get a non-zero

";

%feature("docstring")  casadi::Matrix< T >::indexed(const Matrix< int > &rr,
const Slice &cc) const  " [INTERNAL]  Indexing for interfaced languages get
a non-zero

";

%feature("docstring")  casadi::Matrix< T >::indexed(const IndexList &rr,
const Matrix< int > &cc) const  " [INTERNAL]  Indexing for interfaced
languages get a non-zero

";

%feature("docstring")  casadi::Matrix< T >::indexed(const Matrix< int > &rr,
const Matrix< int > &cc) const  " [INTERNAL]  Indexing for interfaced
languages get a non-zero

";

%feature("docstring")  casadi::Matrix< T >::indexed(const Sparsity &sp)
const  " [INTERNAL]  Indexing for interfaced languages get a non-zero

";

%feature("docstring")  casadi::Matrix< T >::indexed(const Slice &rr) const
" [INTERNAL]  Indexing for interfaced languages get a non-zero

";

%feature("docstring")  casadi::Matrix< T >::indexed(const IndexList &rr)
const  " [INTERNAL]  Indexing for interfaced languages get a non-zero

";

%feature("docstring") casadi::Matrix::__rlt__ "";

%feature("docstring")  casadi::Matrix< T >::nz_indexed_zero_based(int k)
const  " [INTERNAL]  Indexing for interfaced languages get a non-zero

";

%feature("docstring")  casadi::Matrix< T >::nz_indexed_zero_based(const
Matrix< int > &k) const  " [INTERNAL]  Indexing for interfaced languages get
a non-zero

";

%feature("docstring")  casadi::Matrix< T >::back() " [INTERNAL] ";

%feature("docstring")  casadi::Matrix< T >::back() const  " [INTERNAL] ";

%feature("docstring")  casadi::Matrix< DataType >::borArrayBV(const bvec_t
*val, int len) " [INTERNAL]  Bitwise or the non-zero elements, array.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< DataType >  >::numel()
const "

Get the number of elements.

";

%feature("docstring")  casadi::Matrix< DataType >::className() " [INTERNAL]
Printing

";

%feature("docstring")  casadi::Matrix< T >::end() " [INTERNAL] ";

%feature("docstring")  casadi::Matrix< T >::end() const  " [INTERNAL] ";

%feature("docstring")  casadi::Matrix< DataType >::cosh() const  "
[INTERNAL]  Operations defined in the standard namespace for unambiguous
access and Numpy compatibility

";

%feature("docstring")  casadi::Matrix< DataType >::getArray(DataType *val,
int len, SparsityType sp=SPARSE) const  " [INTERNAL]  Get the non-zero
elements, array.

";

%feature("docstring")  casadi::Matrix< DataType >::getArray(DataType *val)
const  " [INTERNAL]  Get the non-zero elements, array, sparse and correct
length.

";

%feature("docstring")  casadi::Matrix< DataType >::densify(const DataType
&val=0) " [INTERNAL]  Make the matrix dense.

";

%feature("docstring")  casadi::Matrix< T >::sparsity() const  "

Const access the sparsity - reference to data member.

";

%feature("docstring")  casadi::Matrix< DataType >::setArrayBV(const bvec_t
*val, int len) " [INTERNAL]  Bitwise set the non-zero elements, array.

";

%feature("docstring")  casadi::Matrix< DataType >::tan() const  " [INTERNAL]
Operations defined in the standard namespace for unambiguous access and
Numpy compatibility

";

%feature("docstring")  casadi::GenericMatrix< Matrix< DataType >
>::isTril() const "

Check if the matrix is lower triangular.

";

%feature("docstring")  casadi::Matrix< DataType >::appendColumns(const
Matrix< DataType > &y) " [INTERNAL]  Append a matrix horizontally.

";

%feature("docstring")  casadi::Matrix< T >::rend() " [INTERNAL] ";

%feature("docstring")  casadi::Matrix< T >::rend() const  " [INTERNAL] ";

%feature("docstring")  casadi::GenericMatrix< Matrix< DataType >
>::isTriu() const "

Check if the matrix is upper triangular.

";

%feature("docstring")  casadi::Matrix< DataType >::erf() const  " [INTERNAL]
Operations defined in the standard namespace for unambiguous access and
Numpy compatibility

";

%feature("docstring")  casadi::Matrix< DataType >::set(DataType val,
SparsityType sp=SPARSE) " [INTERNAL]  Set the non-zero elements, scalar.

";

%feature("docstring")  casadi::Matrix< DataType >::set(const std::vector<
DataType > &val, SparsityType sp=SPARSE) " [INTERNAL]  Set the non-zero
elements, vector.

";

%feature("docstring")  casadi::Matrix< DataType >::set(const Matrix<
DataType > &val, SparsityType sp=SPARSE) " [INTERNAL]  Set the non-zero
elements, Matrix.

";

%feature("docstring")  casadi::Matrix< DataType >::set(const DataType *val,
SparsityType sp=SPARSE) " [INTERNAL]  Legacy - use setArray instead.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< DataType >
>::isSquare() const "

Check if the matrix expression is square.

";

%feature("docstring")  casadi::Matrix< T
>::nz_indexed_one_based_assignment(int k, const DataType &m) " [INTERNAL]
set a non-zero

";

%feature("docstring")  casadi::Matrix< T
>::nz_indexed_one_based_assignment(const Matrix< int > &k, const Matrix<
DataType > &m) " [INTERNAL]  Indexing for interfaced languages get a non-
zero

";

%feature("docstring")  casadi::Matrix< T >::nz_indexed_assignment(const
Slice &k, const Matrix< DataType > &m) " [INTERNAL]  Indexing for interfaced
languages get a non-zero

";

%feature("docstring")  casadi::Matrix< T >::nz_indexed_assignment(const
IndexList &k, const Matrix< DataType > &m) " [INTERNAL]  Indexing for
interfaced languages get a non-zero

";

%feature("docstring")  casadi::Matrix< DataType >::printSparse(std::ostream
&stream=std::cout) const  " [INTERNAL]  Printing

";

%feature("docstring")  casadi::Matrix< DataType >::setAll(const DataType
&val) " [INTERNAL]  Set all elements to a value.

";

%feature("docstring") casadi::Matrix::__eq__ "[INTERNAL]  Elementwise
operations Octave/Python naming

";

%feature("docstring") casadi::Matrix::__ne__ "[INTERNAL]  Elementwise
operations Octave/Python naming

";

%feature("docstring")  casadi::Matrix< T
>::indexed_one_based_assignment(const Matrix< int > &k, const Matrix<
DataType > &m) " [INTERNAL]  Indexing for interfaced languages get a non-
zero

";

%feature("docstring")  casadi::Matrix< T >::indexed_one_based_assignment(int
rr, int cc, const DataType &m) " [INTERNAL]  set a matrix element

";

%feature("docstring")  casadi::Matrix< T >::indexed_one_based_assignment(int
rr, const DataType &m) " [INTERNAL]  set a vector element

";

%feature("docstring")  casadi::Matrix< T >::T() const  " [INTERNAL]
Transpose the matrix (shorthand)

";

%feature("docstring")  casadi::Matrix< T >::getElement(int rr, int cc=0)
const  "

get an element, do not allocate

";

%feature("docstring")  casadi::Matrix< DataType >::clear() " [INTERNAL] ";

%feature("docstring") casadi::Matrix::__lt__ "[INTERNAL]  Elementwise
operations Octave/Python naming

";

%feature("docstring")  casadi::Matrix< DataType >::remove(const std::vector<
int > &rr, const std::vector< int > &cc) " [INTERNAL]  Remove cols or rows
Rremove/delete rows and/or columns of a matrix.

";

%feature("docstring")  casadi::Matrix< T
>::nz_indexed_zero_based_assignment(int k, const DataType &m) " [INTERNAL]
Indexing for interfaced languages get a non-zero

";

%feature("docstring")  casadi::Matrix< T
>::nz_indexed_zero_based_assignment(const Matrix< int > &k, const Matrix<
DataType > &m) " [INTERNAL]  Indexing for interfaced languages get a non-
zero

";

%feature("docstring")  casadi::GenericMatrix< Matrix< DataType >
>::mul_smart(const Matrix< DataType > &y, const Sparsity &sp_z) const "

Matrix-matrix multiplication. Attempts to identify quick returns on matrix-
level and delegates to MatType::mul_full if no such quick returns are found.

";

%feature("docstring")  casadi::Matrix< T >::setScientific(bool scientific) "

Set the 'precision, width & scientific' used in printing and serializing to
streams.

";

%feature("docstring")  casadi::Matrix< DataType >::getValue() const  "
[INTERNAL]  Get double value (only if constant)

";

%feature("docstring")  casadi::Matrix< DataType >::isOne() const  "
[INTERNAL]  check if the matrix is 1 (note that false negative answers are
possible)

";

%feature("docstring") casadi::Matrix::__rne__ "";

%feature("docstring") casadi::Matrix::__mul__ "[INTERNAL]  Elementwise
operations Octave/Python naming

";

%feature("docstring")  casadi::Matrix< DataType >::reserve(int nnz) "
[INTERNAL] ";

%feature("docstring")  casadi::Matrix< DataType >::reserve(int nnz, int
ncol) " [INTERNAL] ";

%feature("docstring") casadi::Matrix::__mrdivide__ "[INTERNAL]  Elementwise
operations Octave/Python naming

";

%feature("docstring")  casadi::Matrix< DataType >::sub(int rr, int cc) const
" [INTERNAL]  Get a submatrix

";

%feature("docstring")  casadi::Matrix< T >::sub(const std::vector< int >
&rr, int cc) const  " [INTERNAL]  Get a submatrix

";

%feature("docstring")  casadi::Matrix< T >::sub(int rr, const std::vector<
int > &cc) const  " [INTERNAL]  Get a submatrix

";

%feature("docstring")  casadi::Matrix< DataType >::sub(const std::vector<
int > &rr, const std::vector< int > &cc) const  " [INTERNAL]  Get a
submatrix

";

%feature("docstring")  casadi::Matrix< T >::sub(const Slice &rr, const
std::vector< int > &cc) const  " [INTERNAL]  Get a submatrix

";

%feature("docstring")  casadi::Matrix< T >::sub(const std::vector< int >
&rr, const Slice &cc) const  " [INTERNAL]  Get a submatrix

";

%feature("docstring")  casadi::Matrix< T >::sub(const Slice &rr, const Slice
&cc) const  " [INTERNAL]  Get a submatrix

";

%feature("docstring")  casadi::Matrix< T >::sub(const Slice &rr, int cc)
const  " [INTERNAL]  Get a submatrix

";

%feature("docstring")  casadi::Matrix< T >::sub(int rr, const Slice &cc)
const  " [INTERNAL]  Get a submatrix

";

%feature("docstring")  casadi::Matrix< DataType >::sub(const Matrix< int >
&rr, const std::vector< int > &cc) const  " [INTERNAL]  Get a submatrix

";

%feature("docstring")  casadi::Matrix< T >::sub(const Matrix< int > &rr, int
cc) const  " [INTERNAL]  Get a submatrix

";

%feature("docstring")  casadi::Matrix< DataType >::sub(const std::vector<
int > &rr, const Matrix< int > &cc) const  " [INTERNAL]  Get a submatrix

";

%feature("docstring")  casadi::Matrix< T >::sub(int rr, const Matrix< int >
&cc) const  " [INTERNAL]  Get a submatrix

";

%feature("docstring")  casadi::Matrix< T >::sub(const Matrix< int > &rr,
const Slice &cc) const  " [INTERNAL]  Get a submatrix

";

%feature("docstring")  casadi::Matrix< T >::sub(const Slice &rr, const
Matrix< int > &cc) const  " [INTERNAL]  Get a submatrix

";

%feature("docstring")  casadi::Matrix< DataType >::sub(const Matrix< int >
&rr, const Matrix< int > &cc) const  " [INTERNAL]  Get a submatrix

";

%feature("docstring")  casadi::Matrix< DataType >::sub(const Sparsity &sp,
int dummy=0) const  " [INTERNAL]  Get a submatrix

";

%feature("docstring")  casadi::Matrix< DataType >::printScalar(std::ostream
&stream=std::cout) const  " [INTERNAL]  Printing

";

%feature("docstring")  casadi::Matrix< DataType >::isSmooth() const  "
[INTERNAL]  Check if smooth.

";

%feature("docstring")  casadi::Matrix< DataType >::logic_and(const Matrix<
DataType > &y) const  " [INTERNAL]  Operations defined in the standard
namespace for unambiguous access and Numpy compatibility

";

%feature("docstring")  casadi::Matrix< DataType >::erase(const std::vector<
int > &rr, const std::vector< int > &cc) " [INTERNAL]  Erase a submatrix
Erase rows and/or columns of a matrix.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< DataType >
>::dimString() const "

Get string representation of dimensions. The representation is (nrow x ncol
= numel | size)

";

%feature("docstring")  casadi::Matrix< DataType >::inf(const Sparsity &sp) "
[INTERNAL]  create a matrix with all inf

";

%feature("docstring")  casadi::Matrix< DataType >::inf(int nrow=1, int
ncol=1) " [INTERNAL]  create a matrix with all inf

";

%feature("docstring")  casadi::Matrix< DataType >::inf(const std::pair< int,
int > &rc) " [INTERNAL]  create a matrix with all inf

";

%feature("docstring")  casadi::Matrix< DataType >::tanh() const  "
[INTERNAL]  Operations defined in the standard namespace for unambiguous
access and Numpy compatibility

";

%feature("docstring")  casadi::Matrix< DataType >::scalar_matrix(int op,
const Matrix< DataType > &x, const Matrix< DataType > &y) " [INTERNAL]
Create nodes by their ID.

";

%feature("docstring")  casadi::Matrix< T >::ptr() " [INTERNAL]  Get a
pointer to the data

";

%feature("docstring")  casadi::Matrix< T >::ptr() const  " [INTERNAL]  Get a
const pointer to the data.

";

%feature("docstring")  casadi::Matrix< DataType >::getBand(int kl, int ku,
int ldres, DataType *res) const  " [INTERNAL]  Save the result to the LAPACK
banded format see LAPACK documentation kl: The number of subdiagonals in res
ku: The number of superdiagonals in res ldres: The leading dimension in res
res: The number of superdiagonals.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< DataType >
>::ones(int nrow=1, int ncol=1) "

Create a dense matrix or a matrix with specified sparsity with all entries
one.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< DataType >
>::ones(const Sparsity &sp) "

Create a dense matrix or a matrix with specified sparsity with all entries
one.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< DataType >
>::ones(const std::pair< int, int > &rc) "

Create a dense matrix or a matrix with specified sparsity with all entries
one.

";

%feature("docstring")  casadi::Matrix< DataType >::arctanh() const  "
[INTERNAL]  Operations defined in the standard namespace for unambiguous
access and Numpy compatibility

";

%feature("docstring")  casadi::Matrix< DataType >::isSymbolicSparse() const
" [INTERNAL]  Check if symbolic Sparse matrices can return true if all non-
zero elements are symbolic.

";

%feature("docstring")  casadi::Matrix< DataType >::toScalar() const  "
[INTERNAL]  Convert to scalar type.

";

%feature("docstring")  casadi::Matrix< T >::addSub(const Matrix< DataType >
&m, RR rr, CC cc) " [INTERNAL]  Add a submatrix to an existing matrix (TODO:
remove memory allocation)

";

%feature("docstring")  casadi::GenericMatrix< Matrix< DataType >
>::isVector() const "

Check if the matrix is a vector (i.e. size2()==1)

";

%feature("docstring")  casadi::Matrix< DataType >::get(DataType &val,
SparsityType sp=SPARSE) const  " [INTERNAL]  Get the non-zero elements,
scalar.

";

%feature("docstring")  casadi::Matrix< DataType >::get(std::vector< DataType
> &val, SparsityType sp=SPARSE) const  " [INTERNAL]  Get the non-zero
elements, vector.

";

%feature("docstring")  casadi::Matrix< DataType >::get(Matrix< DataType >
&val, SparsityType sp=SPARSE) const  " [INTERNAL]  Get the non-zero
elements, Matrix.

";

%feature("docstring")  casadi::Matrix< DataType >::get(DataType *val,
SparsityType sp=SPARSE) const  " [INTERNAL]  Legacy - use getArray instead.

";

%feature("docstring")  casadi::Matrix< DataType >::resize(int nrow, int
ncol) " [INTERNAL] ";

%feature("docstring")  casadi::Matrix< DataType >::log() const  " [INTERNAL]
Operations defined in the standard namespace for unambiguous access and
Numpy compatibility

";

%feature("docstring")  casadi::Matrix< DataType >::row() const  " [INTERNAL]
";

%feature("docstring")  casadi::Matrix< DataType >::row(int el) const  "
[INTERNAL] ";

%feature("docstring")  casadi::GenericMatrix< Matrix< DataType >
>::isEmpty(bool both=false) const "

Check if the sparsity is empty, i.e. if one of the dimensions is zero (or
optionally both dimensions)

";

%feature("docstring")  casadi::Matrix< DataType >::sin() const  " [INTERNAL]
Operations defined in the standard namespace for unambiguous access and
Numpy compatibility

";

%feature("docstring")  casadi::Matrix< DataType >::getStridedArray(DataType
*val, int len, int stride1, int stride2, SparsityType sp=SPARSE) const  "
[INTERNAL]  Get the non-zero elements, strided array.

Set stride to zero for unstrided acces

";

%feature("docstring")  casadi::GenericMatrix< Matrix< DataType >
>::zeros(int nrow=1, int ncol=1) "

Create a dense matrix or a matrix with specified sparsity with all entries
zero.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< DataType >
>::zeros(const Sparsity &sp) "

Create a dense matrix or a matrix with specified sparsity with all entries
zero.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< DataType >
>::zeros(const std::pair< int, int > &rc) "

Create a dense matrix or a matrix with specified sparsity with all entries
zero.

";

%feature("docstring")  casadi::Matrix< DataType >::isConstant() const  "
[INTERNAL]  Check if the matrix is constant (note that false negative
answers are possible)

";

%feature("docstring")  casadi::Matrix< DataType >::setZeroBV() " [INTERNAL]
Bitwise set, reinterpreting the data as a bvec_t array

";

%feature("docstring")  casadi::GenericMatrix< Matrix< DataType >
>::isScalar(bool scalar_and_dense=false) const "

Check if the matrix expression is scalar.

";

%feature("docstring") casadi::Matrix "

Sparse matrix class. SX and DMatrix are specializations.

General sparse matrix class that is designed with the idea that \"everything
is a matrix\", that is, also scalars and vectors. This philosophy makes it
easy to use and to interface in particularly with Python and Matlab/Octave.
Index starts with 0. Index vec happens as follows: (rr,cc) -> k =
rr+cc*size1() Vectors are column vectors.  The storage format is Compressed
Column Storage (CCS), similar to that used for sparse matrices in Matlab,
but unlike this format, we do allow for elements to be structurally non-zero
but numerically zero. Matrix<DataType> is polymorphic with a
std::vector<DataType> that contain all non- identical-zero elements. The
sparsity can be accessed with Sparsity& sparsity() Joel Andersson

C++ includes: casadi_types.hpp ";

%feature("docstring")  casadi::Matrix< DataType >::isMinusOne() const  "
[INTERNAL]  check if the matrix is -1 (note that false negative answers are
possible)

";

%feature("docstring")  casadi::Matrix< DataType >::printVector(std::ostream
&stream=std::cout) const  " [INTERNAL]  Printing

";

%feature("docstring")  casadi::Matrix< DataType >::isRegular() const  "
[INTERNAL]  Checks if expression does not contain NaN or Inf.

";

%feature("docstring")  casadi::Matrix< DataType >::arcsin() const  "
[INTERNAL]  Operations defined in the standard namespace for unambiguous
access and Numpy compatibility

";

%feature("docstring") casadi::Matrix::__constpow__ "[INTERNAL]  Elementwise
operations Octave/Python naming

";

%feature("docstring")  casadi::Matrix< DataType >::borBV(const Matrix<
DataType > &val) " [INTERNAL]  Bitwise or, reinterpreting the data as a
bvec_t array

";

%feature("docstring") casadi::Matrix::__pow__ "[INTERNAL]  Elementwise
operations Octave/Python naming

";

%feature("docstring")  casadi::Matrix< DataType >::setArray(const DataType
*val, int len, SparsityType sp=SPARSE) " [INTERNAL]  Set the non-zero
elements, array.

";

%feature("docstring")  casadi::Matrix< DataType >::setArray(const DataType
*val) " [INTERNAL]  Set the non-zero elements, array, sparse and correct
length.

";

%feature("docstring")  casadi::Matrix< DataType >::sqrt() const  "
[INTERNAL]  Operations defined in the standard namespace for unambiguous
access and Numpy compatibility

";

%feature("docstring")  casadi::Matrix< DataType >::colind() const  "
[INTERNAL] ";

%feature("docstring")  casadi::Matrix< DataType >::colind(int col) const  "
[INTERNAL] ";

%feature("docstring") casadi::Matrix::__sub__ "[INTERNAL]  Elementwise
operations Octave/Python naming

";

%feature("docstring")  casadi::Matrix< DataType >::isEqual(const Matrix<
DataType > &ex2) const  " [INTERNAL]  Check if two expressions are equal May
give false negatives.

Note: does not work when CasadiOptions.setSimplificationOnTheFly(False) was
called

";

%feature("docstring")  casadi::Matrix< T >::nz_indexed(const Slice &k) const
" [INTERNAL]  Indexing for interfaced languages get a non-zero

";

%feature("docstring")  casadi::Matrix< T >::nz_indexed(const IndexList &k)
const  " [INTERNAL]  Indexing for interfaced languages get a non-zero

";

%feature("docstring")  casadi::Matrix< DataType >::matrix_scalar(int op,
const Matrix< DataType > &x, const Matrix< DataType > &y) " [INTERNAL]
Create nodes by their ID.

";

%feature("docstring")  casadi::Matrix< T >::getSub(Matrix< DataType > &m, RR
rr, CC cc) " [INTERNAL]  Retrieve a submatrix (TODO: remove memory
allocation)

";

%feature("docstring")  casadi::Matrix< DataType >::setSparse(const Sparsity
&sp, bool intersect=false) const  " [INTERNAL]  Set sparse.

";

%feature("docstring") casadi::Matrix::__rgt__ "";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::Matrix< T >::at(int k) const  " [INTERNAL]
Get a non-zero element.

";

%feature("docstring")  casadi::Matrix< T >::at(int k) " [INTERNAL]  Access a
non-zero element.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< DataType >  >::shape()
const " [INTERNAL]  Get the shape.

";

%feature("docstring") casadi::Matrix::__rle__ "";

%feature("docstring")  casadi::Matrix< T >::setPrecision(int precision) "

Set the 'precision, width & scientific' used in printing and serializing to
streams.

";

%feature("docstring")  casadi::Matrix< T >::front() " [INTERNAL]  Get
references to beginning and end.

";

%feature("docstring")  casadi::Matrix< T >::front() const  " [INTERNAL] ";

%feature("docstring")  casadi::GenericMatrix< Matrix< DataType >  >::size2()
const "

Get the second dimension (i.e. number of columns)

";

%feature("docstring")  casadi::Matrix< T >::getBV(Matrix< DataType > &val)
const  " [INTERNAL]  Bitwise set, reinterpreting the data as a bvec_t array

";

%feature("docstring")  casadi::GenericMatrix< Matrix< DataType >  >::sizeD()
const "

Get get the number of non-zeros on the diagonal.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< DataType >  >::size()
const "

Get the number of (structural) non-zero elements.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< DataType >
>::size(SparsityType sp) const "

Get the number if non-zeros for a given sparsity pattern.

";

%feature("docstring")  casadi::Matrix< DataType >::arccosh() const  "
[INTERNAL]  Operations defined in the standard namespace for unambiguous
access and Numpy compatibility

";

%feature("docstring")  casadi::Matrix< DataType >::repmat(const DataType &x,
const Sparsity &sp) " [INTERNAL]  create a matrix by repeating an existing
matrix

";

%feature("docstring")  casadi::Matrix< DataType >::repmat(const Matrix<
DataType > &x, const Sparsity &sp) " [INTERNAL]  create a matrix by
repeating an existing matrix

";

%feature("docstring")  casadi::Matrix< DataType >::repmat(const Matrix<
DataType > &x, int nrow, int ncol=1) " [INTERNAL]  create a matrix by
repeating an existing matrix

";

%feature("docstring")  casadi::Matrix< DataType >::repmat(const Matrix<
DataType > &x, const std::pair< int, int > &rc) " [INTERNAL]  create a
matrix by repeating an existing matrix

";

%feature("docstring")  casadi::Matrix< DataType >::erfinv() const  "
[INTERNAL]  Operations defined in the standard namespace for unambiguous
access and Numpy compatibility

";

%feature("docstring") casadi::Matrix::__gt__ "

No need to have both < and >

";

%feature("docstring")  casadi::Matrix< T >::indexed_zero_based(const Matrix<
int > &k) const  " [INTERNAL]  Indexing for interfaced languages get a non-
zero

";

%feature("docstring")  casadi::Matrix< T >::indexed_zero_based(int rr, int
cc) const  " [INTERNAL]  Indexing for interfaced languages get a non-zero

";

%feature("docstring")  casadi::Matrix< T >::indexed_zero_based(int rr) const
" [INTERNAL]  Indexing for interfaced languages get a non-zero

";

%feature("docstring")  casadi::Matrix< DataType >::floor() const  "
[INTERNAL]  Operations defined in the standard namespace for unambiguous
access and Numpy compatibility

";

%feature("docstring") casadi::Matrix::__nonzero__ "[INTERNAL]  Returns the
truth value of a Matrix.

";

%feature("docstring") casadi::Matrix::__nonzero__ "";

%feature("docstring") casadi::Matrix::__nonzero__ "[INTERNAL] ";

%feature("docstring")  casadi::Matrix< DataType >::arctan() const  "
[INTERNAL]  Operations defined in the standard namespace for unambiguous
access and Numpy compatibility

";

%feature("docstring")  casadi::Matrix< DataType >::setSub(const Matrix<
DataType > &m, int rr, int cc) " [INTERNAL]  Set a submatrix

";

%feature("docstring")  casadi::Matrix< T >::setSub(const Matrix< DataType >
&m, const std::vector< int > &rr, int cc) " [INTERNAL]  Set a submatrix

";

%feature("docstring")  casadi::Matrix< T >::setSub(const Matrix< DataType >
&m, int rr, const std::vector< int > &cc) " [INTERNAL]  Set a submatrix

";

%feature("docstring")  casadi::Matrix< DataType >::setSub(const Matrix<
DataType > &m, const std::vector< int > &rr, const std::vector< int > &cc) "
[INTERNAL]  Set a submatrix

";

%feature("docstring")  casadi::Matrix< T >::setSub(const Matrix< DataType >
&m, const Slice &rr, const std::vector< int > &cc) " [INTERNAL]  Set a
submatrix

";

%feature("docstring")  casadi::Matrix< T >::setSub(const Matrix< DataType >
&m, const std::vector< int > &rr, const Slice &cc) " [INTERNAL]  Set a
submatrix

";

%feature("docstring")  casadi::Matrix< T >::setSub(const Matrix< DataType >
&m, const Slice &rr, const Slice &cc) " [INTERNAL]  Set a submatrix

";

%feature("docstring")  casadi::Matrix< DataType >::setSub(const Matrix<
DataType > &m, const Matrix< int > &rr, const std::vector< int > &cc) "
[INTERNAL]  Set a submatrix

";

%feature("docstring")  casadi::Matrix< T >::setSub(const Matrix< DataType >
&m, const Matrix< int > &rr, int cc) " [INTERNAL]  Set a submatrix

";

%feature("docstring")  casadi::Matrix< DataType >::setSub(const Matrix<
DataType > &m, const std::vector< int > &rr, const Matrix< int > &cc) "
[INTERNAL]  Set a submatrix

";

%feature("docstring")  casadi::Matrix< T >::setSub(const Matrix< DataType >
&m, int rr, const Matrix< int > &cc) " [INTERNAL]  Set a submatrix

";

%feature("docstring")  casadi::Matrix< T >::setSub(const Matrix< DataType >
&m, const Matrix< int > &rr, const Slice &cc) " [INTERNAL]  Set a submatrix

";

%feature("docstring")  casadi::Matrix< T >::setSub(const Matrix< DataType >
&m, const Slice &rr, const Matrix< int > &cc) " [INTERNAL]  Set a submatrix

";

%feature("docstring")  casadi::Matrix< DataType >::setSub(const Matrix<
DataType > &m, const Matrix< int > &rr, const Matrix< int > &cc) "
[INTERNAL]  Set a submatrix

";

%feature("docstring")  casadi::Matrix< T >::setSub(const Matrix< DataType >
&m, const Slice &rr, int cc) " [INTERNAL]  Set a submatrix

";

%feature("docstring")  casadi::Matrix< T >::setSub(const Matrix< DataType >
&m, const int rr, const Slice &cc) " [INTERNAL]  Set a submatrix

";

%feature("docstring")  casadi::Matrix< DataType >::setSub(const Matrix<
DataType > &m, const Sparsity &sp, int dummy) " [INTERNAL]  Set a submatrix

";

%feature("docstring") casadi::Matrix::__radd__ "";

%feature("docstring")  casadi::Matrix< DataType >::isSymbolic() const  "
[INTERNAL]  Check if symbolic (Dense) Sparse matrices invariable return
false.

";

%feature("docstring")  casadi::Matrix< DataType >::log10() const  "
[INTERNAL]  Operations defined in the standard namespace for unambiguous
access and Numpy compatibility

";

%feature("docstring")  casadi::GenericMatrix< Matrix< DataType >  >::size1()
const "

Get the first dimension (i.e. number of rows)

";

%feature("docstring")  casadi::Matrix< DataType >::mul_full(const Matrix<
DataType > &y, const Sparsity &sp_z=Sparsity()) const  " [INTERNAL]  Matrix-
matrix product.

";

%feature("docstring") casadi::Matrix::__div__ "[INTERNAL]  Elementwise
operations Octave/Python naming

";

%feature("docstring")  casadi::Matrix< DataType >::getArrayBV(bvec_t *val,
int len) const  " [INTERNAL]  Bitwise get the non-zero elements, array.

";

%feature("docstring")  casadi::Matrix< DataType >::setZero() " [INTERNAL]
Set all elements to zero.

";

%feature("docstring")  casadi::Matrix< DataType >::nan(const Sparsity &sp) "
[INTERNAL]  create a matrix with all nan

";

%feature("docstring")  casadi::Matrix< DataType >::nan(int nrow=1, int
ncol=1) " [INTERNAL]  create a matrix with all nan

";

%feature("docstring")  casadi::Matrix< DataType >::nan(const std::pair< int,
int > &rc) " [INTERNAL]  create a matrix with all nan

";

%feature("docstring")  casadi::Matrix< T >::indexed_one_based(const Matrix<
int > &k) const  " [INTERNAL]  Indexing for interfaced languages get a non-
zero

";

%feature("docstring")  casadi::Matrix< T >::indexed_one_based(int rr, int
cc) const  " [INTERNAL]  get a matrix element

";

%feature("docstring")  casadi::Matrix< T >::indexed_one_based(int rr) const
" [INTERNAL]  Get a vector element.

";

%feature("docstring") casadi::Matrix::__rmul__ "";

%feature("docstring")  casadi::Matrix< DataType >::sparsify(double tol=0) "
[INTERNAL]  Make a matrix sparse by removing numerical zeros smaller in
absolute value than a specified tolerance.

";

%feature("docstring")  casadi::Matrix< DataType >::if_else_zero(const
Matrix< DataType > &y) const  " [INTERNAL]  Operations defined in the
standard namespace for unambiguous access and Numpy compatibility

";

%feature("docstring")  casadi::Matrix< DataType >::logic_or(const Matrix<
DataType > &y) const  " [INTERNAL]  Operations defined in the standard
namespace for unambiguous access and Numpy compatibility

";

%feature("docstring")  casadi::Matrix< DataType >::getName() const  "
[INTERNAL]  Get name (only if symbolic scalar)

";

%feature("docstring")  casadi::Matrix< DataType >::printme(const Matrix<
DataType > &y) const  " [INTERNAL]  Operations defined in the standard
namespace for unambiguous access and Numpy compatibility

";

%feature("docstring")  casadi::Matrix< DataType >::elem(int rr, int cc=0)
const  " [INTERNAL]  get an element

";

%feature("docstring")  casadi::Matrix< DataType >::elem(int rr, int cc=0) "
[INTERNAL]  get a reference to an element

";

%feature("docstring")  casadi::Matrix< DataType >::logic_not() const  "
[INTERNAL]  Operations defined in the standard namespace for unambiguous
access and Numpy compatibility

";

%feature("docstring")  casadi::Matrix< DataType >::fmin(const Matrix<
DataType > &y) const  " [INTERNAL]  Operations defined in the standard
namespace for unambiguous access and Numpy compatibility

";

%feature("docstring")  casadi::Matrix< DataType >::arctan2(const Matrix<
DataType > &y) const  " [INTERNAL]  Operations defined in the standard
namespace for unambiguous access and Numpy compatibility

";

%feature("docstring") casadi::Matrix::__mpower__ "[INTERNAL]  Elementwise
operations Octave/Python naming

";

%feature("docstring")  casadi::Matrix< DataType >::setBV(const Matrix<
DataType > &val) " [INTERNAL]  Bitwise set, reinterpreting the data as a
bvec_t array

";

%feature("docstring")  casadi::Matrix< DataType >::enlarge(int nrow, int
ncol, const std::vector< int > &rr, const std::vector< int > &cc) "
[INTERNAL]  Enlarge matrix Make the matrix larger by inserting empty rows
and columns, keeping the existing non-zeros.

";

%feature("docstring")  casadi::Matrix< DataType >::fmax(const Matrix<
DataType > &y) const  " [INTERNAL]  Operations defined in the standard
namespace for unambiguous access and Numpy compatibility

";

%feature("docstring")  casadi::Matrix< DataType >::cos() const  " [INTERNAL]
Operations defined in the standard namespace for unambiguous access and
Numpy compatibility

";

%feature("docstring")  casadi::Matrix< DataType >::arccos() const  "
[INTERNAL]  Operations defined in the standard namespace for unambiguous
access and Numpy compatibility

";

%feature("docstring")  casadi::Matrix< DataType >::mul(const Matrix<
DataType > &y, const Sparsity &sp_z=Sparsity()) const  " [INTERNAL]  Matrix-
matrix product.

";

%feature("docstring")  casadi::Matrix< DataType >::fabs() const  "
[INTERNAL]  Operations defined in the standard namespace for unambiguous
access and Numpy compatibility

";

%feature("docstring")  casadi::Matrix< T >::indexed_assignment(const Slice
&rr, const Slice &cc, const Matrix< DataType > &m) " [INTERNAL]  Indexing
for interfaced languages get a non-zero

";

%feature("docstring")  casadi::Matrix< T >::indexed_assignment(const
IndexList &rr, const IndexList &cc, const Matrix< DataType > &m) "
[INTERNAL]  Indexing for interfaced languages get a non-zero

";

%feature("docstring")  casadi::Matrix< T >::indexed_assignment(const Slice
&rr, const Matrix< int > &cc, const Matrix< DataType > &m) " [INTERNAL]
Indexing for interfaced languages get a non-zero

";

%feature("docstring")  casadi::Matrix< T >::indexed_assignment(const Matrix<
int > &rr, const Slice &cc, const Matrix< DataType > &m) " [INTERNAL]
Indexing for interfaced languages get a non-zero

";

%feature("docstring")  casadi::Matrix< T >::indexed_assignment(const Matrix<
int > &rr, const IndexList &cc, const Matrix< DataType > &m) " [INTERNAL]
Indexing for interfaced languages get a non-zero

";

%feature("docstring")  casadi::Matrix< T >::indexed_assignment(const
IndexList &rr, const Matrix< int > &cc, const Matrix< DataType > &m) "
[INTERNAL]  Indexing for interfaced languages get a non-zero

";

%feature("docstring")  casadi::Matrix< T >::indexed_assignment(const Matrix<
int > &rr, const Matrix< int > &cc, const Matrix< DataType > &m) "
[INTERNAL]  Indexing for interfaced languages get a non-zero

";

%feature("docstring")  casadi::Matrix< T >::indexed_assignment(const
Sparsity &sp, const Matrix< DataType > &m) " [INTERNAL]  Indexing for
interfaced languages get a non-zero

";

%feature("docstring")  casadi::Matrix< T >::indexed_assignment(const Slice
&rr, const Matrix< DataType > &m) " [INTERNAL] ";

%feature("docstring")  casadi::Matrix< T >::indexed_assignment(const
IndexList &rr, const Matrix< DataType > &m) " [INTERNAL] ";

%feature("docstring")  casadi::Matrix< T >::setWidth(int width) "

Set the 'precision, width & scientific' used in printing and serializing to
streams.

";

%feature("docstring") casadi::Matrix< DataType >::Matrix(const Sparsity
&sparsity, const DataType &val=DataType(0)) " [INTERNAL]  Sparse matrix with
a given sparsity

";

%feature("docstring") casadi::Matrix< DataType >::Matrix() " [INTERNAL]
constructors

empty 0-by-0 matrix constructor

";

%feature("docstring") casadi::Matrix< DataType >::Matrix(const Matrix<
DataType > &m) " [INTERNAL]  Copy constructor.

";

%feature("docstring") casadi::Matrix< DataType >::Matrix(const std::vector<
std::vector< DataType > > &m) " [INTERNAL]  Dense matrix constructor with
data given as vector of vectors.

";

%feature("docstring") casadi::Matrix< DataType >::Matrix(const Sparsity
&sparsity, const std::vector< DataType > &d) " [INTERNAL]  Sparse matrix
with a given sparsity and non-zero elements.

";

%feature("docstring") casadi::Matrix< DataType >::Matrix(double val) "
[INTERNAL]  This constructor enables implicit type conversion from a numeric
type.

";

%feature("docstring") casadi::Matrix< DataType >::Matrix(const std::vector<
DataType > &x) " [INTERNAL]  Construct from a vector.

Thanks to implicit conversion, you can pretend that Matrix(const SXElement&
x); exists. Note: above remark applies only to C++, not python or octave
interfaces

";

%feature("docstring") casadi::Matrix< DataType >::Matrix(const std::vector<
DataType > &x, int nrow, int ncol) " [INTERNAL]  Construct dense matrix from
a vector with the elements in column major ordering.

";

%feature("docstring") casadi::Matrix< T >::Matrix(const Matrix< A > &x) "

Create a matrix from a matrix with a different type of matrix entries
(assuming that the scalar conversion is valid)

";

%feature("docstring") casadi::Matrix< T >::Matrix(const std::vector< A > &x)
"

Create an expression from an stl vector.

";

%feature("docstring") casadi::Matrix< T >::Matrix(const std::vector< A > &x,
int nrow, int ncol) "

Create a non-vector expression from an stl vector.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< DataType >
>::sym(const std::string &name, int nrow=1, int ncol=1) "

Create an nrow-by-ncol symbolic primitive.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< DataType >
>::sym(const std::string &name, const std::pair< int, int > &rc) "

Construct a symbolic primitive with given dimensions.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< DataType >
>::sym(const std::string &name, const Sparsity &sp) "

Create symbolic primitive with a given sparsity pattern.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< DataType >
>::sym(const std::string &name, const Sparsity &sp, int p) "

Create a vector of length p with with matrices with symbolic primitives of
given sparsity.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< DataType >
>::sym(const std::string &name, int nrow, int ncol, int p) "

Create a vector of length p with nrow-by-ncol symbolic primitives.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< DataType >
>::sym(const std::string &name, const Sparsity &sp, int p, int r) "

Create a vector of length r of vectors of length p with symbolic primitives
with given sparsity.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< DataType >
>::sym(const std::string &name, int nrow, int ncol, int p, int r) "

Create a vector of length r of vectors of length p with nrow-by-ncol
symbolic primitives.

";

%feature("docstring")  casadi::Matrix< DataType >::matrix_matrix(int op,
const Matrix< DataType > &x, const Matrix< DataType > &y) " [INTERNAL]
Create nodes by their ID.

";

%feature("docstring")  casadi::Matrix< DataType >::binary(int op, const
Matrix< DataType > &x, const Matrix< DataType > &y) " [INTERNAL]  Create
nodes by their ID.

";

%feature("docstring")  casadi::Matrix< DataType >::isInteger() const  "
[INTERNAL]  Check if the matrix is integer-valued (note that false negative
answers are possible)

";

%feature("docstring") casadi::Matrix::__mldivide__ "

Matrix division from left.

";

%feature("docstring")  casadi::Matrix< DataType >::trans() const  "
[INTERNAL]   Transpose the matrix.

";

%feature("docstring")  casadi::GenericMatrix< Matrix< DataType >  >::sizeL()
const "

Get the number of non-zeros in the lower triangular half.

";

%feature("docstring")  casadi::Matrix< DataType >::arcsinh() const  "
[INTERNAL]  Operations defined in the standard namespace for unambiguous
access and Numpy compatibility

";

%feature("docstring")  casadi::Matrix< DataType >::append(const Matrix<
DataType > &y) " [INTERNAL]  Append a matrix vertically (NOTE: only
efficient if vector)

";

%feature("docstring") casadi::Matrix::__rge__ "";

%feature("docstring")  casadi::GenericMatrix< Matrix< DataType >  >::sizeU()
const "

Get the number of non-zeros in the upper triangular half.

";

%feature("docstring") casadi::Matrix::__rtruediv__ "";

%feature("docstring")  casadi::Matrix< T >::begin() " [INTERNAL]  Get
iterators to beginning and end.

";

%feature("docstring")  casadi::Matrix< T >::begin() const  " [INTERNAL] ";

%feature("docstring")  casadi::Matrix< T >::rbegin() " [INTERNAL] ";

%feature("docstring")  casadi::Matrix< T >::rbegin() const  " [INTERNAL] ";

%feature("docstring")  casadi::Matrix< DataType >::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Printing

";


// File: classcasadi_1_1MayerInputIOSchemeVector.xml
%feature("docstring")  casadi::IOSchemeVector< M  >::repr(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a representation of the object.

";

%feature("docstring") casadi::MayerInputIOSchemeVector< M
>::MayerInputIOSchemeVector(const std::vector< M > &t) " [INTERNAL] ";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "
[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::MayerInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::MayerInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::MayerInputIOSchemeVector "[INTERNAL]  Helper
function for 'MayerInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "
[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::IOSchemeVector< M  >::vector() const "
[INTERNAL] ";

%feature("docstring")  casadi::IOSchemeVector< M  >::print(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a description of the object.

";

%feature("docstring") casadi::MayerInputIOSchemeVector::__len__ "[INTERNAL]
";


// File: classcasadi_1_1MinusInfSX.xml
%feature("docstring")  casadi::MinusInfSX::getValue() const  " [INTERNAL]
Get the value.

";

%feature("docstring")  casadi::SXNode::hasDep() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring")  casadi::SXNode::isSymbolic() const  " [INTERNAL]
check properties of a node

";

%feature("docstring")  casadi::SXNode::getIntValue() const  " [INTERNAL]
Get value of a constant node.

";

%feature("docstring")  casadi::SXNode::isInf() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring")  casadi::SXNode::isNan() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring")  casadi::SXNode::marked() const  " [INTERNAL] ";

%feature("docstring")  casadi::ConstantSX::isConstant() const  " [INTERNAL]
Properties.

";

%feature("docstring")  casadi::SXNode::getName() const  " [INTERNAL] ";

%feature("docstring")  casadi::ConstantSX::isEqual(const SXNode *node, int
depth) const  " [INTERNAL]  Check if two nodes are equivalent up to a given
depth.

";

%feature("docstring")  casadi::MinusInfSX::isMinusInf() const  " [INTERNAL]
Properties.

";

%feature("docstring")  casadi::SXNode::print(std::ostream &stream) const  "
[INTERNAL]  print

";

%feature("docstring")  casadi::SXNode::isZero() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring")  casadi::SXNode::isOne() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::MinusInfSX::~MinusInfSX "[INTERNAL] ";

%feature("docstring")  casadi::ConstantSX::getOp() const  " [INTERNAL]  Get
the operation.

";

%feature("docstring") casadi::MinusInfSX "[INTERNAL]  Represents a minus
infinity SX.

Joel Andersson

C++ includes: constant_sx.hpp ";

%feature("docstring")  casadi::SXNode::dep(int i) const  " [INTERNAL]  get
the reference of a child

";

%feature("docstring")  casadi::SXNode::dep(int i) " [INTERNAL]  get the
reference of a child

";

%feature("docstring")  casadi::SXNode::isAlmostZero(double tol) const  "
[INTERNAL]  check properties of a node

";

%feature("docstring")  casadi::SXNode::isInteger() const  " [INTERNAL]
check properties of a node

";

%feature("docstring")  casadi::SXNode::init() "[INTERNAL]  Initialize the
node (currently used only to give a similar interface to MXNode)

";

%feature("docstring")  casadi::SXNode::mark() "[INTERNAL] ";

%feature("docstring")  casadi::SXNode::isSmooth() const  " [INTERNAL]  Check
if smooth.

";

%feature("docstring") casadi::MinusInfSX::MinusInfSX() "[INTERNAL] ";

%feature("docstring")  casadi::SXNode::ndep() const  " [INTERNAL]  Number of
dependencies.

";

%feature("docstring")  casadi::SXNode::isMinusOne() const  " [INTERNAL]
check properties of a node

";


// File: classcasadi_1_1MinusOneSX.xml
%feature("docstring")  casadi::ConstantSX::isEqual(const SXNode *node, int
depth) const  " [INTERNAL]  Check if two nodes are equivalent up to a given
depth.

";

%feature("docstring") casadi::MinusOneSX::MinusOneSX() "[INTERNAL] ";

%feature("docstring")  casadi::SXNode::marked() const  " [INTERNAL] ";

%feature("docstring")  casadi::ConstantSX::isConstant() const  " [INTERNAL]
Properties.

";

%feature("docstring")  casadi::SXNode::isNan() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::MinusOneSX::~MinusOneSX "[INTERNAL] ";

%feature("docstring")  casadi::SXNode::isSymbolic() const  " [INTERNAL]
check properties of a node

";

%feature("docstring")  casadi::SXNode::isZero() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring")  casadi::SXNode::isInf() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring")  casadi::SXNode::init() "[INTERNAL]  Initialize the
node (currently used only to give a similar interface to MXNode)

";

%feature("docstring")  casadi::SXNode::mark() "[INTERNAL] ";

%feature("docstring")  casadi::SXNode::getName() const  " [INTERNAL] ";

%feature("docstring")  casadi::SXNode::isOne() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::MinusOneSX "[INTERNAL]  Represents a minus
one SX.

Joel Andersson

C++ includes: constant_sx.hpp ";

%feature("docstring")  casadi::ConstantSX::getOp() const  " [INTERNAL]  Get
the operation.

";

%feature("docstring")  casadi::SXNode::isMinusInf() const  " [INTERNAL]
check properties of a node

";

%feature("docstring")  casadi::SXNode::hasDep() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring")  casadi::MinusOneSX::isMinusOne() const  " [INTERNAL]
Properties.

";

%feature("docstring")  casadi::SXNode::print(std::ostream &stream) const  "
[INTERNAL]  print

";

%feature("docstring")  casadi::SXNode::isAlmostZero(double tol) const  "
[INTERNAL]  check properties of a node

";

%feature("docstring")  casadi::SXNode::ndep() const  " [INTERNAL]  Number of
dependencies.

";

%feature("docstring")  casadi::MinusOneSX::isInteger() const  " [INTERNAL]
Properties.

";

%feature("docstring")  casadi::SXNode::isSmooth() const  " [INTERNAL]  Check
if smooth.

";

%feature("docstring")  casadi::MinusOneSX::getIntValue() const  " [INTERNAL]
Get the value.

";

%feature("docstring")  casadi::MinusOneSX::getValue() const  " [INTERNAL]
Get the value.

";

%feature("docstring")  casadi::SXNode::dep(int i) const  " [INTERNAL]  get
the reference of a child

";

%feature("docstring")  casadi::SXNode::dep(int i) " [INTERNAL]  get the
reference of a child

";


// File: classcasadi_1_1MultipleOutput.xml
%feature("docstring")  casadi::MXNode::shape() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getVertcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a vertical concatenation node (vectors only)

";

%feature("docstring") casadi::MultipleOutput::__nonzero__ "[INTERNAL]
Check the truth value of this node.

";

%feature("docstring")  casadi::MXNode::generateOperation(std::ostream
&stream, const std::vector< std::string > &arg, const std::vector<
std::string > &res, CodeGenerator &gen) const  " [INTERNAL]  Generate code
for the operation.

";

%feature("docstring")  casadi::SharedObjectNode::isInit() const  "
[INTERNAL]  Check if the object has been initialized.

";

%feature("docstring")  casadi::MXNode::getMultiplication(const MX &y, const
Sparsity &sp_z=Sparsity()) const  " [INTERNAL]   Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring")  casadi::MXNode::isIdentity() const  " [INTERNAL]
Check if identity matrix.

";

%feature("docstring")  casadi::MXNode::getHorzcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a horizontal concatenation node.

";

%feature("docstring")  casadi::MXNode::getAddNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Add the nonzeros of a matrix to
another matrix.

";

%feature("docstring")  casadi::MXNode::isValue(double val) const  "
[INTERNAL]  Check if a certain value.

";

%feature("docstring")  casadi::MXNode::getReshape(const Sparsity &sp) const
" [INTERNAL]   Reshape.

";

%feature("docstring")  casadi::MXNode::getFunctionInput() const  "
[INTERNAL]  Get function input.

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, const std::vector< int > &onz, bool add=false) "
[INTERNAL]  Assign nonzeros (mapping matrix)

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, bool add=false) " [INTERNAL]  Assign nonzeros
(mapping matrix), output indices sequential.

";

%feature("docstring")  casadi::MXNode::getVertsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a vertical split node (vectors
only)

";

%feature("docstring")  casadi::MXNode::getSetNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Assign the nonzeros of a matrix
to another matrix.

";

%feature("docstring") casadi::MultipleOutput::MultipleOutput() "[INTERNAL]
Constructor.

";

%feature("docstring") casadi::MultipleOutput "[INTERNAL]

Joel Andersson

C++ includes: multiple_output.hpp ";

%feature("docstring")  casadi::MXNode::numInplace() const  " [INTERNAL]  Can
the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring")  casadi::MXNode::getFunction() "[INTERNAL]  Get
function reference.

";

%feature("docstring")  casadi::MXNode::getFunction() const  " [INTERNAL]
Get function reference.

";

%feature("docstring")  casadi::MXNode::getSubRef(const Slice &i, const Slice
&j) const  " [INTERNAL]  Get submatrix reference.

";

%feature("docstring")  casadi::MXNode::sameOpAndDeps(const MXNode *node, int
depth) const  " [INTERNAL]  Checks if two nodes have the same operation and
have equivalent dependencies up to a given depth.

";

%feature("docstring")  casadi::MultipleOutput::getOutput(int oind) const  "
[INTERNAL]  Get an output.

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) const  " [INTERNAL]
dependencies - functions that have to be evaluated before this one

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::evaluateMX(const MXPtrV &input,
MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV
&adjSeed, MXPtrVV &adjSens, bool output_given) " [INTERNAL]  Evaluate
symbolically ( MX)

";

%feature("docstring")  casadi::MXNode::evaluateMX(const MXPtrV &input,
MXPtrV &output) " [INTERNAL]  Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring")  casadi::MXNode::getAssertion(const MX &y, const
std::string &fail_message="") const  " [INTERNAL]   Assertion.

";

%feature("docstring")  casadi::MXNode::mapping() const  " [INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring")  casadi::MXNode::size() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::setSparsity(const Sparsity &sparsity)
" [INTERNAL]  Set the sparsity.

";

%feature("docstring")  casadi::MXNode::getInnerProd(const MX &y) const  "
[INTERNAL]  Inner product.

";

%feature("docstring")  casadi::MXNode::getHorzsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a horizontal split node.

";

%feature("docstring")  casadi::MXNode::getBinary(int op, const MX &y, bool
scX, bool scY) const  " [INTERNAL]  Get a binary operation operation
(matrix-matrix)

";

%feature("docstring")  casadi::SharedObjectNode::weak() "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring")  casadi::MXNode::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied) " [INTERNAL]  Deep copy
data members.

";

%feature("docstring")  casadi::MXNode::getName() const  " [INTERNAL]  Get
the name.

";

%feature("docstring")  casadi::MXNode::isOutputNode() const  " [INTERNAL]
Check if evaluation output.

";

%feature("docstring")  casadi::MXNode::isZero() const  " [INTERNAL]  Check
if identically zero.

";

%feature("docstring")  casadi::MXNode::isUnaryOp() const  " [INTERNAL]
Check if unary operation.

";

%feature("docstring")  casadi::SharedObjectNode::init() "[INTERNAL]
Initialize the object.

";

%feature("docstring")  casadi::MXNode::getNormInf() const  " [INTERNAL]
Infinity norm.

";

%feature("docstring")  casadi::MXNode::getDeterminant() const  " [INTERNAL]
Determinant.

";

%feature("docstring")  casadi::MXNode::getInverse() const  " [INTERNAL]
Inverse.

";

%feature("docstring")  casadi::MultipleOutput::getNumOutputs() const  "
[INTERNAL]  Number of outputs.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream) const  "
[INTERNAL]  Print a description.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream, long
&remaining_calls) const  " [INTERNAL]  Print expression (make sure number of
calls is not exceeded)

";

%feature("docstring")  casadi::MXNode::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp,
bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, bool fwd) " [INTERNAL]  Propagate sparsity, no work.

";

%feature("docstring")  casadi::MXNode::evaluateSX(const SXPtrV &input,
SXPtrV &output, std::vector< int > &itmp, std::vector< SXElement > &rtmp) "
[INTERNAL]  Evaluate symbolically (SX)

";

%feature("docstring")  casadi::MXNode::hasDep() const  " [INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring")  casadi::MXNode::isNonLinear() "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring")  casadi::MXNode::repr(std::ostream &stream) const  "
[INTERNAL]  Print a representation.

";

%feature("docstring")  casadi::MXNode::getBinarySwitch(int op, const MX &y)
const  " [INTERNAL]  Get a binary operation operation.

";

%feature("docstring")  casadi::MXNode::getValue() const  " [INTERNAL]  Get
the value (only for scalar constant nodes)

";

%feature("docstring")  casadi::MXNode::getNormF() const  " [INTERNAL]
Frobenius norm.

";

%feature("docstring")  casadi::MultipleOutput::isMultipleOutput() const  "
[INTERNAL]  Check if a multiple output node.

";

%feature("docstring")  casadi::MXNode::nTmp(size_t &ni, size_t &nr) "
[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::MXNode::getTranspose() const  " [INTERNAL]
Transpose.

";

%feature("docstring")  casadi::MXNode::numel() const  " [INTERNAL]  Get
shape.

";

%feature("docstring")  casadi::MXNode::getSubAssign(const MX &y, const Slice
&i, const Slice &j) const  " [INTERNAL]  Get submatrix assignment.

";

%feature("docstring")  casadi::MXNode::getNorm1() const  " [INTERNAL]
1-norm

";

%feature("docstring")  casadi::MXNode::isEqual(const MXNode *node, int
depth) const  " [INTERNAL]  Check if two nodes are equivalent up to a given
depth.

";

%feature("docstring")  casadi::MultipleOutput::sparsity(int oind) const  "
[INTERNAL]  Get the sparsity of output oind.

";

%feature("docstring")  casadi::MXNode::sparsity() const  " [INTERNAL]  Get
the sparsity.

";

%feature("docstring")  casadi::MXNode::evaluateD(const DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp)
" [INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::MXNode::getSetSparse(const Sparsity &sp)
const  " [INTERNAL]  Create set sparse.

";

%feature("docstring")  casadi::MXNode::simplifyMe(MX &ex) " [INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring")  casadi::MXNode::isOne() const  " [INTERNAL]  Check if
identically one.

";

%feature("docstring")  casadi::MXNode::getFunctionOutput() const  "
[INTERNAL]  Get function output.

";

%feature("docstring")  casadi::SharedObjectNode::assertInit() const  "
[INTERNAL]  Assert that the object has been initialized.

";

%feature("docstring")  casadi::MXNode::getOp() const  " [INTERNAL]  Get the
operation.

";

%feature("docstring")  casadi::MXNode::getMatrixValue() const  " [INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring") casadi::MultipleOutput::~MultipleOutput "[INTERNAL]
Destructor.

";

%feature("docstring")  casadi::MXNode::getNorm2() const  " [INTERNAL]
Spectral norm.

";

%feature("docstring")  casadi::MXNode::isBinaryOp() const  " [INTERNAL]
Check if binary operation.

";

%feature("docstring")  casadi::MXNode::addDependency(const MX &dep) "
[INTERNAL]  Add a dependency.

";

%feature("docstring")  casadi::MXNode::clone() const  " [INTERNAL]  Clone
function.

";

%feature("docstring")  casadi::MXNode::getSolve(const MX &r, bool tr, const
LinearSolver &linear_solver) const  " [INTERNAL]   Solve a system of linear
equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring")  casadi::MXNode::printPart(std::ostream &stream, int
part) const  " [INTERNAL]  Print a part of the expression.

";

%feature("docstring")  casadi::SharedObjectNode::getCount() const  "
[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::MXNode::getUnary(int op) const  " [INTERNAL]
Get a unary operation.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep) "
[INTERNAL]  Set unary dependency.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2) " [INTERNAL]  Set binary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2, const MX &dep3) " [INTERNAL]  Set ternary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const std::vector< MX
> &dep) " [INTERNAL]  Set multiple dependencies.

";

%feature("docstring")  casadi::MXNode::ndep() const  " [INTERNAL]  Number of
dependencies.

";

%feature("docstring")  casadi::MXNode::size2() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getGetNonzeros(const Sparsity &sp,
const std::vector< int > &nz) const  " [INTERNAL]  Get the nonzeros of
matrix.

";

%feature("docstring")  casadi::MXNode::size1() const  " [INTERNAL] ";


// File: classcasadi_1_1Multiplication.xml
%feature("docstring")  casadi::Multiplication< TrX, TrY
>::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, bool fwd) "
[INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp,
bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::getMultiplication(const MX &y, const
Sparsity &sp_z=Sparsity()) const  " [INTERNAL]   Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring")  casadi::MXNode::getOutput(int oind) const  "
[INTERNAL]  Get an output.

";

%feature("docstring")  casadi::MXNode::isValue(double val) const  "
[INTERNAL]  Check if a certain value.

";

%feature("docstring")  casadi::MXNode::getAssertion(const MX &y, const
std::string &fail_message="") const  " [INTERNAL]   Assertion.

";

%feature("docstring")  casadi::MXNode::getSetSparse(const Sparsity &sp)
const  " [INTERNAL]  Create set sparse.

";

%feature("docstring")  casadi::MXNode::isOutputNode() const  " [INTERNAL]
Check if evaluation output.

";

%feature("docstring")  casadi::MXNode::getBinarySwitch(int op, const MX &y)
const  " [INTERNAL]  Get a binary operation operation.

";

%feature("docstring")  casadi::MXNode::simplifyMe(MX &ex) " [INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring")  casadi::Multiplication< TrX, TrY >::clone() const  "
[INTERNAL]  Clone function.

";

%feature("docstring")  casadi::MXNode::getSetNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Assign the nonzeros of a matrix
to another matrix.

";

%feature("docstring")  casadi::MXNode::getFunctionOutput() const  "
[INTERNAL]  Get function output.

";

%feature("docstring")  casadi::MXNode::isOne() const  " [INTERNAL]  Check if
identically one.

";

%feature("docstring")  casadi::MXNode::getHorzsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a horizontal split node.

";

%feature("docstring")  casadi::MXNode::getNormF() const  " [INTERNAL]
Frobenius norm.

";

%feature("docstring")  casadi::MXNode::getName() const  " [INTERNAL]  Get
the name.

";

%feature("docstring")  casadi::MXNode::getMatrixValue() const  " [INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring")  casadi::MXNode::isMultipleOutput() const  "
[INTERNAL]  Check if a multiple output node.

";

%feature("docstring") casadi::Multiplication "[INTERNAL]  An MX atomic for
matrix-matrix product, note that the first factor must be provided
transposed.

Joel Andersson

C++ includes: multiplication.hpp ";

%feature("docstring")  casadi::MXNode::nTmp(size_t &ni, size_t &nr) "
[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::MXNode::isBinaryOp() const  " [INTERNAL]
Check if binary operation.

";

%feature("docstring")  casadi::SharedObjectNode::assertInit() const  "
[INTERNAL]  Assert that the object has been initialized.

";

%feature("docstring")  casadi::MXNode::getFunction() "[INTERNAL]  Get
function reference.

";

%feature("docstring")  casadi::MXNode::getFunction() const  " [INTERNAL]
Get function reference.

";

%feature("docstring")  casadi::MXNode::getFunctionInput() const  "
[INTERNAL]  Get function input.

";

%feature("docstring")  casadi::Multiplication< TrX, TrY >::isEqual(const
MXNode *node, int depth) const  " [INTERNAL]  Check if two nodes are
equivalent up to a given depth.

";

%feature("docstring")  casadi::MXNode::isIdentity() const  " [INTERNAL]
Check if identity matrix.

";

%feature("docstring")  casadi::MXNode::getHorzcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a horizontal concatenation node.

";

%feature("docstring")  casadi::MXNode::getAddNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Add the nonzeros of a matrix to
another matrix.

";

%feature("docstring")  casadi::Multiplication< TrX, TrY >::evaluateMX(const
MXPtrV &input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens,
const MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given) " [INTERNAL]
Evaluate the function symbolically ( MX)

";

%feature("docstring")  casadi::MXNode::evaluateMX(const MXPtrV &input,
MXPtrV &output) " [INTERNAL]  Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring")  casadi::MXNode::size() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getTranspose() const  " [INTERNAL]
Transpose.

";

%feature("docstring")  casadi::MXNode::getDeterminant() const  " [INTERNAL]
Determinant.

";

%feature("docstring")  casadi::MXNode::shape() const  " [INTERNAL] ";

%feature("docstring") casadi::Multiplication< TrX, TrY
>::Multiplication(const MX &z, const MX &x, const MX &y) " [INTERNAL]
Constructor.

";

%feature("docstring")  casadi::MXNode::getVertcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a vertical concatenation node (vectors only)

";

%feature("docstring")  casadi::MXNode::ndep() const  " [INTERNAL]  Number of
dependencies.

";

%feature("docstring")  casadi::MXNode::isNonLinear() "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring")  casadi::Multiplication< TrX, TrY >::getOp() const  "
[INTERNAL]  Get the operation.

";

%feature("docstring")  casadi::MXNode::getSolve(const MX &r, bool tr, const
LinearSolver &linear_solver) const  " [INTERNAL]   Solve a system of linear
equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring")  casadi::MXNode::getNorm2() const  " [INTERNAL]
Spectral norm.

";

%feature("docstring")  casadi::MXNode::size1() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getUnary(int op) const  " [INTERNAL]
Get a unary operation.

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) const  " [INTERNAL]
dependencies - functions that have to be evaluated before this one

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied) " [INTERNAL]  Deep copy
data members.

";

%feature("docstring")  casadi::MXNode::getBinary(int op, const MX &y, bool
scX, bool scY) const  " [INTERNAL]  Get a binary operation operation
(matrix-matrix)

";

%feature("docstring")  casadi::MXNode::getNormInf() const  " [INTERNAL]
Infinity norm.

";

%feature("docstring")  casadi::MXNode::setSparsity(const Sparsity &sparsity)
" [INTERNAL]  Set the sparsity.

";

%feature("docstring")  casadi::MXNode::sameOpAndDeps(const MXNode *node, int
depth) const  " [INTERNAL]  Checks if two nodes have the same operation and
have equivalent dependencies up to a given depth.

";

%feature("docstring")  casadi::MXNode::sparsity() const  " [INTERNAL]  Get
the sparsity.

";

%feature("docstring")  casadi::MXNode::sparsity(int oind) const  "
[INTERNAL]  Get the sparsity of output oind.

";

%feature("docstring")  casadi::Multiplication< TrX, TrY >::evaluateGen(const
MatV &input, MatV &output, std::vector< int > &itmp, std::vector< T > &rtmp)
" [INTERNAL]  Evaluate the function (template)

";

%feature("docstring")  casadi::MXNode::getValue() const  " [INTERNAL]  Get
the value (only for scalar constant nodes)

";

%feature("docstring")  casadi::MXNode::getNorm1() const  " [INTERNAL]
1-norm

";

%feature("docstring")  casadi::MXNode::getGetNonzeros(const Sparsity &sp,
const std::vector< int > &nz) const  " [INTERNAL]  Get the nonzeros of
matrix.

";

%feature("docstring")  casadi::MXNode::mapping() const  " [INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") casadi::Multiplication::__nonzero__ "[INTERNAL]
Check the truth value of this node.

";

%feature("docstring")  casadi::MXNode::addDependency(const MX &dep) "
[INTERNAL]  Add a dependency.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream) const  "
[INTERNAL]  Print a description.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream, long
&remaining_calls) const  " [INTERNAL]  Print expression (make sure number of
calls is not exceeded)

";

%feature("docstring")  casadi::MXNode::getSubRef(const Slice &i, const Slice
&j) const  " [INTERNAL]  Get submatrix reference.

";

%feature("docstring")  casadi::MXNode::hasDep() const  " [INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring")  casadi::MXNode::isZero() const  " [INTERNAL]  Check
if identically zero.

";

%feature("docstring")  casadi::MXNode::getSubAssign(const MX &y, const Slice
&i, const Slice &j) const  " [INTERNAL]  Get submatrix assignment.

";

%feature("docstring")  casadi::MXNode::isUnaryOp() const  " [INTERNAL]
Check if unary operation.

";

%feature("docstring")  casadi::MXNode::repr(std::ostream &stream) const  "
[INTERNAL]  Print a representation.

";

%feature("docstring")  casadi::MXNode::getVertsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a vertical split node (vectors
only)

";

%feature("docstring")  casadi::Multiplication< TrX, TrY >::numInplace()
const  " [INTERNAL]  Can the operation be performed inplace (i.e. overwrite
the result)

";

%feature("docstring")  casadi::SharedObjectNode::weak() "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring")  casadi::SharedObjectNode::init() "[INTERNAL]
Initialize the object.

";

%feature("docstring")  casadi::SharedObjectNode::getCount() const  "
[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::MXNode::getInverse() const  " [INTERNAL]
Inverse.

";

%feature("docstring")  casadi::MXNode::getNumOutputs() const  " [INTERNAL]
Number of outputs.

";

%feature("docstring")  casadi::SharedObjectNode::isInit() const  "
[INTERNAL]  Check if the object has been initialized.

";

%feature("docstring")  casadi::MXNode::getInnerProd(const MX &y) const  "
[INTERNAL]  Inner product.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep) "
[INTERNAL]  Set unary dependency.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2) " [INTERNAL]  Set binary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2, const MX &dep3) " [INTERNAL]  Set ternary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const std::vector< MX
> &dep) " [INTERNAL]  Set multiple dependencies.

";

%feature("docstring")  casadi::Multiplication< TrX, TrY
>::printPart(std::ostream &stream, int part) const  " [INTERNAL]  Print a
part of the expression.

";

%feature("docstring")  casadi::Multiplication< TrX, TrY >::evaluateD(const
DMatrixPtrV &input, DMatrixPtrV &output, std::vector< int > &itmp,
std::vector< double > &rtmp) " [INTERNAL]  Evaluate the function
numerically.

";

%feature("docstring")  casadi::MXNode::numel() const  " [INTERNAL]  Get
shape.

";

%feature("docstring")  casadi::Multiplication< TrX, TrY >::evaluateSX(const
SXPtrV &input, SXPtrV &output, std::vector< int > &itmp, std::vector<
SXElement > &rtmp) " [INTERNAL]  Evaluate the function symbolically (SX)

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, const std::vector< int > &onz, bool add=false) "
[INTERNAL]  Assign nonzeros (mapping matrix)

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, bool add=false) " [INTERNAL]  Assign nonzeros
(mapping matrix), output indices sequential.

";

%feature("docstring")  casadi::MXNode::getReshape(const Sparsity &sp) const
" [INTERNAL]   Reshape.

";

%feature("docstring")  casadi::Multiplication< TrX, TrY
>::generateOperation(std::ostream &stream, const std::vector< std::string >
&arg, const std::vector< std::string > &res, CodeGenerator &gen) const  "
[INTERNAL]  Generate code for the operation.

";

%feature("docstring")  casadi::MXNode::size2() const  " [INTERNAL] ";

%feature("docstring") casadi::Multiplication::~Multiplication "[INTERNAL]
Destructor.

";


// File: classcasadi_1_1MX.xml


/*  Operations from the left  */

/* For Python

*/

/*  Construct symbolic primitives  */

/* The \"sym\" function is intended to work in a similar way as \"sym\" used
in the Symbolic Toolbox for Matlab but instead creating a CasADi symbolic
primitive.

*/ %feature("docstring")  casadi::MX::indexed(const IndexList &rr, const
IndexList &cc) const  "

get a non-zero

Indexing for interfaced languages

";

%feature("docstring")  casadi::MX::indexed(const Slice &rr, const Slice &cc)
const  "

get a non-zero

Indexing for interfaced languages

";

%feature("docstring")  casadi::MX::indexed(const Matrix< int > &k) const  "

get a non-zero

Indexing for interfaced languages

";

%feature("docstring")  casadi::MX::indexed(const Sparsity &sp) const  "

get a non-zero

Indexing for interfaced languages

";

%feature("docstring")  casadi::MX::indexed(const Slice &rr, const Matrix<
int > &cc) const  "

get a non-zero

Indexing for interfaced languages

";

%feature("docstring")  casadi::MX::indexed(const Matrix< int > &rr, const
IndexList &cc) const  "

get a non-zero

Indexing for interfaced languages

";

%feature("docstring")  casadi::MX::indexed(const Matrix< int > &rr, const
Slice &cc) const  "

get a non-zero

Indexing for interfaced languages

";

%feature("docstring")  casadi::MX::indexed(const IndexList &rr, const
Matrix< int > &cc) const  "

get a non-zero

Indexing for interfaced languages

";

%feature("docstring")  casadi::MX::indexed(const Matrix< int > &rr, const
Matrix< int > &cc) const  "

get a non-zero

Indexing for interfaced languages

";

%feature("docstring")  casadi::MX::indexed(const IndexList &rr) const  "

get a non-zero

Indexing for interfaced languages

";

%feature("docstring")  casadi::MX::indexed(const Slice &rr) const  "

get a non-zero

Indexing for interfaced languages

";

%feature("docstring")  casadi::MX::inner_prod(const MX &y) const  " ";

%feature("docstring")  casadi::MX::arctan2(const MX &y) const  " ";

%feature("docstring") casadi::MX::__constpow__ "";

%feature("docstring")  casadi::GenericMatrix< MX  >::sizeL() const "

Get the number of non-zeros in the lower triangular half.

";

%feature("docstring") casadi::MX "

MX - Matrix expression.

The MX class is used to build up trees made up from MXNodes. It is a more
general graph representation than the scalar expression, SX, and much less
efficient for small objects. On the other hand, the class allows much more
general operations than does SX, in particular matrix valued operations and
calls to arbitrary differentiable functions.

The MX class is designed to have identical syntax with the Matrix<> template
class, and uses Matrix<double> as its internal representation of the values
at a node. By keeping the syntaxes identical, it is possible to switch from
one class to the other, as well as inlining MX functions to SXElement
functions.

Note that an operation is always \"lazy\", making a matrix multiplication
will create a matrix multiplication node, not perform the actual
multiplication.

Joel Andersson

C++ includes: mx.hpp ";

%feature("docstring") casadi::MX::__gt__ "

No need to have both < and >

";

%feature("docstring")  casadi::GenericMatrix< MX  >::sizeD() const "

Get get the number of non-zeros on the diagonal.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::dimString() const "

Get string representation of dimensions. The representation is (nrow x ncol
= numel | size)

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring") casadi::MX::__copysign__ "";

%feature("docstring")  casadi::MX::erase(const std::vector< int > &rr, const
std::vector< int > &cc) "

Erase a submatrix.

";

%feature("docstring") casadi::MX::__rsub__ "";

%feature("docstring")  casadi::MX::densify(const MX &val=0) "

Make the matrix dense.

";

%feature("docstring")  casadi::MX::getNumOutputs() const  "

Number of outputs.

";

%feature("docstring") casadi::MX::__mul__ "";

%feature("docstring") casadi::MX::__lt__ "";

%feature("docstring")  casadi::MX::arcsin() const  " ";

%feature("docstring")  casadi::MX::trans() const  "

Transpose the matrix.

";

%feature("docstring")  casadi::MX::attachAssert(const MX &y, const
std::string &fail_message="") const  "

returns itself, but with an assertion attached

If y does not evaluate to 1, a runtime error is raised

";

%feature("docstring")  casadi::MX::sqrt() const  " ";

%feature("docstring") casadi::MX::__rgt__ "";

%feature("docstring")  casadi::MX::nz_indexed_zero_based_assignment(int k,
const MX &m) "

get a non-zero

Indexing for interfaced languages

";

%feature("docstring")  casadi::MX::append(const MX &y) "

Append a matrix vertically (NOTE: only efficient if vector)

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::MX::indexed_one_based(int rr, int cc) const
"

get a matrix element

";

%feature("docstring")  casadi::MX::indexed_one_based(int rr) const  "

get a non-zero

Indexing for interfaced languages

";

%feature("docstring")  casadi::MX::getTemp() const  " [INTERNAL]  Get the
temporary variable

";

%feature("docstring") casadi::MX::__rne__ "";

%feature("docstring")  casadi::MX::binary(int op, const MX &x, const MX &y)
"

Create nodes by their ID.

";

%feature("docstring")  casadi::MX::indexed_assignment(const IndexList &rr,
const IndexList &cc, const MX &m) "

get a non-zero

Indexing for interfaced languages

";

%feature("docstring")  casadi::MX::indexed_assignment(const Slice &rr, const
Slice &cc, const MX &m) "

get a non-zero

Indexing for interfaced languages

";

%feature("docstring")  casadi::MX::indexed_assignment(const Sparsity &sp,
const MX &m) "

get a non-zero

Indexing for interfaced languages

";

%feature("docstring")  casadi::MX::indexed_assignment(const Matrix< int >
&rr, const Slice &cc, const MX &m) "

get a non-zero

Indexing for interfaced languages

";

%feature("docstring")  casadi::MX::indexed_assignment(const Slice &rr, const
Matrix< int > &cc, const MX &m) "

get a non-zero

Indexing for interfaced languages

";

%feature("docstring")  casadi::MX::indexed_assignment(const Matrix< int >
&rr, const IndexList &cc, const MX &m) "

get a non-zero

Indexing for interfaced languages

";

%feature("docstring")  casadi::MX::indexed_assignment(const IndexList &rr,
const Matrix< int > &cc, const MX &m) "

get a non-zero

Indexing for interfaced languages

";

%feature("docstring")  casadi::MX::indexed_assignment(const Matrix< int >
&rr, const Matrix< int > &cc, const MX &m) "

get a non-zero

Indexing for interfaced languages

";

%feature("docstring")  casadi::MX::indexed_assignment(const IndexList &rr,
const MX &m) " ";

%feature("docstring")  casadi::MX::indexed_assignment(const Slice &rr, const
MX &m) " ";

%feature("docstring")  casadi::MX::sparsity() const  "

Get the sparsity pattern.

";

%feature("docstring")  casadi::MX::sub(int rr, int cc) const  " [INTERNAL]
";

%feature("docstring")  casadi::MX::sub(const std::vector< int > &rr, int cc)
const  " [INTERNAL] ";

%feature("docstring")  casadi::MX::sub(int rr, const std::vector< int > &cc)
const  " [INTERNAL] ";

%feature("docstring")  casadi::MX::sub(const std::vector< int > &rr, const
std::vector< int > &cc) const  " [INTERNAL] ";

%feature("docstring")  casadi::MX::sub(const Sparsity &sp, int dummy=0)
const  " [INTERNAL] ";

%feature("docstring")  casadi::MX::sub(const Matrix< int > &rr, int cc)
const  " [INTERNAL] ";

%feature("docstring")  casadi::MX::sub(const Matrix< int > &rr, const
std::vector< int > &cc) const  " [INTERNAL] ";

%feature("docstring")  casadi::MX::sub(const std::vector< int > &rr, const
Matrix< int > &cc) const  " [INTERNAL] ";

%feature("docstring")  casadi::MX::sub(int rr, const Slice &cc) const  "
[INTERNAL] ";

%feature("docstring")  casadi::MX::sub(const Slice &rr, int cc) const  "
[INTERNAL] ";

%feature("docstring")  casadi::MX::sub(const Slice &rr, const Slice &cc)
const  " [INTERNAL] ";

%feature("docstring")  casadi::MX::sub(const Matrix< int > &rr, const Slice
&cc) const  " [INTERNAL] ";

%feature("docstring")  casadi::MX::sub(const Slice &rr, const Matrix< int >
&cc) const  " [INTERNAL] ";

%feature("docstring")  casadi::MX::sub(const Matrix< int > &rr, const
Matrix< int > &cc) const  " [INTERNAL] ";

%feature("docstring")  casadi::MX::sub(int rr, const Matrix< int > &cc)
const  " [INTERNAL] ";

%feature("docstring")  casadi::GenericMatrix< MX  >::size2() const "

Get the second dimension (i.e. number of columns)

";

%feature("docstring")  casadi::MX::log10() const  " ";

%feature("docstring")  casadi::GenericMatrix< MX  >::size1() const "

Get the first dimension (i.e. number of rows)

";

%feature("docstring")  casadi::MX::isEqual(const MX &y, int depth=0) const
"

Check if two nodes are equivalent up to a given depth. Depth=0 checks if the
expressions are identical, i.e. points to the same node.

a = x*x b = x*x

a.isEqual(b,0) will return false, but a.isEqual(b,1) will return true

";

%feature("docstring")  casadi::MX::isEqual(const MXNode *y, int depth=0)
const  " [INTERNAL] ";

%feature("docstring")  casadi::MX::mul(const MX &y, const Sparsity
&sp_z=Sparsity()) const  " ";

%feature("docstring")  casadi::MX::isMultiplication() const  "

Check if multiplication.

";

%feature("docstring") casadi::MX::__add__ "

all binary operations

";

%feature("docstring")  casadi::GenericMatrix< MX  >::size() const "

Get the number of (structural) non-zero elements.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::size(SparsityType sp)
const "

Get the number if non-zeros for a given sparsity pattern.

";

%feature("docstring") casadi::MX::~MX "[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::mul_smart(const MX &y,
const Sparsity &sp_z) const "

Matrix-matrix multiplication. Attempts to identify quick returns on matrix-
level and delegates to MatType::mul_full if no such quick returns are found.

";

%feature("docstring")  casadi::MX::lift(const MX &x_guess) "

Lift an expression.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::MX::nz_indexed_assignment(const IndexList &k,
const MX &m) "

get a non-zero

Indexing for interfaced languages

";

%feature("docstring")  casadi::MX::nz_indexed_assignment(const Slice &k,
const MX &m) "

get a non-zero

Indexing for interfaced languages

";

%feature("docstring")  casadi::MX::nz_indexed_assignment(const Matrix< int >
&k, const MX &m) "

get a non-zero

Indexing for interfaced languages

";

%feature("docstring")  casadi::MX::arccos() const  " ";

%feature("docstring")  casadi::GenericMatrix< MX  >::sizeU() const "

Get the number of non-zeros in the upper triangular half.

";

%feature("docstring")  casadi::MX::isEvaluationOutput() const  "

Check if evaluation output.

";

%feature("docstring") casadi::MX::__rmul__ "";

%feature("docstring")  casadi::MX::exp() const  " ";

%feature("docstring") casadi::MX::__rle__ "";

%feature("docstring")  casadi::GenericMatrix< MX  >::sparse(int nrow=1, int
ncol=1) "

create a sparse matrix with all zeros

";

%feature("docstring")  casadi::GenericMatrix< MX  >::sparse(const std::pair<
int, int > &rc) "

create a sparse matrix with all zeros

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::ones(int nrow=1, int
ncol=1) "

Create a dense matrix or a matrix with specified sparsity with all entries
one.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::ones(const Sparsity
&sp) "

Create a dense matrix or a matrix with specified sparsity with all entries
one.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::ones(const std::pair<
int, int > &rc) "

Create a dense matrix or a matrix with specified sparsity with all entries
one.

";

%feature("docstring")  casadi::MX::addToSum(const MX &x) "

Add an expression to the expression if the expression is non-empty,
otherwise assign.

";

%feature("docstring") casadi::MX::__radd__ "";

%feature("docstring")  casadi::GenericMatrix< MX  >::isDense() const "

Check if the matrix expression is dense.

";

%feature("docstring")  casadi::MX::outer_prod(const MX &y) const  " ";

%feature("docstring")  casadi::MX::indexed_zero_based(int rr, int cc) const
"

get a non-zero

Indexing for interfaced languages

";

%feature("docstring")  casadi::MX::indexed_zero_based(int rr) const  "

get a non-zero

Indexing for interfaced languages

";

%feature("docstring")  casadi::MX::isIdentity() const  "

check if identity

";

%feature("docstring")  casadi::MX::log() const  " ";

%feature("docstring")  casadi::MX::isMinusOne() const  "

check if zero (note that false negative answers are possible)

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring") casadi::MX::__sub__ "";

%feature("docstring")  casadi::MX::inf(const Sparsity &sp) "

create a matrix with all inf

";

%feature("docstring")  casadi::MX::inf(int nrow=1, int ncol=1) "

create a matrix with all inf

";

%feature("docstring")  casadi::MX::inf(const std::pair< int, int > &rc) "

create a matrix with all inf

";

%feature("docstring")  casadi::MX::isSymbolicSparse() const  "

check if all nonzeros are symbolic (this function is currently identical to
isSymbolic)

";

%feature("docstring")  casadi::MX::constpow(const MX &y) const  " ";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::MX::isRegular() const  "

Checks if expression does not contain NaN or Inf.

";

%feature("docstring")  casadi::MX::getName() const  "

Get the name.

";

%feature("docstring")  casadi::MX::tan() const  " ";

%feature("docstring")  casadi::MX::getDep(int ch=0) const  "

Get the nth dependency as MX.

";

%feature("docstring") casadi::MX::__mpower__ "";

%feature("docstring") casadi::MX::__le__ "";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::MX::indexed_zero_based_assignment(int rr, int
cc, const MX &m) "

get a non-zero

Indexing for interfaced languages

";

%feature("docstring")  casadi::MX::indexed_zero_based_assignment(const
Matrix< int > &k, const MX &m) "

get a non-zero

Indexing for interfaced languages

";

%feature("docstring")  casadi::MX::indexed_zero_based_assignment(int rr,
const MX &m) " ";

%feature("docstring")  casadi::GenericMatrix< MX  >::isScalar(bool
scalar_and_dense=false) const "

Check if the matrix expression is scalar.

";

%feature("docstring")  casadi::MX::setSparse(const Sparsity &sp, bool
intersect=false) const  "

Set sparse.

";

%feature("docstring")  casadi::MX::sinh() const  " ";

%feature("docstring")  casadi::GenericMatrix< MX  >::isTril() const "

Check if the matrix is lower triangular.

";

%feature("docstring") casadi::MX::__ge__ "

No need to have both <= and >=.

";

%feature("docstring")  casadi::MX::setSub(const MX &m, int rr, int cc) "
[INTERNAL] ";

%feature("docstring")  casadi::MX::setSub(const MX &m, const std::vector<
int > &rr, int cc) " [INTERNAL] ";

%feature("docstring")  casadi::MX::setSub(const MX &m, int rr, const
std::vector< int > &cc) " [INTERNAL] ";

%feature("docstring")  casadi::MX::setSub(const MX &m, const std::vector<
int > &rr, const std::vector< int > &cc) " [INTERNAL] ";

%feature("docstring")  casadi::MX::setSub(const MX &m, const std::vector<
int > &rr, Slice cc) " [INTERNAL] ";

%feature("docstring")  casadi::MX::setSub(const MX &m, const Matrix< int >
&rr, const std::vector< int > &cc) " [INTERNAL] ";

%feature("docstring")  casadi::MX::setSub(const MX &m, const Matrix< int >
&rr, int cc) " [INTERNAL] ";

%feature("docstring")  casadi::MX::setSub(const MX &m, const std::vector<
int > &rr, const Matrix< int > &cc) " [INTERNAL] ";

%feature("docstring")  casadi::MX::setSub(const MX &m, int rr, const Matrix<
int > &cc) " [INTERNAL] ";

%feature("docstring")  casadi::MX::setSub(const MX &m, const Slice &rr,
const Slice &cc) " [INTERNAL] ";

%feature("docstring")  casadi::MX::setSub(const MX &m, const Matrix< int >
&rr, const Matrix< int > &cc) " [INTERNAL] ";

%feature("docstring")  casadi::MX::setSub(const MX &m, const Sparsity &sp,
int dummy) " [INTERNAL] ";

%feature("docstring")  casadi::MX::isZero() const  "

check if zero (note that false negative answers are possible)

";

%feature("docstring")  casadi::MX::logic_and(const MX &y) const  " ";

%feature("docstring")  casadi::MX::getValue() const  "

Get the value (only for scalar constant nodes)

";

%feature("docstring")  casadi::MX::arctanh() const  " ";

%feature("docstring")  casadi::MX::getEvaluationOutput() const  "

Get the index of evaluation output - only valid when isEvaluationoutput() is
true.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::isTriu() const "

Check if the matrix is upper triangular.

";

%feature("docstring")  casadi::MX::arctan() const  " ";

%feature("docstring") casadi::MX::__mrdivide__ "";

%feature("docstring")  casadi::MX::appendColumns(const MX &y) "

Append a matrix horizontally.

";

%feature("docstring") casadi::MX::__hash__ "

Returns a number that is unique for a given MXNode. If the MX does not point
to any node, 0 is returned.

";

%feature("docstring")  casadi::MX::getOutput(int oind=0) const  "

Get an output.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::zeros(int nrow=1, int
ncol=1) "

Create a dense matrix or a matrix with specified sparsity with all entries
zero.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::zeros(const Sparsity
&sp) "

Create a dense matrix or a matrix with specified sparsity with all entries
zero.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::zeros(const std::pair<
int, int > &rc) "

Create a dense matrix or a matrix with specified sparsity with all entries
zero.

";

%feature("docstring")  casadi::MX::erfinv() const  " ";

%feature("docstring") casadi::MX::__rdiv__ "";

%feature("docstring")  casadi::MX::T() const  " [INTERNAL]   Transpose the
matrix (shorthand)

";

%feature("docstring")  casadi::MX::sign() const  " ";

%feature("docstring")  casadi::MX::cosh() const  " ";

%feature("docstring")  casadi::MX::printme(const MX &y) const  " ";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::MX::nan(const Sparsity &sp) "

create a matrix with all nan

";

%feature("docstring")  casadi::MX::nan(int nrow=1, int ncol=1) "

create a matrix with all nan

";

%feature("docstring")  casadi::MX::nan(const std::pair< int, int > &rc) "

create a matrix with all nan

";

%feature("docstring")  casadi::MX::isTranspose() const  "

Is the expression a transpose?

";

%feature("docstring") casadi::MX::__rtruediv__ "";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::MX::logic_not() const  " ";

%feature("docstring")  casadi::MX::erf() const  " ";

%feature("docstring")  casadi::MX::arcsinh() const  " ";

%feature("docstring") casadi::MX::__eq__ "";

%feature("docstring")  casadi::MX::at(int k) const  " [INTERNAL]  Get a non-
zero element, with bounds checking.

";

%feature("docstring")  casadi::MX::at(int k) " [INTERNAL]  Access a non-zero
element, with bounds checking.

Access a non-zero element.

";

%feature("docstring")  casadi::MX::sin() const  " ";

%feature("docstring")  casadi::MX::nz_indexed_one_based_assignment(int k,
const MX &m) "

set a non-zero

";

%feature("docstring")  casadi::MX::isCommutative() const  "

Check if commutative operation.

";

%feature("docstring")  casadi::MX::repmat(const MX &x, const Sparsity &sp) "

create a matrix by repeating an existing matrix

";

%feature("docstring")  casadi::MX::repmat(const MX &x, int nrow, int ncol=1)
"

create a matrix by repeating an existing matrix

";

%feature("docstring")  casadi::MX::repmat(const MX &x, const std::pair< int,
int > &rc) "

create a matrix by repeating an existing matrix

";

%feature("docstring") casadi::MX::__rlt__ "";

%feature("docstring") casadi::MX::__div__ "";

%feature("docstring")  casadi::MX::enlarge(int nrow, int ncol, const
std::vector< int > &rr, const std::vector< int > &cc) "

Enlarge matrix Make the matrix larger by inserting empty rows and columns,
keeping the existing non-zeros.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::sym(const std::string
&name, int nrow=1, int ncol=1) "

Create an nrow-by-ncol symbolic primitive.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::sym(const std::string
&name, const std::pair< int, int > &rc) "

Construct a symbolic primitive with given dimensions.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::sym(const std::string
&name, const Sparsity &sp) "

Create symbolic primitive with a given sparsity pattern.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::sym(const std::string
&name, const Sparsity &sp, int p) "

Create a vector of length p with with matrices with symbolic primitives of
given sparsity.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::sym(const std::string
&name, int nrow, int ncol, int p) "

Create a vector of length p with nrow-by-ncol symbolic primitives.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::sym(const std::string
&name, const Sparsity &sp, int p, int r) "

Create a vector of length r of vectors of length p with symbolic primitives
with given sparsity.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::sym(const std::string
&name, int nrow, int ncol, int p, int r) "

Create a vector of length r of vectors of length p with nrow-by-ncol
symbolic primitives.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::isVector() const "

Check if the matrix is a vector (i.e. size2()==1)

";

%feature("docstring")  casadi::GenericMatrix< MX  >::isSquare() const "

Check if the matrix expression is square.

";

%feature("docstring")  casadi::MX::setNZ(int k, const MX &el) " [INTERNAL]
";

%feature("docstring")  casadi::MX::setNZ(const std::vector< int > &k, const
MX &el) " [INTERNAL] ";

%feature("docstring")  casadi::MX::setNZ(const Slice &k, const MX &m) "
[INTERNAL] ";

%feature("docstring")  casadi::MX::setNZ(const Matrix< int > &k, const MX
&m) " [INTERNAL] ";

%feature("docstring")  casadi::MX::isOne() const  "

check if zero (note that false negative answers are possible)

";

%feature("docstring")  casadi::MX::floor() const  " ";

%feature("docstring")  casadi::MX::if_else_zero(const MX &y) const  " ";

%feature("docstring") casadi::MX::__ne__ "";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::MX::getFunction() "

Get function.

";

%feature("docstring")  casadi::GenericMatrix< MX  >::isEmpty(bool
both=false) const "

Check if the sparsity is empty, i.e. if one of the dimensions is zero (or
optionally both dimensions)

";

%feature("docstring") casadi::MX::__rge__ "";

%feature("docstring")  casadi::MX::mul_full(const MX &y, const Sparsity
&sp_z=Sparsity()) const  " ";

%feature("docstring")  casadi::MX::tanh() const  " ";

%feature("docstring")  casadi::MX::nz_indexed(const IndexList &k) const  "

get a non-zero

Indexing for interfaced languages

";

%feature("docstring")  casadi::MX::nz_indexed(const Slice &k) const  "

get a non-zero

Indexing for interfaced languages

";

%feature("docstring")  casadi::MX::nz_indexed(const Matrix< int > &k) const
"

get a non-zero

Indexing for interfaced languages

";

%feature("docstring") casadi::MX::__nonzero__ "

Returns the truth value of an MX expression.

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::MX::cos() const  " ";

%feature("docstring")  casadi::MX::nz_indexed_one_based(int k) const  "

get a non-zero

Indexing for interfaced languages

";

%feature("docstring")  casadi::MX::arccosh() const  " ";

%feature("docstring")  casadi::GenericMatrix< MX  >::numel() const "

Get the number of elements.

";

%feature("docstring")  casadi::MX::ceil() const  " ";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring") casadi::MX::__req__ "";

%feature("docstring")  casadi::MX::fabs() const  " ";

%feature("docstring")  casadi::MX::sparsityRef() "

Access the sparsity, make a copy if there are multiple references to it.

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring") casadi::MX::MX(const Sparsity &sp, int val=0) "

Construct constant matrix with a given sparsity.

";

%feature("docstring") casadi::MX::MX(const Sparsity &sp, double val) "

Construct constant matrix with a given sparsity.

";

%feature("docstring") casadi::MX::MX(const Sparsity &sp, const MX &val) "

Construct constant matrix with a given sparsity.

";

%feature("docstring") casadi::MX::MX() "

Default constructor.

";

%feature("docstring") casadi::MX::MX(double x) "

Create scalar constant (also implicit type conversion)

";

%feature("docstring") casadi::MX::MX(const MX &x) "

Copy constructor.

";

%feature("docstring") casadi::MX::MX(const std::vector< double > &x) "

Create vector constant (also implicit type conversion)

";

%feature("docstring") casadi::MX::MX(const Matrix< double > &x) "

Create sparse matrix constant (also implicit type conversion)

";

%feature("docstring")  casadi::MX::isBinary() const  "

Is binary operation.

";

%feature("docstring")  casadi::SharedObject::checkNode() const  " [INTERNAL]
Assert that the node is pointing to the right type of object

";

%feature("docstring")  casadi::MX::isUnary() const  "

Is unary operation.

";

%feature("docstring")  casadi::MX::getOp() const  "

Get operation type.

";

%feature("docstring")  casadi::MX::fmax(const MX &y) const  " ";

%feature("docstring")  casadi::MX::isNorm() const  "

Check if norm.

";

%feature("docstring") casadi::MX::__mldivide__ "

Matrix division from left.

";

%feature("docstring")  casadi::MX::setTemp(int t) " [INTERNAL]  Set the
temporary variable.

";

%feature("docstring")  casadi::MX::fmin(const MX &y) const  " ";

%feature("docstring")  casadi::MX::getMatrixValue() const  "

Get the value (only for constant nodes)

";

%feature("docstring")  casadi::MX::isConstant() const  "

Check if constant.

";

%feature("docstring")  casadi::MX::mapping() const  "

Get an IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring")  casadi::MX::getNZ(int k) const  " [INTERNAL] ";

%feature("docstring")  casadi::MX::getNZ(const std::vector< int > &k) const
" [INTERNAL] ";

%feature("docstring")  casadi::MX::getNZ(const Slice &k) const  " [INTERNAL]
";

%feature("docstring")  casadi::MX::getNZ(const Matrix< int > &k) const  "
[INTERNAL] ";

%feature("docstring")  casadi::MX::isEvaluation() const  "

Check if evaluation.

";

%feature("docstring")  casadi::MX::isOperation(int op) const  "

Is it a certain operation.

";

%feature("docstring") casadi::MX::__truediv__ "";

%feature("docstring")  casadi::GenericMatrix< MX  >::shape() const "
[INTERNAL]  Get the shape.

";

%feature("docstring")  casadi::MX::getNdeps() const  "

Get the number of dependencies of a binary SXElement.

";

%feature("docstring")  casadi::MX::logic_or(const MX &y) const  " ";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::MX::nz_indexed_zero_based(int k) const  "

get a non-zero

Indexing for interfaced languages

";

%feature("docstring")  casadi::MX::isSymbolic() const  "

Check if symbolic.

";

%feature("docstring")  casadi::MX::indexed_one_based_assignment(int rr, int
cc, const MX &m) "

set a matrix element

";

%feature("docstring")  casadi::MX::indexed_one_based_assignment(int rr,
const MX &m) " ";

%feature("docstring") casadi::MX::__pow__ "";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::MX::unary(int op, const MX &x) "

Create nodes by their ID.

";


// File: structcasadi_1_1MXAlgEl.xml
%feature("docstring") casadi::MXAlgEl "[INTERNAL]  An element of the
algorithm, namely an MX node.

C++ includes: mx_function.hpp ";


// File: classcasadi_1_1MXFunction.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")  casadi::IOInterface<
Function  >::outputSchemeEntry(const std::string &name) const " [INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::MXFunction::MXFunction() "

Default constructor.

";

%feature("docstring") casadi::MXFunction::MXFunction(const Function
&function) "

Attempt to form an MXFunction out of an Function.

";

%feature("docstring") casadi::MXFunction::MXFunction(const MX &input, const
MX &output) " [INTERNAL]  Single input, single output.

";

%feature("docstring") casadi::MXFunction::MXFunction(const MX &input, const
std::vector< MX > &output) " [INTERNAL]  Single input, multiple output.

";

%feature("docstring") casadi::MXFunction::MXFunction(const std::vector< MX >
&input, const MX &output) " [INTERNAL]  Multiple input, single output.

";

%feature("docstring") casadi::MXFunction::MXFunction(const std::vector< MX >
&input, const std::vector< MX > &output) "

Multiple input, multiple output.

";

%feature("docstring") casadi::MXFunction::MXFunction(const std::vector< MX >
&input, const IOSchemeVector< MX > &output) "

Multiple input, multiple output.

";

%feature("docstring") casadi::MXFunction::MXFunction(const IOSchemeVector<
MX > &input, const std::vector< MX > &output) "

Multiple input, multiple output.

";

%feature("docstring") casadi::MXFunction::MXFunction(const IOSchemeVector<
MX > &input, const IOSchemeVector< MX > &output) "

Multiple input, multiple output.

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::MXFunction::expand(const std::vector< SX >
&inputv=std::vector< SX >()) "

Expand the matrix valued graph into a scalar valued graph.

";

%feature("docstring")  casadi::MXFunction::jac(int iind=0, int oind=0, bool
compact=false, bool symmetric=false) "

Jacobian via source code transformation.

";

%feature("docstring")  casadi::MXFunction::jac(const std::string &iname, int
oind=0, bool compact=false, bool symmetric=false) "

Jacobian via source code transformation.

";

%feature("docstring")  casadi::MXFunction::jac(int iind, const std::string
&oname, bool compact=false, bool symmetric=false) "

Jacobian via source code transformation.

";

%feature("docstring")  casadi::MXFunction::jac(const std::string &iname,
const std::string &oname, bool compact=false, bool symmetric=false) "

Jacobian via source code transformation.

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::MXFunction::outputExpr(int ind) const  "

Get function output.

";

%feature("docstring")  casadi::MXFunction::outputExpr(const std::string
&oname) const  " ";

%feature("docstring")  casadi::MXFunction::outputExpr() const  "

Get all function outputs.

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::MXFunction::grad(int iind=0, int oind=0) "

Gradient via source code transformation.

";

%feature("docstring")  casadi::MXFunction::grad(const std::string &iname,
int oind=0) "

Gradient via source code transformation.

";

%feature("docstring")  casadi::MXFunction::grad(int iind, const std::string
&oname) "

Gradient via source code transformation.

";

%feature("docstring")  casadi::MXFunction::grad(const std::string &iname,
const std::string &oname) "

Gradient via source code transformation.

";

%feature("docstring")  casadi::MXFunction::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::MXFunction::inputExpr(int ind) const  "

Get function input.

";

%feature("docstring")  casadi::MXFunction::inputExpr(const std::string
&iname) const  " ";

%feature("docstring")  casadi::MXFunction::inputExpr() const  "

Get all function inputs.

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")  casadi::MXFunction::getAlgorithmSize() const  "

Get the number of atomic operations.

";

%feature("docstring")  casadi::MXFunction::tang(int iind=0, int oind=0) "

Tangent via source code transformation.

";

%feature("docstring")  casadi::MXFunction::tang(const std::string &iname,
int oind=0) "

Tangent via source code transformation.

";

%feature("docstring")  casadi::MXFunction::tang(int iind, const std::string
&oname) "

Tangent via source code transformation.

";

%feature("docstring")  casadi::MXFunction::tang(const std::string &iname,
const std::string &oname) "

Tangent via source code transformation.

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::MXFunction "

General function mapping from/to MX.

Joel Andersson

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: mx_function.hpp ";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::MXFunction::countNodes() const  "

Number of nodes in the algorithm.

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::MXFunction::algorithm() const  " [INTERNAL]
Access the algorithm directly.

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::MXFunction::getFree() const  "

Get all the free variables of the function.

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::MXFunction::getWorkSize() const  "

Get the length of the work vector.

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")
casadi::MXFunction::generateLiftingFunctions(MXFunction &vdef_fcn,
MXFunction &vinit_fcn) " [INTERNAL]  Extract the functions needed for the
Lifted Newton method.

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";


// File: classcasadi_1_1MXNode.xml
%feature("docstring")  casadi::MXNode::getName() const  " [INTERNAL]  Get
the name.

";

%feature("docstring")  casadi::MXNode::setSparsity(const Sparsity &sparsity)
" [INTERNAL]  Set the sparsity.

";

%feature("docstring")  casadi::MXNode::addDependency(const MX &dep) "
[INTERNAL]  Add a dependency.

";

%feature("docstring")  casadi::MXNode::getUnary(int op) const  " [INTERNAL]
Get a unary operation.

";

%feature("docstring")  casadi::MXNode::getInverse() const  " [INTERNAL]
Inverse.

";

%feature("docstring")  casadi::MXNode::numel() const  " [INTERNAL]  Get
shape.

";

%feature("docstring") casadi::MXNode::MXNode() "[INTERNAL]  Constructor.

";

%feature("docstring")  casadi::MXNode::isIdentity() const  " [INTERNAL]
Check if identity matrix.

";

%feature("docstring")  casadi::MXNode::isOutputNode() const  " [INTERNAL]
Check if evaluation output.

";

%feature("docstring")  casadi::MXNode::isUnaryOp() const  " [INTERNAL]
Check if unary operation.

";

%feature("docstring")  casadi::MXNode::getMatrixValue() const  " [INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring")  casadi::MXNode::sparsity() const  " [INTERNAL]  Get
the sparsity.

";

%feature("docstring")  casadi::MXNode::sparsity(int oind) const  "
[INTERNAL]  Get the sparsity of output oind.

";

%feature("docstring")  casadi::MXNode::getVertsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a vertical split node (vectors
only)

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream) const  "
[INTERNAL]  Print a description.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream, long
&remaining_calls) const  " [INTERNAL]  Print expression (make sure number of
calls is not exceeded)

";

%feature("docstring")  casadi::MXNode::nTmp(size_t &ni, size_t &nr) "
[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::MXNode::getSubRef(const Slice &i, const Slice
&j) const  " [INTERNAL]  Get submatrix reference.

";

%feature("docstring")  casadi::MXNode::getOp() const  " [INTERNAL]  Get the
operation.

";

%feature("docstring")  casadi::MXNode::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied) " [INTERNAL]  Deep copy
data members.

";

%feature("docstring")  casadi::MXNode::isZero() const  " [INTERNAL]  Check
if identically zero.

";

%feature("docstring")  casadi::MXNode::ndep() const  " [INTERNAL]  Number of
dependencies.

";

%feature("docstring") casadi::MXNode::~MXNode "[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::MXNode::getInnerProd(const MX &y) const  "
[INTERNAL]  Inner product.

";

%feature("docstring")  casadi::MXNode::getReshape(const Sparsity &sp) const
" [INTERNAL]   Reshape.

";

%feature("docstring")  casadi::MXNode::isMultipleOutput() const  "
[INTERNAL]  Check if a multiple output node.

";

%feature("docstring")  casadi::MXNode::getBinarySwitch(int op, const MX &y)
const  " [INTERNAL]  Get a binary operation operation.

";

%feature("docstring")  casadi::MXNode::getNormInf() const  " [INTERNAL]
Infinity norm.

";

%feature("docstring")  casadi::MXNode::getNorm2() const  " [INTERNAL]
Spectral norm.

";

%feature("docstring")  casadi::MXNode::evaluateMX(const MXPtrV &input,
MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV
&adjSeed, MXPtrVV &adjSens, bool output_given) " [INTERNAL]  Evaluate
symbolically ( MX)

";

%feature("docstring")  casadi::MXNode::evaluateMX(const MXPtrV &input,
MXPtrV &output) " [INTERNAL]  Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring")  casadi::MXNode::getAddNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Add the nonzeros of a matrix to
another matrix.

";

%feature("docstring")  casadi::MXNode::getNorm1() const  " [INTERNAL]
1-norm

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep) "
[INTERNAL]  Set unary dependency.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2) " [INTERNAL]  Set binary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2, const MX &dep3) " [INTERNAL]  Set ternary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const std::vector< MX
> &dep) " [INTERNAL]  Set multiple dependencies.

";

%feature("docstring")  casadi::MXNode::repr(std::ostream &stream) const  "
[INTERNAL]  Print a representation.

";

%feature("docstring")  casadi::MXNode::evaluateD(const DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp)
" [INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::MXNode::getGetNonzeros(const Sparsity &sp,
const std::vector< int > &nz) const  " [INTERNAL]  Get the nonzeros of
matrix.

";

%feature("docstring")  casadi::MXNode::getHorzcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a horizontal concatenation node.

";

%feature("docstring")  casadi::MXNode::getFunctionOutput() const  "
[INTERNAL]  Get function output.

";

%feature("docstring")  casadi::MXNode::getFunctionInput() const  "
[INTERNAL]  Get function input.

";

%feature("docstring")  casadi::MXNode::getSolve(const MX &r, bool tr, const
LinearSolver &linear_solver) const  " [INTERNAL]   Solve a system of linear
equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") casadi::MXNode "[INTERNAL]  Node class for MX
objects.

Joel Andersson

C++ includes: mx_node.hpp ";

%feature("docstring")  casadi::MXNode::size() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getHorzsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a horizontal split node.

";

%feature("docstring")  casadi::MXNode::getAssertion(const MX &y, const
std::string &fail_message="") const  " [INTERNAL]   Assertion.

";

%feature("docstring")  casadi::MXNode::getVertcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a vertical concatenation node (vectors only)

";

%feature("docstring")  casadi::MXNode::size2() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getNormF() const  " [INTERNAL]
Frobenius norm.

";

%feature("docstring")  casadi::MXNode::size1() const  " [INTERNAL] ";

%feature("docstring")  casadi::SharedObjectNode::assertInit() const  "
[INTERNAL]  Assert that the object has been initialized.

";

%feature("docstring")  casadi::SharedObjectNode::weak() "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring")  casadi::MXNode::getTranspose() const  " [INTERNAL]
Transpose.

";

%feature("docstring")  casadi::MXNode::getOutput(int oind) const  "
[INTERNAL]  Get an output.

";

%feature("docstring")  casadi::MXNode::getSubAssign(const MX &y, const Slice
&i, const Slice &j) const  " [INTERNAL]  Get submatrix assignment.

";

%feature("docstring")  casadi::MXNode::clone() const  " [INTERNAL]  Clone
function.

";

%feature("docstring")  casadi::MXNode::shape() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::isValue(double val) const  "
[INTERNAL]  Check if a certain value.

";

%feature("docstring")  casadi::MXNode::mapping() const  " [INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, const std::vector< int > &onz, bool add=false) "
[INTERNAL]  Assign nonzeros (mapping matrix)

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, bool add=false) " [INTERNAL]  Assign nonzeros
(mapping matrix), output indices sequential.

";

%feature("docstring")  casadi::SharedObjectNode::isInit() const  "
[INTERNAL]  Check if the object has been initialized.

";

%feature("docstring")  casadi::MXNode::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp,
bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, bool fwd) " [INTERNAL]  Propagate sparsity, no work.

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) const  " [INTERNAL]
dependencies - functions that have to be evaluated before this one

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::isEqual(const MXNode *node, int
depth) const  " [INTERNAL]  Check if two nodes are equivalent up to a given
depth.

";

%feature("docstring")  casadi::MXNode::isBinaryOp() const  " [INTERNAL]
Check if binary operation.

";

%feature("docstring")  casadi::MXNode::hasDep() const  " [INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring")  casadi::SharedObjectNode::init() "[INTERNAL]
Initialize the object.

";

%feature("docstring")  casadi::MXNode::getValue() const  " [INTERNAL]  Get
the value (only for scalar constant nodes)

";

%feature("docstring")  casadi::MXNode::numInplace() const  " [INTERNAL]  Can
the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring")  casadi::MXNode::isOne() const  " [INTERNAL]  Check if
identically one.

";

%feature("docstring")  casadi::MXNode::getBinary(int op, const MX &y, bool
scX, bool scY) const  " [INTERNAL]  Get a binary operation operation
(matrix-matrix)

";

%feature("docstring") casadi::MXNode::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring")  casadi::MXNode::evaluateSX(const SXPtrV &input,
SXPtrV &output, std::vector< int > &itmp, std::vector< SXElement > &rtmp) "
[INTERNAL]  Evaluate symbolically (SX)

";

%feature("docstring")  casadi::MXNode::simplifyMe(MX &ex) " [INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring")  casadi::MXNode::isNonLinear() "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring")  casadi::MXNode::getSetSparse(const Sparsity &sp)
const  " [INTERNAL]  Create set sparse.

";

%feature("docstring")  casadi::MXNode::sameOpAndDeps(const MXNode *node, int
depth) const  " [INTERNAL]  Checks if two nodes have the same operation and
have equivalent dependencies up to a given depth.

";

%feature("docstring")  casadi::MXNode::getDeterminant() const  " [INTERNAL]
Determinant.

";

%feature("docstring")  casadi::MXNode::getFunction() "[INTERNAL]  Get
function reference.

";

%feature("docstring")  casadi::MXNode::getFunction() const  " [INTERNAL]
Get function reference.

";

%feature("docstring")  casadi::MXNode::getNumOutputs() const  " [INTERNAL]
Number of outputs.

";

%feature("docstring")  casadi::MXNode::getSetNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Assign the nonzeros of a matrix
to another matrix.

";

%feature("docstring")  casadi::MXNode::generateOperation(std::ostream
&stream, const std::vector< std::string > &arg, const std::vector<
std::string > &res, CodeGenerator &gen) const  " [INTERNAL]  Generate code
for the operation.

";

%feature("docstring")  casadi::SharedObjectNode::getCount() const  "
[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::MXNode::printPart(std::ostream &stream, int
part) const  " [INTERNAL]  Print a part of the expression.

";

%feature("docstring")  casadi::MXNode::getMultiplication(const MX &y, const
Sparsity &sp_z=Sparsity()) const  " [INTERNAL]   Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";


// File: structcasadi_1_1mysortclass.xml
%feature("docstring") casadi::mysortclass "[INTERNAL]  A helper class to
use stl::sort in OptionsFunctionalityNode::getBestMatches

";


// File: classcasadi_1_1NanSX.xml
%feature("docstring")  casadi::SXNode::isSmooth() const  " [INTERNAL]  Check
if smooth.

";

%feature("docstring")  casadi::SXNode::isMinusInf() const  " [INTERNAL]
check properties of a node

";

%feature("docstring")  casadi::SXNode::print(std::ostream &stream) const  "
[INTERNAL]  print

";

%feature("docstring")  casadi::SXNode::isSymbolic() const  " [INTERNAL]
check properties of a node

";

%feature("docstring")  casadi::SXNode::init() "[INTERNAL]  Initialize the
node (currently used only to give a similar interface to MXNode)

";

%feature("docstring")  casadi::SXNode::isInf() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring")  casadi::NanSX::getValue() const  " [INTERNAL]  Get
the value.

";

%feature("docstring")  casadi::SXNode::dep(int i) const  " [INTERNAL]  get
the reference of a child

";

%feature("docstring")  casadi::SXNode::dep(int i) " [INTERNAL]  get the
reference of a child

";

%feature("docstring")  casadi::SXNode::hasDep() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::NanSX "[INTERNAL]  Represents a not-a-number
SX.

Joel Andersson

C++ includes: constant_sx.hpp ";

%feature("docstring")  casadi::NanSX::isNan() const  " [INTERNAL]
Properties.

";

%feature("docstring")  casadi::ConstantSX::isConstant() const  " [INTERNAL]
Properties.

";

%feature("docstring")  casadi::ConstantSX::isEqual(const SXNode *node, int
depth) const  " [INTERNAL]  Check if two nodes are equivalent up to a given
depth.

";

%feature("docstring")  casadi::SXNode::getName() const  " [INTERNAL] ";

%feature("docstring")  casadi::SXNode::mark() "[INTERNAL] ";

%feature("docstring") casadi::NanSX::~NanSX "[INTERNAL] ";

%feature("docstring")  casadi::SXNode::isAlmostZero(double tol) const  "
[INTERNAL]  check properties of a node

";

%feature("docstring")  casadi::SXNode::isOne() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring")  casadi::SXNode::isMinusOne() const  " [INTERNAL]
check properties of a node

";

%feature("docstring")  casadi::SXNode::ndep() const  " [INTERNAL]  Number of
dependencies.

";

%feature("docstring") casadi::NanSX::NanSX() "[INTERNAL] ";

%feature("docstring")  casadi::ConstantSX::getOp() const  " [INTERNAL]  Get
the operation.

";

%feature("docstring")  casadi::SXNode::isZero() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring")  casadi::SXNode::getIntValue() const  " [INTERNAL]
Get value of a constant node.

";

%feature("docstring")  casadi::SXNode::marked() const  " [INTERNAL] ";

%feature("docstring")  casadi::SXNode::isInteger() const  " [INTERNAL]
check properties of a node

";


// File: classcasadi_1_1NewtonImplicitSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::OptionsFunctionality::setOption(const std::string &str, const
GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::NewtonImplicitSolver::NewtonImplicitSolver() "

Default constructor.

";

%feature("docstring")
casadi::NewtonImplicitSolver::NewtonImplicitSolver(const Function &f, const
Function &jac=Function(), const LinearSolver &linsol=LinearSolver()) "

Create a solver instance.

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring") casadi::NewtonImplicitSolver "

Implements simple newton iterations to solve an implicit function.

The equation:

F(z, x1, x2, ..., xn) == 0

where d_F/dz is invertible, implicitly defines the equation:

z := G(x1, x2, ..., xn)

F should be an Function mapping from (n+1) inputs to m outputs. The first
output is the residual that should be zero.

ImplicitFunction (G) is an Function mapping from n inputs to m outputs. n
may be zero. The first output is the solved for z.

You can provide an initial guess for z by setting output(0) of
ImplicitFunction.

Joris Gillis

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| constraints  | OT_INTEGERVE | GenericType( | 1: ui >=     | casadi::Impl |
|              | CTOR         | )            | 0.0, -1: ui  | icitFunction |
|              |              |              | <= 0.0, 2:   | Internal     |
|              |              |              | ui > 0.0,    |              |
|              |              |              | -2: ui <     |              |
|              |              |              | 0.0.         |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| just_in_time | OT_BOOLEAN   | false        | compilation  | casadi::Newt |
| _sparsity    |              |              | to a CPU or  | onImplicitIn |
|              |              |              | GPU using    | ternal       |
|              |              |              | OpenCL       |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | (step|stepsi | casadi::Newt |
|              | TOR          | )            | ze|J|F|normF | onImplicitIn |
|              |              |              | )            | ternal       |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| parallelizat | OT_STRING    | GenericType( | Passed on to | casadi::Impl |
| ion          |              | )            | casadi::Para | icitFunction |
|              |              |              | llelizer     | Internal     |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available monitors
+----------+--------------------------------+
|    Id    |            Used in             |
+==========+================================+
| F        | casadi::NewtonImplicitInternal |
+----------+--------------------------------+
| J        | casadi::NewtonImplicitInternal |
+----------+--------------------------------+
| normF    | casadi::NewtonImplicitInternal |
+----------+--------------------------------+
| step     | casadi::NewtonImplicitInternal |
+----------+--------------------------------+
| stepsize | casadi::NewtonImplicitInternal |
+----------+--------------------------------+

>List of available stats
+---------------+--------------------------------+
|      Id       |            Used in             |
+===============+================================+
| iter          | casadi::NewtonImplicitInternal |
+---------------+--------------------------------+
| return_status | casadi::NewtonImplicitInternal |
+---------------+--------------------------------+

Diagrams

C++ includes: newton_implicit_solver.hpp ";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::ImplicitFunction::getF() "

Access F.

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::ImplicitFunction::getJac() "

Access Jacobian.

";

%feature("docstring")  casadi::NewtonImplicitSolver::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::ImplicitFunction::getLinsol() "

Access linear solver.

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";


// File: classcasadi_1_1NLPImplicitSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::SharedObject::assertInit() const  " [INTERNAL]  Assert that it is
initialized

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::NLPImplicitSolver::NLPImplicitSolver() "

Default constructor.

";

%feature("docstring") casadi::NLPImplicitSolver::NLPImplicitSolver(const
Function &f, const Function &jac=Function(), const LinearSolver
&linsol=LinearSolver()) "

Create a new solver instance.

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::ImplicitFunction::getJac() "

Access Jacobian.

";

%feature("docstring")  casadi::ImplicitFunction::getLinsol() "

Access linear solver.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::ImplicitFunction::getF() "

Access F.

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring") casadi::NLPImplicitSolver "

Use an NLPSolver as ImplicitFunction solver.

The equation:

F(z, x1, x2, ..., xn) == 0

where d_F/dz is invertible, implicitly defines the equation:

z := G(x1, x2, ..., xn)

F should be an Function mapping from (n+1) inputs to m outputs. The first
output is the residual that should be zero.

ImplicitFunction (G) is an Function mapping from n inputs to m outputs. n
may be zero. The first output is the solved for z.

You can provide an initial guess for z by setting output(0) of
ImplicitFunction.

Joris Gillis

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| barrier_maxi | OT_INTEGER   | 2.100e+09    | Maximum      | casadi::NLPI |
| ter          |              |              | number of    | mplicitInter |
|              |              |              | barrier      | nal          |
|              |              |              | iterations.  |              |
+--------------+--------------+--------------+--------------+--------------+
| constraints  | OT_INTEGERVE | GenericType( | 1: ui >=     | casadi::Impl |
|              | CTOR         | )            | 0.0, -1: ui  | icitFunction |
|              |              |              | <= 0.0, 2:   | Internal     |
|              |              |              | ui > 0.0,    |              |
|              |              |              | -2: ui <     |              |
|              |              |              | 0.0.         |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| parallelizat | OT_STRING    | GenericType( | Passed on to | casadi::Impl |
| ion          |              | )            | casadi::Para | icitFunction |
|              |              |              | llelizer     | Internal     |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available stats
+------------------+-----------------------------+
|        Id        |           Used in           |
+==================+=============================+
| nlp_solver_stats | casadi::NLPImplicitInternal |
+------------------+-----------------------------+

Diagrams

C++ includes: nlp_implicit_solver.hpp ";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::NLPImplicitSolver::getNLPSolver() "

Access NLP solver.

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::NLPImplicitSolver::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";


// File: classcasadi_1_1NLPInputIOSchemeVector.xml
%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "
[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::IOSchemeVector< M  >::repr(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a representation of the object.

";

%feature("docstring") casadi::NLPInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::NLPInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::NLPInputIOSchemeVector "[INTERNAL]  Helper
function for 'NLPInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring")  casadi::IOSchemeVector< M  >::print(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a description of the object.

";

%feature("docstring") casadi::NLPInputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring")  casadi::IOSchemeVector< M  >::vector() const "
[INTERNAL] ";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "
[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::NLPInputIOSchemeVector< M
>::NLPInputIOSchemeVector(const std::vector< M > &t) " [INTERNAL] ";


// File: classcasadi_1_1NLPOutputIOSchemeVector.xml
%feature("docstring")  casadi::IOSchemeVector< M  >::print(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "
[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::IOSchemeVector< M  >::vector() const "
[INTERNAL] ";

%feature("docstring") casadi::NLPOutputIOSchemeVector "[INTERNAL]  Helper
function for 'NLPOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring")  casadi::IOSchemeVector< M  >::repr(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a representation of the object.

";

%feature("docstring") casadi::NLPOutputIOSchemeVector< M
>::NLPOutputIOSchemeVector(const std::vector< M > &t) " [INTERNAL] ";

%feature("docstring") casadi::NLPOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::NLPOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::NLPOutputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "
[INTERNAL]  Return a string with a description (for SWIG)

";


// File: classcasadi_1_1NLPQPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::Function::inputScheme() const  " [INTERNAL]  Access input/output
scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring") casadi::NLPQPSolver::NLPQPSolver() "

Default constructor.

";

%feature("docstring") casadi::NLPQPSolver::NLPQPSolver(const QPStructure
&st) "

Constructor.

Parameters:
-----------

st:  Problem structure

";

%feature("docstring") casadi::NLPQPSolver::NLPQPSolver() "

Default constructor.

";

%feature("docstring") casadi::NLPQPSolver::NLPQPSolver(const QPStructure
&st) "

Constructor.

Parameters:
-----------

st:  Problem structure

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::QPSolver::setLPOptions() "

Set options that make the QP solver more suitable for solving LPs.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::QPSolver::generateNativeCode(const
std::string &filename) const  "

Generate native code in the interfaced language for debugging

";

%feature("docstring")  casadi::QPSolver::generateNativeCode(std::ostream
&file) const  "

Generate native code in the interfaced language for debugging

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")  casadi::NLPQPSolver::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::NLPQPSolver::checkNode() const  " [INTERNAL]
Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring") casadi::NLPQPSolver "

IPOPT QP Solver for quadratic programming.

Solves the following strictly convex problem:

min          1/2 x' H x + g' x  x  subject to             LBA <= A x <= UBA
LBX <= x   <= UBX      with :       H sparse (n x n) positive definite
g dense  (n x 1)      n: number of decision variables (x)     nc: number of
constraints (A)

If H is not positive-definite, the solver should throw an error.

Joris Gillis

>Input scheme: casadi::QPSolverInput (QP_SOLVER_NUM_IN = 10) [qpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_H            | h                      | The square matrix H:   |
|                        |                        | sparse, (n x n). Only  |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical.     |
+------------------------+------------------------+------------------------+
| QP_SOLVER_G            | g                      | The vector g: dense,   |
|                        |                        | (n x 1) .              |
+------------------------+------------------------+------------------------+
| QP_SOLVER_A            | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LBA          | lba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_UBA          | uba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LBX          | lbx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_UBX          | ubx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_X0           | x0                     | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X0       | lam_x0                 | dense                  |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::QPSolverOutput (QP_SOLVER_NUM_OUT = 5) [qpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_X            | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| QP_SOLVER_COST         | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_A        | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X        | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::NLPQ |
| enerator     | EGENERATOR   | )            | directional  | PInternal    |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available stats
+------------------+-----------------------+
|        Id        |        Used in        |
+==================+=======================+
| nlp_solver_stats | casadi::NLPQPInternal |
+------------------+-----------------------+

Diagrams

C++ includes: nlp_qp_solver.hpp ";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";


// File: classcasadi_1_1NLPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::NLPSolver::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::NLPSolver::setQPOptions() "

Set options that make the NLP solver more suitable for solving QPs.

";

%feature("docstring")  casadi::NLPSolver::getReportConstraints() "";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::NLPSolver::hessLag() "

Access the Hessian of the Lagrangian function.

>Input scheme: casadi::JacGInput (JACG_NUM_IN = 3) [jacGIn]
+-----------+-------+---------------------+
| Full name | Short |     Description     |
+===========+=======+=====================+
| JACG_X    | x     | Decision variable . |
+-----------+-------+---------------------+
| JACG_P    | p     | Fixed parameter .   |
+-----------+-------+---------------------+

>Output scheme: casadi::JacGOutput (JACG_NUM_OUT = 4) [jacGOut]
+-----------+-------+-------------------------------+
| Full name | Short |          Description          |
+===========+=======+===============================+
| JACG_JAC  | jac   | Jacobian of the constraints . |
+-----------+-------+-------------------------------+
| JACG_F    | f     | Objective function .          |
+-----------+-------+-------------------------------+
| JACG_G    | g     | Constraint function .         |
+-----------+-------+-------------------------------+

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring") casadi::NLPSolver "

NLPSolver.

Solves the following parametric nonlinear program (NLP):min          F(x,p)
x  subject to             LBX <=   x    <= UBX LBG <= G(x,p) <= UBG
p  == P      nx: number of decision variables     ng: number of constraints
np: number of parameters

Joel Andersson

>Input scheme: casadi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| con_numeric_ | OT_DICTIONAR | GenericType( | constraints  | casadi::NLPS |
| md           | Y            | )            | to be passed | olverInterna |
|              |              |              | to IPOPT     | l            |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_f     | OT_BOOLEAN   | GenericType( | Deprecated,  | casadi::NLPS |
|              |              | )            | use \"expand\" | olverInterna |
|              |              |              | instead.     | l            |
+--------------+--------------+--------------+--------------+--------------+
| expand_g     | OT_BOOLEAN   | GenericType( | Deprecated,  | casadi::NLPS |
|              |              | )            | use \"expand\" | olverInterna |
|              |              |              | instead.     | l            |
+--------------+--------------+--------------+--------------+--------------+
| generate_gra | OT_BOOLEAN   | GenericType( | the gradient | casadi::NLPS |
| dient        |              | )            | of the       | olverInterna |
|              |              |              | objective.   | l            |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_CALLBACK  | GenericType( | Check docume | casadi::NLPS |
| llback       |              | )            | ntation of   | olverInterna |
|              |              |              | Callback .   | l            |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| parametric   | OT_BOOLEAN   | GenericType( | input        | casadi::NLPS |
|              |              | )            | argument     | olverInterna |
|              |              |              | appended at  | l            |
|              |              |              | the end,     |              |
|              |              |              | denoting     |              |
|              |              |              | fixed        |              |
|              |              |              | parameters.  |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: nlp_solver.hpp ";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::NLPSolver::nlp() "

Access the NLP.

>Input scheme: casadi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::NLPSolver::NLPSolver() "

Default constructor.

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::NLPSolver::reportConstraints(std::ostream
&stream=std::cout) "

Prints out a human readable report about possible constraint violations,
after solving.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::NLPSolver::jacG() "

Access the Jacobian of the constraint function.

>Input scheme: casadi::HessLagInput (HESSLAG_NUM_IN = 5) [hessLagIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| HESSLAG_X              | x                      | Decision variable .    |
+------------------------+------------------------+------------------------+
| HESSLAG_P              | p                      | Fixed parameter .      |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_F          | lam_f                  | Multiplier for f. Just |
|                        |                        | a scalar factor for    |
|                        |                        | the objective that the |
|                        |                        | NLP solver might use   |
|                        |                        | to scale the           |
|                        |                        | objective.             |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_G          | lam_g                  | Multiplier for g .     |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::HessLagOutput (HESSLAG_NUM_OUT = 6) [hessLagOut]
+----------------+--------+------------------------------------------------+
|   Full name    | Short  |                  Description                   |
+================+========+================================================+
| HESSLAG_HESS   | hess   | Hessian of the Lagrangian .                    |
+----------------+--------+------------------------------------------------+
| HESSLAG_F      | f      | Objective function .                           |
+----------------+--------+------------------------------------------------+
| HESSLAG_G      | g      | Constraint function .                          |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_X | grad_x | Gradient of the Lagrangian with respect to x . |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_P | grad_p | Gradient of the Lagrangian with respect to p . |
+----------------+--------+------------------------------------------------+

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::NLPSolver::gradF() "

Access the objective gradient function>Input scheme: casadi::GradFInput
(GRADF_NUM_IN = 3) [gradFIn] +-----------+-------+---------------------+ |
Full name | Short |     Description     |
+===========+=======+=====================+ | GRADF_X   | x     | Decision
variable . | +-----------+-------+---------------------+ | GRADF_P   | p
| Fixed parameter .   | +-----------+-------+---------------------+

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";


// File: classcasadi_1_1NLPSolverInputIOSchemeVector.xml
%feature("docstring") casadi::NLPSolverInputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "
[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::IOSchemeVector< M  >::print(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::IOSchemeVector< M  >::vector() const "
[INTERNAL] ";

%feature("docstring") casadi::NLPSolverInputIOSchemeVector< M
>::NLPSolverInputIOSchemeVector(const std::vector< M > &t) " [INTERNAL] ";

%feature("docstring") casadi::NLPSolverInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::NLPSolverInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring")  casadi::IOSchemeVector< M  >::repr(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a representation of the object.

";

%feature("docstring") casadi::NLPSolverInputIOSchemeVector "[INTERNAL]
Helper function for 'NLPSolverInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "
[INTERNAL]  Return a string with a representation (for SWIG)

";


// File: classcasadi_1_1NLPSolverOutputIOSchemeVector.xml
%feature("docstring")  casadi::IOSchemeVector< M  >::repr(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a representation of the object.

";

%feature("docstring") casadi::NLPSolverOutputIOSchemeVector "[INTERNAL]
Helper function for 'NLPSolverOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring")  casadi::IOSchemeVector< M  >::vector() const "
[INTERNAL] ";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "
[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "
[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::NLPSolverOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::NLPSolverOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring")  casadi::IOSchemeVector< M  >::print(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a description of the object.

";

%feature("docstring") casadi::NLPSolverOutputIOSchemeVector< M
>::NLPSolverOutputIOSchemeVector(const std::vector< M > &t) " [INTERNAL] ";

%feature("docstring") casadi::NLPSolverOutputIOSchemeVector::__len__ "[INTERNAL] ";


// File: structcasadi_1_1NonnegativeChecker.xml
%feature("docstring") casadi::NonnegativeChecker "[INTERNAL]  Always non-
negative (false by default)

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1NonnegativeChecker_3_01OP__AND_01_4.xml
%feature("docstring") casadi::NonnegativeChecker< OP_AND > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1NonnegativeChecker_3_01OP__EQ_01_4.xml
%feature("docstring") casadi::NonnegativeChecker< OP_EQ > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1NonnegativeChecker_3_01OP__EXP_01_4.xml
%feature("docstring") casadi::NonnegativeChecker< OP_EXP > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1NonnegativeChecker_3_01OP__LE_01_4.xml
%feature("docstring") casadi::NonnegativeChecker< OP_LE > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1NonnegativeChecker_3_01OP__LT_01_4.xml
%feature("docstring") casadi::NonnegativeChecker< OP_LT > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1NonnegativeChecker_3_01OP__NE_01_4.xml
%feature("docstring") casadi::NonnegativeChecker< OP_NE > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1NonnegativeChecker_3_01OP__NOT_01_4.xml
%feature("docstring") casadi::NonnegativeChecker< OP_NOT > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1NonnegativeChecker_3_01OP__OR_01_4.xml
%feature("docstring") casadi::NonnegativeChecker< OP_OR > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1NonnegativeChecker_3_01OP__SQ_01_4.xml
%feature("docstring") casadi::NonnegativeChecker< OP_SQ > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1NonnegativeChecker_3_01OP__SQRT_01_4.xml
%feature("docstring") casadi::NonnegativeChecker< OP_SQRT > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1NonZero.xml
%feature("docstring") casadi::NonZero "[INTERNAL] C++ includes: matrix.hpp
";


// File: classcasadi_1_1NonZeroIterator.xml
%feature("docstring")  casadi::NonZeroIterator< DataType >::end() "
[INTERNAL] ";

%feature("docstring")  casadi::NonZeroIterator< DataType >::begin() "
[INTERNAL] ";

%feature("docstring") casadi::NonZeroIterator< DataType
>::NonZeroIterator(const Matrix< DataType > &m) " [INTERNAL] ";

%feature("docstring") casadi::NonZeroIterator "[INTERNAL] C++ includes:
matrix.hpp ";


// File: classcasadi_1_1NonZeros.xml
%feature("docstring") casadi::NonZeros< M, K >::NonZeros(M &mat, const K &k)
"

Constructor.

";

%feature("docstring") casadi::NonZeros "

Access to a set of nonzeros.

NonZeros class for Matrix NonZeros is the return type for operator[] of the
Matrix class, it allows access to the value as well as changing the parent
object Joel Andersson

C++ includes: nonzeros.hpp ";


// File: classcasadi_1_1Norm.xml
%feature("docstring")  casadi::MXNode::getOutput(int oind) const  "
[INTERNAL]  Get an output.

";

%feature("docstring")  casadi::MXNode::getInverse() const  " [INTERNAL]
Inverse.

";

%feature("docstring")  casadi::MXNode::getHorzsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a horizontal split node.

";

%feature("docstring")  casadi::MXNode::numel() const  " [INTERNAL]  Get
shape.

";

%feature("docstring")  casadi::MXNode::getSetNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Assign the nonzeros of a matrix
to another matrix.

";

%feature("docstring")  casadi::MXNode::isBinaryOp() const  " [INTERNAL]
Check if binary operation.

";

%feature("docstring")  casadi::MXNode::mapping() const  " [INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring")  casadi::MXNode::getSubRef(const Slice &i, const Slice
&j) const  " [INTERNAL]  Get submatrix reference.

";

%feature("docstring")  casadi::MXNode::clone() const  " [INTERNAL]  Clone
function.

";

%feature("docstring")  casadi::MXNode::printPart(std::ostream &stream, int
part) const  " [INTERNAL]  Print a part of the expression.

";

%feature("docstring")  casadi::MXNode::numInplace() const  " [INTERNAL]  Can
the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring")  casadi::MXNode::getInnerProd(const MX &y) const  "
[INTERNAL]  Inner product.

";

%feature("docstring")  casadi::MXNode::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied) " [INTERNAL]  Deep copy
data members.

";

%feature("docstring")  casadi::MXNode::getDeterminant() const  " [INTERNAL]
Determinant.

";

%feature("docstring")  casadi::MXNode::sparsity() const  " [INTERNAL]  Get
the sparsity.

";

%feature("docstring")  casadi::MXNode::sparsity(int oind) const  "
[INTERNAL]  Get the sparsity of output oind.

";

%feature("docstring")  casadi::MXNode::getSubAssign(const MX &y, const Slice
&i, const Slice &j) const  " [INTERNAL]  Get submatrix assignment.

";

%feature("docstring")  casadi::MXNode::generateOperation(std::ostream
&stream, const std::vector< std::string > &arg, const std::vector<
std::string > &res, CodeGenerator &gen) const  " [INTERNAL]  Generate code
for the operation.

";

%feature("docstring")  casadi::MXNode::nTmp(size_t &ni, size_t &nr) "
[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::MXNode::getVertsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a vertical split node (vectors
only)

";

%feature("docstring")  casadi::MXNode::getName() const  " [INTERNAL]  Get
the name.

";

%feature("docstring")  casadi::MXNode::getMultiplication(const MX &y, const
Sparsity &sp_z=Sparsity()) const  " [INTERNAL]   Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring")  casadi::SharedObjectNode::weak() "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring")  casadi::MXNode::getVertcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a vertical concatenation node (vectors only)

";

%feature("docstring")  casadi::MXNode::size() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getValue() const  " [INTERNAL]  Get
the value (only for scalar constant nodes)

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) const  " [INTERNAL]
dependencies - functions that have to be evaluated before this one

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getAddNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Add the nonzeros of a matrix to
another matrix.

";

%feature("docstring")  casadi::SharedObjectNode::isInit() const  "
[INTERNAL]  Check if the object has been initialized.

";

%feature("docstring")  casadi::MXNode::isOne() const  " [INTERNAL]  Check if
identically one.

";

%feature("docstring")  casadi::SharedObjectNode::init() "[INTERNAL]
Initialize the object.

";

%feature("docstring")  casadi::MXNode::getUnary(int op) const  " [INTERNAL]
Get a unary operation.

";

%feature("docstring")  casadi::MXNode::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp,
bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, bool fwd) " [INTERNAL]  Propagate sparsity, no work.

";

%feature("docstring")  casadi::MXNode::ndep() const  " [INTERNAL]  Number of
dependencies.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream) const  "
[INTERNAL]  Print a description.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream, long
&remaining_calls) const  " [INTERNAL]  Print expression (make sure number of
calls is not exceeded)

";

%feature("docstring")  casadi::MXNode::isEqual(const MXNode *node, int
depth) const  " [INTERNAL]  Check if two nodes are equivalent up to a given
depth.

";

%feature("docstring")  casadi::MXNode::getNorm2() const  " [INTERNAL]
Spectral norm.

";

%feature("docstring")  casadi::MXNode::getNorm1() const  " [INTERNAL]
1-norm

";

%feature("docstring")  casadi::MXNode::evaluateMX(const MXPtrV &input,
MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV
&adjSeed, MXPtrVV &adjSens, bool output_given) " [INTERNAL]  Evaluate
symbolically ( MX)

";

%feature("docstring")  casadi::MXNode::evaluateMX(const MXPtrV &input,
MXPtrV &output) " [INTERNAL]  Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring")  casadi::MXNode::getSolve(const MX &r, bool tr, const
LinearSolver &linear_solver) const  " [INTERNAL]   Solve a system of linear
equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring")  casadi::MXNode::getBinary(int op, const MX &y, bool
scX, bool scY) const  " [INTERNAL]  Get a binary operation operation
(matrix-matrix)

";

%feature("docstring")  casadi::MXNode::isOutputNode() const  " [INTERNAL]
Check if evaluation output.

";

%feature("docstring") casadi::Norm "[INTERNAL]   Matrix and vector norms.

Joel Andersson

C++ includes: norm.hpp ";

%feature("docstring")  casadi::SharedObjectNode::getCount() const  "
[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::MXNode::getMatrixValue() const  " [INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring")  casadi::MXNode::evaluateD(const DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp)
" [INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::MXNode::getNormInf() const  " [INTERNAL]
Infinity norm.

";

%feature("docstring")  casadi::MXNode::getReshape(const Sparsity &sp) const
" [INTERNAL]   Reshape.

";

%feature("docstring")  casadi::SharedObjectNode::assertInit() const  "
[INTERNAL]  Assert that the object has been initialized.

";

%feature("docstring")  casadi::MXNode::getTranspose() const  " [INTERNAL]
Transpose.

";

%feature("docstring")  casadi::MXNode::getNormF() const  " [INTERNAL]
Frobenius norm.

";

%feature("docstring")  casadi::MXNode::simplifyMe(MX &ex) " [INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, const std::vector< int > &onz, bool add=false) "
[INTERNAL]  Assign nonzeros (mapping matrix)

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, bool add=false) " [INTERNAL]  Assign nonzeros
(mapping matrix), output indices sequential.

";

%feature("docstring")  casadi::MXNode::isUnaryOp() const  " [INTERNAL]
Check if unary operation.

";

%feature("docstring")  casadi::MXNode::isValue(double val) const  "
[INTERNAL]  Check if a certain value.

";

%feature("docstring")  casadi::MXNode::size2() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::size1() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getFunctionOutput() const  "
[INTERNAL]  Get function output.

";

%feature("docstring")  casadi::MXNode::repr(std::ostream &stream) const  "
[INTERNAL]  Print a representation.

";

%feature("docstring") casadi::Norm::Norm(const MX &x) " [INTERNAL]
Constructor.

";

%feature("docstring")  casadi::MXNode::getGetNonzeros(const Sparsity &sp,
const std::vector< int > &nz) const  " [INTERNAL]  Get the nonzeros of
matrix.

";

%feature("docstring")  casadi::MXNode::getOp() const  " [INTERNAL]  Get the
operation.

";

%feature("docstring")  casadi::MXNode::getFunctionInput() const  "
[INTERNAL]  Get function input.

";

%feature("docstring")  casadi::MXNode::evaluateSX(const SXPtrV &input,
SXPtrV &output, std::vector< int > &itmp, std::vector< SXElement > &rtmp) "
[INTERNAL]  Evaluate symbolically (SX)

";

%feature("docstring")  casadi::MXNode::addDependency(const MX &dep) "
[INTERNAL]  Add a dependency.

";

%feature("docstring") casadi::Norm::~Norm "[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::MXNode::getBinarySwitch(int op, const MX &y)
const  " [INTERNAL]  Get a binary operation operation.

";

%feature("docstring")  casadi::MXNode::hasDep() const  " [INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring")  casadi::MXNode::isZero() const  " [INTERNAL]  Check
if identically zero.

";

%feature("docstring")  casadi::MXNode::isMultipleOutput() const  "
[INTERNAL]  Check if a multiple output node.

";

%feature("docstring")  casadi::MXNode::getSetSparse(const Sparsity &sp)
const  " [INTERNAL]  Create set sparse.

";

%feature("docstring")  casadi::MXNode::getHorzcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a horizontal concatenation node.

";

%feature("docstring") casadi::Norm::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring")  casadi::MXNode::getNumOutputs() const  " [INTERNAL]
Number of outputs.

";

%feature("docstring")  casadi::MXNode::sameOpAndDeps(const MXNode *node, int
depth) const  " [INTERNAL]  Checks if two nodes have the same operation and
have equivalent dependencies up to a given depth.

";

%feature("docstring")  casadi::MXNode::shape() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::isIdentity() const  " [INTERNAL]
Check if identity matrix.

";

%feature("docstring")  casadi::MXNode::getAssertion(const MX &y, const
std::string &fail_message="") const  " [INTERNAL]   Assertion.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep) "
[INTERNAL]  Set unary dependency.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2) " [INTERNAL]  Set binary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2, const MX &dep3) " [INTERNAL]  Set ternary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const std::vector< MX
> &dep) " [INTERNAL]  Set multiple dependencies.

";

%feature("docstring")  casadi::MXNode::getFunction() "[INTERNAL]  Get
function reference.

";

%feature("docstring")  casadi::MXNode::getFunction() const  " [INTERNAL]
Get function reference.

";

%feature("docstring")  casadi::MXNode::isNonLinear() "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring")  casadi::MXNode::setSparsity(const Sparsity &sparsity)
" [INTERNAL]  Set the sparsity.

";


// File: classcasadi_1_1Norm1.xml
%feature("docstring")  casadi::MXNode::isOne() const  " [INTERNAL]  Check if
identically one.

";

%feature("docstring")  casadi::MXNode::isUnaryOp() const  " [INTERNAL]
Check if unary operation.

";

%feature("docstring")  casadi::MXNode::getNormInf() const  " [INTERNAL]
Infinity norm.

";

%feature("docstring")  casadi::MXNode::getFunctionOutput() const  "
[INTERNAL]  Get function output.

";

%feature("docstring")  casadi::MXNode::isMultipleOutput() const  "
[INTERNAL]  Check if a multiple output node.

";

%feature("docstring")  casadi::MXNode::getHorzsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a horizontal split node.

";

%feature("docstring")  casadi::MXNode::size2() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getBinary(int op, const MX &y, bool
scX, bool scY) const  " [INTERNAL]  Get a binary operation operation
(matrix-matrix)

";

%feature("docstring")  casadi::MXNode::repr(std::ostream &stream) const  "
[INTERNAL]  Print a representation.

";

%feature("docstring")  casadi::Norm1::clone() const  " [INTERNAL]  Clone
function.

";

%feature("docstring")  casadi::MXNode::mapping() const  " [INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring")  casadi::SharedObjectNode::getCount() const  "
[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::Norm1::~Norm1 "[INTERNAL]  Destructor.

";

%feature("docstring") casadi::Norm1 "[INTERNAL]  1-norm

Joel Andersson

C++ includes: norm.hpp ";

%feature("docstring")  casadi::MXNode::getMatrixValue() const  " [INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring")  casadi::MXNode::getGetNonzeros(const Sparsity &sp,
const std::vector< int > &nz) const  " [INTERNAL]  Get the nonzeros of
matrix.

";

%feature("docstring")  casadi::SharedObjectNode::init() "[INTERNAL]
Initialize the object.

";

%feature("docstring")  casadi::MXNode::hasDep() const  " [INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring")  casadi::MXNode::size1() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::isBinaryOp() const  " [INTERNAL]
Check if binary operation.

";

%feature("docstring")  casadi::Norm1::getOp() const  " [INTERNAL]  Get the
operation.

";

%feature("docstring")  casadi::MXNode::simplifyMe(MX &ex) " [INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring")  casadi::MXNode::getValue() const  " [INTERNAL]  Get
the value (only for scalar constant nodes)

";

%feature("docstring")  casadi::MXNode::evaluateSX(const SXPtrV &input,
SXPtrV &output, std::vector< int > &itmp, std::vector< SXElement > &rtmp) "
[INTERNAL]  Evaluate symbolically (SX)

";

%feature("docstring")  casadi::MXNode::getAddNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Add the nonzeros of a matrix to
another matrix.

";

%feature("docstring") casadi::Norm1::Norm1(const MX &x) " [INTERNAL]
Constructor.

";

%feature("docstring")  casadi::MXNode::isOutputNode() const  " [INTERNAL]
Check if evaluation output.

";

%feature("docstring") casadi::Norm1::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring")  casadi::MXNode::getInnerProd(const MX &y) const  "
[INTERNAL]  Inner product.

";

%feature("docstring")  casadi::MXNode::getBinarySwitch(int op, const MX &y)
const  " [INTERNAL]  Get a binary operation operation.

";

%feature("docstring")  casadi::MXNode::getSolve(const MX &r, bool tr, const
LinearSolver &linear_solver) const  " [INTERNAL]   Solve a system of linear
equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring")  casadi::MXNode::getUnary(int op) const  " [INTERNAL]
Get a unary operation.

";

%feature("docstring")  casadi::MXNode::evaluateD(const DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp)
" [INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::MXNode::sameOpAndDeps(const MXNode *node, int
depth) const  " [INTERNAL]  Checks if two nodes have the same operation and
have equivalent dependencies up to a given depth.

";

%feature("docstring")  casadi::MXNode::isNonLinear() "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring")  casadi::MXNode::shape() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::setSparsity(const Sparsity &sparsity)
" [INTERNAL]  Set the sparsity.

";

%feature("docstring")  casadi::MXNode::getNumOutputs() const  " [INTERNAL]
Number of outputs.

";

%feature("docstring")  casadi::MXNode::getHorzcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a horizontal concatenation node.

";

%feature("docstring")  casadi::MXNode::getNorm2() const  " [INTERNAL]
Spectral norm.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream) const  "
[INTERNAL]  Print a description.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream, long
&remaining_calls) const  " [INTERNAL]  Print expression (make sure number of
calls is not exceeded)

";

%feature("docstring")  casadi::MXNode::getSubAssign(const MX &y, const Slice
&i, const Slice &j) const  " [INTERNAL]  Get submatrix assignment.

";

%feature("docstring")  casadi::MXNode::getTranspose() const  " [INTERNAL]
Transpose.

";

%feature("docstring")  casadi::MXNode::sparsity() const  " [INTERNAL]  Get
the sparsity.

";

%feature("docstring")  casadi::MXNode::sparsity(int oind) const  "
[INTERNAL]  Get the sparsity of output oind.

";

%feature("docstring")  casadi::MXNode::getReshape(const Sparsity &sp) const
" [INTERNAL]   Reshape.

";

%feature("docstring")  casadi::MXNode::getName() const  " [INTERNAL]  Get
the name.

";

%feature("docstring")  casadi::MXNode::isEqual(const MXNode *node, int
depth) const  " [INTERNAL]  Check if two nodes are equivalent up to a given
depth.

";

%feature("docstring")  casadi::MXNode::getFunction() "[INTERNAL]  Get
function reference.

";

%feature("docstring")  casadi::MXNode::getFunction() const  " [INTERNAL]
Get function reference.

";

%feature("docstring")  casadi::MXNode::getFunctionInput() const  "
[INTERNAL]  Get function input.

";

%feature("docstring")  casadi::MXNode::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp,
bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, bool fwd) " [INTERNAL]  Propagate sparsity, no work.

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) const  " [INTERNAL]
dependencies - functions that have to be evaluated before this one

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getVertsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a vertical split node (vectors
only)

";

%feature("docstring")  casadi::MXNode::getSetNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Assign the nonzeros of a matrix
to another matrix.

";

%feature("docstring")  casadi::MXNode::getNorm1() const  " [INTERNAL]
1-norm

";

%feature("docstring")  casadi::SharedObjectNode::assertInit() const  "
[INTERNAL]  Assert that the object has been initialized.

";

%feature("docstring")  casadi::MXNode::numInplace() const  " [INTERNAL]  Can
the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring")  casadi::MXNode::generateOperation(std::ostream
&stream, const std::vector< std::string > &arg, const std::vector<
std::string > &res, CodeGenerator &gen) const  " [INTERNAL]  Generate code
for the operation.

";

%feature("docstring")  casadi::MXNode::isValue(double val) const  "
[INTERNAL]  Check if a certain value.

";

%feature("docstring")  casadi::MXNode::nTmp(size_t &ni, size_t &nr) "
[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::MXNode::numel() const  " [INTERNAL]  Get
shape.

";

%feature("docstring")  casadi::MXNode::size() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getAssertion(const MX &y, const
std::string &fail_message="") const  " [INTERNAL]   Assertion.

";

%feature("docstring")  casadi::MXNode::isZero() const  " [INTERNAL]  Check
if identically zero.

";

%feature("docstring")  casadi::MXNode::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied) " [INTERNAL]  Deep copy
data members.

";

%feature("docstring")  casadi::MXNode::getInverse() const  " [INTERNAL]
Inverse.

";

%feature("docstring")  casadi::MXNode::ndep() const  " [INTERNAL]  Number of
dependencies.

";

%feature("docstring")  casadi::MXNode::getSubRef(const Slice &i, const Slice
&j) const  " [INTERNAL]  Get submatrix reference.

";

%feature("docstring")  casadi::SharedObjectNode::weak() "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep) "
[INTERNAL]  Set unary dependency.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2) " [INTERNAL]  Set binary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2, const MX &dep3) " [INTERNAL]  Set ternary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const std::vector< MX
> &dep) " [INTERNAL]  Set multiple dependencies.

";

%feature("docstring")  casadi::MXNode::getDeterminant() const  " [INTERNAL]
Determinant.

";

%feature("docstring")  casadi::MXNode::getMultiplication(const MX &y, const
Sparsity &sp_z=Sparsity()) const  " [INTERNAL]   Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring")  casadi::SharedObjectNode::isInit() const  "
[INTERNAL]  Check if the object has been initialized.

";

%feature("docstring")  casadi::MXNode::addDependency(const MX &dep) "
[INTERNAL]  Add a dependency.

";

%feature("docstring")  casadi::MXNode::getNormF() const  " [INTERNAL]
Frobenius norm.

";

%feature("docstring")  casadi::MXNode::getOutput(int oind) const  "
[INTERNAL]  Get an output.

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, const std::vector< int > &onz, bool add=false) "
[INTERNAL]  Assign nonzeros (mapping matrix)

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, bool add=false) " [INTERNAL]  Assign nonzeros
(mapping matrix), output indices sequential.

";

%feature("docstring")  casadi::Norm1::printPart(std::ostream &stream, int
part) const  " [INTERNAL]  Print a part of the expression.

";

%feature("docstring")  casadi::MXNode::isIdentity() const  " [INTERNAL]
Check if identity matrix.

";

%feature("docstring")  casadi::MXNode::getVertcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a vertical concatenation node (vectors only)

";

%feature("docstring")  casadi::MXNode::evaluateMX(const MXPtrV &input,
MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV
&adjSeed, MXPtrVV &adjSens, bool output_given) " [INTERNAL]  Evaluate
symbolically ( MX)

";

%feature("docstring")  casadi::MXNode::evaluateMX(const MXPtrV &input,
MXPtrV &output) " [INTERNAL]  Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring")  casadi::MXNode::getSetSparse(const Sparsity &sp)
const  " [INTERNAL]  Create set sparse.

";


// File: classcasadi_1_1Norm2.xml
%feature("docstring")  casadi::MXNode::isValue(double val) const  "
[INTERNAL]  Check if a certain value.

";

%feature("docstring")  casadi::MXNode::numInplace() const  " [INTERNAL]  Can
the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring")  casadi::MXNode::getNumOutputs() const  " [INTERNAL]
Number of outputs.

";

%feature("docstring")  casadi::MXNode::ndep() const  " [INTERNAL]  Number of
dependencies.

";

%feature("docstring")  casadi::SharedObjectNode::assertInit() const  "
[INTERNAL]  Assert that the object has been initialized.

";

%feature("docstring")  casadi::MXNode::sameOpAndDeps(const MXNode *node, int
depth) const  " [INTERNAL]  Checks if two nodes have the same operation and
have equivalent dependencies up to a given depth.

";

%feature("docstring")  casadi::MXNode::getNorm2() const  " [INTERNAL]
Spectral norm.

";

%feature("docstring")  casadi::MXNode::sparsity() const  " [INTERNAL]  Get
the sparsity.

";

%feature("docstring")  casadi::MXNode::sparsity(int oind) const  "
[INTERNAL]  Get the sparsity of output oind.

";

%feature("docstring")  casadi::MXNode::addDependency(const MX &dep) "
[INTERNAL]  Add a dependency.

";

%feature("docstring")  casadi::MXNode::getSetSparse(const Sparsity &sp)
const  " [INTERNAL]  Create set sparse.

";

%feature("docstring")  casadi::MXNode::nTmp(size_t &ni, size_t &nr) "
[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::MXNode::getFunctionInput() const  "
[INTERNAL]  Get function input.

";

%feature("docstring") casadi::Norm2 "[INTERNAL]  Represents a 2-norm
(spectral norm)

Joel Andersson

C++ includes: norm.hpp ";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream) const  "
[INTERNAL]  Print a description.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream, long
&remaining_calls) const  " [INTERNAL]  Print expression (make sure number of
calls is not exceeded)

";

%feature("docstring")  casadi::MXNode::getSubAssign(const MX &y, const Slice
&i, const Slice &j) const  " [INTERNAL]  Get submatrix assignment.

";

%feature("docstring")  casadi::SharedObjectNode::weak() "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring")  casadi::MXNode::mapping() const  " [INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring")  casadi::MXNode::getInverse() const  " [INTERNAL]
Inverse.

";

%feature("docstring")  casadi::MXNode::getVertsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a vertical split node (vectors
only)

";

%feature("docstring") casadi::Norm2::~Norm2 "[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::MXNode::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied) " [INTERNAL]  Deep copy
data members.

";

%feature("docstring")  casadi::MXNode::getOutput(int oind) const  "
[INTERNAL]  Get an output.

";

%feature("docstring")  casadi::MXNode::getNorm1() const  " [INTERNAL]
1-norm

";

%feature("docstring")  casadi::MXNode::simplifyMe(MX &ex) " [INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring")  casadi::MXNode::getHorzcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a horizontal concatenation node.

";

%feature("docstring")  casadi::Norm2::getOp() const  " [INTERNAL]  Get the
operation.

";

%feature("docstring")  casadi::MXNode::setSparsity(const Sparsity &sparsity)
" [INTERNAL]  Set the sparsity.

";

%feature("docstring")  casadi::MXNode::getAddNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Add the nonzeros of a matrix to
another matrix.

";

%feature("docstring")  casadi::SharedObjectNode::getCount() const  "
[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::MXNode::repr(std::ostream &stream) const  "
[INTERNAL]  Print a representation.

";

%feature("docstring")  casadi::MXNode::getMultiplication(const MX &y, const
Sparsity &sp_z=Sparsity()) const  " [INTERNAL]   Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring")  casadi::MXNode::numel() const  " [INTERNAL]  Get
shape.

";

%feature("docstring")  casadi::Norm2::printPart(std::ostream &stream, int
part) const  " [INTERNAL]  Print a part of the expression.

";

%feature("docstring")  casadi::MXNode::getBinarySwitch(int op, const MX &y)
const  " [INTERNAL]  Get a binary operation operation.

";

%feature("docstring")  casadi::MXNode::getGetNonzeros(const Sparsity &sp,
const std::vector< int > &nz) const  " [INTERNAL]  Get the nonzeros of
matrix.

";

%feature("docstring")  casadi::MXNode::getHorzsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a horizontal split node.

";

%feature("docstring")  casadi::MXNode::getReshape(const Sparsity &sp) const
" [INTERNAL]   Reshape.

";

%feature("docstring")  casadi::MXNode::getNormInf() const  " [INTERNAL]
Infinity norm.

";

%feature("docstring")  casadi::MXNode::isZero() const  " [INTERNAL]  Check
if identically zero.

";

%feature("docstring")  casadi::MXNode::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp,
bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, bool fwd) " [INTERNAL]  Propagate sparsity, no work.

";

%feature("docstring") casadi::Norm2::Norm2(const MX &x) " [INTERNAL]
Constructor.

";

%feature("docstring")  casadi::MXNode::size2() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getInnerProd(const MX &y) const  "
[INTERNAL]  Inner product.

";

%feature("docstring")  casadi::MXNode::getUnary(int op) const  " [INTERNAL]
Get a unary operation.

";

%feature("docstring")  casadi::SharedObjectNode::init() "[INTERNAL]
Initialize the object.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep) "
[INTERNAL]  Set unary dependency.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2) " [INTERNAL]  Set binary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2, const MX &dep3) " [INTERNAL]  Set ternary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const std::vector< MX
> &dep) " [INTERNAL]  Set multiple dependencies.

";

%feature("docstring")  casadi::MXNode::isUnaryOp() const  " [INTERNAL]
Check if unary operation.

";

%feature("docstring")  casadi::MXNode::shape() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::isNonLinear() "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring")  casadi::MXNode::getAssertion(const MX &y, const
std::string &fail_message="") const  " [INTERNAL]   Assertion.

";

%feature("docstring")  casadi::MXNode::getSolve(const MX &r, bool tr, const
LinearSolver &linear_solver) const  " [INTERNAL]   Solve a system of linear
equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring")  casadi::MXNode::getName() const  " [INTERNAL]  Get
the name.

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) const  " [INTERNAL]
dependencies - functions that have to be evaluated before this one

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::isOne() const  " [INTERNAL]  Check if
identically one.

";

%feature("docstring")  casadi::SharedObjectNode::isInit() const  "
[INTERNAL]  Check if the object has been initialized.

";

%feature("docstring")  casadi::MXNode::hasDep() const  " [INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring")  casadi::MXNode::evaluateD(const DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp)
" [INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::MXNode::size() const  " [INTERNAL] ";

%feature("docstring") casadi::Norm2::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring")  casadi::MXNode::getVertcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a vertical concatenation node (vectors only)

";

%feature("docstring")  casadi::MXNode::getDeterminant() const  " [INTERNAL]
Determinant.

";

%feature("docstring")  casadi::MXNode::isIdentity() const  " [INTERNAL]
Check if identity matrix.

";

%feature("docstring")  casadi::MXNode::getSubRef(const Slice &i, const Slice
&j) const  " [INTERNAL]  Get submatrix reference.

";

%feature("docstring")  casadi::MXNode::isEqual(const MXNode *node, int
depth) const  " [INTERNAL]  Check if two nodes are equivalent up to a given
depth.

";

%feature("docstring")  casadi::MXNode::evaluateMX(const MXPtrV &input,
MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV
&adjSeed, MXPtrVV &adjSens, bool output_given) " [INTERNAL]  Evaluate
symbolically ( MX)

";

%feature("docstring")  casadi::MXNode::evaluateMX(const MXPtrV &input,
MXPtrV &output) " [INTERNAL]  Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring")  casadi::MXNode::size1() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getFunction() "[INTERNAL]  Get
function reference.

";

%feature("docstring")  casadi::MXNode::getFunction() const  " [INTERNAL]
Get function reference.

";

%feature("docstring")  casadi::MXNode::getSetNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Assign the nonzeros of a matrix
to another matrix.

";

%feature("docstring")  casadi::MXNode::evaluateSX(const SXPtrV &input,
SXPtrV &output, std::vector< int > &itmp, std::vector< SXElement > &rtmp) "
[INTERNAL]  Evaluate symbolically (SX)

";

%feature("docstring")  casadi::MXNode::isOutputNode() const  " [INTERNAL]
Check if evaluation output.

";

%feature("docstring")  casadi::MXNode::getMatrixValue() const  " [INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring")  casadi::MXNode::generateOperation(std::ostream
&stream, const std::vector< std::string > &arg, const std::vector<
std::string > &res, CodeGenerator &gen) const  " [INTERNAL]  Generate code
for the operation.

";

%feature("docstring")  casadi::MXNode::getFunctionOutput() const  "
[INTERNAL]  Get function output.

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, const std::vector< int > &onz, bool add=false) "
[INTERNAL]  Assign nonzeros (mapping matrix)

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, bool add=false) " [INTERNAL]  Assign nonzeros
(mapping matrix), output indices sequential.

";

%feature("docstring")  casadi::MXNode::isBinaryOp() const  " [INTERNAL]
Check if binary operation.

";

%feature("docstring")  casadi::Norm2::clone() const  " [INTERNAL]  Clone
function.

";

%feature("docstring")  casadi::MXNode::getValue() const  " [INTERNAL]  Get
the value (only for scalar constant nodes)

";

%feature("docstring")  casadi::MXNode::getNormF() const  " [INTERNAL]
Frobenius norm.

";

%feature("docstring")  casadi::MXNode::getTranspose() const  " [INTERNAL]
Transpose.

";

%feature("docstring")  casadi::MXNode::getBinary(int op, const MX &y, bool
scX, bool scY) const  " [INTERNAL]  Get a binary operation operation
(matrix-matrix)

";

%feature("docstring")  casadi::MXNode::isMultipleOutput() const  "
[INTERNAL]  Check if a multiple output node.

";


// File: classcasadi_1_1NormF.xml
%feature("docstring")  casadi::MXNode::getMatrixValue() const  " [INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring")  casadi::MXNode::getSubAssign(const MX &y, const Slice
&i, const Slice &j) const  " [INTERNAL]  Get submatrix assignment.

";

%feature("docstring")  casadi::MXNode::size() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::isBinaryOp() const  " [INTERNAL]
Check if binary operation.

";

%feature("docstring")  casadi::MXNode::size2() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getValue() const  " [INTERNAL]  Get
the value (only for scalar constant nodes)

";

%feature("docstring")  casadi::MXNode::getBinarySwitch(int op, const MX &y)
const  " [INTERNAL]  Get a binary operation operation.

";

%feature("docstring")  casadi::MXNode::isMultipleOutput() const  "
[INTERNAL]  Check if a multiple output node.

";

%feature("docstring")  casadi::MXNode::addDependency(const MX &dep) "
[INTERNAL]  Add a dependency.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream) const  "
[INTERNAL]  Print a description.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream, long
&remaining_calls) const  " [INTERNAL]  Print expression (make sure number of
calls is not exceeded)

";

%feature("docstring")  casadi::MXNode::setSparsity(const Sparsity &sparsity)
" [INTERNAL]  Set the sparsity.

";

%feature("docstring")  casadi::MXNode::sameOpAndDeps(const MXNode *node, int
depth) const  " [INTERNAL]  Checks if two nodes have the same operation and
have equivalent dependencies up to a given depth.

";

%feature("docstring")  casadi::NormF::evaluateGen(const MatV &input, MatV
&output, std::vector< int > &itmp, std::vector< T > &rtmp) " [INTERNAL]
Evaluate the function (template)

";

%feature("docstring")  casadi::MXNode::isOutputNode() const  " [INTERNAL]
Check if evaluation output.

";

%feature("docstring")  casadi::MXNode::getSetSparse(const Sparsity &sp)
const  " [INTERNAL]  Create set sparse.

";

%feature("docstring")  casadi::MXNode::ndep() const  " [INTERNAL]  Number of
dependencies.

";

%feature("docstring")  casadi::MXNode::getNorm1() const  " [INTERNAL]
1-norm

";

%feature("docstring")  casadi::MXNode::getHorzsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a horizontal split node.

";

%feature("docstring")  casadi::MXNode::getUnary(int op) const  " [INTERNAL]
Get a unary operation.

";

%feature("docstring") casadi::NormF::NormF(const MX &x) " [INTERNAL]
Constructor.

";

%feature("docstring")  casadi::MXNode::numel() const  " [INTERNAL]  Get
shape.

";

%feature("docstring")  casadi::MXNode::getSetNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Assign the nonzeros of a matrix
to another matrix.

";

%feature("docstring")  casadi::MXNode::getDeterminant() const  " [INTERNAL]
Determinant.

";

%feature("docstring")  casadi::MXNode::isValue(double val) const  "
[INTERNAL]  Check if a certain value.

";

%feature("docstring")  casadi::MXNode::shape() const  " [INTERNAL] ";

%feature("docstring")  casadi::NormF::evaluateSX(const SXPtrV &input, SXPtrV
&output, std::vector< int > &itmp, std::vector< SXElement > &rtmp) "
[INTERNAL]  Evaluate the function symbolically (SX)

";

%feature("docstring")  casadi::MXNode::getInnerProd(const MX &y) const  "
[INTERNAL]  Inner product.

";

%feature("docstring")  casadi::MXNode::nTmp(size_t &ni, size_t &nr) "
[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::MXNode::getOutput(int oind) const  "
[INTERNAL]  Get an output.

";

%feature("docstring")  casadi::MXNode::sparsity() const  " [INTERNAL]  Get
the sparsity.

";

%feature("docstring")  casadi::MXNode::sparsity(int oind) const  "
[INTERNAL]  Get the sparsity of output oind.

";

%feature("docstring")  casadi::MXNode::getNumOutputs() const  " [INTERNAL]
Number of outputs.

";

%feature("docstring")  casadi::MXNode::isUnaryOp() const  " [INTERNAL]
Check if unary operation.

";

%feature("docstring")  casadi::MXNode::getFunctionOutput() const  "
[INTERNAL]  Get function output.

";

%feature("docstring")  casadi::MXNode::getFunction() "[INTERNAL]  Get
function reference.

";

%feature("docstring")  casadi::MXNode::getFunction() const  " [INTERNAL]
Get function reference.

";

%feature("docstring")  casadi::MXNode::isIdentity() const  " [INTERNAL]
Check if identity matrix.

";

%feature("docstring")  casadi::MXNode::isOne() const  " [INTERNAL]  Check if
identically one.

";

%feature("docstring")  casadi::MXNode::getName() const  " [INTERNAL]  Get
the name.

";

%feature("docstring")  casadi::MXNode::getSubRef(const Slice &i, const Slice
&j) const  " [INTERNAL]  Get submatrix reference.

";

%feature("docstring")  casadi::SharedObjectNode::getCount() const  "
[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::SharedObjectNode::weak() "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring")  casadi::MXNode::getVertcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a vertical concatenation node (vectors only)

";

%feature("docstring")  casadi::SharedObjectNode::init() "[INTERNAL]
Initialize the object.

";

%feature("docstring")  casadi::MXNode::getHorzcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a horizontal concatenation node.

";

%feature("docstring")  casadi::MXNode::getGetNonzeros(const Sparsity &sp,
const std::vector< int > &nz) const  " [INTERNAL]  Get the nonzeros of
matrix.

";

%feature("docstring") casadi::NormF::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring")  casadi::MXNode::repr(std::ostream &stream) const  "
[INTERNAL]  Print a representation.

";

%feature("docstring")  casadi::MXNode::isEqual(const MXNode *node, int
depth) const  " [INTERNAL]  Check if two nodes are equivalent up to a given
depth.

";

%feature("docstring")  casadi::NormF::getOp() const  " [INTERNAL]  Get the
operation.

";

%feature("docstring")  casadi::NormF::generateOperation(std::ostream
&stream, const std::vector< std::string > &arg, const std::vector<
std::string > &res, CodeGenerator &gen) const  " [INTERNAL]  Generate code
for the operation.

";

%feature("docstring")  casadi::MXNode::getBinary(int op, const MX &y, bool
scX, bool scY) const  " [INTERNAL]  Get a binary operation operation
(matrix-matrix)

";

%feature("docstring")  casadi::SharedObjectNode::isInit() const  "
[INTERNAL]  Check if the object has been initialized.

";

%feature("docstring")  casadi::MXNode::simplifyMe(MX &ex) " [INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring")  casadi::SharedObjectNode::assertInit() const  "
[INTERNAL]  Assert that the object has been initialized.

";

%feature("docstring")  casadi::MXNode::getNorm2() const  " [INTERNAL]
Spectral norm.

";

%feature("docstring")  casadi::MXNode::getNormF() const  " [INTERNAL]
Frobenius norm.

";

%feature("docstring")  casadi::MXNode::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied) " [INTERNAL]  Deep copy
data members.

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) const  " [INTERNAL]
dependencies - functions that have to be evaluated before this one

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, const std::vector< int > &onz, bool add=false) "
[INTERNAL]  Assign nonzeros (mapping matrix)

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, bool add=false) " [INTERNAL]  Assign nonzeros
(mapping matrix), output indices sequential.

";

%feature("docstring")  casadi::MXNode::getSolve(const MX &r, bool tr, const
LinearSolver &linear_solver) const  " [INTERNAL]   Solve a system of linear
equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring")  casadi::MXNode::isNonLinear() "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring") casadi::NormF::~NormF "[INTERNAL]  Destructor.

";

%feature("docstring") casadi::NormF "[INTERNAL]  Represents a Frobenius
norm.

Joel Andersson

C++ includes: norm.hpp ";

%feature("docstring")  casadi::NormF::clone() const  " [INTERNAL]  Clone
function.

";

%feature("docstring")  casadi::MXNode::getTranspose() const  " [INTERNAL]
Transpose.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep) "
[INTERNAL]  Set unary dependency.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2) " [INTERNAL]  Set binary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2, const MX &dep3) " [INTERNAL]  Set ternary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const std::vector< MX
> &dep) " [INTERNAL]  Set multiple dependencies.

";

%feature("docstring")  casadi::MXNode::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp,
bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, bool fwd) " [INTERNAL]  Propagate sparsity, no work.

";

%feature("docstring")  casadi::NormF::evaluateD(const DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp)
" [INTERNAL]  Evaluate the function numerically.

";

%feature("docstring")  casadi::NormF::printPart(std::ostream &stream, int
part) const  " [INTERNAL]  Print a part of the expression.

";

%feature("docstring")  casadi::MXNode::getReshape(const Sparsity &sp) const
" [INTERNAL]   Reshape.

";

%feature("docstring")  casadi::MXNode::getInverse() const  " [INTERNAL]
Inverse.

";

%feature("docstring")  casadi::MXNode::mapping() const  " [INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring")  casadi::NormF::evaluateMX(const MXPtrV &input, MXPtrV
&output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV &adjSeed,
MXPtrVV &adjSens, bool output_given) " [INTERNAL]  Evaluate the function
symbolically ( MX)

";

%feature("docstring")  casadi::MXNode::evaluateMX(const MXPtrV &input,
MXPtrV &output) " [INTERNAL]  Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring")  casadi::MXNode::hasDep() const  " [INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring")  casadi::MXNode::getAddNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Add the nonzeros of a matrix to
another matrix.

";

%feature("docstring")  casadi::MXNode::getFunctionInput() const  "
[INTERNAL]  Get function input.

";

%feature("docstring")  casadi::MXNode::getNormInf() const  " [INTERNAL]
Infinity norm.

";

%feature("docstring")  casadi::MXNode::getMultiplication(const MX &y, const
Sparsity &sp_z=Sparsity()) const  " [INTERNAL]   Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring")  casadi::MXNode::getVertsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a vertical split node (vectors
only)

";

%feature("docstring")  casadi::MXNode::numInplace() const  " [INTERNAL]  Can
the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring")  casadi::MXNode::isZero() const  " [INTERNAL]  Check
if identically zero.

";

%feature("docstring")  casadi::MXNode::getAssertion(const MX &y, const
std::string &fail_message="") const  " [INTERNAL]   Assertion.

";

%feature("docstring")  casadi::MXNode::size1() const  " [INTERNAL] ";


// File: classcasadi_1_1NormInf.xml
%feature("docstring")  casadi::MXNode::isNonLinear() "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) const  " [INTERNAL]
dependencies - functions that have to be evaluated before this one

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::isOutputNode() const  " [INTERNAL]
Check if evaluation output.

";

%feature("docstring")  casadi::MXNode::numel() const  " [INTERNAL]  Get
shape.

";

%feature("docstring")  casadi::NormInf::printPart(std::ostream &stream, int
part) const  " [INTERNAL]  Print a part of the expression.

";

%feature("docstring")  casadi::MXNode::getNormF() const  " [INTERNAL]
Frobenius norm.

";

%feature("docstring")  casadi::MXNode::getFunction() "[INTERNAL]  Get
function reference.

";

%feature("docstring")  casadi::MXNode::getFunction() const  " [INTERNAL]
Get function reference.

";

%feature("docstring")  casadi::MXNode::getFunctionInput() const  "
[INTERNAL]  Get function input.

";

%feature("docstring")  casadi::MXNode::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp,
bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, bool fwd) " [INTERNAL]  Propagate sparsity, no work.

";

%feature("docstring")  casadi::SharedObjectNode::init() "[INTERNAL]
Initialize the object.

";

%feature("docstring")  casadi::MXNode::repr(std::ostream &stream) const  "
[INTERNAL]  Print a representation.

";

%feature("docstring")  casadi::MXNode::isIdentity() const  " [INTERNAL]
Check if identity matrix.

";

%feature("docstring")  casadi::MXNode::getOutput(int oind) const  "
[INTERNAL]  Get an output.

";

%feature("docstring")  casadi::MXNode::isZero() const  " [INTERNAL]  Check
if identically zero.

";

%feature("docstring")  casadi::MXNode::isUnaryOp() const  " [INTERNAL]
Check if unary operation.

";

%feature("docstring")  casadi::MXNode::isValue(double val) const  "
[INTERNAL]  Check if a certain value.

";

%feature("docstring")  casadi::MXNode::addDependency(const MX &dep) "
[INTERNAL]  Add a dependency.

";

%feature("docstring")  casadi::MXNode::getSubAssign(const MX &y, const Slice
&i, const Slice &j) const  " [INTERNAL]  Get submatrix assignment.

";

%feature("docstring")  casadi::NormInf::clone() const  " [INTERNAL]  Clone
function.

";

%feature("docstring")  casadi::MXNode::isOne() const  " [INTERNAL]  Check if
identically one.

";

%feature("docstring")  casadi::MXNode::getBinary(int op, const MX &y, bool
scX, bool scY) const  " [INTERNAL]  Get a binary operation operation
(matrix-matrix)

";

%feature("docstring")  casadi::MXNode::getTranspose() const  " [INTERNAL]
Transpose.

";

%feature("docstring")  casadi::MXNode::setSparsity(const Sparsity &sparsity)
" [INTERNAL]  Set the sparsity.

";

%feature("docstring")  casadi::NormInf::getOp() const  " [INTERNAL]  Get the
operation.

";

%feature("docstring")  casadi::MXNode::evaluateMX(const MXPtrV &input,
MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV
&adjSeed, MXPtrVV &adjSens, bool output_given) " [INTERNAL]  Evaluate
symbolically ( MX)

";

%feature("docstring")  casadi::MXNode::evaluateMX(const MXPtrV &input,
MXPtrV &output) " [INTERNAL]  Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring")  casadi::MXNode::getAssertion(const MX &y, const
std::string &fail_message="") const  " [INTERNAL]   Assertion.

";

%feature("docstring") casadi::NormInf::~NormInf "[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::MXNode::sameOpAndDeps(const MXNode *node, int
depth) const  " [INTERNAL]  Checks if two nodes have the same operation and
have equivalent dependencies up to a given depth.

";

%feature("docstring")  casadi::MXNode::getInverse() const  " [INTERNAL]
Inverse.

";

%feature("docstring")  casadi::MXNode::getReshape(const Sparsity &sp) const
" [INTERNAL]   Reshape.

";

%feature("docstring") casadi::NormInf "[INTERNAL]  Represents an infinity-
norm operation on a MX.

Joel Andersson

C++ includes: norm.hpp ";

%feature("docstring")  casadi::MXNode::evaluateD(const DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp)
" [INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::SharedObjectNode::weak() "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring")  casadi::MXNode::getUnary(int op) const  " [INTERNAL]
Get a unary operation.

";

%feature("docstring")  casadi::MXNode::getMatrixValue() const  " [INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring")  casadi::MXNode::getHorzcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a horizontal concatenation node.

";

%feature("docstring")  casadi::MXNode::getInnerProd(const MX &y) const  "
[INTERNAL]  Inner product.

";

%feature("docstring")  casadi::MXNode::getMultiplication(const MX &y, const
Sparsity &sp_z=Sparsity()) const  " [INTERNAL]   Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring")  casadi::MXNode::getVertsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a vertical split node (vectors
only)

";

%feature("docstring")  casadi::MXNode::isBinaryOp() const  " [INTERNAL]
Check if binary operation.

";

%feature("docstring") casadi::NormInf::NormInf(const MX &x) " [INTERNAL]
Constructor.

";

%feature("docstring")  casadi::MXNode::getAddNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Add the nonzeros of a matrix to
another matrix.

";

%feature("docstring")  casadi::MXNode::getHorzsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a horizontal split node.

";

%feature("docstring")  casadi::MXNode::getValue() const  " [INTERNAL]  Get
the value (only for scalar constant nodes)

";

%feature("docstring")  casadi::MXNode::getSubRef(const Slice &i, const Slice
&j) const  " [INTERNAL]  Get submatrix reference.

";

%feature("docstring")  casadi::MXNode::mapping() const  " [INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream) const  "
[INTERNAL]  Print a description.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream, long
&remaining_calls) const  " [INTERNAL]  Print expression (make sure number of
calls is not exceeded)

";

%feature("docstring")  casadi::MXNode::getSolve(const MX &r, bool tr, const
LinearSolver &linear_solver) const  " [INTERNAL]   Solve a system of linear
equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring")  casadi::MXNode::size2() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::size1() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getBinarySwitch(int op, const MX &y)
const  " [INTERNAL]  Get a binary operation operation.

";

%feature("docstring")  casadi::MXNode::getVertcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a vertical concatenation node (vectors only)

";

%feature("docstring")  casadi::MXNode::numInplace() const  " [INTERNAL]  Can
the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring")  casadi::MXNode::isMultipleOutput() const  "
[INTERNAL]  Check if a multiple output node.

";

%feature("docstring")  casadi::SharedObjectNode::isInit() const  "
[INTERNAL]  Check if the object has been initialized.

";

%feature("docstring")  casadi::MXNode::getNormInf() const  " [INTERNAL]
Infinity norm.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep) "
[INTERNAL]  Set unary dependency.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2) " [INTERNAL]  Set binary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2, const MX &dep3) " [INTERNAL]  Set ternary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const std::vector< MX
> &dep) " [INTERNAL]  Set multiple dependencies.

";

%feature("docstring")  casadi::MXNode::getNumOutputs() const  " [INTERNAL]
Number of outputs.

";

%feature("docstring")  casadi::MXNode::simplifyMe(MX &ex) " [INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring") casadi::NormInf::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring")  casadi::MXNode::hasDep() const  " [INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring")  casadi::MXNode::nTmp(size_t &ni, size_t &nr) "
[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::MXNode::getGetNonzeros(const Sparsity &sp,
const std::vector< int > &nz) const  " [INTERNAL]  Get the nonzeros of
matrix.

";

%feature("docstring")  casadi::MXNode::getSetNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Assign the nonzeros of a matrix
to another matrix.

";

%feature("docstring")  casadi::MXNode::sparsity() const  " [INTERNAL]  Get
the sparsity.

";

%feature("docstring")  casadi::MXNode::sparsity(int oind) const  "
[INTERNAL]  Get the sparsity of output oind.

";

%feature("docstring")  casadi::SharedObjectNode::assertInit() const  "
[INTERNAL]  Assert that the object has been initialized.

";

%feature("docstring")  casadi::MXNode::isEqual(const MXNode *node, int
depth) const  " [INTERNAL]  Check if two nodes are equivalent up to a given
depth.

";

%feature("docstring")  casadi::MXNode::getFunctionOutput() const  "
[INTERNAL]  Get function output.

";

%feature("docstring")  casadi::MXNode::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied) " [INTERNAL]  Deep copy
data members.

";

%feature("docstring")  casadi::MXNode::getNorm2() const  " [INTERNAL]
Spectral norm.

";

%feature("docstring")  casadi::SharedObjectNode::getCount() const  "
[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::MXNode::getName() const  " [INTERNAL]  Get
the name.

";

%feature("docstring")  casadi::MXNode::size() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, const std::vector< int > &onz, bool add=false) "
[INTERNAL]  Assign nonzeros (mapping matrix)

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, bool add=false) " [INTERNAL]  Assign nonzeros
(mapping matrix), output indices sequential.

";

%feature("docstring")  casadi::MXNode::getNorm1() const  " [INTERNAL]
1-norm

";

%feature("docstring")  casadi::MXNode::evaluateSX(const SXPtrV &input,
SXPtrV &output, std::vector< int > &itmp, std::vector< SXElement > &rtmp) "
[INTERNAL]  Evaluate symbolically (SX)

";

%feature("docstring")  casadi::MXNode::generateOperation(std::ostream
&stream, const std::vector< std::string > &arg, const std::vector<
std::string > &res, CodeGenerator &gen) const  " [INTERNAL]  Generate code
for the operation.

";

%feature("docstring")  casadi::MXNode::ndep() const  " [INTERNAL]  Number of
dependencies.

";

%feature("docstring")  casadi::MXNode::shape() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getDeterminant() const  " [INTERNAL]
Determinant.

";

%feature("docstring")  casadi::MXNode::getSetSparse(const Sparsity &sp)
const  " [INTERNAL]  Create set sparse.

";


// File: classcasadi_1_1Nullspace.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::Function::setOutputScheme(const casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring") casadi::Nullspace "

Base class for nullspace construction.

Constructs a basis for the null-space of a fat matrix A. i.e. finds Z such
that AZ = 0 holds.

The nullspace is also known as the orthogonal complement of the rowspace of
a matrix.

It is assumed that the matrix A is of full rank.

Implementations are not required to construct an orthogonal or orthonormal
basis Joris Gillis

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| print_proble | OT_BOOLEAN   | false        | Print out    | casadi::Null |
| m            |              |              | problem      | spaceInterna |
|              |              |              | statement    | l            |
|              |              |              | for          |              |
|              |              |              | debugging.   |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: nullspace.hpp ";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::Nullspace::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring") casadi::Nullspace::Nullspace() "

Default constructor.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";


// File: classstd_1_1numeric__limits_3_01casadi_1_1SXElement_01_4.xml
%feature("docstring") std::numeric_limits< casadi::SXElement > " [INTERNAL]
C++ includes: sx_element.hpp ";


// File: classcasadi_1_1OCPInputIOSchemeVector.xml
%feature("docstring") casadi::OCPInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::OCPInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::OCPInputIOSchemeVector "[INTERNAL]  Helper
function for 'OCPInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring")  casadi::IOSchemeVector< M  >::repr(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a representation of the object.

";

%feature("docstring") casadi::OCPInputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring")  casadi::IOSchemeVector< M  >::vector() const "
[INTERNAL] ";

%feature("docstring") casadi::OCPInputIOSchemeVector< M
>::OCPInputIOSchemeVector(const std::vector< M > &t) " [INTERNAL] ";

%feature("docstring")  casadi::IOSchemeVector< M  >::print(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "
[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "
[INTERNAL]  Return a string with a description (for SWIG)

";


// File: classcasadi_1_1OCPOutputIOSchemeVector.xml
%feature("docstring")  casadi::IOSchemeVector< M  >::vector() const "
[INTERNAL] ";

%feature("docstring") casadi::OCPOutputIOSchemeVector "[INTERNAL]  Helper
function for 'OCPOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::OCPOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::OCPOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring")  casadi::IOSchemeVector< M  >::print(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "
[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::OCPOutputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "
[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::IOSchemeVector< M  >::repr(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a representation of the object.

";

%feature("docstring") casadi::OCPOutputIOSchemeVector< M
>::OCPOutputIOSchemeVector(const std::vector< M > &t) " [INTERNAL] ";


// File: classcasadi_1_1OCPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::Function::removeMonitor(const std::string &mon) "

Remove modules to be monitored.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring") casadi::OCPSolver "

Base class for OCP solvers.

Joel Andersson

>Input scheme: casadi::OCPInput (OCP_NUM_IN = 14) [ocpIn]
+------------+--------+----------------------------------------------+
| Full name  | Short  |                 Description                  |
+============+========+==============================================+
| OCP_LBX    | lbx    | States lower bounds (nx x (ns+1)) .          |
+------------+--------+----------------------------------------------+
| OCP_UBX    | ubx    | States upper bounds (nx x (ns+1)) .          |
+------------+--------+----------------------------------------------+
| OCP_X_INIT | x_init | States initial guess (nx x (ns+1)) .         |
+------------+--------+----------------------------------------------+
| OCP_LBU    | lbu    | Controls lower bounds (nu x ns) .            |
+------------+--------+----------------------------------------------+
| OCP_UBU    | ubu    | Controls upper bounds (nu x ns) .            |
+------------+--------+----------------------------------------------+
| OCP_U_INIT | u_init | Controls initial guess (nu x ns) .           |
+------------+--------+----------------------------------------------+
| OCP_LBP    | lbp    | Parameters lower bounds (np x 1) .           |
+------------+--------+----------------------------------------------+
| OCP_UBP    | ubp    | Parameters upper bounds (np x 1) .           |
+------------+--------+----------------------------------------------+
| OCP_P_INIT | p_init | Parameters initial guess (np x 1) .          |
+------------+--------+----------------------------------------------+
| OCP_LBH    | lbh    | Point constraint lower bound (nh x (ns+1)) . |
+------------+--------+----------------------------------------------+
| OCP_UBH    | ubh    | Point constraint upper bound (nh x (ns+1)) . |
+------------+--------+----------------------------------------------+
| OCP_LBG    | lbg    | Lower bound for the coupling constraints .   |
+------------+--------+----------------------------------------------+
| OCP_UBG    | ubg    | Upper bound for the coupling constraints .   |
+------------+--------+----------------------------------------------+

>Output scheme: casadi::OCPOutput (OCP_NUM_OUT = 5) [ocpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| OCP_X_OPT              | x_opt                  | Optimal state          |
|                        |                        | trajectory .           |
+------------------------+------------------------+------------------------+
| OCP_U_OPT              | u_opt                  | Optimal control        |
|                        |                        | trajectory .           |
+------------------------+------------------------+------------------------+
| OCP_P_OPT              | p_opt                  | Optimal parameters .   |
+------------------------+------------------------+------------------------+
| OCP_COST               | cost                   | Objective/cost         |
|                        |                        | function for optimal   |
|                        |                        | solution (1 x 1) .     |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| final_time   | OT_REAL      | 1            |              | casadi::OCPS |
|              |              |              |              | olverInterna |
|              |              |              |              | l            |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| number_of_gr | OT_INTEGER   | 20           |              | casadi::OCPS |
| id_points    |              |              |              | olverInterna |
|              |              |              |              | l            |
+--------------+--------------+--------------+--------------+--------------+
| number_of_pa | OT_INTEGER   | 0            |              | casadi::OCPS |
| rameters     |              |              |              | olverInterna |
|              |              |              |              | l            |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: ocp_solver.hpp ";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::OCPSolver::getFfcn() const  " ";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::OCPSolver::getCfcn() const  " ";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::Function::checkNode() const  " [INTERNAL]
Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::OCPSolver::getRfcn() const  " ";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::OCPSolver::getMfcn() const  " ";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring") casadi::OCPSolver::OCPSolver() "

Default constructor.

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";


// File: classcasadi_1_1OldCollocationIntegrator.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::OptionsFunctionality::hasOption(const std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::Integrator::reset() "

Reset the forward problem Time will be set to t0 and state to
input(INTEGRATOR_X0)

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::Integrator::printStats(std::ostream
&stream=std::cout) const  "

Print solver statistics.

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::OldCollocationIntegrator::checkNode() const
"

Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::OldCollocationIntegrator "

Collocation integrator ODE/DAE integrator based on collocation.

The method is still under development

Base class for integrators. Solves an initial value problem (IVP) coupled to
a terminal value problem with differential equation given as an implicit ODE
coupled to an algebraic equation and a set of quadratures: Initial
conditions at t=t0  x(t0)  = x0  q(t0)  = 0   Forward integration from t=t0
to t=tf  der(x) = function(x,z,p,t) Forward ODE  0 = fz(x,z,p,t)
Forward algebraic equations  der(q) = fq(x,z,p,t)                  Forward
quadratures Terminal conditions at t=tf  rx(tf)  = rx0  rq(tf)  = 0
Backward integration from t=tf to t=t0  der(rx) = gx(rx,rz,rp,x,z,p,t)
Backward ODE  0 = gz(rx,rz,rp,x,z,p,t)        Backward algebraic equations
der(rq) = gq(rx,rz,rp,x,z,p,t)        Backward quadratures where we assume
that both the forward and backwards integrations are index-1  (i.e. dfz/dz,
dgz/drz are invertible) and furthermore that gx, gz and gq have a linear
dependency on rx, rz and rp.

Joel Andersson

>Input scheme: casadi::IntegratorInput (INTEGRATOR_NUM_IN = 7) [integratorIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_X0          | x0                     | Differential state at  |
|                        |                        | the initial time .     |
+------------------------+------------------------+------------------------+
| INTEGRATOR_P           | p                      | Parameters .           |
+------------------------+------------------------+------------------------+
| INTEGRATOR_Z0          | z0                     | Initial guess for the  |
|                        |                        | algebraic variable .   |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RX0         | rx0                    | Backward differential  |
|                        |                        | state at the final     |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RP          | rp                     | Backward parameter     |
|                        |                        | vector .               |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZ0         | rz0                    | Initial guess for the  |
|                        |                        | backwards algebraic    |
|                        |                        | variable .             |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::IntegratorOutput (INTEGRATOR_NUM_OUT = 7) [integratorOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_XF          | xf                     | Differential state at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_QF          | qf                     | Quadrature state at    |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_ZF          | zf                     | Algebraic variable at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RXF         | rxf                    | Backward differential  |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RQF         | rqf                    | Backward quadrature    |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZF         | rzf                    | Backward algebraic     |
|                        |                        | variable at the        |
|                        |                        | initial time .         |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| artol        | OT_REAL      | 0.000        | tolerance as | casadi::Inte |
|              |              |              | provided     | gratorIntern |
|              |              |              | with         | al           |
|              |              |              | setArTol to  |              |
|              |              |              | OOQP         |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::OldC |
| enerator     | EGENERATOR   | )            | directional  | ollocationIn |
|              |              |              | derivative,  | tegratorInte |
|              |              |              | overrides    | rnal         |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_augme | OT_BOOLEAN   | true         | DAE callback | casadi::Inte |
| nted         |              |              | function     | gratorIntern |
|              |              |              | also be      | al           |
|              |              |              | SXFunction . |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: old_collocation_integrator.hpp ";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Integrator::clone() const  "

Clone.

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::Integrator::integrateB(double t_out) "

Integrate backward until a specified time point.

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")
casadi::OldCollocationIntegrator::OldCollocationIntegrator() "

Default constructor.

";

%feature("docstring")
casadi::OldCollocationIntegrator::OldCollocationIntegrator(const Function
&f, const Function &g=Function()) "

Create an integrator for explicit ODEs.

Parameters:
-----------

f:  dynamical system

>Input scheme: casadi::DAEInput (DAE_NUM_IN = 5) [daeIn]
+-----------+-------+----------------------------+
| Full name | Short |        Description         |
+===========+=======+============================+
| DAE_X     | x     | Differential state .       |
+-----------+-------+----------------------------+
| DAE_Z     | z     | Algebraic state .          |
+-----------+-------+----------------------------+
| DAE_P     | p     | Parameter .                |
+-----------+-------+----------------------------+
| DAE_T     | t     | Explicit time dependence . |
+-----------+-------+----------------------------+

>Output scheme: casadi::DAEOutput (DAE_NUM_OUT = 4) [daeOut]
+-----------+-------+--------------------------------------------+
| Full name | Short |                Description                 |
+===========+=======+============================================+
| DAE_ODE   | ode   | Right hand side of the implicit ODE .      |
+-----------+-------+--------------------------------------------+
| DAE_ALG   | alg   | Right hand side of algebraic equations .   |
+-----------+-------+--------------------------------------------+
| DAE_QUAD  | quad  | Right hand side of quadratures equations . |
+-----------+-------+--------------------------------------------+

Parameters:
-----------

g:  backwards system

>Input scheme: casadi::RDAEInput (RDAE_NUM_IN = 8) [rdaeIn]
+-----------+-------+-------------------------------+
| Full name | Short |          Description          |
+===========+=======+===============================+
| RDAE_RX   | rx    | Backward differential state . |
+-----------+-------+-------------------------------+
| RDAE_RZ   | rz    | Backward algebraic state .    |
+-----------+-------+-------------------------------+
| RDAE_RP   | rp    | Backward parameter vector .   |
+-----------+-------+-------------------------------+
| RDAE_X    | x     | Forward differential state .  |
+-----------+-------+-------------------------------+
| RDAE_Z    | z     | Forward algebraic state .     |
+-----------+-------+-------------------------------+
| RDAE_P    | p     | Parameter vector .            |
+-----------+-------+-------------------------------+
| RDAE_T    | t     | Explicit time dependence .    |
+-----------+-------+-------------------------------+

>Output scheme: casadi::RDAEOutput (RDAE_NUM_OUT = 4) [rdaeOut]
+-----------+-------+-------------------------------------------+
| Full name | Short |                Description                |
+===========+=======+===========================================+
| RDAE_ODE  | ode   | Right hand side of ODE. .                 |
+-----------+-------+-------------------------------------------+
| RDAE_ALG  | alg   | Right hand side of algebraic equations. . |
+-----------+-------+-------------------------------------------+
| RDAE_QUAD | quad  | Right hand side of quadratures. .         |
+-----------+-------+-------------------------------------------+

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::Integrator::getAugmented(int nfwd, int nadj)
"

Generate a augmented DAE system with nfwd forward sensitivities and nadj
adjoint sensitivities.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::Integrator::resetB() "

Reset the backward problem.

Time will be set to tf and backward state to input(INTEGRATOR_RX0)

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::Integrator::integrate(double t_out) "

Integrate forward until a specified time point.

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::Integrator::getDAE() "

Get the DAE.

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";


// File: classcasadi_1_1OneSX.xml
%feature("docstring")  casadi::OneSX::isInteger() const  " [INTERNAL]
Properties.

";

%feature("docstring")  casadi::SXNode::isSymbolic() const  " [INTERNAL]
check properties of a node

";

%feature("docstring")  casadi::SXNode::print(std::ostream &stream) const  "
[INTERNAL]  print

";

%feature("docstring")  casadi::OneSX::getIntValue() const  " [INTERNAL]  Get
value of a constant node.

";

%feature("docstring")  casadi::SXNode::isSmooth() const  " [INTERNAL]  Check
if smooth.

";

%feature("docstring")  casadi::ConstantSX::isEqual(const SXNode *node, int
depth) const  " [INTERNAL]  Check if two nodes are equivalent up to a given
depth.

";

%feature("docstring")  casadi::OneSX::isOne() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring")  casadi::ConstantSX::isConstant() const  " [INTERNAL]
Properties.

";

%feature("docstring")  casadi::SXNode::marked() const  " [INTERNAL] ";

%feature("docstring")  casadi::SXNode::getName() const  " [INTERNAL] ";

%feature("docstring")  casadi::SXNode::isMinusInf() const  " [INTERNAL]
check properties of a node

";

%feature("docstring") casadi::OneSX::OneSX() "[INTERNAL] ";

%feature("docstring")  casadi::SXNode::mark() "[INTERNAL] ";

%feature("docstring")  casadi::SXNode::ndep() const  " [INTERNAL]  Number of
dependencies.

";

%feature("docstring") casadi::OneSX::~OneSX "[INTERNAL] ";

%feature("docstring")  casadi::OneSX::getValue() const  " [INTERNAL]  Get
the value.

";

%feature("docstring")  casadi::SXNode::isMinusOne() const  " [INTERNAL]
check properties of a node

";

%feature("docstring")  casadi::SXNode::dep(int i) const  " [INTERNAL]  get
the reference of a child

";

%feature("docstring")  casadi::SXNode::dep(int i) " [INTERNAL]  get the
reference of a child

";

%feature("docstring") casadi::OneSX "[INTERNAL]  Represents a one SX.

Joel Andersson

C++ includes: constant_sx.hpp ";

%feature("docstring")  casadi::SXNode::hasDep() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring")  casadi::SXNode::isInf() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring")  casadi::SXNode::isAlmostZero(double tol) const  "
[INTERNAL]  check properties of a node

";

%feature("docstring")  casadi::ConstantSX::getOp() const  " [INTERNAL]  Get
the operation.

";

%feature("docstring")  casadi::SXNode::isZero() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring")  casadi::SXNode::init() "[INTERNAL]  Initialize the
node (currently used only to give a similar interface to MXNode)

";

%feature("docstring")  casadi::SXNode::isNan() const  " [INTERNAL]  check
properties of a node

";


// File: classcasadi_1_1OOQPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::Function::inputScheme() const  " [INTERNAL]  Access input/output
scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::QPSolver::generateNativeCode(const
std::string &filename) const  "

Generate native code in the interfaced language for debugging

";

%feature("docstring")  casadi::QPSolver::generateNativeCode(std::ostream
&file) const  "

Generate native code in the interfaced language for debugging

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::QPSolver::setLPOptions() "

Set options that make the QP solver more suitable for solving LPs.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring") casadi::OOQPSolver::OOQPSolver() "

Default constructor.

";

%feature("docstring") casadi::OOQPSolver::OOQPSolver(const QPStructure &st)
"

Constructor.

Parameters:
-----------

st:  Problem structure

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::OOQPSolver "

Interface to the OOQP Solver for quadratic programming:

Solves the following strictly convex problem:

min          1/2 x' H x + g' x  x  subject to             LBA <= A x <= UBA
LBX <= x   <= UBX      with :       H sparse (n x n) positive definite
g dense  (n x 1)      n: number of decision variables (x)     nc: number of
constraints (A)

If H is not positive-definite, the solver should throw an error.

The current implementation assumes that OOQP is configured with the MA27
sparse linear solver.

NOTE: when doing multiple calls to evaluate(), check if you need to
reInit();

>Input scheme: casadi::QPSolverInput (QP_SOLVER_NUM_IN = 10) [qpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_H            | h                      | The square matrix H:   |
|                        |                        | sparse, (n x n). Only  |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical.     |
+------------------------+------------------------+------------------------+
| QP_SOLVER_G            | g                      | The vector g: dense,   |
|                        |                        | (n x 1) .              |
+------------------------+------------------------+------------------------+
| QP_SOLVER_A            | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LBA          | lba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_UBA          | uba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LBX          | lbx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_UBX          | ubx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_X0           | x0                     | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X0       | lam_x0                 | dense                  |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::QPSolverOutput (QP_SOLVER_NUM_OUT = 5) [qpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_X            | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| QP_SOLVER_COST         | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_A        | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X        | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| artol        | OT_REAL      | 0.000        | tolerance as | casadi::OOQP |
|              |              |              | provided     | Internal     |
|              |              |              | with         |              |
|              |              |              | setArTol to  |              |
|              |              |              | OOQP         |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| mutol        | OT_REAL      | 0.000        | tolerance as | casadi::OOQP |
|              |              |              | provided     | Internal     |
|              |              |              | with         |              |
|              |              |              | setMuTol to  |              |
|              |              |              | OOQP         |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| print_level  | OT_INTEGER   | 0            | Print level. | casadi::OOQP |
|              |              |              | OOQP listens | Internal     |
|              |              |              | to           |              |
|              |              |              | print_level  |              |
|              |              |              | 0, 10 and    |              |
|              |              |              | 100          |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: ooqp_solver.hpp ";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::OOQPSolver::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";


// File: classcasadi_1_1OptionsFunctionality.xml


/*  Option Functionality  */ %feature("docstring")
casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring") casadi::OptionsFunctionality::OptionsFunctionality() "

Default constructor.

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring") casadi::OptionsFunctionality "

Provides options setting/getting functionality.

Gives a derived class the ability to set and retrieve options in a
convenient way. It also contains error checking, making sure that the option
exists and that the value type is correct.

A derived class should add option names, types and default values to the
corresponding vectors.

Joel Andersson

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: options_functionality.hpp ";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::OptionsFunctionality::checkNode() const  "
[INTERNAL]  Assert that the node is pointing to the right type of object

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring") casadi::OptionsFunctionality::~OptionsFunctionality "

Destructor.

";


// File: classcasadi_1_1OptionsFunctionalityNode.xml
%feature("docstring")  casadi::OptionsFunctionalityNode::hasOption(const
std::string &str) const  " [INTERNAL]  check if there is an option str

";

%feature("docstring")  casadi::OptionsFunctionalityNode::getOption(const
std::string &str) const  " [INTERNAL]  get an option value

";

%feature("docstring")  casadi::OptionsFunctionalityNode::getOptionNames()
const  " [INTERNAL]  Get a list of all option names.

";

%feature("docstring")  casadi::OptionsFunctionalityNode::printOption(const
std::string &name, std::ostream &stream=std::cout) const  " [INTERNAL]
Print all information there is to know about a certain option.

";

%feature("docstring")
casadi::OptionsFunctionalityNode::getOptionAllowedIndex(const std::string
&name) const  " [INTERNAL]  Get the index into allowed options of a certain
option.

";

%feature("docstring")
casadi::OptionsFunctionalityNode::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::OptionsFunctionalityNode::getOptionType(const
std::string &str) const  " [INTERNAL]  Get the type of a certain option.

";

%feature("docstring")
casadi::OptionsFunctionalityNode::getOptionDefault(const std::string &str)
const  " [INTERNAL]  Get the default of a certain option.

";

%feature("docstring")  casadi::SharedObjectNode::assertInit() const  "
[INTERNAL]  Assert that the object has been initialized.

";

%feature("docstring")  casadi::SharedObjectNode::isInit() const  "
[INTERNAL]  Check if the object has been initialized.

";

%feature("docstring")
casadi::OptionsFunctionalityNode::setOptionByEnumValue(const std::string
&name, int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")
casadi::OptionsFunctionalityNode::getOptionTypeName(const std::string &str)
const  " [INTERNAL]  Get the type name of a certain option.

";

%feature("docstring")  casadi::OptionsFunctionalityNode::hasSetOption(const
std::string &str) const  " [INTERNAL]  check if the user has there is an
option str

";

%feature("docstring")
casadi::OptionsFunctionalityNode::~OptionsFunctionalityNode "[INTERNAL] ";

%feature("docstring")  casadi::OptionsFunctionalityNode::dictionary() const
" [INTERNAL]  Get the dictionary.

";

%feature("docstring")  casadi::OptionsFunctionalityNode::setOption(const
std::string &str, const GenericType &val) " [INTERNAL]  set an option. The
setOptions are in general only considered before the init function, if any.
If properties changes, the init function should be called again. (Ticket
#54)

";

%feature("docstring")  casadi::OptionsFunctionalityNode::setOption(const
Dictionary &dict, bool skipUnknown=false) " [INTERNAL]  set a set of
options. The setOptions are in general only considered before the init
function, if any. If properties changes, the init function should be called
again. (Ticket #54)

";

%feature("docstring")
casadi::OptionsFunctionalityNode::OptionsFunctionalityNode() "[INTERNAL]
Constructor, destructor.

";

%feature("docstring")
casadi::OptionsFunctionalityNode::printOptions(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print options to a stream.

";

%feature("docstring")
casadi::OptionsFunctionalityNode::getBestMatches(const std::string &name,
std::vector< std::string > &suggestions, int amount=5) const  " [INTERNAL]
Get th ebest suggestions of option names.

";

%feature("docstring")  casadi::SharedObjectNode::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied) " [INTERNAL]  Deep copy
data members.

";

%feature("docstring")
casadi::OptionsFunctionalityNode::getOptionAllowed(const std::string &str)
const  " [INTERNAL]  Get the allowed values of a certain option.

";

%feature("docstring")  casadi::SharedObjectNode::init() "[INTERNAL]
Initialize the object.

";

%feature("docstring")  casadi::SharedObjectNode::weak() "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring")  casadi::OptionsFunctionalityNode::repr(std::ostream
&stream) const  " [INTERNAL]  Print representation.

";

%feature("docstring") casadi::OptionsFunctionalityNode "[INTERNAL]
Internal class.

Joel Andersson

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: options_functionality.hpp ";

%feature("docstring")  casadi::SharedObjectNode::clone() const  " [INTERNAL]
Make a deep copy of the instance.

";

%feature("docstring")  casadi::OptionsFunctionalityNode::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) " [INTERNAL]  Copy all
options from another object.

";

%feature("docstring")  casadi::SharedObjectNode::getCount() const  "
[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::OptionsFunctionalityNode::print(std::ostream
&stream) const  " [INTERNAL]  Print description.

";

%feature("docstring")
casadi::OptionsFunctionalityNode::getOptionEnumValue(const std::string
&name) const  " [INTERNAL]  Get the enum value corresponding to th certain
option.

";

%feature("docstring")
casadi::OptionsFunctionalityNode::getOptionDescription(const std::string
&str) const  " [INTERNAL]  Get the description of a certain option.

";


// File: classcasadi_1_1OutputNode.xml
%feature("docstring")  casadi::MXNode::evaluateSX(const SXPtrV &input,
SXPtrV &output, std::vector< int > &itmp, std::vector< SXElement > &rtmp) "
[INTERNAL]  Evaluate symbolically (SX)

";

%feature("docstring")  casadi::MXNode::getSetNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Assign the nonzeros of a matrix
to another matrix.

";

%feature("docstring")  casadi::MXNode::getGetNonzeros(const Sparsity &sp,
const std::vector< int > &nz) const  " [INTERNAL]  Get the nonzeros of
matrix.

";

%feature("docstring")  casadi::MXNode::isOne() const  " [INTERNAL]  Check if
identically one.

";

%feature("docstring")  casadi::OutputNode::getFunctionOutput() const  "
[INTERNAL]  Get function output.

";

%feature("docstring")  casadi::MXNode::getSetSparse(const Sparsity &sp)
const  " [INTERNAL]  Create set sparse.

";

%feature("docstring")  casadi::OutputNode::getFunctionInput() const  "
[INTERNAL]  Get function input.

";

%feature("docstring")  casadi::OutputNode::getHorzcat(const std::vector< MX
> &x) const  " [INTERNAL]  Create a horizontal concatenation node.

";

%feature("docstring")  casadi::OutputNode::getOp() const  " [INTERNAL]  Get
the operation.

";

%feature("docstring")  casadi::MXNode::sameOpAndDeps(const MXNode *node, int
depth) const  " [INTERNAL]  Checks if two nodes have the same operation and
have equivalent dependencies up to a given depth.

";

%feature("docstring")  casadi::MXNode::getVertsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a vertical split node (vectors
only)

";

%feature("docstring")  casadi::MXNode::getBinary(int op, const MX &y, bool
scX, bool scY) const  " [INTERNAL]  Get a binary operation operation
(matrix-matrix)

";

%feature("docstring")  casadi::SharedObjectNode::getCount() const  "
[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::SharedObjectNode::weak() "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep) "
[INTERNAL]  Set unary dependency.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2) " [INTERNAL]  Set binary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2, const MX &dep3) " [INTERNAL]  Set ternary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const std::vector< MX
> &dep) " [INTERNAL]  Set multiple dependencies.

";

%feature("docstring")  casadi::MXNode::numel() const  " [INTERNAL]  Get
shape.

";

%feature("docstring")  casadi::MXNode::getMatrixValue() const  " [INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring")  casadi::MXNode::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied) " [INTERNAL]  Deep copy
data members.

";

%feature("docstring")  casadi::MXNode::getBinarySwitch(int op, const MX &y)
const  " [INTERNAL]  Get a binary operation operation.

";

%feature("docstring")  casadi::OutputNode::getVertcat(const std::vector< MX
> &x) const  " [INTERNAL]  Create a vertical concatenation node (vectors
only)

";

%feature("docstring")  casadi::MXNode::getOutput(int oind) const  "
[INTERNAL]  Get an output.

";

%feature("docstring")  casadi::MXNode::getInnerProd(const MX &y) const  "
[INTERNAL]  Inner product.

";

%feature("docstring")  casadi::MXNode::getInverse() const  " [INTERNAL]
Inverse.

";

%feature("docstring")  casadi::MXNode::getSubAssign(const MX &y, const Slice
&i, const Slice &j) const  " [INTERNAL]  Get submatrix assignment.

";

%feature("docstring") casadi::OutputNode::__nonzero__ "[INTERNAL]  Check
the truth value of this node.

";

%feature("docstring")  casadi::MXNode::getDeterminant() const  " [INTERNAL]
Determinant.

";

%feature("docstring")  casadi::MXNode::generateOperation(std::ostream
&stream, const std::vector< std::string > &arg, const std::vector<
std::string > &res, CodeGenerator &gen) const  " [INTERNAL]  Generate code
for the operation.

";

%feature("docstring")  casadi::SharedObjectNode::assertInit() const  "
[INTERNAL]  Assert that the object has been initialized.

";

%feature("docstring")  casadi::MXNode::sparsity() const  " [INTERNAL]  Get
the sparsity.

";

%feature("docstring")  casadi::MXNode::sparsity(int oind) const  "
[INTERNAL]  Get the sparsity of output oind.

";

%feature("docstring")  casadi::MXNode::evaluateD(const DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp)
" [INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::MXNode::nTmp(size_t &ni, size_t &nr) "
[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, const std::vector< int > &onz, bool add=false) "
[INTERNAL]  Assign nonzeros (mapping matrix)

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, bool add=false) " [INTERNAL]  Assign nonzeros
(mapping matrix), output indices sequential.

";

%feature("docstring") casadi::OutputNode::~OutputNode "[INTERNAL]
Destructor.

";

%feature("docstring")  casadi::MXNode::isEqual(const MXNode *node, int
depth) const  " [INTERNAL]  Check if two nodes are equivalent up to a given
depth.

";

%feature("docstring")  casadi::MXNode::isZero() const  " [INTERNAL]  Check
if identically zero.

";

%feature("docstring")  casadi::MXNode::getAddNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Add the nonzeros of a matrix to
another matrix.

";

%feature("docstring")  casadi::MXNode::getName() const  " [INTERNAL]  Get
the name.

";

%feature("docstring")  casadi::MXNode::mapping() const  " [INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring")  casadi::MXNode::getNumOutputs() const  " [INTERNAL]
Number of outputs.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream) const  "
[INTERNAL]  Print a description.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream, long
&remaining_calls) const  " [INTERNAL]  Print expression (make sure number of
calls is not exceeded)

";

%feature("docstring")  casadi::MXNode::isUnaryOp() const  " [INTERNAL]
Check if unary operation.

";

%feature("docstring")  casadi::MXNode::addDependency(const MX &dep) "
[INTERNAL]  Add a dependency.

";

%feature("docstring")  casadi::MXNode::getSolve(const MX &r, bool tr, const
LinearSolver &linear_solver) const  " [INTERNAL]   Solve a system of linear
equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") casadi::OutputNode "[INTERNAL] C++ includes:
multiple_output.hpp ";

%feature("docstring")  casadi::MXNode::getValue() const  " [INTERNAL]  Get
the value (only for scalar constant nodes)

";

%feature("docstring")  casadi::MXNode::getNormF() const  " [INTERNAL]
Frobenius norm.

";

%feature("docstring")  casadi::MXNode::ndep() const  " [INTERNAL]  Number of
dependencies.

";

%feature("docstring")  casadi::MXNode::shape() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getUnary(int op) const  " [INTERNAL]
Get a unary operation.

";

%feature("docstring")  casadi::MXNode::isBinaryOp() const  " [INTERNAL]
Check if binary operation.

";

%feature("docstring")  casadi::MXNode::getTranspose() const  " [INTERNAL]
Transpose.

";

%feature("docstring")  casadi::MXNode::size2() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::evaluateMX(const MXPtrV &input,
MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV
&adjSeed, MXPtrVV &adjSens, bool output_given) " [INTERNAL]  Evaluate
symbolically ( MX)

";

%feature("docstring")  casadi::MXNode::evaluateMX(const MXPtrV &input,
MXPtrV &output) " [INTERNAL]  Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring")  casadi::MXNode::size1() const  " [INTERNAL] ";

%feature("docstring")  casadi::OutputNode::clone() const  " [INTERNAL]
Clone function.

";

%feature("docstring")  casadi::MXNode::isMultipleOutput() const  "
[INTERNAL]  Check if a multiple output node.

";

%feature("docstring")  casadi::MXNode::getFunction() "[INTERNAL]  Get
function reference.

";

%feature("docstring")  casadi::MXNode::getFunction() const  " [INTERNAL]
Get function reference.

";

%feature("docstring")  casadi::SharedObjectNode::init() "[INTERNAL]
Initialize the object.

";

%feature("docstring")  casadi::MXNode::getReshape(const Sparsity &sp) const
" [INTERNAL]   Reshape.

";

%feature("docstring")  casadi::MXNode::getHorzsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a horizontal split node.

";

%feature("docstring")  casadi::OutputNode::printPart(std::ostream &stream,
int part) const  " [INTERNAL]  Print a part of the expression.

";

%feature("docstring")  casadi::OutputNode::isNonLinear() "[INTERNAL]  Is
the node nonlinear.

";

%feature("docstring")  casadi::MXNode::getSubRef(const Slice &i, const Slice
&j) const  " [INTERNAL]  Get submatrix reference.

";

%feature("docstring")  casadi::MXNode::isValue(double val) const  "
[INTERNAL]  Check if a certain value.

";

%feature("docstring")  casadi::MXNode::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp,
bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, bool fwd) " [INTERNAL]  Propagate sparsity, no work.

";

%feature("docstring")  casadi::MXNode::getMultiplication(const MX &y, const
Sparsity &sp_z=Sparsity()) const  " [INTERNAL]   Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring")  casadi::MXNode::numInplace() const  " [INTERNAL]  Can
the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring")  casadi::MXNode::simplifyMe(MX &ex) " [INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring")  casadi::MXNode::setSparsity(const Sparsity &sparsity)
" [INTERNAL]  Set the sparsity.

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) const  " [INTERNAL]
dependencies - functions that have to be evaluated before this one

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) " [INTERNAL] ";

%feature("docstring")  casadi::SharedObjectNode::isInit() const  "
[INTERNAL]  Check if the object has been initialized.

";

%feature("docstring") casadi::OutputNode::OutputNode(const MX &parent, int
oind) " [INTERNAL]  Constructor.

";

%feature("docstring")  casadi::MXNode::size() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::isIdentity() const  " [INTERNAL]
Check if identity matrix.

";

%feature("docstring")  casadi::MXNode::hasDep() const  " [INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring")  casadi::MXNode::getNorm2() const  " [INTERNAL]
Spectral norm.

";

%feature("docstring")  casadi::OutputNode::isOutputNode() const  "
[INTERNAL]  Check if evaluation output.

";

%feature("docstring")  casadi::MXNode::getAssertion(const MX &y, const
std::string &fail_message="") const  " [INTERNAL]   Assertion.

";

%feature("docstring")  casadi::MXNode::repr(std::ostream &stream) const  "
[INTERNAL]  Print a representation.

";

%feature("docstring")  casadi::MXNode::getNorm1() const  " [INTERNAL]
1-norm

";

%feature("docstring")  casadi::MXNode::getNormInf() const  " [INTERNAL]
Infinity norm.

";


// File: classcasadi_1_1Parallelizer.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")  casadi::IOInterface<
Function  >::getInput(int iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring") casadi::Parallelizer "

Parallelizer execution of functions.

Joel Andersson

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| parallelizat | OT_STRING    | \"serial\"     | (serial|open | casadi::Para |
| ion          |              |              | mp|mpi)      | llelizerInte |
|              |              |              |              | rnal         |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available stats
+-----------------+------------------------------+
|       Id        |           Used in            |
+=================+==============================+
| max_threads     | casadi::ParallelizerInternal |
+-----------------+------------------------------+
| num_threads     | casadi::ParallelizerInternal |
+-----------------+------------------------------+
| task_allocation | casadi::ParallelizerInternal |
+-----------------+------------------------------+
| task_cputime    | casadi::ParallelizerInternal |
+-----------------+------------------------------+
| task_endtime    | casadi::ParallelizerInternal |
+-----------------+------------------------------+
| task_order      | casadi::ParallelizerInternal |
+-----------------+------------------------------+
| task_starttime  | casadi::ParallelizerInternal |
+-----------------+------------------------------+

Diagrams

C++ includes: parallelizer.hpp ";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::Function::checkNode() const  " [INTERNAL]
Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring") casadi::Parallelizer::Parallelizer() "

Default constructor.

";

%feature("docstring") casadi::Parallelizer::Parallelizer(const std::vector<
Function > &funcs) "

Create a Parallelizer.

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";


// File: classcasadi_1_1Polynomial.xml
%feature("docstring") casadi::Polynomial "

Helper class for differentiating and integrating polynomials.

Joel Andersson

C++ includes: polynomial.hpp ";

%feature("docstring")  casadi::Polynomial::derivative() const  "

Create a new polynomial for the derivative.

";

%feature("docstring") casadi::Polynomial::Polynomial(real_t scalar=1) "

Construct a constant polynomial.

";

%feature("docstring") casadi::Polynomial::Polynomial(real_t p0, real_t p1) "

Construct a linear polynomial.

";

%feature("docstring") casadi::Polynomial::Polynomial(real_t p0, real_t p1,
real_t p2) "

Construct a quadratic polynomial.

";

%feature("docstring") casadi::Polynomial::Polynomial(real_t p0, real_t p1,
real_t p2, real_t p3) "

Construct a cubic polynomial.

";

%feature("docstring") casadi::Polynomial::Polynomial(const std::vector< T >
&coeff) "

Construct from a vector of polynomial coefficients.

";

%feature("docstring")  casadi::Polynomial::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::Polynomial::anti_derivative() const  "

Create a new polynomial for the anti-derivative (primitive function)

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::Polynomial::degree() const  "

Degree of the polynomial.

";

%feature("docstring")  casadi::Polynomial::toScalar() const  "

Get scalar value (error if degree()!=0)

";

%feature("docstring")  casadi::Polynomial::trim() "

Remove excess zeros.

";

%feature("docstring")  casadi::Polynomial::repr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a representation of the
object.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";


// File: classcasadi_1_1PrintableObject.xml
%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::PrintableObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::PrintableObject::repr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a representation of the
object.

";

%feature("docstring") casadi::PrintableObject "

Base class for objects that have a natural string representation.

Joel Andersson

C++ includes: printable_object.hpp ";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";


// File: structcasadi_1_1ProfilingData__ENTRY.xml
%feature("docstring") casadi::ProfilingData_ENTRY "[INTERNAL] C++ includes:
profiling.hpp ";


// File: structcasadi_1_1ProfilingData__EXIT.xml
%feature("docstring") casadi::ProfilingData_EXIT "[INTERNAL] C++ includes:
profiling.hpp ";


// File: structcasadi_1_1ProfilingData__IO.xml
%feature("docstring") casadi::ProfilingData_IO "[INTERNAL] C++ includes:
profiling.hpp ";


// File: structcasadi_1_1ProfilingData__NAME.xml
%feature("docstring") casadi::ProfilingData_NAME "[INTERNAL] C++ includes:
profiling.hpp ";


// File: structcasadi_1_1ProfilingData__SOURCE.xml
%feature("docstring") casadi::ProfilingData_SOURCE "[INTERNAL] C++
includes: profiling.hpp ";


// File: structcasadi_1_1ProfilingData__TIMELINE.xml
%feature("docstring") casadi::ProfilingData_TIMELINE "[INTERNAL] C++
includes: profiling.hpp ";


// File: structcasadi_1_1ProfilingHeader.xml
%feature("docstring") casadi::ProfilingHeader "[INTERNAL] C++ includes:
profiling.hpp ";


// File: classcasadi_1_1PsdIndefDpleSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::DpleSolver::printStats(std::ostream
&stream=std::cout) const  "

Print solver statistics.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::PsdIndefDpleSolver::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::PsdIndefDpleSolver::PsdIndefDpleSolver() "

Default constructor.

";

%feature("docstring") casadi::PsdIndefDpleSolver::PsdIndefDpleSolver(const
std::vector< Sparsity > &A, const std::vector< Sparsity > &V) "

Constructor.

Parameters:
-----------

A:  List of sparsities of A_i

V:  List of sparsities of V_i

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::PsdIndefDpleSolver "

An efficient solver for Discrete Periodic Lyapunov Equations using SLICOT.

Given matrices $A_k$ and symmetric $V_k, k = 0..K-1$

A_k in R^(n x n) V_k in R^n

provides all of $P_k$ that satisfy:

P_0 = A_(K-1)*P_(K-1)*A_(K-1)' + V_k P_k+1 = A_k*P_k*A_k' + V_k  for k =
1..K-1

Uses Periodic Schur Decomposition ('psd') and does not assume positive
definiteness. Based on Periodic Lyapunov equations: some applications and
new algorithms. Int. J. Control, vol. 67, pp. 69-87, 1997.

Joris Gillis

>Input scheme: casadi::DPLEInput (DPLE_NUM_IN = 3) [dpleIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| DPLE_A                 | a                      | A matrices (horzcat    |
|                        |                        | when const_dim,        |
|                        |                        | blkdiag otherwise) .   |
+------------------------+------------------------+------------------------+
| DPLE_V                 | v                      | V matrices (horzcat    |
|                        |                        | when const_dim,        |
|                        |                        | blkdiag otherwise) .   |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::DPLEOutput (DPLE_NUM_OUT = 2) [dpleOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| DPLE_P                 | p                      | Lyapunov matrix        |
|                        |                        | (horzcat when          |
|                        |                        | const_dim, blkdiag     |
|                        |                        | otherwise) (Cholesky   |
|                        |                        | of P if pos_def) .     |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| artol        | OT_REAL      | 0.000        | tolerance as | casadi::PsdI |
|              |              |              | provided     | ndefDpleInte |
|              |              |              | with         | rnal         |
|              |              |              | setArTol to  |              |
|              |              |              | OOQP         |              |
+--------------+--------------+--------------+--------------+--------------+
| const_dim    | OT_BOOLEAN   | true         | Assume       | casadi::Dple |
|              |              |              | constant     | Internal     |
|              |              |              | dimension of |              |
|              |              |              | P            |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| eps_unstable | OT_REAL      | 0.000        | A margin for | casadi::Dple |
|              |              |              | unstability  | Internal     |
|              |              |              | detection    |              |
+--------------+--------------+--------------+--------------+--------------+
| error_unstab | OT_BOOLEAN   | false        | has          | casadi::Dple |
| le           |              |              | eigenvalues  | Internal     |
|              |              |              | greater than |              |
|              |              |              | 1-eps_unstab |              |
|              |              |              | le           |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| pos_def      | OT_BOOLEAN   | false        | Assume P     | casadi::Dple |
|              |              |              | positive     | Internal     |
|              |              |              | definite     |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: psd_indef_dple_solver.hpp ";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::DpleSolver::clone() const  "

Clone.

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";


// File: classcasadi_1_1QCQPQPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::SharedObject::assignNode(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")  casadi::QPSolver::generateNativeCode(const
std::string &filename) const  "

Generate native code in the interfaced language for debugging

";

%feature("docstring")  casadi::QPSolver::generateNativeCode(std::ostream
&file) const  "

Generate native code in the interfaced language for debugging

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring") casadi::QCQPQPSolver::QCQPQPSolver() "

Default constructor.

";

%feature("docstring") casadi::QCQPQPSolver::QCQPQPSolver(const QPStructure
&st) "

Constructor.

Parameters:
-----------

st:  Problem structure

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::QCQPQPSolver::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring") casadi::QCQPQPSolver "

Use a QCQP solver to solve q QP.

Solves the following strictly convex problem:

min          1/2 x' H x + g' x  x  subject to             LBA <= A x <= UBA
LBX <= x   <= UBX      with :       H sparse (n x n) positive definite
g dense  (n x 1)      n: number of decision variables (x)     nc: number of
constraints (A)

If H is not positive-definite, the solver should throw an error.

Joris Gillis

>Input scheme: casadi::QPSolverInput (QP_SOLVER_NUM_IN = 10) [qpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_H            | h                      | The square matrix H:   |
|                        |                        | sparse, (n x n). Only  |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical.     |
+------------------------+------------------------+------------------------+
| QP_SOLVER_G            | g                      | The vector g: dense,   |
|                        |                        | (n x 1) .              |
+------------------------+------------------------+------------------------+
| QP_SOLVER_A            | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LBA          | lba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_UBA          | uba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LBX          | lbx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_UBX          | ubx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_X0           | x0                     | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X0       | lam_x0                 | dense                  |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::QPSolverOutput (QP_SOLVER_NUM_OUT = 5) [qpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_X            | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| QP_SOLVER_COST         | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_A        | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X        | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| enableEquali | OT_BOOLEAN   | BooleanType_ | (True) or    | casadi::QCQP |
| ties         |              | to_bool      | not (False)  | QPInternal   |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available stats
+-------------------+------------------------+
|        Id         |        Used in         |
+===================+========================+
| qcqp_solver_stats | casadi::QCQPQPInternal |
+-------------------+------------------------+

Diagrams

C++ includes: qcqp_qp_solver.hpp ";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::QPSolver::setLPOptions() "

Set options that make the QP solver more suitable for solving LPs.

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::QCQPQPSolver::getSolver() "

Access underlying QCQP solver.

";


// File: classcasadi_1_1QCQPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::SharedObject::repr(std::ostream &stream) const  " [INTERNAL]  Print
a representation of the object.

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")  casadi::QCQPSolver::setQPOptions() "

Set options that make the QP solver more suitable for solving LPs.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::QCQPSolver::QCQPSolver() "

Default constructor.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")  casadi::QCQPSolver::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::QCQPSolver "

QCQPSolver.

Solves the following strictly convex problem:

min          1/2 x' H x + g' x  x  subject to             1/2 x' Pi x +  qi'
x + ri  <= 0   for i=0..nq-1             LBA <= A x <= UBA LBX <= x   <= UBX
with :       H, Pi sparse (n x n) positive definite       g, qi dense  (n x
1)       ri scalar      n: number of decision variables (x)     nc: number
of linear constraints (A) nq: number of quadratic constraints

If H, Pi is not positive-definite, the solver should throw an error.

Joris Gillis

>Input scheme: casadi::QCQPSolverInput (QCQP_SOLVER_NUM_IN = 13) [qcqpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QCQP_SOLVER_H          | h                      | The square matrix H:   |
|                        |                        | sparse, (n x n). Only  |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical.     |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_G          | g                      | The vector g: dense,   |
|                        |                        | (n x 1) .              |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_P          | p                      | The horizontal stack   |
|                        |                        | of all Pi. Each Pi is  |
|                        |                        | sparse (n x n). Only   |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical.     |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_Q          | q                      | The vertical stack of  |
|                        |                        | all qi: dense, (nq n x |
|                        |                        | 1) .                   |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_R          | r                      | The vertical stack of  |
|                        |                        | all scalars ri (nq x   |
|                        |                        | 1) .                   |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_A          | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_LBA        | lba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_UBA        | uba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_LBX        | lbx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_UBX        | ubx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_X0         | x0                     | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_LAM_X0     | lam_x0                 | dense                  |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::QCQPSolverOutput (QCQP_SOLVER_NUM_OUT = 5) [qcqpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QCQP_SOLVER_X          | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_COST       | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_LAM_A      | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_LAM_X      | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: qcqp_solver.hpp ";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";


// File: classcasadi_1_1QCQPSolverInputIOSchemeVector.xml
%feature("docstring") casadi::QCQPSolverInputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring") casadi::QCQPSolverInputIOSchemeVector< M
>::QCQPSolverInputIOSchemeVector(const std::vector< M > &t) " [INTERNAL] ";

%feature("docstring") casadi::QCQPSolverInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::QCQPSolverInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring")  casadi::IOSchemeVector< M  >::vector() const "
[INTERNAL] ";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "
[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::IOSchemeVector< M  >::print(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a description of the object.

";

%feature("docstring") casadi::QCQPSolverInputIOSchemeVector "[INTERNAL]
Helper function for 'QCQPSolverInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "
[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::IOSchemeVector< M  >::repr(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a representation of the object.

";


// File: classcasadi_1_1QCQPSolverOutputIOSchemeVector.xml
%feature("docstring") casadi::QCQPSolverOutputIOSchemeVector "[INTERNAL]
Helper function for 'QCQPSolverOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::QCQPSolverOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::QCQPSolverOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring")  casadi::IOSchemeVector< M  >::print(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "
[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::QCQPSolverOutputIOSchemeVector< M
>::QCQPSolverOutputIOSchemeVector(const std::vector< M > &t) " [INTERNAL] ";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "
[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::IOSchemeVector< M  >::repr(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a representation of the object.

";

%feature("docstring") casadi::QCQPSolverOutputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring")  casadi::IOSchemeVector< M  >::vector() const "
[INTERNAL] ";


// File: classcasadi_1_1QCQPStructIOSchemeVector.xml
%feature("docstring") casadi::QCQPStructIOSchemeVector "[INTERNAL]  Helper
function for 'QCQPStruct'

C++ includes: casadi_types.hpp ";

%feature("docstring") casadi::QCQPStructIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::QCQPStructIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring")  casadi::IOSchemeVector< M  >::print(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::IOSchemeVector< M  >::vector() const "
[INTERNAL] ";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "
[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::QCQPStructIOSchemeVector< T
>::QCQPStructIOSchemeVector(const std::vector< M > &t) " [INTERNAL] ";

%feature("docstring")  casadi::IOSchemeVector< M  >::repr(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a representation of the object.

";

%feature("docstring") casadi::QCQPStructIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "
[INTERNAL]  Return a string with a description (for SWIG)

";


// File: classcasadi_1_1QPLPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::Function::output_struct() const  " [INTERNAL]  Input/output
structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::QPLPSolver::getSolver() "

Access underlying QP solver.

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::QPLPSolver "

IPOPT QP Solver for quadratic programming.

Solves the following linear problem:

min          c' x  x  subject to             LBA <= A x <= UBA LBX <= x   <=
UBX      with x ( n x 1)          c ( n x 1 )          A sparse matrix ( nc
x n)          LBA, UBA dense vector (nc x 1) LBX, UBX dense vector (n x 1)
n: number of decision variables (x) nc: number of constraints (A)

Joris Gillis

>Input scheme: casadi::LPSolverInput (LP_SOLVER_NUM_IN = 7) [lpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| LP_SOLVER_C            | c                      | The vector c: dense (n |
|                        |                        | x 1) .                 |
+------------------------+------------------------+------------------------+
| LP_SOLVER_A            | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| LP_SOLVER_LBA          | lba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| LP_SOLVER_UBA          | uba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| LP_SOLVER_LBX          | lbx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| LP_SOLVER_UBX          | ubx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::LPSolverOutput (LP_SOLVER_NUM_OUT = 5) [lpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| LP_SOLVER_X            | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| LP_SOLVER_COST         | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| LP_SOLVER_LAM_A        | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| LP_SOLVER_LAM_X        | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| artol        | OT_REAL      | 0.000        | tolerance as | casadi::QPLP |
|              |              |              | provided     | Internal     |
|              |              |              | with         |              |
|              |              |              | setArTol to  |              |
|              |              |              | OOQP         |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available stats
+-----------------+----------------------+
|       Id        |       Used in        |
+=================+======================+
| qp_solver_stats | casadi::QPLPInternal |
+-----------------+----------------------+

Diagrams

C++ includes: qp_lp_solver.hpp ";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::QPLPSolver::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring") casadi::QPLPSolver::QPLPSolver() "

Default constructor.

";

%feature("docstring") casadi::QPLPSolver::QPLPSolver(const LPStructure &st)
"

Constructor.

Parameters:
-----------

st:  Problem structure

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";


// File: classcasadi_1_1QPOasesSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")  casadi::QPSolver::setLPOptions() "

Set options that make the QP solver more suitable for solving LPs.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring") casadi::QPOasesSolver "

Interface to QPOases Solver for quadratic programming.

Solves the following strictly convex problem:

min          1/2 x' H x + g' x  x  subject to             LBA <= A x <= UBA
LBX <= x   <= UBX      with :       H sparse (n x n) positive definite
g dense  (n x 1)      n: number of decision variables (x)     nc: number of
constraints (A)

If H is not positive-definite, the solver should throw an error.

Joris Gillis, Joel Andersson

>Input scheme: casadi::QPSolverInput (QP_SOLVER_NUM_IN = 10) [qpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_H            | h                      | The square matrix H:   |
|                        |                        | sparse, (n x n). Only  |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical.     |
+------------------------+------------------------+------------------------+
| QP_SOLVER_G            | g                      | The vector g: dense,   |
|                        |                        | (n x 1) .              |
+------------------------+------------------------+------------------------+
| QP_SOLVER_A            | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LBA          | lba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_UBA          | uba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LBX          | lbx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_UBX          | ubx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_X0           | x0                     | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X0       | lam_x0                 | dense                  |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::QPSolverOutput (QP_SOLVER_NUM_OUT = 5) [qpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_X            | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| QP_SOLVER_COST         | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_A        | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X        | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| CPUtime      | OT_REAL      | GenericType( | (and the     | casadi::QPOa |
|              |              | )            | actually     | sesInternal  |
|              |              |              | required one |              |
|              |              |              | on output).  |              |
|              |              |              | Disabled if  |              |
|              |              |              | unset.       |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| enableEquali | OT_BOOLEAN   | BooleanType_ | (True) or    | casadi::QPOa |
| ties         |              | to_bool      | not (False)  | sesInternal  |
+--------------+--------------+--------------+--------------+--------------+
| nWSR         | OT_INTEGER   | GenericType( | the initial  | casadi::QPOa |
|              |              | )            | homotopy.    | sesInternal  |
|              |              |              | Default is   |              |
|              |              |              | 5(nx + nc)   |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| printLevel   | OT_STRING    | PrintLevel_t | see Section  | casadi::QPOa |
|              |              | o_string     | 5.7 (none|lo | sesInternal  |
|              |              |              | w|medium|hig |              |
|              |              |              | h)           |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: qpoases_solver.hpp ";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring") casadi::QPOasesSolver::QPOasesSolver() "

Default constructor.

";

%feature("docstring") casadi::QPOasesSolver::QPOasesSolver(const QPStructure
&st) "

Constructor.

Parameters:
-----------

st:  Problem structure

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::QPSolver::generateNativeCode(const
std::string &filename) const  "

Generate native code in the interfaced language for debugging

";

%feature("docstring")  casadi::QPSolver::generateNativeCode(std::ostream
&file) const  "

Generate native code in the interfaced language for debugging

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::QPOasesSolver::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";


// File: classcasadi_1_1QPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")  casadi::IOInterface<
Function  >::output(int oind=0) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::QPSolver::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring") casadi::QPSolver "

QPSolver.

Solves the following strictly convex problem:

min          1/2 x' H x + g' x  x  subject to             LBA <= A x <= UBA
LBX <= x   <= UBX      with :       H sparse (n x n) positive definite
g dense  (n x 1)      n: number of decision variables (x)     nc: number of
constraints (A)

If H is not positive-definite, the solver should throw an error.

Joel Andersson

>Input scheme: casadi::QPSolverInput (QP_SOLVER_NUM_IN = 10) [qpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_H            | h                      | The square matrix H:   |
|                        |                        | sparse, (n x n). Only  |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical.     |
+------------------------+------------------------+------------------------+
| QP_SOLVER_G            | g                      | The vector g: dense,   |
|                        |                        | (n x 1) .              |
+------------------------+------------------------+------------------------+
| QP_SOLVER_A            | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LBA          | lba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_UBA          | uba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LBX          | lbx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_UBX          | ubx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_X0           | x0                     | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X0       | lam_x0                 | dense                  |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::QPSolverOutput (QP_SOLVER_NUM_OUT = 5) [qpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_X            | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| QP_SOLVER_COST         | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_A        | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X        | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: qp_solver.hpp ";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::QPSolver::QPSolver() "

Default constructor.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::QPSolver::setLPOptions() "

Set options that make the QP solver more suitable for solving LPs.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::QPSolver::generateNativeCode(const
std::string &filename) const  "

Generate native code in the interfaced language for debugging

";

%feature("docstring")  casadi::QPSolver::generateNativeCode(std::ostream
&file) const  "

Generate native code in the interfaced language for debugging

";


// File: classcasadi_1_1QPSolverInputIOSchemeVector.xml
%feature("docstring") casadi::QPSolverInputIOSchemeVector "[INTERNAL]
Helper function for 'QPSolverInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring")  casadi::IOSchemeVector< M  >::vector() const "
[INTERNAL] ";

%feature("docstring")  casadi::IOSchemeVector< M  >::print(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a description of the object.

";

%feature("docstring") casadi::QPSolverInputIOSchemeVector< M
>::QPSolverInputIOSchemeVector(const std::vector< M > &t) " [INTERNAL] ";

%feature("docstring") casadi::QPSolverInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::QPSolverInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "
[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::QPSolverInputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "
[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::IOSchemeVector< M  >::repr(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a representation of the object.

";


// File: classcasadi_1_1QPSolverOutputIOSchemeVector.xml
%feature("docstring") casadi::QPSolverOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::QPSolverOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::QPSolverOutputIOSchemeVector::__len__ "[INTERNAL] ";

%feature("docstring")  casadi::IOSchemeVector< M  >::print(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "
[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "
[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::IOSchemeVector< M  >::repr(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a representation of the object.

";

%feature("docstring") casadi::QPSolverOutputIOSchemeVector< M
>::QPSolverOutputIOSchemeVector(const std::vector< M > &t) " [INTERNAL] ";

%feature("docstring") casadi::QPSolverOutputIOSchemeVector "[INTERNAL]
Helper function for 'QPSolverOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring")  casadi::IOSchemeVector< M  >::vector() const "
[INTERNAL] ";


// File: classcasadi_1_1QPStabilizer.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::Function::setFullJacobian(const Function &jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::QPStabilizer::getSolver() "

Access underlying QP solver.

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring") casadi::QPStabilizer "

IPOPT QP Solver for quadratic programming.

Solves the following strictly convex problem:

min          1/2 x' H x + g' x  x  subject to             LBA <= A x <= UBA
LBX <= x   <= UBX      with :       H sparse (n x n) positive definite
g dense  (n x 1)      n: number of decision variables (x)     nc: number of
constraints (A)

If H is not positive-definite, the solver should throw an error.

Joris Gillis

>Input scheme: casadi::StabilizedQPSolverInput (STABILIZED_QP_SOLVER_NUM_IN = 13) [stabilizedQpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| STABILIZED_QP_SOLVER_H | h                      | The square matrix H:   |
|                        |                        | sparse, (n x n). Only  |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical.     |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_G | g                      | The vector g: dense,   |
|                        |                        | (n x 1) .              |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_A | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_L | lba                    | dense, (nc x 1)        |
| BA                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_U | uba                    | dense, (nc x 1)        |
| BA                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_L | lbx                    | dense, (n x 1)         |
| BX                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_U | ubx                    | dense, (n x 1)         |
| BX                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_X | x0                     | dense, (n x 1)         |
| 0                      |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_L | lam_x0                 | dense                  |
| AM_X0                  |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_M | muR                    | dense (1 x 1)          |
| UR                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_M | muE                    | dense (nc x 1)         |
| UE                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_M | mu                     | dense (nc x 1)         |
| U                      |                        |                        |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::QPSolverOutput (QP_SOLVER_NUM_OUT = 5) [qpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_X            | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| QP_SOLVER_COST         | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_A        | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X        | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| codegen      | OT_BOOLEAN   | false        | C-code       | casadi::QPSt |
|              |              |              | generation   | abilizerInte |
|              |              |              |              | rnal         |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available stats
+-----------------+------------------------------+
|       Id        |           Used in            |
+=================+==============================+
| qp_solver_stats | casadi::QPStabilizerInternal |
+-----------------+------------------------------+

Diagrams

C++ includes: qp_stabilizer.hpp ";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::StabilizedQPSolver::setLPOptions() "

Set options that make the QP solver more suitable for solving LPs.

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring") casadi::QPStabilizer::QPStabilizer() "

Default constructor.

";

%feature("docstring") casadi::QPStabilizer::QPStabilizer(const QPStructure
&st) "

Constructor.

Parameters:
-----------

st:  Problem structure

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::StabilizedQPSolver::generateNativeCode(const
std::string &filename) const  "

Generate native code in the interfaced language for debugging

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::QPStabilizer::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";


// File: classcasadi_1_1QPStructIOSchemeVector.xml
%feature("docstring")  casadi::IOSchemeVector< M  >::vector() const "
[INTERNAL] ";

%feature("docstring")  casadi::IOSchemeVector< M  >::print(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a description of the object.

";

%feature("docstring") casadi::QPStructIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::QPStructIOSchemeVector "[INTERNAL]  Helper
function for 'QPStruct'

C++ includes: casadi_types.hpp ";

%feature("docstring") casadi::QPStructIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::QPStructIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "
[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::QPStructIOSchemeVector< T
>::QPStructIOSchemeVector(const std::vector< M > &t) " [INTERNAL] ";

%feature("docstring")  casadi::IOSchemeVector< M  >::repr(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "
[INTERNAL]  Return a string with a representation (for SWIG)

";


// File: classcasadi_1_1RDAEInputIOSchemeVector.xml
%feature("docstring") casadi::RDAEInputIOSchemeVector "[INTERNAL]  Helper
function for 'RDAEInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::RDAEInputIOSchemeVector< M
>::RDAEInputIOSchemeVector(const std::vector< M > &t) " [INTERNAL] ";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "
[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::IOSchemeVector< M  >::print(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a description of the object.

";

%feature("docstring") casadi::RDAEInputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring")  casadi::IOSchemeVector< M  >::vector() const "
[INTERNAL] ";

%feature("docstring") casadi::RDAEInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::RDAEInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "
[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::IOSchemeVector< M  >::repr(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a representation of the object.

";


// File: classcasadi_1_1RDAEOutputIOSchemeVector.xml
%feature("docstring")  casadi::PrintableObject::getDescription() const  "
[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::RDAEOutputIOSchemeVector< M
>::RDAEOutputIOSchemeVector(const std::vector< M > &t) " [INTERNAL] ";

%feature("docstring") casadi::RDAEOutputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::RDAEOutputIOSchemeVector "[INTERNAL]  Helper
function for 'RDAEOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring")  casadi::IOSchemeVector< M  >::print(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "
[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::IOSchemeVector< M  >::repr(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::IOSchemeVector< M  >::vector() const "
[INTERNAL] ";

%feature("docstring") casadi::RDAEOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::RDAEOutputIOSchemeVector::__getitem__ "[INTERNAL] ";


// File: classcasadi_1_1RealtypeSX.xml
%feature("docstring")  casadi::ConstantSX::getOp() const  " [INTERNAL]  Get
the operation.

";

%feature("docstring")  casadi::SXNode::marked() const  " [INTERNAL] ";

%feature("docstring")  casadi::SXNode::print(std::ostream &stream) const  "
[INTERNAL]  print

";

%feature("docstring")  casadi::SXNode::isOne() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring")  casadi::RealtypeSX::getValue() const  " [INTERNAL]
Get the value.

";

%feature("docstring")  casadi::SXNode::ndep() const  " [INTERNAL]  Number of
dependencies.

";

%feature("docstring")  casadi::SXNode::getName() const  " [INTERNAL] ";

%feature("docstring")  casadi::SXNode::isInf() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring")  casadi::SXNode::isZero() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring")  casadi::RealtypeSX::getIntValue() const  " [INTERNAL]
Get the value.

";

%feature("docstring")  casadi::SXNode::isMinusOne() const  " [INTERNAL]
check properties of a node

";

%feature("docstring")  casadi::SXNode::isMinusInf() const  " [INTERNAL]
check properties of a node

";

%feature("docstring")  casadi::ConstantSX::isEqual(const SXNode *node, int
depth) const  " [INTERNAL]  Check if two nodes are equivalent up to a given
depth.

";

%feature("docstring")  casadi::SXNode::isInteger() const  " [INTERNAL]
check properties of a node

";

%feature("docstring") casadi::RealtypeSX::~RealtypeSX "[INTERNAL]
Destructor.

";

%feature("docstring")  casadi::SXNode::isNan() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring")  casadi::SXNode::init() "[INTERNAL]  Initialize the
node (currently used only to give a similar interface to MXNode)

";

%feature("docstring")  casadi::SXNode::mark() "[INTERNAL] ";

%feature("docstring") casadi::RealtypeSX "[INTERNAL]  DERIVED CLASSES.

Represents a constant real SX Joel Andersson

C++ includes: constant_sx.hpp ";

%feature("docstring")  casadi::SXNode::hasDep() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring")  casadi::RealtypeSX::isAlmostZero(double tol) const  "
[INTERNAL]  check properties of a node

";

%feature("docstring")  casadi::SXNode::isSymbolic() const  " [INTERNAL]
check properties of a node

";

%feature("docstring")  casadi::SXNode::isSmooth() const  " [INTERNAL]  Check
if smooth.

";

%feature("docstring")  casadi::ConstantSX::isConstant() const  " [INTERNAL]
Properties.

";

%feature("docstring")  casadi::SXNode::dep(int i) const  " [INTERNAL]  get
the reference of a child

";

%feature("docstring")  casadi::SXNode::dep(int i) " [INTERNAL]  get the
reference of a child

";


// File: classcasadi_1_1Reshape.xml
%feature("docstring")  casadi::MXNode::isOne() const  " [INTERNAL]  Check if
identically one.

";

%feature("docstring")  casadi::MXNode::getHorzcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a horizontal concatenation node.

";

%feature("docstring")  casadi::MXNode::getSubRef(const Slice &i, const Slice
&j) const  " [INTERNAL]  Get submatrix reference.

";

%feature("docstring")  casadi::MXNode::getSetSparse(const Sparsity &sp)
const  " [INTERNAL]  Create set sparse.

";

%feature("docstring")  casadi::Reshape::evaluateGen(const MatV &input, MatV
&output, std::vector< int > &itmp, std::vector< T > &rtmp) " [INTERNAL]
Evaluate the function (template)

";

%feature("docstring")  casadi::MXNode::repr(std::ostream &stream) const  "
[INTERNAL]  Print a representation.

";

%feature("docstring")  casadi::MXNode::getHorzsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a horizontal split node.

";

%feature("docstring")  casadi::SharedObjectNode::assertInit() const  "
[INTERNAL]  Assert that the object has been initialized.

";

%feature("docstring")  casadi::MXNode::getSubAssign(const MX &y, const Slice
&i, const Slice &j) const  " [INTERNAL]  Get submatrix assignment.

";

%feature("docstring")  casadi::MXNode::getBinarySwitch(int op, const MX &y)
const  " [INTERNAL]  Get a binary operation operation.

";

%feature("docstring")  casadi::MXNode::getUnary(int op) const  " [INTERNAL]
Get a unary operation.

";

%feature("docstring")  casadi::MXNode::getVertsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a vertical split node (vectors
only)

";

%feature("docstring")  casadi::MXNode::getNorm2() const  " [INTERNAL]
Spectral norm.

";

%feature("docstring")  casadi::MXNode::getDeterminant() const  " [INTERNAL]
Determinant.

";

%feature("docstring")  casadi::MXNode::isIdentity() const  " [INTERNAL]
Check if identity matrix.

";

%feature("docstring")  casadi::MXNode::simplifyMe(MX &ex) " [INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring")  casadi::MXNode::getFunctionOutput() const  "
[INTERNAL]  Get function output.

";

%feature("docstring")  casadi::MXNode::getInnerProd(const MX &y) const  "
[INTERNAL]  Inner product.

";

%feature("docstring") casadi::Reshape::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring")  casadi::MXNode::sameOpAndDeps(const MXNode *node, int
depth) const  " [INTERNAL]  Checks if two nodes have the same operation and
have equivalent dependencies up to a given depth.

";

%feature("docstring")  casadi::MXNode::getAddNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Add the nonzeros of a matrix to
another matrix.

";

%feature("docstring")  casadi::MXNode::getNorm1() const  " [INTERNAL]
1-norm

";

%feature("docstring")  casadi::MXNode::getGetNonzeros(const Sparsity &sp,
const std::vector< int > &nz) const  " [INTERNAL]  Get the nonzeros of
matrix.

";

%feature("docstring")  casadi::MXNode::hasDep() const  " [INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring")  casadi::MXNode::shape() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getMultiplication(const MX &y, const
Sparsity &sp_z=Sparsity()) const  " [INTERNAL]   Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring")  casadi::MXNode::isZero() const  " [INTERNAL]  Check
if identically zero.

";

%feature("docstring")  casadi::MXNode::mapping() const  " [INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring")  casadi::MXNode::getBinary(int op, const MX &y, bool
scX, bool scY) const  " [INTERNAL]  Get a binary operation operation
(matrix-matrix)

";

%feature("docstring")  casadi::MXNode::isNonLinear() "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring") casadi::Reshape "[INTERNAL]   Reshape an expression.

Joel Andersson

C++ includes: reshape.hpp ";

%feature("docstring")  casadi::MXNode::getValue() const  " [INTERNAL]  Get
the value (only for scalar constant nodes)

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream) const  "
[INTERNAL]  Print a description.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream, long
&remaining_calls) const  " [INTERNAL]  Print expression (make sure number of
calls is not exceeded)

";

%feature("docstring")  casadi::MXNode::ndep() const  " [INTERNAL]  Number of
dependencies.

";

%feature("docstring")  casadi::Reshape::generateOperation(std::ostream
&stream, const std::vector< std::string > &arg, const std::vector<
std::string > &res, CodeGenerator &gen) const  " [INTERNAL]  Generate code
for the operation.

";

%feature("docstring")  casadi::Reshape::evaluateSX(const SXPtrV &input,
SXPtrV &output, std::vector< int > &itmp, std::vector< SXElement > &rtmp) "
[INTERNAL]  Evaluate the function symbolically (SX)

";

%feature("docstring")  casadi::Reshape::propagateSparsity(DMatrixPtrV
&input, DMatrixPtrV &output, bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp,
bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::SharedObjectNode::weak() "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring")  casadi::MXNode::getNumOutputs() const  " [INTERNAL]
Number of outputs.

";

%feature("docstring")  casadi::MXNode::getTranspose() const  " [INTERNAL]
Transpose.

";

%feature("docstring")  casadi::MXNode::isUnaryOp() const  " [INTERNAL]
Check if unary operation.

";

%feature("docstring")  casadi::MXNode::getNormInf() const  " [INTERNAL]
Infinity norm.

";

%feature("docstring")  casadi::Reshape::getReshape(const Sparsity &sp) const
" [INTERNAL]   Reshape.

";

%feature("docstring")  casadi::MXNode::getSolve(const MX &r, bool tr, const
LinearSolver &linear_solver) const  " [INTERNAL]   Solve a system of linear
equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, const std::vector< int > &onz, bool add=false) "
[INTERNAL]  Assign nonzeros (mapping matrix)

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, bool add=false) " [INTERNAL]  Assign nonzeros
(mapping matrix), output indices sequential.

";

%feature("docstring")  casadi::MXNode::isMultipleOutput() const  "
[INTERNAL]  Check if a multiple output node.

";

%feature("docstring") casadi::Reshape::Reshape(const MX &x, Sparsity sp) "
[INTERNAL]  Constructor.

";

%feature("docstring")  casadi::Reshape::clone() const  " [INTERNAL]  Clone
function.

";

%feature("docstring")  casadi::MXNode::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied) " [INTERNAL]  Deep copy
data members.

";

%feature("docstring")  casadi::Reshape::getOp() const  " [INTERNAL]  Get the
operation.

";

%feature("docstring")  casadi::MXNode::nTmp(size_t &ni, size_t &nr) "
[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::MXNode::getName() const  " [INTERNAL]  Get
the name.

";

%feature("docstring")  casadi::MXNode::size() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getOutput(int oind) const  "
[INTERNAL]  Get an output.

";

%feature("docstring")  casadi::MXNode::numel() const  " [INTERNAL]  Get
shape.

";

%feature("docstring")  casadi::MXNode::isBinaryOp() const  " [INTERNAL]
Check if binary operation.

";

%feature("docstring")  casadi::SharedObjectNode::init() "[INTERNAL]
Initialize the object.

";

%feature("docstring")  casadi::Reshape::printPart(std::ostream &stream, int
part) const  " [INTERNAL]  Print a part of the expression */.

";

%feature("docstring")  casadi::MXNode::getAssertion(const MX &y, const
std::string &fail_message="") const  " [INTERNAL]   Assertion.

";

%feature("docstring")  casadi::MXNode::isOutputNode() const  " [INTERNAL]
Check if evaluation output.

";

%feature("docstring")  casadi::MXNode::getSetNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Assign the nonzeros of a matrix
to another matrix.

";

%feature("docstring")  casadi::MXNode::getMatrixValue() const  " [INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) const  " [INTERNAL]
dependencies - functions that have to be evaluated before this one

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getFunction() "[INTERNAL]  Get
function reference.

";

%feature("docstring")  casadi::MXNode::getFunction() const  " [INTERNAL]
Get function reference.

";

%feature("docstring")  casadi::Reshape::evaluateMX(const MXPtrV &input,
MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV
&adjSeed, MXPtrVV &adjSens, bool output_given) " [INTERNAL]  Evaluate the
function symbolically ( MX)

";

%feature("docstring")  casadi::MXNode::evaluateMX(const MXPtrV &input,
MXPtrV &output) " [INTERNAL]  Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring")  casadi::SharedObjectNode::isInit() const  "
[INTERNAL]  Check if the object has been initialized.

";

%feature("docstring")  casadi::Reshape::evaluateD(const DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp)
" [INTERNAL]  Evaluate the function numerically.

";

%feature("docstring")  casadi::MXNode::getFunctionInput() const  "
[INTERNAL]  Get function input.

";

%feature("docstring")  casadi::MXNode::getInverse() const  " [INTERNAL]
Inverse.

";

%feature("docstring")  casadi::MXNode::setSparsity(const Sparsity &sparsity)
" [INTERNAL]  Set the sparsity.

";

%feature("docstring")  casadi::MXNode::addDependency(const MX &dep) "
[INTERNAL]  Add a dependency.

";

%feature("docstring") casadi::Reshape::~Reshape "[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::MXNode::getNormF() const  " [INTERNAL]
Frobenius norm.

";

%feature("docstring")  casadi::Reshape::numInplace() const  " [INTERNAL]
Can the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring")  casadi::MXNode::size1() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::size2() const  " [INTERNAL] ";

%feature("docstring")  casadi::Reshape::isEqual(const MXNode *node, int
depth) const  " [INTERNAL]  Check if two nodes are equivalent up to a given
depth.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep) "
[INTERNAL]  Set unary dependency.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2) " [INTERNAL]  Set binary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2, const MX &dep3) " [INTERNAL]  Set ternary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const std::vector< MX
> &dep) " [INTERNAL]  Set multiple dependencies.

";

%feature("docstring")  casadi::SharedObjectNode::getCount() const  "
[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::MXNode::isValue(double val) const  "
[INTERNAL]  Check if a certain value.

";

%feature("docstring")  casadi::MXNode::sparsity() const  " [INTERNAL]  Get
the sparsity.

";

%feature("docstring")  casadi::MXNode::sparsity(int oind) const  "
[INTERNAL]  Get the sparsity of output oind.

";

%feature("docstring")  casadi::MXNode::getVertcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a vertical concatenation node (vectors only)

";


// File: classcasadi_1_1RKIntegrator.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::Integrator::resetB() "

Reset the backward problem.

Time will be set to tf and backward state to input(INTEGRATOR_RX0)

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::Integrator::getDAE() "

Get the DAE.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring") casadi::RKIntegrator::RKIntegrator() "

Default constructor.

";

%feature("docstring") casadi::RKIntegrator::RKIntegrator(const Function &f,
const Function &g=Function()) "

Create an integrator for explicit ODEs.

Parameters:
-----------

f:  dynamical system

>Input scheme: casadi::DAEInput (DAE_NUM_IN = 5) [daeIn]
+-----------+-------+----------------------------+
| Full name | Short |        Description         |
+===========+=======+============================+
| DAE_X     | x     | Differential state .       |
+-----------+-------+----------------------------+
| DAE_Z     | z     | Algebraic state .          |
+-----------+-------+----------------------------+
| DAE_P     | p     | Parameter .                |
+-----------+-------+----------------------------+
| DAE_T     | t     | Explicit time dependence . |
+-----------+-------+----------------------------+

>Output scheme: casadi::DAEOutput (DAE_NUM_OUT = 4) [daeOut]
+-----------+-------+--------------------------------------------+
| Full name | Short |                Description                 |
+===========+=======+============================================+
| DAE_ODE   | ode   | Right hand side of the implicit ODE .      |
+-----------+-------+--------------------------------------------+
| DAE_ALG   | alg   | Right hand side of algebraic equations .   |
+-----------+-------+--------------------------------------------+
| DAE_QUAD  | quad  | Right hand side of quadratures equations . |
+-----------+-------+--------------------------------------------+

Parameters:
-----------

g:  backwards system

>Input scheme: casadi::RDAEInput (RDAE_NUM_IN = 8) [rdaeIn]
+-----------+-------+-------------------------------+
| Full name | Short |          Description          |
+===========+=======+===============================+
| RDAE_RX   | rx    | Backward differential state . |
+-----------+-------+-------------------------------+
| RDAE_RZ   | rz    | Backward algebraic state .    |
+-----------+-------+-------------------------------+
| RDAE_RP   | rp    | Backward parameter vector .   |
+-----------+-------+-------------------------------+
| RDAE_X    | x     | Forward differential state .  |
+-----------+-------+-------------------------------+
| RDAE_Z    | z     | Forward algebraic state .     |
+-----------+-------+-------------------------------+
| RDAE_P    | p     | Parameter vector .            |
+-----------+-------+-------------------------------+
| RDAE_T    | t     | Explicit time dependence .    |
+-----------+-------+-------------------------------+

>Output scheme: casadi::RDAEOutput (RDAE_NUM_OUT = 4) [rdaeOut]
+-----------+-------+-------------------------------------------+
| Full name | Short |                Description                |
+===========+=======+===========================================+
| RDAE_ODE  | ode   | Right hand side of ODE. .                 |
+-----------+-------+-------------------------------------------+
| RDAE_ALG  | alg   | Right hand side of algebraic equations. . |
+-----------+-------+-------------------------------------------+
| RDAE_QUAD | quad  | Right hand side of quadratures. .         |
+-----------+-------+-------------------------------------------+

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::Integrator::reset() "

Reset the forward problem Time will be set to t0 and state to
input(INTEGRATOR_X0)

";

%feature("docstring")  casadi::Integrator::getAugmented(int nfwd, int nadj)
"

Generate a augmented DAE system with nfwd forward sensitivities and nadj
adjoint sensitivities.

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::RKIntegrator "

Fixed-step explicit Runge-Kutta integrator for ODEs Currently implements
RK4.

The method is still under development

Joel Andersson

>Input scheme: casadi::IntegratorInput (INTEGRATOR_NUM_IN = 7) [integratorIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_X0          | x0                     | Differential state at  |
|                        |                        | the initial time .     |
+------------------------+------------------------+------------------------+
| INTEGRATOR_P           | p                      | Parameters .           |
+------------------------+------------------------+------------------------+
| INTEGRATOR_Z0          | z0                     | Initial guess for the  |
|                        |                        | algebraic variable .   |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RX0         | rx0                    | Backward differential  |
|                        |                        | state at the final     |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RP          | rp                     | Backward parameter     |
|                        |                        | vector .               |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZ0         | rz0                    | Initial guess for the  |
|                        |                        | backwards algebraic    |
|                        |                        | variable .             |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::IntegratorOutput (INTEGRATOR_NUM_OUT = 7) [integratorOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_XF          | xf                     | Differential state at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_QF          | qf                     | Quadrature state at    |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_ZF          | zf                     | Algebraic variable at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RXF         | rxf                    | Backward differential  |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RQF         | rqf                    | Backward quadrature    |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZF         | rzf                    | Backward algebraic     |
|                        |                        | variable at the        |
|                        |                        | initial time .         |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| artol        | OT_REAL      | 0.000        | tolerance as | casadi::Inte |
|              |              |              | provided     | gratorIntern |
|              |              |              | with         | al           |
|              |              |              | setArTol to  |              |
|              |              |              | OOQP         |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_augme | OT_BOOLEAN   | true         | DAE callback | casadi::Inte |
| nted         |              |              | function     | gratorIntern |
|              |              |              | also be      | al           |
|              |              |              | SXFunction . |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| number_of_fi | OT_INTEGER   | 20           | Number of    | casadi::Fixe |
| nite_element |              |              | finite       | dStepIntegra |
| s            |              |              | elements     | torInternal  |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: rk_integrator.hpp ";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::Integrator::printStats(std::ostream
&stream=std::cout) const  "

Print solver statistics.

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::Integrator::integrateB(double t_out) "

Integrate backward until a specified time point.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::Integrator::clone() const  "

Clone.

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::RKIntegrator::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::Integrator::integrate(double t_out) "

Integrate forward until a specified time point.

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";


// File: structcasadi_1_1RuntimeConst.xml
%feature("docstring") casadi::RuntimeConst< T >::RuntimeConst() " [INTERNAL]
";

%feature("docstring") casadi::RuntimeConst< T >::RuntimeConst(T v) "
[INTERNAL] ";

%feature("docstring") casadi::RuntimeConst "[INTERNAL]   Constant known at
runtime.

C++ includes: constant_mx.hpp ";


// File: structcasadi_1_1ScalarAtomic.xml
%feature("docstring") casadi::ScalarAtomic "[INTERNAL]  An atomic operation
for the SXElement virtual machine.

C++ includes: sx_function.hpp ";


// File: classcasadi_1_1ScalarSparseSparsity.xml


/*  Check if two sparsity patterns are identical  */

/*  Size and element counting  */ %feature("docstring")
casadi::Sparsity::unit(int n, int el) " [INTERNAL]  Create the sparsity
pattern for a unit vector of length n and a nonzero on position el.

";

%feature("docstring")  casadi::Sparsity::unidirectionalColoring(const
Sparsity &AT=Sparsity(), int cutoff=std::numeric_limits< int >::max()) const
" [INTERNAL]  Perform a unidirectional coloring: A greedy distance-2
coloring algorithm (Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN)

";

%feature("docstring")  casadi::Sparsity::transpose() const  " [INTERNAL]
Transpose the matrix.

";

%feature("docstring")  casadi::Sparsity::transpose(std::vector< int >
&mapping, bool invert_mapping=false) const  " [INTERNAL]   Transpose the
matrix and get the reordering of the non-zero entries.

Parameters:
-----------

mapping:  the non-zeros of the original matrix for each non-zero of the new
matrix

";

%feature("docstring")  casadi::Sparsity::eliminationTree(bool ata=false)
const  " [INTERNAL]  Calculate the elimination tree See Direct Methods for
Sparse Linear Systems by Davis (2006). If the parameter ata is false, the
algorithm is equivalent to Matlab's etree(A), except that the indices are
zero- based. If ata is true, the algorithm is equivalent to Matlab's
etree(A,'row').

";

%feature("docstring")  casadi::Sparsity::starColoring(int ordering=1, int
cutoff=std::numeric_limits< int >::max()) const  " [INTERNAL]  Perform a
star coloring of a symmetric matrix: A greedy distance-2 coloring algorithm
(Algorithm 4.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN) Ordering options:
None (0), largest first (1)

";

%feature("docstring")  casadi::Sparsity::isSymmetric() const  " [INTERNAL]
Is symmetric?

";

%feature("docstring")  casadi::Sparsity::patternProduct(const Sparsity
&x_trans, std::vector< std::vector< std::pair< int, int > > >
&output_mapping) const  " [INTERNAL]   Sparsity pattern for a matrix-matrix
product Returns the sparsity pattern resulting from pre-multiplying the
pattern with the transpose of x. Returns the new sparsity pattern as well as
a mapping with the same length as the number of non-zero elements The
mapping contains a vector of the index pairs that makes up the scalar
products for each non-zero.

";

%feature("docstring")  casadi::Sparsity::patternProduct(const Sparsity
&x_trans) const  " [INTERNAL]   Sparsity pattern for a matrix-matrix product
Returns the sparsity pattern resulting from pre-multiplying the pattern with
the transpose of x. Returns the new sparsity pattern as well as a mapping
with the same length as the number of non-zero elements The mapping contains
a vector of the index pairs that makes up the scalar products for each non-
zero.

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::Sparsity::makeDense(std::vector< int >
&mapping) const  " [INTERNAL]  Make a patten dense.

";

%feature("docstring")  casadi::Sparsity::getCCS(std::vector< int >
&output_colind, std::vector< int > &output_row) const  " [INTERNAL]  Get the
sparsity in compressed column storage (CCS) format.

";

%feature("docstring")  casadi::Sparsity::compressed(const std::vector< int >
&v) " [INTERNAL]  Create from a single vector containing the pattern in
compressed column storage format: The format: The first two entries are the
number of rows (nrow) and columns (ncol) The next ncol+1 entries are the
column offsets (colind). Note that the last element, colind[ncol], gives the
number of nonzeros The last colind[ncol] entries are the row indices

";

%feature("docstring")  casadi::Sparsity::compressed(const int *v) "
[INTERNAL]  Create from a single vector containing the pattern in compressed
column storage format: The format: The first two entries are the number of
rows (nrow) and columns (ncol) The next ncol+1 entries are the column
offsets (colind). Note that the last element, colind[ncol], gives the number
of nonzeros The last colind[ncol] entries are the row indices

";

%feature("docstring")  casadi::Sparsity::getNZInplace(std::vector< int >
&indices) const  " [INTERNAL]  Get the nonzero index for a set of elements
The index vector is used both for input and outputs and must be sorted by
increasing nonzero index, i.e. column-wise. Elements not found in the
sparsity pattern are set to -1.

";

%feature("docstring")  casadi::Sparsity::isVector() const  " [INTERNAL]  Is
vector (i.e. size2()==1)

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "
[INTERNAL]  Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring") casadi::ScalarSparseSparsity "[INTERNAL] ";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::Sparsity::removeDuplicates(std::vector< int >
&mapping) " [INTERNAL]  Remove duplicate entries.

The same indices will be removed from the mapping vector, which must have
the same length as the number of nonzeros

";

%feature("docstring")  casadi::Sparsity::isDiagonal() const  " [INTERNAL]
Is diagonal?

";

%feature("docstring")  casadi::Sparsity::hash() const  " [INTERNAL] ";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::Sparsity::hasNZ(int rr, int cc) const  "
[INTERNAL]  Returns true if the pattern has a non-zero at location rr,cc.

";

%feature("docstring")  casadi::Sparsity::patternUnion(const Sparsity &y,
std::vector< unsigned char > &output_mapping) const  " [INTERNAL]  Union of
two sparsity patterns.

";

%feature("docstring")  casadi::Sparsity::patternUnion(const Sparsity &y)
const  " [INTERNAL]  Union of two sparsity patterns.

";

%feature("docstring")  casadi::Sparsity::starColoring2(int ordering=1, int
cutoff=std::numeric_limits< int >::max()) const  " [INTERNAL]  Perform a
star coloring of a symmetric matrix: A new greedy distance-2 coloring
algorithm (Algorithm 4.1 in A. H. GEBREMEDHIN, A. TARAFDAR, F. MANNE, A.
POTHEN) Ordering options: None (0), largest first (1)

";

%feature("docstring")  casadi::Sparsity::getUpperNZ() const  " [INTERNAL]
Get nonzeros in upper triangular part.

";

%feature("docstring")  casadi::Sparsity::size() const  " [INTERNAL]  Get the
number of (structural) non-zeros.

See:   numel()

";

%feature("docstring")  casadi::Sparsity::printCompact(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a compact description of the
sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::enlargeColumns(int ncol, const
std::vector< int > &ii) " [INTERNAL]  Enlarge the matrix along the second
dimension (i.e. insert columns)

";

%feature("docstring")  casadi::Sparsity::getElements(bool col_major=true)
const  " [INTERNAL]  Get the location of all non-zero elements as they would
appear in a Dense matrix A : DenseMatrix 4 x 3 B : SparseMatrix 4 x 3 , 5
structural non-zeros.

k = A.getElements() A[k] will contain the elements of A that are non- zero
in B

";

%feature("docstring")  casadi::Sparsity::getElements(std::vector< int >
&loc, bool col_major=true) const  " [INTERNAL]  Get the location of all
nonzero elements (inplace version)

";

%feature("docstring")  casadi::Sparsity::enlarge(int nrow, int ncol, const
std::vector< int > &jj, const std::vector< int > &ii) " [INTERNAL]  Enlarge
matrix Make the matrix larger by inserting empty rows and columns, keeping
the existing non-zeros.

For the matrices A to B A(m,n) length(jj)=m , length(ii)=n B(nrow,ncol)

A=enlarge(m,n,ii,jj) makes sure that

B[jj,ii] == A

";

%feature("docstring")  casadi::Sparsity::spyMatlab(const std::string &mfile)
const  " [INTERNAL]  Generate a script for Matlab or Octave which visualizes
the sparsity using the spy command.

";

%feature("docstring")  casadi::Sparsity::isTriu() const  " [INTERNAL]  Is
upper triangular?

";

%feature("docstring")  casadi::Sparsity::scalar(bool dense_scalar=true) "
[INTERNAL]  Create a scalar sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::isTril() const  " [INTERNAL]  Is
lower triangular?

";

%feature("docstring")  casadi::Sparsity::resize(int nrow, int ncol) "
[INTERNAL]  Resize.

";

%feature("docstring")  casadi::Sparsity::bor(T *data, const T *val_data,
const Sparsity &val_sp) const  " [INTERNAL]  Bitwise or of the nonzero
entries of one sparsity pattern and the nonzero entries of another sparsity
pattern.

";

%feature("docstring")  casadi::Sparsity::bor(DataType *data, const DataType
*val_data, const Sparsity &val_sp) const  " [INTERNAL] ";

%feature("docstring")  casadi::Sparsity::spy(std::ostream &stream=std::cout)
const  " [INTERNAL]  Print a textual representation of sparsity.

";

%feature("docstring")  casadi::Sparsity::patternIntersection(const Sparsity
&y, std::vector< unsigned char > &output_mapping) const  " [INTERNAL]
Intersection of two sparsity patterns Returns the new sparsity pattern as
well as a mapping with the same length as the number of non-zero elements
The value is 1 if the non-zero comes from the first (i.e. this) object, 2 if
it is from the second and 3 (i.e. 1 | 2) if from both.

";

%feature("docstring")  casadi::Sparsity::patternIntersection(const Sparsity
&y) const  " [INTERNAL]  Intersection of two sparsity patterns Returns the
new sparsity pattern as well as a mapping with the same length as the number
of non-zero elements The value is 1 if the non-zero comes from the first
(i.e. this) object, 2 if it is from the second and 3 (i.e. 1 | 2) if from
both.

";

%feature("docstring")  casadi::Sparsity::isEmpty(bool both=false) const  "
[INTERNAL]  Check if the sparsity is empty.

A sparsity is considered empty if one of the dimensions is zero (or
optionally both dimensions)

";

%feature("docstring")  casadi::Sparsity::appendColumns(const Sparsity &sp) "
[INTERNAL]  Append another sparsity patten horizontally.

";

%feature("docstring")  casadi::Sparsity::sizeL() const  " [INTERNAL]  Number
of non-zeros in the lower triangular half, i.e. the number of elements (i,j)
with j<=i.

";

%feature("docstring")  casadi::Sparsity::erase(const std::vector< int > &jj,
const std::vector< int > &ii) " [INTERNAL]  Erase rows and/or columns of a
matrix.

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) " [INTERNAL]  Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")  casadi::Sparsity::colind() const  " [INTERNAL]  Get a
reference to the colindex of all column element (see class description)

";

%feature("docstring")  casadi::Sparsity::colind(int i) const  " [INTERNAL]
Get a reference to the colindex of col i (see class description)

";

%feature("docstring")  casadi::Sparsity::largestFirstOrdering() const  "
[INTERNAL]  Order the cols by decreasing degree.

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::Sparsity::getCRS(std::vector< int >
&output_rowind, std::vector< int > &output_col) const  " [INTERNAL]  Get the
sparsity in compressed row storage (CRS) format.

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::Sparsity::size2() const  " [INTERNAL]  Get
the number of columns.

";

%feature("docstring")  casadi::Sparsity::size1() const  " [INTERNAL]  Get
the number of rows.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "
[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::Sparsity::isScalar(bool
scalar_and_dense=false) const  " [INTERNAL]  Is scalar?

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "
[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::Sparsity::enlargeRows(int nrow, const
std::vector< int > &jj) " [INTERNAL]  Enlarge the matrix along the first
dimension (i.e. insert rows)

";

%feature("docstring")  casadi::Sparsity::colindRef() "[INTERNAL]  Get a
reference to the colindex of all column element (copy if not unique!)

";

%feature("docstring")  casadi::Sparsity::getLowerNZ() const  " [INTERNAL]
Get nonzeros in lower triangular part.

";

%feature("docstring")  casadi::Sparsity::append(const Sparsity &sp) "
[INTERNAL]  Append another sparsity patten vertically (NOTE: only efficient
if vector)

";

%feature("docstring")  casadi::Sparsity::isEqual(const Sparsity &y) const  "
[INTERNAL] ";

%feature("docstring")  casadi::Sparsity::isEqual(int nrow, int ncol, const
std::vector< int > &colind, const std::vector< int > &row) const  "
[INTERNAL] ";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::Sparsity::isSquare() const  " [INTERNAL]  Is
square?

";

%feature("docstring") casadi::ScalarSparseSparsity::ScalarSparseSparsity() "[INTERNAL] ";

%feature("docstring")  casadi::Sparsity::reshape(int nrow, int ncol) const
" [INTERNAL]   Reshape a sparsity, order of nonzeros remains the same.

";

%feature("docstring")  casadi::Sparsity::dulmageMendelsohn(std::vector< int
> &output_rowperm, std::vector< int > &output_colperm, std::vector< int >
&output_rowblock, std::vector< int > &output_colblock, std::vector< int >
&output_coarse_rowblock, std::vector< int > &output_coarse_colblock, int
seed=0) const  " [INTERNAL]  Compute the Dulmage-Mendelsohn decomposition
See Direct Methods for Sparse Linear Systems by Davis (2006).

Dulmage-Mendelsohn will try to bring your matrix into lower block-
triangular (LBT) form. It will not care about the distance of off- diagonal
elements to the diagonal: there is no guarantee you will get a block-
diagonal matrix if you supply a randomly permuted block- diagonal matrix.

If your matrix is symmetrical, this method is of limited use; permutation
can make it non-symmetric.

See:   stronglyConnectedComponents

";

%feature("docstring")  casadi::Sparsity::isTranspose(const Sparsity &y)
const  " [INTERNAL]  Check if the sparsity is the transpose of another.

";

%feature("docstring")  casadi::Sparsity::dense(int nrow, int ncol=1) "
[INTERNAL]  Create a dense rectangular sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::dense(const std::pair< int, int >
&rc) " [INTERNAL]  Create a dense rectangular sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::getDiag(std::vector< int >
&output_mapping) const  " [INTERNAL]  Get the diagonal of the matrix/create
a diagonal matrix (mapping will contain the nonzero mapping) When the input
is square, the diagonal elements are returned. If the input is vector-like,
a diagonal matrix is constructed with it.

";

%feature("docstring")  casadi::Sparsity::patternCombine(const Sparsity &y,
bool f0x_is_zero, bool function0_is_zero, std::vector< unsigned char >
&output_mapping) const  " [INTERNAL]  Combine two sparsity patterns Returns
the new sparsity pattern as well as a mapping with the same length as the
number of non-zero elements The mapping matrix contains the arguments for
each nonzero, the first bit indicates if the first argument is nonzero, the
second bit indicates if the second argument is nonzero (note that none of,
one of or both of the arguments can be nonzero)

";

%feature("docstring")  casadi::Sparsity::patternCombine(const Sparsity &y,
bool f0x_is_zero, bool function0_is_zero) const  " [INTERNAL]  Combine two
sparsity patterns Returns the new sparsity pattern as well as a mapping with
the same length as the number of non-zero elements The mapping matrix
contains the arguments for each nonzero, the first bit indicates if the
first argument is nonzero, the second bit indicates if the second argument
is nonzero (note that none of, one of or both of the arguments can be
nonzero)

";

%feature("docstring")  casadi::Sparsity::sub(const std::vector< int > &jj,
const std::vector< int > &ii, std::vector< int > &output_mapping) const  "
[INTERNAL]  Get a submatrix.

Returns the sparsity of the submatrix, with a mapping such that submatrix[k]
= originalmatrix[mapping[k]]

";

%feature("docstring")  casadi::Sparsity::pmult(const std::vector< int > &p,
bool permute_rows=true, bool permute_cols=true, bool
invert_permutation=false) const  " [INTERNAL]  Permute rows and/or columns
Multiply the sparsity with a permutation matrix from the left and/or from
the right P * A * trans(P), A * trans(P) or A * trans(P) with P defined by
an index vector containing the row for each col. As an alternative, P can be
transposed (inverted).

";

%feature("docstring")  casadi::Sparsity::sizeU() const  " [INTERNAL]  Number
of non-zeros in the upper triangular half, i.e. the number of elements (i,j)
with j>=i.

";

%feature("docstring")  casadi::Sparsity::add(T *data, const T *val_data,
const Sparsity &val_sp) const  " [INTERNAL]  Add the nonzero entries of one
sparsity pattern to the nonzero entries of another sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::add(DataType *data, const DataType
*val_data, const Sparsity &val_sp) const  " [INTERNAL] ";

%feature("docstring")  casadi::Sparsity::rowsSequential(bool strictly=true)
const  " [INTERNAL]  Do the rows appear sequentially on each column.

Parameters:
-----------

strictly:  if true, then do not allow multiple entries

";

%feature("docstring")  casadi::Sparsity::sparse(int nrow, int ncol=1) "
[INTERNAL]  Create a sparse (empty) rectangular sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::sparse(const std::pair< int, int >
&rc) " [INTERNAL]  Create a sparse (empty) rectangular sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::numel() const  " [INTERNAL]  The
total number of elements, including structural zeros, i.e. size2()*size1()

See:   size()

";

%feature("docstring")  casadi::Sparsity::isDense() const  " [INTERNAL]  Is
dense?

";

%feature("docstring")  casadi::Sparsity::isSingular() const  " [INTERNAL]
Check whether the sparsity-pattern indicates structural singularity.

";

%feature("docstring")  casadi::Sparsity::isReshape(const Sparsity &y) const
" [INTERNAL]  Check if the sparsity is a reshape of another.

";

%feature("docstring")  casadi::Sparsity::rowRef() "[INTERNAL]  Get a
reference to the rows of all non-zero element (copy if not unique!)

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::SharedObject::isInit() const  " [INTERNAL]
Is initialized?

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::Sparsity::reCache() "[INTERNAL]  Check if
there is an identical copy of the sparsity pattern in the cache, and if so,
make a shallow copy of that one.

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::Sparsity::getCol() const  " [INTERNAL]  Get
the column for each non-zero entry Together with the row-vector, this vector
gives the sparsity of the matrix in sparse triplet format, i.e. the column
and row for each non-zero elements.

";

%feature("docstring")  casadi::Sparsity::sanityCheck(bool complete=false)
const  " [INTERNAL]  Check if the dimensions and colind, row vectors are
compatible.

Parameters:
-----------

complete:  set to true to also check elementwise throws an error as possible
result

";

%feature("docstring")
casadi::Sparsity::stronglyConnectedComponents(std::vector< int >
&output_index, std::vector< int > &output_offset) const  " [INTERNAL]  Find
the strongly connected components of the bigraph defined by the sparsity
pattern of a square matrix.

See Direct Methods for Sparse Linear Systems by Davis (2006). Returns:
Number of components

Offset for each components (length: 1 + number of components)

Indices for each components, component i has indices index[offset[i]], ...,
index[offset[i+1]]

In the case that the matrix is symmetric, the result has a particular
interpretation: Given a symmetric matrix A and n =
A.stronglyConnectedComponents(p,r)

=> A[p,p] will appear block-diagonal with n blocks and with the indices of
the block boundaries to be found in r.

";

%feature("docstring")  casadi::Sparsity::patternInverse() const  "
[INTERNAL]  Take the inverse of a sparsity pattern; flip zeros and non-
zeros.

";

%feature("docstring")  casadi::Sparsity::shape() const  " [INTERNAL]  Get
the shape.

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::Sparsity::dimString() const  " [INTERNAL]
Get the dimension as a string.

";

%feature("docstring")  casadi::Sparsity::depthFirstSearch(int j, int top,
std::vector< int > &xi, std::vector< int > &pstack, const std::vector< int >
&pinv, std::vector< bool > &marked) const  " [INTERNAL]  Depth-first search
on the adjacency graph of the sparsity See Direct Methods for Sparse Linear
Systems by Davis (2006).

";

%feature("docstring")  casadi::SharedObject::isNull() const  " [INTERNAL]
Is a null pointer?

";

%feature("docstring")  casadi::Sparsity::reserve(int nnz, int ncol) "
[INTERNAL]  Reserve space.

";

%feature("docstring")  casadi::Sparsity::row() const  " [INTERNAL]  Get a
reference to row-vector, containing rows for all non-zero elements (see
class description)

";

%feature("docstring")  casadi::Sparsity::row(int el) const  " [INTERNAL]
Get the row of a non-zero element.

";

%feature("docstring")  casadi::Sparsity::getNZ(int rr, int cc) " [INTERNAL]
Get the index of a non-zero element Add the element if it does not exist and
copy object if it's not unique.

";

%feature("docstring")  casadi::Sparsity::getNZ(int rr, int cc) const  "
[INTERNAL]  Get the index of an existing non-zero element return -1 if the
element does not exist.

";

%feature("docstring")  casadi::Sparsity::getNZ(const std::vector< int > &rr,
const std::vector< int > &cc) const  " [INTERNAL]  Get a set of non-zero
element return -1 if the element does not exist.

";

%feature("docstring")  casadi::Sparsity::sizeD() const  " [INTERNAL]  Number
of non-zeros on the diagonal, i.e. the number of elements (i,j) with j==i.

";

%feature("docstring")  casadi::Sparsity::diag(int nrow) " [INTERNAL]  Create
diagonal sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::diag(int nrow, int ncol) "
[INTERNAL]  Create diagonal sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::diag(const std::pair< int, int >
&rc) " [INTERNAL]  Create diagonal sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::getTriu(bool includeDiagonal=true)
const  " [INTERNAL]  Get upper triangular part.

";

%feature("docstring")  casadi::Sparsity::getTriplet(std::vector< int >
&output_row, std::vector< int > &output_col) const  " [INTERNAL]  Get the
sparsity in sparse triplet format.

";

%feature("docstring")  casadi::Sparsity::T() const  " [INTERNAL]   Transpose
the matrix (shorthand)

";

%feature("docstring")  casadi::Sparsity::compress() const  " [INTERNAL]
Compress a sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::checkNode() const  " [INTERNAL]
Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::Sparsity::getTril(bool includeDiagonal=true)
const  " [INTERNAL]  Get lower triangular part.

";

%feature("docstring")  casadi::Sparsity::set(T *data, const T *val_data,
const Sparsity &val_sp) const  " [INTERNAL]  Assign the nonzero entries of
one sparsity pattern to the nonzero entries of another sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::set(DataType *data, const DataType
*val_data, const Sparsity &val_sp) const  " [INTERNAL] ";


// File: classcasadi_1_1ScalarSparsity.xml


/*  Check if two sparsity patterns are identical  */

/*  Size and element counting  */ %feature("docstring")
casadi::Sparsity::transpose() const  " [INTERNAL]   Transpose the matrix.

";

%feature("docstring")  casadi::Sparsity::transpose(std::vector< int >
&mapping, bool invert_mapping=false) const  " [INTERNAL]   Transpose the
matrix and get the reordering of the non-zero entries.

Parameters:
-----------

mapping:  the non-zeros of the original matrix for each non-zero of the new
matrix

";

%feature("docstring")  casadi::Sparsity::isScalar(bool
scalar_and_dense=false) const  " [INTERNAL]  Is scalar?

";

%feature("docstring")  casadi::Sparsity::isDiagonal() const  " [INTERNAL]
Is diagonal?

";

%feature("docstring")  casadi::Sparsity::dimString() const  " [INTERNAL]
Get the dimension as a string.

";

%feature("docstring")  casadi::Sparsity::largestFirstOrdering() const  "
[INTERNAL]  Order the cols by decreasing degree.

";

%feature("docstring")  casadi::Sparsity::depthFirstSearch(int j, int top,
std::vector< int > &xi, std::vector< int > &pstack, const std::vector< int >
&pinv, std::vector< bool > &marked) const  " [INTERNAL]  Depth-first search
on the adjacency graph of the sparsity See Direct Methods for Sparse Linear
Systems by Davis (2006).

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::Sparsity::reCache() "[INTERNAL]  Check if
there is an identical copy of the sparsity pattern in the cache, and if so,
make a shallow copy of that one.

";

%feature("docstring")  casadi::Sparsity::isSymmetric() const  " [INTERNAL]
Is symmetric?

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::Sparsity::getNZ(int rr, int cc) " [INTERNAL]
Get the index of a non-zero element Add the element if it does not exist and
copy object if it's not unique.

";

%feature("docstring")  casadi::Sparsity::getNZ(int rr, int cc) const  "
[INTERNAL]  Get the index of an existing non-zero element return -1 if the
element does not exist.

";

%feature("docstring")  casadi::Sparsity::getNZ(const std::vector< int > &rr,
const std::vector< int > &cc) const  " [INTERNAL]  Get a set of non-zero
element return -1 if the element does not exist.

";

%feature("docstring")  casadi::Sparsity::reserve(int nnz, int ncol) "
[INTERNAL]  Reserve space.

";

%feature("docstring")  casadi::Sparsity::colind() const  " [INTERNAL]  Get a
reference to the colindex of all column element (see class description)

";

%feature("docstring")  casadi::Sparsity::colind(int i) const  " [INTERNAL]
Get a reference to the colindex of col i (see class description)

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::Sparsity::patternCombine(const Sparsity &y,
bool f0x_is_zero, bool function0_is_zero, std::vector< unsigned char >
&output_mapping) const  " [INTERNAL]  Combine two sparsity patterns Returns
the new sparsity pattern as well as a mapping with the same length as the
number of non-zero elements The mapping matrix contains the arguments for
each nonzero, the first bit indicates if the first argument is nonzero, the
second bit indicates if the second argument is nonzero (note that none of,
one of or both of the arguments can be nonzero)

";

%feature("docstring")  casadi::Sparsity::patternCombine(const Sparsity &y,
bool f0x_is_zero, bool function0_is_zero) const  " [INTERNAL]  Combine two
sparsity patterns Returns the new sparsity pattern as well as a mapping with
the same length as the number of non-zero elements The mapping matrix
contains the arguments for each nonzero, the first bit indicates if the
first argument is nonzero, the second bit indicates if the second argument
is nonzero (note that none of, one of or both of the arguments can be
nonzero)

";

%feature("docstring")  casadi::Sparsity::resize(int nrow, int ncol) "
[INTERNAL]  Resize.

";

%feature("docstring")  casadi::Sparsity::isSquare() const  " [INTERNAL]  Is
square?

";

%feature("docstring")  casadi::SharedObject::isInit() const  " [INTERNAL]
Is initialized?

";

%feature("docstring")  casadi::Sparsity::patternProduct(const Sparsity
&x_trans, std::vector< std::vector< std::pair< int, int > > >
&output_mapping) const  " [INTERNAL]   Sparsity pattern for a matrix-matrix
product Returns the sparsity pattern resulting from pre-multiplying the
pattern with the transpose of x. Returns the new sparsity pattern as well as
a mapping with the same length as the number of non-zero elements The
mapping contains a vector of the index pairs that makes up the scalar
products for each non-zero.

";

%feature("docstring")  casadi::Sparsity::patternProduct(const Sparsity
&x_trans) const  " [INTERNAL]   Sparsity pattern for a matrix-matrix product
Returns the sparsity pattern resulting from pre-multiplying the pattern with
the transpose of x. Returns the new sparsity pattern as well as a mapping
with the same length as the number of non-zero elements The mapping contains
a vector of the index pairs that makes up the scalar products for each non-
zero.

";

%feature("docstring")  casadi::Sparsity::spy(std::ostream &stream=std::cout)
const  " [INTERNAL]  Print a textual representation of sparsity.

";

%feature("docstring")  casadi::Sparsity::add(T *data, const T *val_data,
const Sparsity &val_sp) const  " [INTERNAL]  Add the nonzero entries of one
sparsity pattern to the nonzero entries of another sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::add(DataType *data, const DataType
*val_data, const Sparsity &val_sp) const  " [INTERNAL] ";

%feature("docstring")  casadi::Sparsity::patternInverse() const  "
[INTERNAL]  Take the inverse of a sparsity pattern; flip zeros and non-
zeros.

";

%feature("docstring")  casadi::Sparsity::getCol() const  " [INTERNAL]  Get
the column for each non-zero entry Together with the row-vector, this vector
gives the sparsity of the matrix in sparse triplet format, i.e. the column
and row for each non-zero elements.

";

%feature("docstring")  casadi::Sparsity::getTriplet(std::vector< int >
&output_row, std::vector< int > &output_col) const  " [INTERNAL]  Get the
sparsity in sparse triplet format.

";

%feature("docstring")  casadi::Sparsity::spyMatlab(const std::string &mfile)
const  " [INTERNAL]  Generate a script for Matlab or Octave which visualizes
the sparsity using the spy command.

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::Sparsity::getUpperNZ() const  " [INTERNAL]
Get nonzeros in upper triangular part.

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "
[INTERNAL]  Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::Sparsity::set(T *data, const T *val_data,
const Sparsity &val_sp) const  " [INTERNAL]  Assign the nonzero entries of
one sparsity pattern to the nonzero entries of another sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::set(DataType *data, const DataType
*val_data, const Sparsity &val_sp) const  " [INTERNAL] ";

%feature("docstring")  casadi::Sparsity::getLowerNZ() const  " [INTERNAL]
Get nonzeros in lower triangular part.

";

%feature("docstring")  casadi::Sparsity::dulmageMendelsohn(std::vector< int
> &output_rowperm, std::vector< int > &output_colperm, std::vector< int >
&output_rowblock, std::vector< int > &output_colblock, std::vector< int >
&output_coarse_rowblock, std::vector< int > &output_coarse_colblock, int
seed=0) const  " [INTERNAL]  Compute the Dulmage-Mendelsohn decomposition
See Direct Methods for Sparse Linear Systems by Davis (2006).

Dulmage-Mendelsohn will try to bring your matrix into lower block-
triangular (LBT) form. It will not care about the distance of off- diagonal
elements to the diagonal: there is no guarantee you will get a block-
diagonal matrix if you supply a randomly permuted block- diagonal matrix.

If your matrix is symmetrical, this method is of limited use; permutation
can make it non-symmetric.

See:   stronglyConnectedComponents

";

%feature("docstring")  casadi::Sparsity::erase(const std::vector< int > &jj,
const std::vector< int > &ii) " [INTERNAL]  Erase rows and/or columns of a
matrix.

";

%feature("docstring")  casadi::Sparsity::appendColumns(const Sparsity &sp) "
[INTERNAL]  Append another sparsity patten horizontally.

";

%feature("docstring")  casadi::Sparsity::sub(const std::vector< int > &jj,
const std::vector< int > &ii, std::vector< int > &output_mapping) const  "
[INTERNAL]  Get a submatrix.

Returns the sparsity of the submatrix, with a mapping such that submatrix[k]
= originalmatrix[mapping[k]]

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "
[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) " [INTERNAL]  Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::Sparsity::makeDense(std::vector< int >
&mapping) const  " [INTERNAL]  Make a patten dense.

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::Sparsity::getElements(bool col_major=true)
const  " [INTERNAL]  Get the location of all non-zero elements as they would
appear in a Dense matrix A : DenseMatrix 4 x 3 B : SparseMatrix 4 x 3 , 5
structural non-zeros.

k = A.getElements() A[k] will contain the elements of A that are non- zero
in B

";

%feature("docstring")  casadi::Sparsity::getElements(std::vector< int >
&loc, bool col_major=true) const  " [INTERNAL]  Get the location of all
nonzero elements (inplace version)

";

%feature("docstring")  casadi::Sparsity::getDiag(std::vector< int >
&output_mapping) const  " [INTERNAL]  Get the diagonal of the matrix/create
a diagonal matrix (mapping will contain the nonzero mapping) When the input
is square, the diagonal elements are returned. If the input is vector-like,
a diagonal matrix is constructed with it.

";

%feature("docstring")  casadi::Sparsity::hash() const  " [INTERNAL] ";

%feature("docstring")  casadi::Sparsity::bor(T *data, const T *val_data,
const Sparsity &val_sp) const  " [INTERNAL]  Bitwise or of the nonzero
entries of one sparsity pattern and the nonzero entries of another sparsity
pattern.

";

%feature("docstring")  casadi::Sparsity::bor(DataType *data, const DataType
*val_data, const Sparsity &val_sp) const  " [INTERNAL] ";

%feature("docstring")  casadi::Sparsity::isVector() const  " [INTERNAL]  Is
vector (i.e. size2()==1)

";

%feature("docstring") casadi::ScalarSparsity::ScalarSparsity() "[INTERNAL]
";

%feature("docstring")  casadi::Sparsity::printCompact(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a compact description of the
sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::compressed(const std::vector< int >
&v) " [INTERNAL]  Create from a single vector containing the pattern in
compressed column storage format: The format: The first two entries are the
number of rows (nrow) and columns (ncol) The next ncol+1 entries are the
column offsets (colind). Note that the last element, colind[ncol], gives the
number of nonzeros The last colind[ncol] entries are the row indices

";

%feature("docstring")  casadi::Sparsity::compressed(const int *v) "
[INTERNAL]  Create from a single vector containing the pattern in compressed
column storage format: The format: The first two entries are the number of
rows (nrow) and columns (ncol) The next ncol+1 entries are the column
offsets (colind). Note that the last element, colind[ncol], gives the number
of nonzeros The last colind[ncol] entries are the row indices

";

%feature("docstring")  casadi::Sparsity::enlargeColumns(int ncol, const
std::vector< int > &ii) " [INTERNAL]  Enlarge the matrix along the second
dimension (i.e. insert columns)

";

%feature("docstring")  casadi::Sparsity::dense(int nrow, int ncol=1) "
[INTERNAL]  Create a dense rectangular sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::dense(const std::pair< int, int >
&rc) " [INTERNAL]  Create a dense rectangular sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::checkNode() const  " [INTERNAL]
Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::Sparsity::diag(int nrow) " [INTERNAL]  Create
diagonal sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::diag(int nrow, int ncol) "
[INTERNAL]  Create diagonal sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::diag(const std::pair< int, int >
&rc) " [INTERNAL]  Create diagonal sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::colindRef() "[INTERNAL]  Get a
reference to the colindex of all column element (copy if not unique!)

";

%feature("docstring")  casadi::Sparsity::unit(int n, int el) " [INTERNAL]
Create the sparsity pattern for a unit vector of length n and a nonzero on
position el.

";

%feature("docstring")  casadi::Sparsity::eliminationTree(bool ata=false)
const  " [INTERNAL]  Calculate the elimination tree See Direct Methods for
Sparse Linear Systems by Davis (2006). If the parameter ata is false, the
algorithm is equivalent to Matlab's etree(A), except that the indices are
zero- based. If ata is true, the algorithm is equivalent to Matlab's
etree(A,'row').

";

%feature("docstring")  casadi::Sparsity::numel() const  " [INTERNAL]  The
total number of elements, including structural zeros, i.e. size2()*size1()

See:   size()

";

%feature("docstring")  casadi::Sparsity::getCCS(std::vector< int >
&output_colind, std::vector< int > &output_row) const  " [INTERNAL]  Get the
sparsity in compressed column storage (CCS) format.

";

%feature("docstring")  casadi::Sparsity::compress() const  " [INTERNAL]
Compress a sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::isEqual(const Sparsity &y) const  "
[INTERNAL] ";

%feature("docstring")  casadi::Sparsity::isEqual(int nrow, int ncol, const
std::vector< int > &colind, const std::vector< int > &row) const  "
[INTERNAL] ";

%feature("docstring")  casadi::Sparsity::pmult(const std::vector< int > &p,
bool permute_rows=true, bool permute_cols=true, bool
invert_permutation=false) const  " [INTERNAL]  Permute rows and/or columns
Multiply the sparsity with a permutation matrix from the left and/or from
the right P * A * trans(P), A * trans(P) or A * trans(P) with P defined by
an index vector containing the row for each col. As an alternative, P can be
transposed (inverted).

";

%feature("docstring")  casadi::SharedObject::isNull() const  " [INTERNAL]
Is a null pointer?

";

%feature("docstring")  casadi::Sparsity::starColoring(int ordering=1, int
cutoff=std::numeric_limits< int >::max()) const  " [INTERNAL]  Perform a
star coloring of a symmetric matrix: A greedy distance-2 coloring algorithm
(Algorithm 4.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN) Ordering options:
None (0), largest first (1)

";

%feature("docstring")  casadi::Sparsity::getCRS(std::vector< int >
&output_rowind, std::vector< int > &output_col) const  " [INTERNAL]  Get the
sparsity in compressed row storage (CRS) format.

";

%feature("docstring")  casadi::Sparsity::patternIntersection(const Sparsity
&y, std::vector< unsigned char > &output_mapping) const  " [INTERNAL]
Intersection of two sparsity patterns Returns the new sparsity pattern as
well as a mapping with the same length as the number of non-zero elements
The value is 1 if the non-zero comes from the first (i.e. this) object, 2 if
it is from the second and 3 (i.e. 1 | 2) if from both.

";

%feature("docstring")  casadi::Sparsity::patternIntersection(const Sparsity
&y) const  " [INTERNAL]  Intersection of two sparsity patterns Returns the
new sparsity pattern as well as a mapping with the same length as the number
of non-zero elements The value is 1 if the non-zero comes from the first
(i.e. this) object, 2 if it is from the second and 3 (i.e. 1 | 2) if from
both.

";

%feature("docstring")  casadi::Sparsity::isReshape(const Sparsity &y) const
" [INTERNAL]  Check if the sparsity is a reshape of another.

";

%feature("docstring")  casadi::Sparsity::T() const  " [INTERNAL]   Transpose
the matrix (shorthand)

";

%feature("docstring")  casadi::Sparsity::getTriu(bool includeDiagonal=true)
const  " [INTERNAL]  Get upper triangular part.

";

%feature("docstring")  casadi::Sparsity::getNZInplace(std::vector< int >
&indices) const  " [INTERNAL]  Get the nonzero index for a set of elements
The index vector is used both for input and outputs and must be sorted by
increasing nonzero index, i.e. column-wise. Elements not found in the
sparsity pattern are set to -1.

";

%feature("docstring")  casadi::Sparsity::isDense() const  " [INTERNAL]  Is
dense?

";

%feature("docstring")  casadi::Sparsity::shape() const  " [INTERNAL]  Get
the shape.

";

%feature("docstring")  casadi::Sparsity::rowsSequential(bool strictly=true)
const  " [INTERNAL]  Do the rows appear sequentially on each column.

Parameters:
-----------

strictly:  if true, then do not allow multiple entries

";

%feature("docstring")  casadi::Sparsity::isTranspose(const Sparsity &y)
const  " [INTERNAL]  Check if the sparsity is the transpose of another.

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "
[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::Sparsity::getTril(bool includeDiagonal=true)
const  " [INTERNAL]  Get lower triangular part.

";

%feature("docstring")
casadi::Sparsity::stronglyConnectedComponents(std::vector< int >
&output_index, std::vector< int > &output_offset) const  " [INTERNAL]  Find
the strongly connected components of the bigraph defined by the sparsity
pattern of a square matrix.

See Direct Methods for Sparse Linear Systems by Davis (2006). Returns:
Number of components

Offset for each components (length: 1 + number of components)

Indices for each components, component i has indices index[offset[i]], ...,
index[offset[i+1]]

In the case that the matrix is symmetric, the result has a particular
interpretation: Given a symmetric matrix A and n =
A.stronglyConnectedComponents(p,r)

=> A[p,p] will appear block-diagonal with n blocks and with the indices of
the block boundaries to be found in r.

";

%feature("docstring")  casadi::Sparsity::enlargeRows(int nrow, const
std::vector< int > &jj) " [INTERNAL]  Enlarge the matrix along the first
dimension (i.e. insert rows)

";

%feature("docstring")  casadi::Sparsity::isEmpty(bool both=false) const  "
[INTERNAL]  Check if the sparsity is empty.

A sparsity is considered empty if one of the dimensions is zero (or
optionally both dimensions)

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::Sparsity::reshape(int nrow, int ncol) const
" [INTERNAL]   Reshape a sparsity, order of nonzeros remains the same.

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")  casadi::Sparsity::sizeD() const  " [INTERNAL]  Number
of non-zeros on the diagonal, i.e. the number of elements (i,j) with j==i.

";

%feature("docstring")  casadi::Sparsity::sizeL() const  " [INTERNAL]  Number
of non-zeros in the lower triangular half, i.e. the number of elements (i,j)
with j<=i.

";

%feature("docstring")  casadi::Sparsity::sizeU() const  " [INTERNAL]  Number
of non-zeros in the upper triangular half, i.e. the number of elements (i,j)
with j>=i.

";

%feature("docstring")  casadi::Sparsity::unidirectionalColoring(const
Sparsity &AT=Sparsity(), int cutoff=std::numeric_limits< int >::max()) const
" [INTERNAL]  Perform a unidirectional coloring: A greedy distance-2
coloring algorithm (Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN)

";

%feature("docstring")  casadi::Sparsity::rowRef() "[INTERNAL]  Get a
reference to the rows of all non-zero element (copy if not unique!)

";

%feature("docstring")  casadi::Sparsity::sparse(int nrow, int ncol=1) "
[INTERNAL]  Create a sparse (empty) rectangular sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::sparse(const std::pair< int, int >
&rc) " [INTERNAL]  Create a sparse (empty) rectangular sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::hasNZ(int rr, int cc) const  "
[INTERNAL]  Returns true if the pattern has a non-zero at location rr,cc.

";

%feature("docstring")  casadi::Sparsity::patternUnion(const Sparsity &y,
std::vector< unsigned char > &output_mapping) const  " [INTERNAL]  Union of
two sparsity patterns.

";

%feature("docstring")  casadi::Sparsity::patternUnion(const Sparsity &y)
const  " [INTERNAL]  Union of two sparsity patterns.

";

%feature("docstring")  casadi::Sparsity::scalar(bool dense_scalar=true) "
[INTERNAL]  Create a scalar sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::row() const  " [INTERNAL]  Get a
reference to row-vector, containing rows for all non-zero elements (see
class description)

";

%feature("docstring")  casadi::Sparsity::row(int el) const  " [INTERNAL]
Get the row of a non-zero element.

";

%feature("docstring")  casadi::Sparsity::isSingular() const  " [INTERNAL]
Check whether the sparsity-pattern indicates structural singularity.

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::Sparsity::enlarge(int nrow, int ncol, const
std::vector< int > &jj, const std::vector< int > &ii) " [INTERNAL]  Enlarge
matrix Make the matrix larger by inserting empty rows and columns, keeping
the existing non-zeros.

For the matrices A to B A(m,n) length(jj)=m , length(ii)=n B(nrow,ncol)

A=enlarge(m,n,ii,jj) makes sure that

B[jj,ii] == A

";

%feature("docstring")  casadi::Sparsity::size() const  " [INTERNAL]  Get the
number of (structural) non-zeros.

See:   numel()

";

%feature("docstring")  casadi::Sparsity::removeDuplicates(std::vector< int >
&mapping) " [INTERNAL]  Remove duplicate entries.

The same indices will be removed from the mapping vector, which must have
the same length as the number of nonzeros

";

%feature("docstring")  casadi::Sparsity::isTril() const  " [INTERNAL]  Is
lower triangular?

";

%feature("docstring") casadi::ScalarSparsity "[INTERNAL] ";

%feature("docstring")  casadi::Sparsity::starColoring2(int ordering=1, int
cutoff=std::numeric_limits< int >::max()) const  " [INTERNAL]  Perform a
star coloring of a symmetric matrix: A new greedy distance-2 coloring
algorithm (Algorithm 4.1 in A. H. GEBREMEDHIN, A. TARAFDAR, F. MANNE, A.
POTHEN) Ordering options: None (0), largest first (1)

";

%feature("docstring")  casadi::Sparsity::isTriu() const  " [INTERNAL]  Is
upper triangular?

";

%feature("docstring")  casadi::Sparsity::size1() const  " [INTERNAL]  Get
the number of rows.

";

%feature("docstring")  casadi::Sparsity::size2() const  " [INTERNAL]  Get
the number of columns.

";

%feature("docstring")  casadi::Sparsity::sanityCheck(bool complete=false)
const  " [INTERNAL]  Check if the dimensions and colind, row vectors are
compatible.

Parameters:
-----------

complete:  set to true to also check elementwise throws an error as possible
result

";

%feature("docstring")  casadi::Sparsity::append(const Sparsity &sp) "
[INTERNAL]  Append another sparsity patten vertically (NOTE: only efficient
if vector)

";


// File: classcasadi_1_1SCPgen.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::SCPgen::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::NLPSolver::reportConstraints(std::ostream
&stream=std::cout) "

Prints out a human readable report about possible constraint violations,
after solving.

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::NLPSolver::gradF() "

Access the objective gradient function>Input scheme: casadi::GradFInput
(GRADF_NUM_IN = 3) [gradFIn] +-----------+-------+---------------------+ |
Full name | Short |     Description     |
+===========+=======+=====================+ | GRADF_X   | x     | Decision
variable . | +-----------+-------+---------------------+ | GRADF_P   | p
| Fixed parameter .   | +-----------+-------+---------------------+

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::NLPSolver::nlp() "

Access the NLP.

>Input scheme: casadi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::NLPSolver::getReportConstraints() "";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::NLPSolver::jacG() "

Access the Jacobian of the constraint function.

>Input scheme: casadi::HessLagInput (HESSLAG_NUM_IN = 5) [hessLagIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| HESSLAG_X              | x                      | Decision variable .    |
+------------------------+------------------------+------------------------+
| HESSLAG_P              | p                      | Fixed parameter .      |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_F          | lam_f                  | Multiplier for f. Just |
|                        |                        | a scalar factor for    |
|                        |                        | the objective that the |
|                        |                        | NLP solver might use   |
|                        |                        | to scale the           |
|                        |                        | objective.             |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_G          | lam_g                  | Multiplier for g .     |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::HessLagOutput (HESSLAG_NUM_OUT = 6) [hessLagOut]
+----------------+--------+------------------------------------------------+
|   Full name    | Short  |                  Description                   |
+================+========+================================================+
| HESSLAG_HESS   | hess   | Hessian of the Lagrangian .                    |
+----------------+--------+------------------------------------------------+
| HESSLAG_F      | f      | Objective function .                           |
+----------------+--------+------------------------------------------------+
| HESSLAG_G      | g      | Constraint function .                          |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_X | grad_x | Gradient of the Lagrangian with respect to x . |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_P | grad_p | Gradient of the Lagrangian with respect to p . |
+----------------+--------+------------------------------------------------+

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::SCPgen "

A structure-exploiting sequential quadratic programming (to be come
sequential convex programming) method for nonlinear programming.

Joel Andersson, Attila Kozma and Joris Gillis

>Input scheme: casadi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| con_numeric_ | OT_DICTIONAR | GenericType( | constraints  | casadi::NLPS |
| md           | Y            | )            | to be passed | olverInterna |
|              |              |              | to IPOPT     | l            |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_f     | OT_BOOLEAN   | GenericType( | Deprecated,  | casadi::NLPS |
|              |              | )            | use \"expand\" | olverInterna |
|              |              |              | instead.     | l            |
+--------------+--------------+--------------+--------------+--------------+
| expand_g     | OT_BOOLEAN   | GenericType( | Deprecated,  | casadi::NLPS |
|              |              | )            | use \"expand\" | olverInterna |
|              |              |              | instead.     | l            |
+--------------+--------------+--------------+--------------+--------------+
| generate_gra | OT_BOOLEAN   | GenericType( | the gradient | casadi::NLPS |
| dient        |              | )            | of the       | olverInterna |
|              |              |              | objective.   | l            |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_CALLBACK  | GenericType( | Check docume | casadi::NLPS |
| llback       |              | )            | ntation of   | olverInterna |
|              |              |              | Callback .   | l            |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| parametric   | OT_BOOLEAN   | GenericType( | input        | casadi::NLPS |
|              |              | )            | argument     | olverInterna |
|              |              |              | appended at  | l            |
|              |              |              | the end,     |              |
|              |              |              | denoting     |              |
|              |              |              | fixed        |              |
|              |              |              | parameters.  |              |
+--------------+--------------+--------------+--------------+--------------+
| print_proble | OT_BOOLEAN   | false        | Print out    | casadi::SCPg |
| m            |              |              | problem      | enInternal   |
|              |              |              | statement    |              |
|              |              |              | for          |              |
|              |              |              | debugging.   |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available stats
+------------+------------------------+
|     Id     |        Used in         |
+============+========================+
| iter_count | casadi::SCPgenInternal |
+------------+------------------------+

Diagrams

C++ includes: scpgen.hpp ";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring") casadi::SCPgen::SCPgen() "

Default constructor.

";

%feature("docstring") casadi::SCPgen::SCPgen(const Function &nlp) "

Create an NLP solver instance.

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::NLPSolver::setQPOptions() "

Set options that make the NLP solver more suitable for solving QPs.

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::SCPgen::getQPSolver() const  "

Access the QPSolver used internally.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")  casadi::NLPSolver::hessLag() "

Access the Hessian of the Lagrangian function.

>Input scheme: casadi::JacGInput (JACG_NUM_IN = 3) [jacGIn]
+-----------+-------+---------------------+
| Full name | Short |     Description     |
+===========+=======+=====================+
| JACG_X    | x     | Decision variable . |
+-----------+-------+---------------------+
| JACG_P    | p     | Fixed parameter .   |
+-----------+-------+---------------------+

>Output scheme: casadi::JacGOutput (JACG_NUM_OUT = 4) [jacGOut]
+-----------+-------+-------------------------------+
| Full name | Short |          Description          |
+===========+=======+===============================+
| JACG_JAC  | jac   | Jacobian of the constraints . |
+-----------+-------+-------------------------------+
| JACG_F    | f     | Objective function .          |
+-----------+-------+-------------------------------+
| JACG_G    | g     | Constraint function .         |
+-----------+-------+-------------------------------+

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";


// File: classcasadi_1_1SDPInputIOSchemeVector.xml
%feature("docstring")  casadi::IOSchemeVector< M  >::print(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "
[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::IOSchemeVector< M  >::vector() const "
[INTERNAL] ";

%feature("docstring")  casadi::IOSchemeVector< M  >::repr(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a representation of the object.

";

%feature("docstring") casadi::SDPInputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "
[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::SDPInputIOSchemeVector "[INTERNAL]  Helper
function for 'SDPInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::SDPInputIOSchemeVector< M
>::SDPInputIOSchemeVector(const std::vector< M > &t) " [INTERNAL] ";

%feature("docstring") casadi::SDPInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::SDPInputIOSchemeVector::__getitem__ "[INTERNAL] ";


// File: classcasadi_1_1SDPOutputIOSchemeVector.xml
%feature("docstring") casadi::SDPOutputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "
[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::SDPOutputIOSchemeVector "[INTERNAL]  Helper
function for 'SDPOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "
[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::IOSchemeVector< M  >::print(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a description of the object.

";

%feature("docstring") casadi::SDPOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::SDPOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring")  casadi::IOSchemeVector< M  >::vector() const "
[INTERNAL] ";

%feature("docstring")  casadi::IOSchemeVector< M  >::repr(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a representation of the object.

";

%feature("docstring") casadi::SDPOutputIOSchemeVector< M
>::SDPOutputIOSchemeVector(const std::vector< M > &t) " [INTERNAL] ";


// File: classcasadi_1_1SDPSDQPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::SDPSDQPSolver::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::SDPSDQPSolver::getSolver() "

Access underlying SDP solver.

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring") casadi::SDPSDQPSolver "

SDP SDQP Solver for quadratic programming.

Note: this implementation relies on Cholesky decomposition: Chol(H) = L -> H
= LL' with L lower triangular This requires Pi, H to be positive definite.
Positive semi-definite is not sufficient. Notably, H==0 will not work.

A better implementation would rely on matrix square root, but we need
singular value decomposition to implement that.

Same as an SDPSolver, but with a quadratic objective 1/2 x' H x

Joris Gillis

>Input scheme: casadi::SDQPInput (SDQP_SOLVER_NUM_IN = 10) [sdqpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SDQP_SOLVER_H          | h                      | The matrix H: sparse ( |
|                        |                        | n x n) .               |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_C          | c                      | The vector c: ( n x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_F          | f                      | The horizontal stack   |
|                        |                        | of all matrices F_i: ( |
|                        |                        | m x nm) .              |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_G          | g                      | The matrix G: ( m x m) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_A          | a                      | The matrix A: ( nc x   |
|                        |                        | n) .                   |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_LBA        | lba                    | Lower bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_UBA        | uba                    | Upper bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_LBX        | lbx                    | Lower bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_UBX        | ubx                    | Upper bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::SDQPOutput (SDQP_SOLVER_NUM_OUT = 8) [sdqpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SDQP_SOLVER_X          | x                      | The primal solution (n |
|                        |                        | x 1) - may be used as  |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_P          | p                      | The solution P (m x m) |
|                        |                        | - may be used as       |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_DUAL       | dual                   | The dual solution (m x |
|                        |                        | m) - may be used as    |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_COST       | cost                   | The primal optimal     |
|                        |                        | cost (1 x 1) .         |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_DUAL_COST  | dual_cost              | The dual optimal cost  |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_LAM_A      | lam_a                  | The dual solution      |
|                        |                        | corresponding to the   |
|                        |                        | linear constraints (nc |
|                        |                        | x 1) .                 |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_LAM_X      | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds (n x 1)  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::SDQP |
|              |              | red_object\"  | object       | SolverIntern |
|              |              |              |              | al           |
+--------------+--------------+--------------+--------------+--------------+
| parallelizat | OT_STRING    | GenericType( | Passed on to | casadi::SDPS |
| ion          |              | )            | casadi::Para | DQPInternal  |
|              |              |              | llelizer     |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available stats
+------------------+-------------------------+
|        Id        |         Used in         |
+==================+=========================+
| sdp_solver_stats | casadi::SDPSDQPInternal |
+------------------+-------------------------+

Diagrams

C++ includes: sdp_sdqp_solver.hpp ";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::SDQPSolver::setSOCQPOptions() "

Set options that make the SDQP solver more suitable for solving SOCPs.

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring") casadi::SDPSDQPSolver::SDPSDQPSolver() "

Default constructor.

";

%feature("docstring") casadi::SDPSDQPSolver::SDPSDQPSolver(const
SDQPStructure &st) "

Constructor.

Parameters:
-----------

st:  Problem structure

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";


// File: classcasadi_1_1SDPSOCPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")  casadi::SDPSOCPSolver::getSolver() "

Access underlying SDP solver.

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::SDPSOCPSolver::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring") casadi::SDPSOCPSolver::SDPSOCPSolver() "

Default constructor.

";

%feature("docstring") casadi::SDPSOCPSolver::SDPSOCPSolver(const
SOCPStructure &st) "

Constructor.

Parameters:
-----------

st:  Problem structure

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring") casadi::SDPSOCPSolver "

SOCP Solver for quadratic programming.

Solves an Second Order Cone Programming (SOCP) problem in standard form.

Primal:

min          c' x  x subject to               || Gi' x + hi ||_2 <= ei' x +
fi  i = 1..m              LBA <= A x <= UBA             LBX <= x   <= UBX
with x ( n x 1)          c ( n x 1 )          Gi sparse (n x ni)          hi
dense (ni x 1)          ei  dense (n x 1) fi  dense (1 x 1)          N =
Sum_i^m ni          A sparse (nc x n) LBA, UBA dense vector (nc x 1)
LBX, UBX dense vector (n x 1)

Joris Gillis

>Input scheme: casadi::SOCPInput (SOCP_SOLVER_NUM_IN = 11) [socpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SOCP_SOLVER_G          | g                      | The horizontal stack   |
|                        |                        | of all matrices Gi: (  |
|                        |                        | n x N) .               |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_H          | h                      | The vertical stack of  |
|                        |                        | all vectors hi: ( N x  |
|                        |                        | 1) .                   |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_E          | e                      | The vertical stack of  |
|                        |                        | all vectors ei: ( nm x |
|                        |                        | 1) .                   |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_F          | f                      | The vertical stack of  |
|                        |                        | all scalars fi: ( m x  |
|                        |                        | 1) .                   |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_C          | c                      | The vector c: ( n x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_A          | a                      | The matrix A: ( nc x   |
|                        |                        | n) .                   |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_LBA        | lba                    | Lower bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_UBA        | uba                    | Upper bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_LBX        | lbx                    | Lower bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_UBX        | ubx                    | Upper bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::SOCPOutput (SOCP_SOLVER_NUM_OUT = 5) [socpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SOCP_SOLVER_X          | x                      | The primal solution (n |
|                        |                        | x 1) .                 |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_COST       | cost                   | The primal optimal     |
|                        |                        | cost (1 x 1) .         |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_LAM_A      | lam_a                  | The dual solution      |
|                        |                        | corresponding to the   |
|                        |                        | linear constraints (nc |
|                        |                        | x 1) .                 |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_LAM_X      | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds (n x 1)  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| barrier_maxi | OT_INTEGER   | 2.100e+09    | Maximum      | casadi::SDPS |
| ter          |              |              | number of    | OCPInternal  |
|              |              |              | barrier      |              |
|              |              |              | iterations.  |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | (initial|ste | casadi::SOCP |
|              | TOR          | )            | p)           | SolverIntern |
|              |              |              |              | al           |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| print_proble | OT_BOOLEAN   | false        | Print out    | casadi::SOCP |
| m            |              |              | problem      | SolverIntern |
|              |              |              | statement    | al           |
|              |              |              | for          |              |
|              |              |              | debugging.   |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available stats
+------------------+-------------------------+
|        Id        |         Used in         |
+==================+=========================+
| sdp_solver_stats | casadi::SDPSOCPInternal |
+------------------+-------------------------+

Diagrams

C++ includes: sdp_socp_solver.hpp ";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";


// File: classcasadi_1_1SDPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::SDPSolver::setSOCPOptions() "

Set options that make the SDP solver more suitable for solving SOCPs.

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::SDPSolver "

SDPSolver.

Solves an SDP problem in standard form.
Seehttp://sdpa.indsys.chuo-u.ac.jp/sdpa/files/sdpa-c.6.2.0.manual.pdf

Primal:

min          c' x  x subject to               P = Sum_i^m F_i x_i - G P
negative semidefinite              LBA <= A x <= UBA             LBX <= x
<= UBX      with x ( n x 1)          c ( n x 1 )          G, F_i  sparse
symmetric (m x m)          X dense symmetric ( m x m ) A sparse matrix ( nc
x n)          LBA, UBA dense vector (nc x 1) LBX, UBX dense vector (n x 1)

This formulation is chosen as primal, because it does not call for a large
decision variable space.

Dual:

max          trace(G Y)  Y  subject to             trace(F_i Y) = c_i Y
positive semidefinite      with Y dense symmetric ( m x m)

On generality: you might have formulation with block partitioning:

Primal:

min          c' x  x subject to               Pj = Sum_i^m F_ij x_i - gj
for all j               Pj negative semidefinite   for all j with x ( n x 1)
c ( n x 1 )          G, F_i  sparse symmetric (m x m)          X dense
symmetric ( m x m )

Dual:max          Sum_j trace(Gj Yj)  Yj  subject to             Sum_j
trace(F_ij Yj) = c_i   for all j             Yj positive semidefinite for
all j      with Y dense symmetric ( m x m)

You can cast this into the standard form with: G = blkdiag(Gj for all j) Fi
= blkdiag(F_ij for all j)

Implementations of SDPSolver are encouraged to exploit this block structure.

Joel Andersson

>Input scheme: casadi::SDPInput (SDP_SOLVER_NUM_IN = 9) [sdpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SDP_SOLVER_F           | f                      | The horizontal stack   |
|                        |                        | of all matrices F_i: ( |
|                        |                        | m x nm) .              |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_C           | c                      | The vector c: ( n x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_G           | g                      | The matrix G: ( m x m) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_A           | a                      | The matrix A: ( nc x   |
|                        |                        | n) .                   |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_LBA         | lba                    | Lower bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_UBA         | uba                    | Upper bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_LBX         | lbx                    | Lower bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_UBX         | ubx                    | Upper bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::SDPOutput (SDP_SOLVER_NUM_OUT = 8) [sdpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SDP_SOLVER_X           | x                      | The primal solution (n |
|                        |                        | x 1) - may be used as  |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_P           | p                      | The solution P (m x m) |
|                        |                        | - may be used as       |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_DUAL        | dual                   | The dual solution (m x |
|                        |                        | m) - may be used as    |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_COST        | cost                   | The primal optimal     |
|                        |                        | cost (1 x 1) .         |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_DUAL_COST   | dual_cost              | The dual optimal cost  |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_LAM_A       | lam_a                  | The dual solution      |
|                        |                        | corresponding to the   |
|                        |                        | linear constraints (nc |
|                        |                        | x 1) .                 |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_LAM_X       | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds (n x 1)  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| calc_dual    | OT_BOOLEAN   | true         | Indicate if  | casadi::SDPS |
|              |              |              | dual should  | olverInterna |
|              |              |              | be allocated | l            |
|              |              |              | and          |              |
|              |              |              | calculated.  |              |
|              |              |              | as is always |              |
|              |              |              | dense (m x   |              |
|              |              |              | m).          |              |
+--------------+--------------+--------------+--------------+--------------+
| calc_p       | OT_BOOLEAN   | true         | You may want | casadi::SDPS |
|              |              |              | to avoid     | olverInterna |
|              |              |              | calculating  | l            |
|              |              |              | this         |              |
|              |              |              | variable for |              |
|              |              |              | problems     |              |
|              |              |              | with n       |              |
|              |              |              | large, as is |              |
|              |              |              | always dense |              |
|              |              |              | (m x m).     |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| print_proble | OT_BOOLEAN   | false        | Print out    | casadi::SDPS |
| m            |              |              | problem      | olverInterna |
|              |              |              | statement    | l            |
|              |              |              | for          |              |
|              |              |              | debugging.   |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: sdp_solver.hpp ";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring") casadi::SDPSolver::SDPSolver() "

Default constructor.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::SDPSolver::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";


// File: classcasadi_1_1SDPStructIOSchemeVector.xml
%feature("docstring") casadi::SDPStructIOSchemeVector< T
>::SDPStructIOSchemeVector(const std::vector< M > &t) " [INTERNAL] ";

%feature("docstring")  casadi::IOSchemeVector< M  >::print(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "
[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "
[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::SDPStructIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::SDPStructIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::SDPStructIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::SDPStructIOSchemeVector "[INTERNAL]  Helper
function for 'SDPStruct'

C++ includes: casadi_types.hpp ";

%feature("docstring")  casadi::IOSchemeVector< M  >::repr(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::IOSchemeVector< M  >::vector() const "
[INTERNAL] ";


// File: classcasadi_1_1SDQPInputIOSchemeVector.xml
%feature("docstring")  casadi::IOSchemeVector< M  >::repr(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a representation of the object.

";

%feature("docstring") casadi::SDQPInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::SDQPInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::SDQPInputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring") casadi::SDQPInputIOSchemeVector "[INTERNAL]  Helper
function for 'SDQPInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::SDQPInputIOSchemeVector< M
>::SDQPInputIOSchemeVector(const std::vector< M > &t) " [INTERNAL] ";

%feature("docstring")  casadi::IOSchemeVector< M  >::print(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "
[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::IOSchemeVector< M  >::vector() const "
[INTERNAL] ";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "
[INTERNAL]  Return a string with a representation (for SWIG)

";


// File: classcasadi_1_1SDQPOutputIOSchemeVector.xml
%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "
[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::SDQPOutputIOSchemeVector "[INTERNAL]  Helper
function for 'SDQPOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring")  casadi::IOSchemeVector< M  >::vector() const "
[INTERNAL] ";

%feature("docstring")  casadi::IOSchemeVector< M  >::repr(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a representation of the object.

";

%feature("docstring") casadi::SDQPOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::SDQPOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring")  casadi::IOSchemeVector< M  >::print(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a description of the object.

";

%feature("docstring") casadi::SDQPOutputIOSchemeVector< M
>::SDQPOutputIOSchemeVector(const std::vector< M > &t) " [INTERNAL] ";

%feature("docstring") casadi::SDQPOutputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "
[INTERNAL]  Return a string with a description (for SWIG)

";


// File: classcasadi_1_1SDQPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::Function::inputScheme() const  " [INTERNAL]  Access input/output
scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring") casadi::SDQPSolver::SDQPSolver() "

Default constructor.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::SDQPSolver::setSOCQPOptions() "

Set options that make the SDQP solver more suitable for solving SOCPs.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring") casadi::SDQPSolver "

SDQPSolver.

Same as an SDPSolver, but with a quadratic objective 1/2 x' H x

Joel Andersson

>Input scheme: casadi::SDQPInput (SDQP_SOLVER_NUM_IN = 10) [sdqpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SDQP_SOLVER_H          | h                      | The matrix H: sparse ( |
|                        |                        | n x n) .               |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_C          | c                      | The vector c: ( n x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_F          | f                      | The horizontal stack   |
|                        |                        | of all matrices F_i: ( |
|                        |                        | m x nm) .              |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_G          | g                      | The matrix G: ( m x m) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_A          | a                      | The matrix A: ( nc x   |
|                        |                        | n) .                   |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_LBA        | lba                    | Lower bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_UBA        | uba                    | Upper bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_LBX        | lbx                    | Lower bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_UBX        | ubx                    | Upper bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::SDQPOutput (SDQP_SOLVER_NUM_OUT = 8) [sdqpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SDQP_SOLVER_X          | x                      | The primal solution (n |
|                        |                        | x 1) - may be used as  |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_P          | p                      | The solution P (m x m) |
|                        |                        | - may be used as       |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_DUAL       | dual                   | The dual solution (m x |
|                        |                        | m) - may be used as    |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_COST       | cost                   | The primal optimal     |
|                        |                        | cost (1 x 1) .         |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_DUAL_COST  | dual_cost              | The dual optimal cost  |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_LAM_A      | lam_a                  | The dual solution      |
|                        |                        | corresponding to the   |
|                        |                        | linear constraints (nc |
|                        |                        | x 1) .                 |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_LAM_X      | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds (n x 1)  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::SDQP |
|              |              | red_object\"  | object       | SolverIntern |
|              |              |              |              | al           |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: sdqp_solver.hpp ";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::SDQPSolver::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";


// File: classcasadi_1_1SDQPStructIOSchemeVector.xml
%feature("docstring") casadi::SDQPStructIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "
[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "
[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::IOSchemeVector< M  >::print(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::IOSchemeVector< M  >::vector() const "
[INTERNAL] ";

%feature("docstring") casadi::SDQPStructIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::SDQPStructIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::SDQPStructIOSchemeVector< T
>::SDQPStructIOSchemeVector(const std::vector< M > &t) " [INTERNAL] ";

%feature("docstring") casadi::SDQPStructIOSchemeVector "[INTERNAL]  Helper
function for 'SDQPStruct'

C++ includes: casadi_types.hpp ";

%feature("docstring")  casadi::IOSchemeVector< M  >::repr(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a representation of the object.

";


// File: classcasadi_1_1SetNonzeros.xml
%feature("docstring")  casadi::MXNode::getGetNonzeros(const Sparsity &sp,
const std::vector< int > &nz) const  " [INTERNAL]  Get the nonzeros of
matrix.

";

%feature("docstring")  casadi::MXNode::getBinarySwitch(int op, const MX &y)
const  " [INTERNAL]  Get a binary operation operation.

";

%feature("docstring")  casadi::MXNode::getInverse() const  " [INTERNAL]
Inverse.

";

%feature("docstring")  casadi::SetNonzeros< Add >::mapping() const  "
[INTERNAL]  Get an IMatrix representation of a GetNonzeros or SetNonzeros
node.

";

%feature("docstring")  casadi::MXNode::numel() const  " [INTERNAL]  Get
shape.

";

%feature("docstring")  casadi::SharedObjectNode::init() "[INTERNAL]
Initialize the object.

";

%feature("docstring")  casadi::MXNode::getNorm2() const  " [INTERNAL]
Spectral norm.

";

%feature("docstring")  casadi::MXNode::getReshape(const Sparsity &sp) const
" [INTERNAL]   Reshape.

";

%feature("docstring")  casadi::MXNode::getValue() const  " [INTERNAL]  Get
the value (only for scalar constant nodes)

";

%feature("docstring") casadi::SetNonzeros::__nonzero__ "[INTERNAL]  Check
the truth value of this node.

";

%feature("docstring")  casadi::MXNode::getHorzsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a horizontal split node.

";

%feature("docstring")  casadi::MXNode::getInnerProd(const MX &y) const  "
[INTERNAL]  Inner product.

";

%feature("docstring")  casadi::MXNode::repr(std::ostream &stream) const  "
[INTERNAL]  Print a representation.

";

%feature("docstring")  casadi::MXNode::getNorm1() const  " [INTERNAL]
1-norm

";

%feature("docstring")  casadi::SharedObjectNode::getCount() const  "
[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::MXNode::hasDep() const  " [INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring")  casadi::MXNode::getNormF() const  " [INTERNAL]
Frobenius norm.

";

%feature("docstring")  casadi::MXNode::isOne() const  " [INTERNAL]  Check if
identically one.

";

%feature("docstring")  casadi::MXNode::getVertsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a vertical split node (vectors
only)

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep) "
[INTERNAL]  Set unary dependency.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2) " [INTERNAL]  Set binary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2, const MX &dep3) " [INTERNAL]  Set ternary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const std::vector< MX
> &dep) " [INTERNAL]  Set multiple dependencies.

";

%feature("docstring")  casadi::SetNonzeros< Add >::getOp() const  "
[INTERNAL]  Get the operation.

";

%feature("docstring")  casadi::MXNode::getMultiplication(const MX &y, const
Sparsity &sp_z=Sparsity()) const  " [INTERNAL]   Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring")  casadi::MXNode::isZero() const  " [INTERNAL]  Check
if identically zero.

";

%feature("docstring")  casadi::MXNode::isOutputNode() const  " [INTERNAL]
Check if evaluation output.

";

%feature("docstring")  casadi::SharedObjectNode::weak() "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring")  casadi::MXNode::isNonLinear() "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring")  casadi::MXNode::isMultipleOutput() const  "
[INTERNAL]  Check if a multiple output node.

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) const  " [INTERNAL]
dependencies - functions that have to be evaluated before this one

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::sameOpAndDeps(const MXNode *node, int
depth) const  " [INTERNAL]  Checks if two nodes have the same operation and
have equivalent dependencies up to a given depth.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream) const  "
[INTERNAL]  Print a description.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream, long
&remaining_calls) const  " [INTERNAL]  Print expression (make sure number of
calls is not exceeded)

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, const std::vector< int > &onz, bool add=false) "
[INTERNAL]  Assign nonzeros (mapping matrix)

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, bool add=false) " [INTERNAL]  Assign nonzeros
(mapping matrix), output indices sequential.

";

%feature("docstring")  casadi::MXNode::evaluateD(const DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp)
" [INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::MXNode::getNumOutputs() const  " [INTERNAL]
Number of outputs.

";

%feature("docstring") casadi::SetNonzeros< Add >::SetNonzeros(const MX &y,
const MX &x) " [INTERNAL]  Constructor.

";

%feature("docstring")  casadi::SetNonzeros< Add >::clone() const  "
[INTERNAL]  Clone function.

";

%feature("docstring")  casadi::MXNode::getVertcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a vertical concatenation node (vectors only)

";

%feature("docstring")  casadi::MXNode::isIdentity() const  " [INTERNAL]
Check if identity matrix.

";

%feature("docstring")  casadi::MXNode::getFunctionOutput() const  "
[INTERNAL]  Get function output.

";

%feature("docstring")  casadi::MXNode::getNormInf() const  " [INTERNAL]
Infinity norm.

";

%feature("docstring")  casadi::MXNode::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied) " [INTERNAL]  Deep copy
data members.

";

%feature("docstring")  casadi::MXNode::getAssertion(const MX &y, const
std::string &fail_message="") const  " [INTERNAL]   Assertion.

";

%feature("docstring")  casadi::MXNode::nTmp(size_t &ni, size_t &nr) "
[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::MXNode::evaluateSX(const SXPtrV &input,
SXPtrV &output, std::vector< int > &itmp, std::vector< SXElement > &rtmp) "
[INTERNAL]  Evaluate symbolically (SX)

";

%feature("docstring")  casadi::MXNode::getOutput(int oind) const  "
[INTERNAL]  Get an output.

";

%feature("docstring")  casadi::MXNode::getSolve(const MX &r, bool tr, const
LinearSolver &linear_solver) const  " [INTERNAL]   Solve a system of linear
equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring")  casadi::MXNode::size() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::shape() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getAddNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Add the nonzeros of a matrix to
another matrix.

";

%feature("docstring")  casadi::MXNode::setSparsity(const Sparsity &sparsity)
" [INTERNAL]  Set the sparsity.

";

%feature("docstring")  casadi::MXNode::getTranspose() const  " [INTERNAL]
Transpose.

";

%feature("docstring")  casadi::MXNode::getMatrixValue() const  " [INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring")  casadi::MXNode::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp,
bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, bool fwd) " [INTERNAL]  Propagate sparsity, no work.

";

%feature("docstring")  casadi::MXNode::getHorzcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a horizontal concatenation node.

";

%feature("docstring")  casadi::MXNode::getSetNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Assign the nonzeros of a matrix
to another matrix.

";

%feature("docstring")  casadi::MXNode::size1() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::size2() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::isEqual(const MXNode *node, int
depth) const  " [INTERNAL]  Check if two nodes are equivalent up to a given
depth.

";

%feature("docstring")  casadi::SetNonzeros< Add >::numInplace() const  "
[INTERNAL]  Can the operation be performed inplace (i.e. overwrite the
result)

";

%feature("docstring")  casadi::MXNode::getSubRef(const Slice &i, const Slice
&j) const  " [INTERNAL]  Get submatrix reference.

";

%feature("docstring")  casadi::MXNode::getDeterminant() const  " [INTERNAL]
Determinant.

";

%feature("docstring") casadi::SetNonzeros::~SetNonzeros "[INTERNAL]
Destructor.

";

%feature("docstring")  casadi::MXNode::ndep() const  " [INTERNAL]  Number of
dependencies.

";

%feature("docstring")  casadi::SetNonzeros< Add >::getAll() const  "
[INTERNAL]  Get all the nonzeros.

";

%feature("docstring")  casadi::MXNode::isValue(double val) const  "
[INTERNAL]  Check if a certain value.

";

%feature("docstring")  casadi::SharedObjectNode::isInit() const  "
[INTERNAL]  Check if the object has been initialized.

";

%feature("docstring")  casadi::MXNode::getSetSparse(const Sparsity &sp)
const  " [INTERNAL]  Create set sparse.

";

%feature("docstring")  casadi::SetNonzeros< Add >::evaluateMX(const MXPtrV
&input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const
MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given) " [INTERNAL]
Evaluate the function symbolically ( MX)

";

%feature("docstring")  casadi::MXNode::evaluateMX(const MXPtrV &input,
MXPtrV &output) " [INTERNAL]  Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring")  casadi::MXNode::isUnaryOp() const  " [INTERNAL]
Check if unary operation.

";

%feature("docstring")  casadi::MXNode::getFunctionInput() const  "
[INTERNAL]  Get function input.

";

%feature("docstring")  casadi::SharedObjectNode::assertInit() const  "
[INTERNAL]  Assert that the object has been initialized.

";

%feature("docstring")  casadi::MXNode::getBinary(int op, const MX &y, bool
scX, bool scY) const  " [INTERNAL]  Get a binary operation operation
(matrix-matrix)

";

%feature("docstring")  casadi::MXNode::getUnary(int op) const  " [INTERNAL]
Get a unary operation.

";

%feature("docstring")  casadi::MXNode::getName() const  " [INTERNAL]  Get
the name.

";

%feature("docstring")  casadi::MXNode::printPart(std::ostream &stream, int
part) const  " [INTERNAL]  Print a part of the expression.

";

%feature("docstring")  casadi::MXNode::isBinaryOp() const  " [INTERNAL]
Check if binary operation.

";

%feature("docstring")  casadi::MXNode::generateOperation(std::ostream
&stream, const std::vector< std::string > &arg, const std::vector<
std::string > &res, CodeGenerator &gen) const  " [INTERNAL]  Generate code
for the operation.

";

%feature("docstring")  casadi::MXNode::simplifyMe(MX &ex) " [INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring")  casadi::MXNode::getFunction() "[INTERNAL]  Get
function reference.

";

%feature("docstring")  casadi::MXNode::getFunction() const  " [INTERNAL]
Get function reference.

";

%feature("docstring")  casadi::MXNode::getSubAssign(const MX &y, const Slice
&i, const Slice &j) const  " [INTERNAL]  Get submatrix assignment.

";

%feature("docstring")  casadi::MXNode::addDependency(const MX &dep) "
[INTERNAL]  Add a dependency.

";

%feature("docstring")  casadi::MXNode::sparsity() const  " [INTERNAL]  Get
the sparsity.

";

%feature("docstring")  casadi::MXNode::sparsity(int oind) const  "
[INTERNAL]  Get the sparsity of output oind.

";

%feature("docstring") casadi::SetNonzeros "[INTERNAL]  Assign or add
entries to a matrix.

Joel Andersson

C++ includes: setnonzeros.hpp ";


// File: classcasadi_1_1SetNonzerosSlice.xml
%feature("docstring")  casadi::SetNonzeros< Add >::evaluateMX(const MXPtrV
&input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const
MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given) " [INTERNAL]
Evaluate the function symbolically ( MX)

";

%feature("docstring")  casadi::MXNode::evaluateMX(const MXPtrV &input,
MXPtrV &output) " [INTERNAL]  Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring")  casadi::SharedObjectNode::isInit() const  "
[INTERNAL]  Check if the object has been initialized.

";

%feature("docstring") casadi::SetNonzerosSlice "[INTERNAL] C++ includes:
setnonzeros.hpp ";

%feature("docstring")  casadi::MXNode::repr(std::ostream &stream) const  "
[INTERNAL]  Print a representation.

";

%feature("docstring")  casadi::SetNonzeros< Add >::mapping() const  "
[INTERNAL]  Get an IMatrix representation of a GetNonzeros or SetNonzeros
node.

";

%feature("docstring")  casadi::SetNonzerosSlice< Add
>::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, bool fwd) "
[INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp,
bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::addDependency(const MX &dep) "
[INTERNAL]  Add a dependency.

";

%feature("docstring")  casadi::MXNode::getOutput(int oind) const  "
[INTERNAL]  Get an output.

";

%feature("docstring")  casadi::MXNode::size2() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getSubAssign(const MX &y, const Slice
&i, const Slice &j) const  " [INTERNAL]  Get submatrix assignment.

";

%feature("docstring")  casadi::MXNode::getSetSparse(const Sparsity &sp)
const  " [INTERNAL]  Create set sparse.

";

%feature("docstring")  casadi::SetNonzerosSlice< Add >::isAssignment() const
" [INTERNAL]  Check if the instance is in fact a simple assignment.

";

%feature("docstring")  casadi::MXNode::numel() const  " [INTERNAL]  Get
shape.

";

%feature("docstring")  casadi::MXNode::getSolve(const MX &r, bool tr, const
LinearSolver &linear_solver) const  " [INTERNAL]   Solve a system of linear
equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring")  casadi::MXNode::ndep() const  " [INTERNAL]  Number of
dependencies.

";

%feature("docstring")  casadi::MXNode::getReshape(const Sparsity &sp) const
" [INTERNAL]   Reshape.

";

%feature("docstring")  casadi::MXNode::getHorzcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a horizontal concatenation node.

";

%feature("docstring") casadi::SetNonzerosSlice::__nonzero__ "[INTERNAL]
Check the truth value of this node.

";

%feature("docstring") casadi::SetNonzerosSlice< Add
>::SetNonzerosSlice(const MX &y, const MX &x, const Slice &s) " [INTERNAL]
Constructor.

";

%feature("docstring")  casadi::SetNonzerosSlice< Add >::evaluateSX(const
SXPtrV &input, SXPtrV &output, std::vector< int > &itmp, std::vector<
SXElement > &rtmp) " [INTERNAL]  Evaluate the function symbolically (SX)

";

%feature("docstring")  casadi::MXNode::getMultiplication(const MX &y, const
Sparsity &sp_z=Sparsity()) const  " [INTERNAL]   Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring")  casadi::MXNode::shape() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::size1() const  " [INTERNAL] ";

%feature("docstring")  casadi::SharedObjectNode::getCount() const  "
[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::MXNode::getFunction() "[INTERNAL]  Get
function reference.

";

%feature("docstring")  casadi::MXNode::getFunction() const  " [INTERNAL]
Get function reference.

";

%feature("docstring")  casadi::SetNonzerosSlice< Add >::clone() const  "
[INTERNAL]  Clone function.

";

%feature("docstring")  casadi::MXNode::getNorm2() const  " [INTERNAL]
Spectral norm.

";

%feature("docstring")  casadi::MXNode::getSubRef(const Slice &i, const Slice
&j) const  " [INTERNAL]  Get submatrix reference.

";

%feature("docstring")  casadi::MXNode::isOne() const  " [INTERNAL]  Check if
identically one.

";

%feature("docstring")  casadi::MXNode::getInnerProd(const MX &y) const  "
[INTERNAL]  Inner product.

";

%feature("docstring")  casadi::MXNode::getFunctionInput() const  "
[INTERNAL]  Get function input.

";

%feature("docstring")  casadi::MXNode::isZero() const  " [INTERNAL]  Check
if identically zero.

";

%feature("docstring")  casadi::MXNode::size() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getAssertion(const MX &y, const
std::string &fail_message="") const  " [INTERNAL]   Assertion.

";

%feature("docstring")  casadi::MXNode::isMultipleOutput() const  "
[INTERNAL]  Check if a multiple output node.

";

%feature("docstring")  casadi::MXNode::getUnary(int op) const  " [INTERNAL]
Get a unary operation.

";

%feature("docstring")  casadi::MXNode::getAddNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Add the nonzeros of a matrix to
another matrix.

";

%feature("docstring")  casadi::MXNode::isValue(double val) const  "
[INTERNAL]  Check if a certain value.

";

%feature("docstring")  casadi::MXNode::sameOpAndDeps(const MXNode *node, int
depth) const  " [INTERNAL]  Checks if two nodes have the same operation and
have equivalent dependencies up to a given depth.

";

%feature("docstring")  casadi::SharedObjectNode::assertInit() const  "
[INTERNAL]  Assert that the object has been initialized.

";

%feature("docstring")  casadi::MXNode::sparsity() const  " [INTERNAL]  Get
the sparsity.

";

%feature("docstring")  casadi::MXNode::sparsity(int oind) const  "
[INTERNAL]  Get the sparsity of output oind.

";

%feature("docstring")  casadi::SharedObjectNode::weak() "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring")  casadi::MXNode::isNonLinear() "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring")  casadi::MXNode::nTmp(size_t &ni, size_t &nr) "
[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::SetNonzerosSlice< Add >::evaluateD(const
DMatrixPtrV &input, DMatrixPtrV &output, std::vector< int > &itmp,
std::vector< double > &rtmp) " [INTERNAL]  Evaluate the function
numerically.

";

%feature("docstring")  casadi::MXNode::getNorm1() const  " [INTERNAL]
1-norm

";

%feature("docstring")  casadi::MXNode::getNormInf() const  " [INTERNAL]
Infinity norm.

";

%feature("docstring")  casadi::MXNode::getBinary(int op, const MX &y, bool
scX, bool scY) const  " [INTERNAL]  Get a binary operation operation
(matrix-matrix)

";

%feature("docstring")  casadi::MXNode::isUnaryOp() const  " [INTERNAL]
Check if unary operation.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream) const  "
[INTERNAL]  Print a description.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream, long
&remaining_calls) const  " [INTERNAL]  Print expression (make sure number of
calls is not exceeded)

";

%feature("docstring")  casadi::MXNode::getNumOutputs() const  " [INTERNAL]
Number of outputs.

";

%feature("docstring")  casadi::MXNode::getFunctionOutput() const  "
[INTERNAL]  Get function output.

";

%feature("docstring")  casadi::MXNode::getSetNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Assign the nonzeros of a matrix
to another matrix.

";

%feature("docstring")  casadi::MXNode::getMatrixValue() const  " [INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring")  casadi::MXNode::getDeterminant() const  " [INTERNAL]
Determinant.

";

%feature("docstring")  casadi::SetNonzeros< Add >::numInplace() const  "
[INTERNAL]  Can the operation be performed inplace (i.e. overwrite the
result)

";

%feature("docstring")  casadi::MXNode::isOutputNode() const  " [INTERNAL]
Check if evaluation output.

";

%feature("docstring")  casadi::MXNode::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied) " [INTERNAL]  Deep copy
data members.

";

%feature("docstring")  casadi::MXNode::hasDep() const  " [INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring")  casadi::SetNonzerosSlice< Add >::evaluateGen(const
MatV &input, MatV &output, std::vector< int > &itmp, std::vector< T > &rtmp)
" [INTERNAL]  Evaluate the function (template)

";

%feature("docstring")  casadi::MXNode::getNormF() const  " [INTERNAL]
Frobenius norm.

";

%feature("docstring")  casadi::SetNonzerosSlice< Add >::isEqual(const MXNode
*node, int depth) const  " [INTERNAL]  Check if two nodes are equivalent up
to a given depth.

";

%feature("docstring")  casadi::MXNode::setSparsity(const Sparsity &sparsity)
" [INTERNAL]  Set the sparsity.

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, const std::vector< int > &onz, bool add=false) "
[INTERNAL]  Assign nonzeros (mapping matrix)

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, bool add=false) " [INTERNAL]  Assign nonzeros
(mapping matrix), output indices sequential.

";

%feature("docstring")  casadi::SetNonzerosSlice< Add
>::printPart(std::ostream &stream, int part) const  " [INTERNAL]  Print a
part of the expression */.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep) "
[INTERNAL]  Set unary dependency.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2) " [INTERNAL]  Set binary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2, const MX &dep3) " [INTERNAL]  Set ternary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const std::vector< MX
> &dep) " [INTERNAL]  Set multiple dependencies.

";

%feature("docstring") casadi::SetNonzerosSlice::~SetNonzerosSlice "[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::MXNode::getVertcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a vertical concatenation node (vectors only)

";

%feature("docstring")  casadi::SetNonzeros< Add >::getOp() const  "
[INTERNAL]  Get the operation.

";

%feature("docstring")  casadi::MXNode::getHorzsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a horizontal split node.

";

%feature("docstring")  casadi::SetNonzerosSlice< Add >::getAll() const  "
[INTERNAL]  Get all the nonzeros.

";

%feature("docstring")  casadi::MXNode::getInverse() const  " [INTERNAL]
Inverse.

";

%feature("docstring")  casadi::MXNode::getBinarySwitch(int op, const MX &y)
const  " [INTERNAL]  Get a binary operation operation.

";

%feature("docstring")  casadi::MXNode::getGetNonzeros(const Sparsity &sp,
const std::vector< int > &nz) const  " [INTERNAL]  Get the nonzeros of
matrix.

";

%feature("docstring")  casadi::SetNonzerosSlice< Add
>::generateOperation(std::ostream &stream, const std::vector< std::string >
&arg, const std::vector< std::string > &res, CodeGenerator &gen) const  "
[INTERNAL]  Generate code for the operation.

";

%feature("docstring")  casadi::SetNonzerosSlice< Add >::simplifyMe(MX &ex) "
[INTERNAL]  Simplify.

";

%feature("docstring")  casadi::MXNode::isIdentity() const  " [INTERNAL]
Check if identity matrix.

";

%feature("docstring")  casadi::MXNode::getValue() const  " [INTERNAL]  Get
the value (only for scalar constant nodes)

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) const  " [INTERNAL]
dependencies - functions that have to be evaluated before this one

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getTranspose() const  " [INTERNAL]
Transpose.

";

%feature("docstring")  casadi::MXNode::getName() const  " [INTERNAL]  Get
the name.

";

%feature("docstring")  casadi::MXNode::getVertsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a vertical split node (vectors
only)

";

%feature("docstring")  casadi::SharedObjectNode::init() "[INTERNAL]
Initialize the object.

";

%feature("docstring")  casadi::MXNode::isBinaryOp() const  " [INTERNAL]
Check if binary operation.

";


// File: classcasadi_1_1SetNonzerosSlice2.xml
%feature("docstring")  casadi::MXNode::getMultiplication(const MX &y, const
Sparsity &sp_z=Sparsity()) const  " [INTERNAL]   Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring")  casadi::MXNode::getNumOutputs() const  " [INTERNAL]
Number of outputs.

";

%feature("docstring")  casadi::MXNode::getMatrixValue() const  " [INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring")  casadi::MXNode::sparsity() const  " [INTERNAL]  Get
the sparsity.

";

%feature("docstring")  casadi::MXNode::sparsity(int oind) const  "
[INTERNAL]  Get the sparsity of output oind.

";

%feature("docstring")  casadi::SetNonzerosSlice2< Add
>::generateOperation(std::ostream &stream, const std::vector< std::string >
&arg, const std::vector< std::string > &res, CodeGenerator &gen) const  "
[INTERNAL]  Generate code for the operation.

";

%feature("docstring")  casadi::MXNode::shape() const  " [INTERNAL] ";

%feature("docstring") casadi::SetNonzerosSlice2< Add
>::SetNonzerosSlice2(const MX &y, const MX &x, const Slice &inner, const
Slice &outer) " [INTERNAL]  Constructor.

";

%feature("docstring")  casadi::MXNode::getHorzcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a horizontal concatenation node.

";

%feature("docstring")  casadi::MXNode::hasDep() const  " [INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) const  " [INTERNAL]
dependencies - functions that have to be evaluated before this one

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::size2() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied) " [INTERNAL]  Deep copy
data members.

";

%feature("docstring")  casadi::MXNode::getNorm2() const  " [INTERNAL]
Spectral norm.

";

%feature("docstring")  casadi::MXNode::getNormF() const  " [INTERNAL]
Frobenius norm.

";

%feature("docstring")  casadi::MXNode::getBinarySwitch(int op, const MX &y)
const  " [INTERNAL]  Get a binary operation operation.

";

%feature("docstring")  casadi::MXNode::isOutputNode() const  " [INTERNAL]
Check if evaluation output.

";

%feature("docstring")  casadi::SetNonzerosSlice2< Add >::evaluateGen(const
MatV &input, MatV &output, std::vector< int > &itmp, std::vector< T > &rtmp)
" [INTERNAL]  Evaluate the function (template)

";

%feature("docstring")  casadi::SetNonzerosSlice2< Add >::evaluateSX(const
SXPtrV &input, SXPtrV &output, std::vector< int > &itmp, std::vector<
SXElement > &rtmp) " [INTERNAL]  Evaluate the function symbolically (SX)

";

%feature("docstring")  casadi::MXNode::isNonLinear() "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring")  casadi::MXNode::simplifyMe(MX &ex) " [INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep) "
[INTERNAL]  Set unary dependency.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2) " [INTERNAL]  Set binary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2, const MX &dep3) " [INTERNAL]  Set ternary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const std::vector< MX
> &dep) " [INTERNAL]  Set multiple dependencies.

";

%feature("docstring")  casadi::MXNode::getNormInf() const  " [INTERNAL]
Infinity norm.

";

%feature("docstring")  casadi::MXNode::getAddNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Add the nonzeros of a matrix to
another matrix.

";

%feature("docstring")  casadi::SharedObjectNode::assertInit() const  "
[INTERNAL]  Assert that the object has been initialized.

";

%feature("docstring") casadi::SetNonzerosSlice2::__nonzero__ "[INTERNAL]
Check the truth value of this node.

";

%feature("docstring")  casadi::MXNode::isOne() const  " [INTERNAL]  Check if
identically one.

";

%feature("docstring")  casadi::MXNode::isZero() const  " [INTERNAL]  Check
if identically zero.

";

%feature("docstring")  casadi::MXNode::getUnary(int op) const  " [INTERNAL]
Get a unary operation.

";

%feature("docstring")  casadi::MXNode::size() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getReshape(const Sparsity &sp) const
" [INTERNAL]   Reshape.

";

%feature("docstring")  casadi::MXNode::getDeterminant() const  " [INTERNAL]
Determinant.

";

%feature("docstring")  casadi::MXNode::getInverse() const  " [INTERNAL]
Inverse.

";

%feature("docstring")  casadi::SetNonzerosSlice2< Add >::getAll() const  "
[INTERNAL]  Get all the nonzeros.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream) const  "
[INTERNAL]  Print a description.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream, long
&remaining_calls) const  " [INTERNAL]  Print expression (make sure number of
calls is not exceeded)

";

%feature("docstring")  casadi::MXNode::numel() const  " [INTERNAL]  Get
shape.

";

%feature("docstring")  casadi::MXNode::isBinaryOp() const  " [INTERNAL]
Check if binary operation.

";

%feature("docstring")  casadi::MXNode::size1() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getFunctionOutput() const  "
[INTERNAL]  Get function output.

";

%feature("docstring")  casadi::MXNode::getFunction() "[INTERNAL]  Get
function reference.

";

%feature("docstring")  casadi::MXNode::getFunction() const  " [INTERNAL]
Get function reference.

";

%feature("docstring") casadi::SetNonzerosSlice2 "[INTERNAL] C++ includes:
setnonzeros.hpp ";

%feature("docstring")  casadi::MXNode::getGetNonzeros(const Sparsity &sp,
const std::vector< int > &nz) const  " [INTERNAL]  Get the nonzeros of
matrix.

";

%feature("docstring")  casadi::MXNode::isValue(double val) const  "
[INTERNAL]  Check if a certain value.

";

%feature("docstring")  casadi::SetNonzerosSlice2< Add
>::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, bool fwd) "
[INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp,
bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::SetNonzerosSlice2< Add >::clone() const  "
[INTERNAL]  Clone function.

";

%feature("docstring")  casadi::MXNode::getSetSparse(const Sparsity &sp)
const  " [INTERNAL]  Create set sparse.

";

%feature("docstring")  casadi::MXNode::getBinary(int op, const MX &y, bool
scX, bool scY) const  " [INTERNAL]  Get a binary operation operation
(matrix-matrix)

";

%feature("docstring")  casadi::MXNode::getSolve(const MX &r, bool tr, const
LinearSolver &linear_solver) const  " [INTERNAL]   Solve a system of linear
equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, const std::vector< int > &onz, bool add=false) "
[INTERNAL]  Assign nonzeros (mapping matrix)

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, bool add=false) " [INTERNAL]  Assign nonzeros
(mapping matrix), output indices sequential.

";

%feature("docstring")  casadi::MXNode::isMultipleOutput() const  "
[INTERNAL]  Check if a multiple output node.

";

%feature("docstring")  casadi::MXNode::setSparsity(const Sparsity &sparsity)
" [INTERNAL]  Set the sparsity.

";

%feature("docstring")  casadi::SetNonzerosSlice2< Add >::isEqual(const
MXNode *node, int depth) const  " [INTERNAL]  Check if two nodes are
equivalent up to a given depth.

";

%feature("docstring")  casadi::SetNonzeros< Add >::mapping() const  "
[INTERNAL]  Get an IMatrix representation of a GetNonzeros or SetNonzeros
node.

";

%feature("docstring")  casadi::MXNode::getVertsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a vertical split node (vectors
only)

";

%feature("docstring")  casadi::MXNode::addDependency(const MX &dep) "
[INTERNAL]  Add a dependency.

";

%feature("docstring")  casadi::MXNode::getNorm1() const  " [INTERNAL]
1-norm

";

%feature("docstring")  casadi::SetNonzeros< Add >::evaluateMX(const MXPtrV
&input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const
MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given) " [INTERNAL]
Evaluate the function symbolically ( MX)

";

%feature("docstring")  casadi::MXNode::evaluateMX(const MXPtrV &input,
MXPtrV &output) " [INTERNAL]  Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring")  casadi::MXNode::isUnaryOp() const  " [INTERNAL]
Check if unary operation.

";

%feature("docstring")  casadi::SharedObjectNode::init() "[INTERNAL]
Initialize the object.

";

%feature("docstring")  casadi::MXNode::getVertcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a vertical concatenation node (vectors only)

";

%feature("docstring")  casadi::MXNode::getHorzsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a horizontal split node.

";

%feature("docstring")  casadi::SetNonzerosSlice2< Add >::evaluateD(const
DMatrixPtrV &input, DMatrixPtrV &output, std::vector< int > &itmp,
std::vector< double > &rtmp) " [INTERNAL]  Evaluate the function
numerically.

";

%feature("docstring")  casadi::SetNonzeros< Add >::getOp() const  "
[INTERNAL]  Get the operation.

";

%feature("docstring")  casadi::MXNode::getTranspose() const  " [INTERNAL]
Transpose.

";

%feature("docstring")  casadi::SetNonzeros< Add >::numInplace() const  "
[INTERNAL]  Can the operation be performed inplace (i.e. overwrite the
result)

";

%feature("docstring")  casadi::SharedObjectNode::weak() "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring")  casadi::MXNode::getValue() const  " [INTERNAL]  Get
the value (only for scalar constant nodes)

";

%feature("docstring")  casadi::MXNode::isIdentity() const  " [INTERNAL]
Check if identity matrix.

";

%feature("docstring")  casadi::SharedObjectNode::getCount() const  "
[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::MXNode::getInnerProd(const MX &y) const  "
[INTERNAL]  Inner product.

";

%feature("docstring")  casadi::MXNode::getSubAssign(const MX &y, const Slice
&i, const Slice &j) const  " [INTERNAL]  Get submatrix assignment.

";

%feature("docstring")  casadi::MXNode::sameOpAndDeps(const MXNode *node, int
depth) const  " [INTERNAL]  Checks if two nodes have the same operation and
have equivalent dependencies up to a given depth.

";

%feature("docstring")  casadi::SharedObjectNode::isInit() const  "
[INTERNAL]  Check if the object has been initialized.

";

%feature("docstring")  casadi::SetNonzerosSlice2< Add
>::printPart(std::ostream &stream, int part) const  " [INTERNAL]  Print a
part of the expression */.

";

%feature("docstring")  casadi::MXNode::getName() const  " [INTERNAL]  Get
the name.

";

%feature("docstring")  casadi::MXNode::getOutput(int oind) const  "
[INTERNAL]  Get an output.

";

%feature("docstring")  casadi::MXNode::getSetNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Assign the nonzeros of a matrix
to another matrix.

";

%feature("docstring")  casadi::MXNode::nTmp(size_t &ni, size_t &nr) "
[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::MXNode::getSubRef(const Slice &i, const Slice
&j) const  " [INTERNAL]  Get submatrix reference.

";

%feature("docstring")  casadi::MXNode::ndep() const  " [INTERNAL]  Number of
dependencies.

";

%feature("docstring") casadi::SetNonzerosSlice2::~SetNonzerosSlice2 "[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::MXNode::getFunctionInput() const  "
[INTERNAL]  Get function input.

";

%feature("docstring")  casadi::MXNode::getAssertion(const MX &y, const
std::string &fail_message="") const  " [INTERNAL]   Assertion.

";

%feature("docstring")  casadi::MXNode::repr(std::ostream &stream) const  "
[INTERNAL]  Print a representation.

";


// File: classcasadi_1_1SetNonzerosVector.xml
%feature("docstring")  casadi::MXNode::getVertsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a vertical split node (vectors
only)

";

%feature("docstring")  casadi::MXNode::ndep() const  " [INTERNAL]  Number of
dependencies.

";

%feature("docstring")  casadi::SetNonzerosVector< Add >::evaluateD(const
DMatrixPtrV &input, DMatrixPtrV &output, std::vector< int > &itmp,
std::vector< double > &rtmp) " [INTERNAL]  Evaluate the function
numerically.

";

%feature("docstring")  casadi::MXNode::getGetNonzeros(const Sparsity &sp,
const std::vector< int > &nz) const  " [INTERNAL]  Get the nonzeros of
matrix.

";

%feature("docstring")  casadi::MXNode::getUnary(int op) const  " [INTERNAL]
Get a unary operation.

";

%feature("docstring")  casadi::MXNode::getBinarySwitch(int op, const MX &y)
const  " [INTERNAL]  Get a binary operation operation.

";

%feature("docstring")  casadi::MXNode::isValue(double val) const  "
[INTERNAL]  Check if a certain value.

";

%feature("docstring")  casadi::MXNode::hasDep() const  " [INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring")  casadi::SetNonzerosVector< Add >::evaluateGen(const
MatV &input, MatV &output, std::vector< int > &itmp, std::vector< T > &rtmp)
" [INTERNAL]  Evaluate the function (template)

";

%feature("docstring")  casadi::SetNonzerosVector< Add
>::propagateSparsity(DMatrixPtrV &input, DMatrixPtrV &output, bool fwd) "
[INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp,
bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) const  " [INTERNAL]
dependencies - functions that have to be evaluated before this one

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getMultiplication(const MX &y, const
Sparsity &sp_z=Sparsity()) const  " [INTERNAL]   Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring")  casadi::MXNode::shape() const  " [INTERNAL] ";

%feature("docstring")  casadi::SetNonzerosVector< Add
>::printPart(std::ostream &stream, int part) const  " [INTERNAL]  Print a
part of the expression */.

";

%feature("docstring")  casadi::MXNode::getName() const  " [INTERNAL]  Get
the name.

";

%feature("docstring")  casadi::MXNode::getInverse() const  " [INTERNAL]
Inverse.

";

%feature("docstring")  casadi::MXNode::getFunctionOutput() const  "
[INTERNAL]  Get function output.

";

%feature("docstring")  casadi::MXNode::getHorzcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a horizontal concatenation node.

";

%feature("docstring")  casadi::MXNode::getFunctionInput() const  "
[INTERNAL]  Get function input.

";

%feature("docstring")  casadi::MXNode::isOne() const  " [INTERNAL]  Check if
identically one.

";

%feature("docstring")  casadi::MXNode::getMatrixValue() const  " [INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring") casadi::SetNonzerosVector::__nonzero__ "[INTERNAL]
Check the truth value of this node.

";

%feature("docstring")  casadi::MXNode::addDependency(const MX &dep) "
[INTERNAL]  Add a dependency.

";

%feature("docstring")  casadi::MXNode::isUnaryOp() const  " [INTERNAL]
Check if unary operation.

";

%feature("docstring")  casadi::MXNode::simplifyMe(MX &ex) " [INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring")  casadi::MXNode::getNormInf() const  " [INTERNAL]
Infinity norm.

";

%feature("docstring") casadi::SetNonzerosVector< Add
>::SetNonzerosVector(const MX &y, const MX &x, const std::vector< int > &nz)
" [INTERNAL]  Constructor.

";

%feature("docstring")  casadi::MXNode::isBinaryOp() const  " [INTERNAL]
Check if binary operation.

";

%feature("docstring")  casadi::SetNonzeros< Add >::mapping() const  "
[INTERNAL]  Get an IMatrix representation of a GetNonzeros or SetNonzeros
node.

";

%feature("docstring")  casadi::MXNode::getSetNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Assign the nonzeros of a matrix
to another matrix.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep) "
[INTERNAL]  Set unary dependency.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2) " [INTERNAL]  Set binary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2, const MX &dep3) " [INTERNAL]  Set ternary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const std::vector< MX
> &dep) " [INTERNAL]  Set multiple dependencies.

";

%feature("docstring")  casadi::MXNode::getAssertion(const MX &y, const
std::string &fail_message="") const  " [INTERNAL]   Assertion.

";

%feature("docstring")  casadi::SetNonzeros< Add >::getOp() const  "
[INTERNAL]  Get the operation.

";

%feature("docstring")  casadi::MXNode::getNumOutputs() const  " [INTERNAL]
Number of outputs.

";

%feature("docstring")  casadi::MXNode::getOutput(int oind) const  "
[INTERNAL]  Get an output.

";

%feature("docstring")  casadi::SharedObjectNode::assertInit() const  "
[INTERNAL]  Assert that the object has been initialized.

";

%feature("docstring")  casadi::MXNode::isZero() const  " [INTERNAL]  Check
if identically zero.

";

%feature("docstring")  casadi::MXNode::isMultipleOutput() const  "
[INTERNAL]  Check if a multiple output node.

";

%feature("docstring")  casadi::MXNode::setSparsity(const Sparsity &sparsity)
" [INTERNAL]  Set the sparsity.

";

%feature("docstring")  casadi::MXNode::isNonLinear() "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring")  casadi::MXNode::nTmp(size_t &ni, size_t &nr) "
[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::SetNonzerosVector< Add
>::generateOperation(std::ostream &stream, const std::vector< std::string >
&arg, const std::vector< std::string > &res, CodeGenerator &gen) const  "
[INTERNAL]  Generate code for the operation.

";

%feature("docstring")  casadi::MXNode::getDeterminant() const  " [INTERNAL]
Determinant.

";

%feature("docstring")  casadi::SharedObjectNode::weak() "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring")  casadi::SetNonzerosVector< Add >::getAll() const  "
[INTERNAL]  Get all the nonzeros.

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, const std::vector< int > &onz, bool add=false) "
[INTERNAL]  Assign nonzeros (mapping matrix)

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, bool add=false) " [INTERNAL]  Assign nonzeros
(mapping matrix), output indices sequential.

";

%feature("docstring")  casadi::SetNonzerosVector< Add >::clone() const  "
[INTERNAL]  Clone function.

";

%feature("docstring")  casadi::MXNode::getNorm1() const  " [INTERNAL]
1-norm

";

%feature("docstring")  casadi::MXNode::getInnerProd(const MX &y) const  "
[INTERNAL]  Inner product.

";

%feature("docstring")  casadi::MXNode::getHorzsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a horizontal split node.

";

%feature("docstring")  casadi::MXNode::numel() const  " [INTERNAL]  Get
shape.

";

%feature("docstring") casadi::SetNonzerosVector "[INTERNAL]  Add the
nonzeros of a matrix to another matrix.

Joel Andersson

C++ includes: setnonzeros.hpp ";

%feature("docstring")  casadi::MXNode::getVertcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a vertical concatenation node (vectors only)

";

%feature("docstring")  casadi::MXNode::getBinary(int op, const MX &y, bool
scX, bool scY) const  " [INTERNAL]  Get a binary operation operation
(matrix-matrix)

";

%feature("docstring")  casadi::MXNode::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied) " [INTERNAL]  Deep copy
data members.

";

%feature("docstring")  casadi::MXNode::size() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getSubAssign(const MX &y, const Slice
&i, const Slice &j) const  " [INTERNAL]  Get submatrix assignment.

";

%feature("docstring")  casadi::SharedObjectNode::isInit() const  "
[INTERNAL]  Check if the object has been initialized.

";

%feature("docstring")  casadi::MXNode::sparsity() const  " [INTERNAL]  Get
the sparsity.

";

%feature("docstring")  casadi::MXNode::sparsity(int oind) const  "
[INTERNAL]  Get the sparsity of output oind.

";

%feature("docstring")  casadi::SetNonzeros< Add >::numInplace() const  "
[INTERNAL]  Can the operation be performed inplace (i.e. overwrite the
result)

";

%feature("docstring")  casadi::MXNode::size1() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getSubRef(const Slice &i, const Slice
&j) const  " [INTERNAL]  Get submatrix reference.

";

%feature("docstring")  casadi::SharedObjectNode::init() "[INTERNAL]
Initialize the object.

";

%feature("docstring")  casadi::MXNode::size2() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getValue() const  " [INTERNAL]  Get
the value (only for scalar constant nodes)

";

%feature("docstring")  casadi::MXNode::getAddNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Add the nonzeros of a matrix to
another matrix.

";

%feature("docstring")  casadi::MXNode::getTranspose() const  " [INTERNAL]
Transpose.

";

%feature("docstring")  casadi::SharedObjectNode::getCount() const  "
[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::MXNode::getFunction() "[INTERNAL]  Get
function reference.

";

%feature("docstring")  casadi::MXNode::getFunction() const  " [INTERNAL]
Get function reference.

";

%feature("docstring")  casadi::MXNode::getNormF() const  " [INTERNAL]
Frobenius norm.

";

%feature("docstring")  casadi::SetNonzerosVector< Add >::evaluateSX(const
SXPtrV &input, SXPtrV &output, std::vector< int > &itmp, std::vector<
SXElement > &rtmp) " [INTERNAL]  Evaluate the function symbolically (SX)

";

%feature("docstring")  casadi::MXNode::getSolve(const MX &r, bool tr, const
LinearSolver &linear_solver) const  " [INTERNAL]   Solve a system of linear
equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring")  casadi::MXNode::getReshape(const Sparsity &sp) const
" [INTERNAL]   Reshape.

";

%feature("docstring")  casadi::MXNode::getNorm2() const  " [INTERNAL]
Spectral norm.

";

%feature("docstring")  casadi::SetNonzerosVector< Add >::isEqual(const
MXNode *node, int depth) const  " [INTERNAL]  Check if two nodes are
equivalent up to a given depth.

";

%feature("docstring")  casadi::MXNode::getSetSparse(const Sparsity &sp)
const  " [INTERNAL]  Create set sparse.

";

%feature("docstring")  casadi::MXNode::repr(std::ostream &stream) const  "
[INTERNAL]  Print a representation.

";

%feature("docstring")  casadi::SetNonzeros< Add >::evaluateMX(const MXPtrV
&input, MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const
MXPtrVV &adjSeed, MXPtrVV &adjSens, bool output_given) " [INTERNAL]
Evaluate the function symbolically ( MX)

";

%feature("docstring")  casadi::MXNode::evaluateMX(const MXPtrV &input,
MXPtrV &output) " [INTERNAL]  Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring") casadi::SetNonzerosVector::~SetNonzerosVector "[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::MXNode::sameOpAndDeps(const MXNode *node, int
depth) const  " [INTERNAL]  Checks if two nodes have the same operation and
have equivalent dependencies up to a given depth.

";

%feature("docstring")  casadi::MXNode::isIdentity() const  " [INTERNAL]
Check if identity matrix.

";

%feature("docstring")  casadi::MXNode::isOutputNode() const  " [INTERNAL]
Check if evaluation output.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream) const  "
[INTERNAL]  Print a description.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream, long
&remaining_calls) const  " [INTERNAL]  Print expression (make sure number of
calls is not exceeded)

";


// File: classcasadi_1_1SetSparse.xml
%feature("docstring")  casadi::MXNode::getBinary(int op, const MX &y, bool
scX, bool scY) const  " [INTERNAL]  Get a binary operation operation
(matrix-matrix)

";

%feature("docstring")  casadi::MXNode::isIdentity() const  " [INTERNAL]
Check if identity matrix.

";

%feature("docstring") casadi::SetSparse "[INTERNAL]  Change the sparsity of
an expression.

Joel Andersson

C++ includes: set_sparse.hpp ";

%feature("docstring")  casadi::SharedObjectNode::getCount() const  "
[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::SetSparse::generateOperation(std::ostream
&stream, const std::vector< std::string > &arg, const std::vector<
std::string > &res, CodeGenerator &gen) const  " [INTERNAL]  Generate code
for the operation.

";

%feature("docstring") casadi::SetSparse::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring")  casadi::MXNode::simplifyMe(MX &ex) " [INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring")  casadi::MXNode::getSubRef(const Slice &i, const Slice
&j) const  " [INTERNAL]  Get submatrix reference.

";

%feature("docstring")  casadi::SetSparse::propagateSparsity(DMatrixPtrV
&input, DMatrixPtrV &output, bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp,
bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::getVertsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a vertical split node (vectors
only)

";

%feature("docstring") casadi::SetSparse::~SetSparse "[INTERNAL]
Destructor.

";

%feature("docstring")  casadi::MXNode::getAddNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Add the nonzeros of a matrix to
another matrix.

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) const  " [INTERNAL]
dependencies - functions that have to be evaluated before this one

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::numInplace() const  " [INTERNAL]  Can
the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring")  casadi::MXNode::isOne() const  " [INTERNAL]  Check if
identically one.

";

%feature("docstring")  casadi::SetSparse::clone() const  " [INTERNAL]  Clone
function.

";

%feature("docstring")  casadi::MXNode::getNorm1() const  " [INTERNAL]
1-norm

";

%feature("docstring")  casadi::SetSparse::evaluateMX(const MXPtrV &input,
MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV
&adjSeed, MXPtrVV &adjSens, bool output_given) " [INTERNAL]  Evaluate the
function symbolically ( MX)

";

%feature("docstring")  casadi::MXNode::evaluateMX(const MXPtrV &input,
MXPtrV &output) " [INTERNAL]  Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring")  casadi::MXNode::isUnaryOp() const  " [INTERNAL]
Check if unary operation.

";

%feature("docstring")  casadi::SetSparse::evaluateD(const DMatrixPtrV
&input, DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double >
&rtmp) " [INTERNAL]  Evaluate the function numerically.

";

%feature("docstring")  casadi::SetSparse::printPart(std::ostream &stream,
int part) const  " [INTERNAL]  Print a part of the expression.

";

%feature("docstring")  casadi::MXNode::repr(std::ostream &stream) const  "
[INTERNAL]  Print a representation.

";

%feature("docstring")  casadi::MXNode::numel() const  " [INTERNAL]  Get
shape.

";

%feature("docstring") casadi::SetSparse::SetSparse(const MX &x, const
Sparsity &sp) " [INTERNAL]  Constructor.

";

%feature("docstring")  casadi::MXNode::getNorm2() const  " [INTERNAL]
Spectral norm.

";

%feature("docstring")  casadi::MXNode::getSetSparse(const Sparsity &sp)
const  " [INTERNAL]  Create set sparse.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep) "
[INTERNAL]  Set unary dependency.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2) " [INTERNAL]  Set binary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2, const MX &dep3) " [INTERNAL]  Set ternary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const std::vector< MX
> &dep) " [INTERNAL]  Set multiple dependencies.

";

%feature("docstring")  casadi::MXNode::size() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getNormInf() const  " [INTERNAL]
Infinity norm.

";

%feature("docstring")  casadi::MXNode::hasDep() const  " [INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring")  casadi::MXNode::getGetNonzeros(const Sparsity &sp,
const std::vector< int > &nz) const  " [INTERNAL]  Get the nonzeros of
matrix.

";

%feature("docstring")  casadi::MXNode::getSubAssign(const MX &y, const Slice
&i, const Slice &j) const  " [INTERNAL]  Get submatrix assignment.

";

%feature("docstring")  casadi::MXNode::getHorzcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a horizontal concatenation node.

";

%feature("docstring")  casadi::MXNode::size2() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::mapping() const  " [INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring")  casadi::MXNode::getBinarySwitch(int op, const MX &y)
const  " [INTERNAL]  Get a binary operation operation.

";

%feature("docstring")  casadi::MXNode::isEqual(const MXNode *node, int
depth) const  " [INTERNAL]  Check if two nodes are equivalent up to a given
depth.

";

%feature("docstring")  casadi::MXNode::getMatrixValue() const  " [INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring")  casadi::MXNode::getOutput(int oind) const  "
[INTERNAL]  Get an output.

";

%feature("docstring")  casadi::MXNode::getVertcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a vertical concatenation node (vectors only)

";

%feature("docstring")  casadi::MXNode::size1() const  " [INTERNAL] ";

%feature("docstring")  casadi::SetSparse::evaluateGen(const MatV &input,
MatV &output, std::vector< int > &itmp, std::vector< T > &rtmp) " [INTERNAL]
Evaluate the function (template)

";

%feature("docstring")  casadi::MXNode::getTranspose() const  " [INTERNAL]
Transpose.

";

%feature("docstring")  casadi::MXNode::isZero() const  " [INTERNAL]  Check
if identically zero.

";

%feature("docstring")  casadi::MXNode::getHorzsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a horizontal split node.

";

%feature("docstring")  casadi::MXNode::shape() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getNumOutputs() const  " [INTERNAL]
Number of outputs.

";

%feature("docstring")  casadi::MXNode::sparsity() const  " [INTERNAL]  Get
the sparsity.

";

%feature("docstring")  casadi::MXNode::sparsity(int oind) const  "
[INTERNAL]  Get the sparsity of output oind.

";

%feature("docstring")  casadi::MXNode::addDependency(const MX &dep) "
[INTERNAL]  Add a dependency.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream) const  "
[INTERNAL]  Print a description.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream, long
&remaining_calls) const  " [INTERNAL]  Print expression (make sure number of
calls is not exceeded)

";

%feature("docstring")  casadi::MXNode::getMultiplication(const MX &y, const
Sparsity &sp_z=Sparsity()) const  " [INTERNAL]   Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring")  casadi::MXNode::getFunction() "[INTERNAL]  Get
function reference.

";

%feature("docstring")  casadi::MXNode::getFunction() const  " [INTERNAL]
Get function reference.

";

%feature("docstring")  casadi::MXNode::getSetNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Assign the nonzeros of a matrix
to another matrix.

";

%feature("docstring")  casadi::SharedObjectNode::init() "[INTERNAL]
Initialize the object.

";

%feature("docstring")  casadi::MXNode::getUnary(int op) const  " [INTERNAL]
Get a unary operation.

";

%feature("docstring")  casadi::MXNode::getValue() const  " [INTERNAL]  Get
the value (only for scalar constant nodes)

";

%feature("docstring")  casadi::MXNode::getFunctionInput() const  "
[INTERNAL]  Get function input.

";

%feature("docstring")  casadi::MXNode::setSparsity(const Sparsity &sparsity)
" [INTERNAL]  Set the sparsity.

";

%feature("docstring")  casadi::MXNode::isMultipleOutput() const  "
[INTERNAL]  Check if a multiple output node.

";

%feature("docstring")  casadi::MXNode::isOutputNode() const  " [INTERNAL]
Check if evaluation output.

";

%feature("docstring")  casadi::SharedObjectNode::weak() "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring")  casadi::MXNode::nTmp(size_t &ni, size_t &nr) "
[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::MXNode::getInverse() const  " [INTERNAL]
Inverse.

";

%feature("docstring")  casadi::MXNode::isValue(double val) const  "
[INTERNAL]  Check if a certain value.

";

%feature("docstring")  casadi::MXNode::getSolve(const MX &r, bool tr, const
LinearSolver &linear_solver) const  " [INTERNAL]   Solve a system of linear
equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring")  casadi::MXNode::getNormF() const  " [INTERNAL]
Frobenius norm.

";

%feature("docstring")  casadi::MXNode::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied) " [INTERNAL]  Deep copy
data members.

";

%feature("docstring")  casadi::MXNode::getFunctionOutput() const  "
[INTERNAL]  Get function output.

";

%feature("docstring")  casadi::MXNode::getAssertion(const MX &y, const
std::string &fail_message="") const  " [INTERNAL]   Assertion.

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, const std::vector< int > &onz, bool add=false) "
[INTERNAL]  Assign nonzeros (mapping matrix)

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, bool add=false) " [INTERNAL]  Assign nonzeros
(mapping matrix), output indices sequential.

";

%feature("docstring")  casadi::MXNode::getInnerProd(const MX &y) const  "
[INTERNAL]  Inner product.

";

%feature("docstring")  casadi::SetSparse::getOp() const  " [INTERNAL]  Get
the operation.

";

%feature("docstring")  casadi::MXNode::isNonLinear() "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring")  casadi::MXNode::getReshape(const Sparsity &sp) const
" [INTERNAL]   Reshape.

";

%feature("docstring")  casadi::MXNode::sameOpAndDeps(const MXNode *node, int
depth) const  " [INTERNAL]  Checks if two nodes have the same operation and
have equivalent dependencies up to a given depth.

";

%feature("docstring")  casadi::MXNode::getName() const  " [INTERNAL]  Get
the name.

";

%feature("docstring")  casadi::MXNode::ndep() const  " [INTERNAL]  Number of
dependencies.

";

%feature("docstring")  casadi::SharedObjectNode::isInit() const  "
[INTERNAL]  Check if the object has been initialized.

";

%feature("docstring")  casadi::MXNode::isBinaryOp() const  " [INTERNAL]
Check if binary operation.

";

%feature("docstring")  casadi::SharedObjectNode::assertInit() const  "
[INTERNAL]  Assert that the object has been initialized.

";

%feature("docstring")  casadi::MXNode::getDeterminant() const  " [INTERNAL]
Determinant.

";

%feature("docstring")  casadi::SetSparse::evaluateSX(const SXPtrV &input,
SXPtrV &output, std::vector< int > &itmp, std::vector< SXElement > &rtmp) "
[INTERNAL]  Evaluate the function symbolically (SX)

";


// File: classcasadi_1_1SharedObject.xml
%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::SharedObject::checkNode() const  " [INTERNAL]
Assert that the node is pointing to the right type of object

";

%feature("docstring") casadi::SharedObject::SharedObject() "[INTERNAL]
Default constructor.

";

%feature("docstring") casadi::SharedObject::SharedObject(const SharedObject
&ref) " [INTERNAL]  Copy constructor (shallow copy)

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring") casadi::SharedObject::~SharedObject "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::SharedObject "

SharedObject implements a reference counting framework similar for efficient
and easily-maintained memory management.

To use the class, both the SharedObject class (the public class), and the
SharedObjectNode class (the internal class) must be inherited from. It can
be done in two different files and together with memory management, this
approach provides a clear distinction of which methods of the class are to
be considered \"public\", i.e. methods for public use that can be considered
to remain over time with small changes, and the internal memory.

When interfacing a software, which typically includes including some header
file, this is best done only in the file where the internal class is
defined, to avoid polluting the global namespace and other side effects.

The default constructor always means creating a null pointer to an internal
class only. To allocate an internal class (this works only when the internal
class isn't abstract), use the constructor with arguments.

The copy constructor and the assignment operator perform shallow copies
only, to make a deep copy you must use the clone method explicitly. This
will give a shared pointer instance.

In an inheritance hierarchy, you can cast down automatically, e.g. (
SXFunction is a child class of Function): SXFunction derived(...); Function
base = derived;

To cast up, use the shared_cast template function, which works analogously
to dynamic_cast, static_cast, const_cast etc, e.g.: SXFunction derived(...);
Function base = derived; SXFunction derived_from_base =
shared_cast<SXFunction>(base);

A failed shared_cast will result in a null pointer (cf. dynamic_cast)

Joel Andersson

C++ includes: shared_object.hpp ";


// File: classcasadi_1_1SharedObjectNode.xml
%feature("docstring")  casadi::SharedObjectNode::getCount() const  "
[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::SharedObjectNode::SharedObjectNode() "[INTERNAL]  Default constructor.

";

%feature("docstring") casadi::SharedObjectNode::SharedObjectNode(const
SharedObjectNode &node) " [INTERNAL]  Copy constructor.

";

%feature("docstring")  casadi::SharedObjectNode::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring") casadi::SharedObjectNode "[INTERNAL]  Internal class
for the reference counting framework, see comments on the public class.

C++ includes: shared_object.hpp ";

%feature("docstring")  casadi::SharedObjectNode::isInit() const  "
[INTERNAL]  Check if the object has been initialized.

";

%feature("docstring")  casadi::SharedObjectNode::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied) " [INTERNAL]  Deep copy
data members.

";

%feature("docstring")  casadi::SharedObjectNode::init() "[INTERNAL]
Initialize the object.

";

%feature("docstring") casadi::SharedObjectNode::~SharedObjectNode "[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::SharedObjectNode::clone() const  " [INTERNAL]
Make a deep copy of the instance.

";

%feature("docstring")  casadi::SharedObjectNode::weak() "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring")  casadi::SharedObjectNode::assertInit() const  "
[INTERNAL]  Assert that the object has been initialized.

";

%feature("docstring")  casadi::SharedObjectNode::print(std::ostream &stream)
const  " [INTERNAL]  Print a description of the object.

";


// File: classcasadi_1_1SimpleHomotopyNLPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")  casadi::IOInterface<
Function  >::outputSchemeEntry(const std::string &name) const " [INTERNAL]
Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")
casadi::SimpleHomotopyNLPSolver::SimpleHomotopyNLPSolver() "

Default constructor.

";

%feature("docstring")
casadi::SimpleHomotopyNLPSolver::SimpleHomotopyNLPSolver(const Function
&hnlp) "

Create an NLP solver instance.

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::SimpleHomotopyNLPSolver::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring") casadi::SimpleHomotopyNLPSolver "

Solving an NLP homotopy with regular NLP solvers.

Joris Gillis

>Input scheme: casadi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| final_time   | OT_REAL      | 1            |              | casadi::Homo |
|              |              |              |              | topyNLPInter |
|              |              |              |              | nal          |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Simp |
|              |              | red_object\"  | object       | leHomotopyNL |
|              |              |              |              | PInternal    |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: simple_homotopy_nlp_solver.hpp ";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";


// File: classcasadi_1_1SimpleIndefDpleSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring") casadi::SimpleIndefDpleSolver::SimpleIndefDpleSolver()
"

Default constructor.

";

%feature("docstring")
casadi::SimpleIndefDpleSolver::SimpleIndefDpleSolver(const std::vector<
Sparsity > &A, const std::vector< Sparsity > &V) "

Constructor.

Parameters:
-----------

A:  List of sparsities of A_i

V:  List of sparsities of V_i

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::DpleSolver::printStats(std::ostream
&stream=std::cout) const  "

Print solver statistics.

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring") casadi::SimpleIndefDpleSolver "

Solving the Discrete Periodic Lyapunov Equations with regular Linear
Solvers.

Given matrices $A_k$ and symmetric $V_k, k = 0..K-1$

A_k in R^(n x n) V_k in R^n

provides all of $P_k$ that satisfy:

P_0 = A_(K-1)*P_(K-1)*A_(K-1)' + V_k P_k+1 = A_k*P_k*A_k' + V_k  for k =
1..K-1

Uses Periodic Schur Decomposition (simple) and does not assume positive
definiteness. Based on Periodic Lyapunov equations: some applications and
new algorithms. Int. J. Control, vol. 67, pp. 69-87, 1997.

Joris Gillis

>Input scheme: casadi::DPLEInput (DPLE_NUM_IN = 3) [dpleIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| DPLE_A                 | a                      | A matrices (horzcat    |
|                        |                        | when const_dim,        |
|                        |                        | blkdiag otherwise) .   |
+------------------------+------------------------+------------------------+
| DPLE_V                 | v                      | V matrices (horzcat    |
|                        |                        | when const_dim,        |
|                        |                        | blkdiag otherwise) .   |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::DPLEOutput (DPLE_NUM_OUT = 2) [dpleOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| DPLE_P                 | p                      | Lyapunov matrix        |
|                        |                        | (horzcat when          |
|                        |                        | const_dim, blkdiag     |
|                        |                        | otherwise) (Cholesky   |
|                        |                        | of P if pos_def) .     |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| const_dim    | OT_BOOLEAN   | true         | Assume       | casadi::Dple |
|              |              |              | constant     | Internal     |
|              |              |              | dimension of |              |
|              |              |              | P            |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| eps_unstable | OT_REAL      | 0.000        | A margin for | casadi::Dple |
|              |              |              | unstability  | Internal     |
|              |              |              | detection    |              |
+--------------+--------------+--------------+--------------+--------------+
| error_unstab | OT_BOOLEAN   | false        | has          | casadi::Dple |
| le           |              |              | eigenvalues  | Internal     |
|              |              |              | greater than |              |
|              |              |              | 1-eps_unstab |              |
|              |              |              | le           |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | (step|stepsi | casadi::Simp |
|              | TOR          | )            | ze|J|F|normF | leIndefDpleI |
|              |              |              | )            | nternal      |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| pos_def      | OT_BOOLEAN   | false        | Assume P     | casadi::Dple |
|              |              |              | positive     | Internal     |
|              |              |              | definite     |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available monitors
+----------+---------------------------------+
|    Id    |             Used in             |
+==========+=================================+
| F        | casadi::SimpleIndefDpleInternal |
+----------+---------------------------------+
| J        | casadi::SimpleIndefDpleInternal |
+----------+---------------------------------+
| normF    | casadi::SimpleIndefDpleInternal |
+----------+---------------------------------+
| step     | casadi::SimpleIndefDpleInternal |
+----------+---------------------------------+
| stepsize | casadi::SimpleIndefDpleInternal |
+----------+---------------------------------+

Diagrams

C++ includes: simple_indef_dple_solver.hpp ";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::SimpleIndefDpleSolver::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::DpleSolver::clone() const  "

Clone.

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";


// File: classcasadi_1_1Simulator.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::Simulator::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring") casadi::Simulator "

Integrator class.

An \"simulator\" integrates an IVP, stopping at a (fixed) number of grid
points and evaluates a set of output functions at these points. The internal
stepsizes of the integrator need not coincide with the gridpoints.

Simulator is an casadi::Function mapping from casadi::IntegratorInput to n.
\\\\

The output function needs to be a mapping from casadi::DAEInput to n. The
default output has n=1 and the output is the (vectorized) differential state
for each time step.

Joel Andersson

>Input scheme: casadi::IntegratorInput (INTEGRATOR_NUM_IN = 7) [integratorIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_X0          | x0                     | Differential state at  |
|                        |                        | the initial time .     |
+------------------------+------------------------+------------------------+
| INTEGRATOR_P           | p                      | Parameters .           |
+------------------------+------------------------+------------------------+
| INTEGRATOR_Z0          | z0                     | Initial guess for the  |
|                        |                        | algebraic variable .   |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RX0         | rx0                    | Backward differential  |
|                        |                        | state at the final     |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RP          | rp                     | Backward parameter     |
|                        |                        | vector .               |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZ0         | rz0                    | Initial guess for the  |
|                        |                        | backwards algebraic    |
|                        |                        | variable .             |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | (initial|ste | casadi::Simu |
|              | TOR          | )            | p)           | latorInterna |
|              |              |              |              | l            |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available monitors
+---------+---------------------------+
|   Id    |          Used in          |
+=========+===========================+
| initial | casadi::SimulatorInternal |
+---------+---------------------------+
| step    | casadi::SimulatorInternal |
+---------+---------------------------+

Diagrams

C++ includes: simulator.hpp ";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring") casadi::Simulator::Simulator() "

Default constructor.

";

%feature("docstring") casadi::Simulator::Simulator(const Integrator
&integrator, const Function &output_fcn, const std::vector< double > &grid)
"

Constructor.

Parameters:
-----------

output_fcn:  output function which maps to n outputs.

>Input scheme: casadi::DAEInput (DAE_NUM_IN = 5) [daeIn]
+-----------+-------+----------------------------+
| Full name | Short |        Description         |
+===========+=======+============================+
| DAE_X     | x     | Differential state .       |
+-----------+-------+----------------------------+
| DAE_Z     | z     | Algebraic state .          |
+-----------+-------+----------------------------+
| DAE_P     | p     | Parameter .                |
+-----------+-------+----------------------------+
| DAE_T     | t     | Explicit time dependence . |
+-----------+-------+----------------------------+

";

%feature("docstring") casadi::Simulator::Simulator(const Integrator
&integrator, const Function &output_fcn, const Matrix< double > &grid) " ";

%feature("docstring") casadi::Simulator::Simulator(const Integrator
&integrator, const std::vector< double > &grid) "

Output function equal to the state.

";

%feature("docstring") casadi::Simulator::Simulator(const Integrator
&integrator, const Matrix< double > &grid) " ";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";


// File: classcasadi_1_1Slice.xml
%feature("docstring")  casadi::Slice::getAll(int len) const  "

Get a vector of indices.

";

%feature("docstring")  casadi::Slice::getAll(const Slice &outer, int len)
const  "

Get a vector of indices (nested slice)

";

%feature("docstring")  casadi::Slice::print(std::ostream &stream=std::cout)
const  " [INTERNAL]  Print a representation of the object to a stream.

";

%feature("docstring") casadi::Slice "

Class representing a Slice.

Note that Python or Octave do not need to use this class. They can just use
slicing utility from the host language ( M[0:6] in Python, M(1:7) )

C++ includes: slice.hpp ";

%feature("docstring") casadi::Slice::Slice() "

Default constructor - all elements.

";

%feature("docstring") casadi::Slice::Slice(int i) "

A single element.

";

%feature("docstring") casadi::Slice::Slice(int start, int stop, int step=1)
"

A slice.

";

%feature("docstring") casadi::Slice::Slice(const std::vector< int > &v) "

Construct from an index vector (requires isSlice(v) to be true)

";

%feature("docstring") casadi::Slice::Slice(const std::vector< int > &v,
Slice &outer) "

Construct nested slices from an index vector (requires isSlice2(v) to be
true)

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::PrintableObject::repr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a representation of the
object.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";


// File: structcasadi_1_1SmoothChecker.xml
%feature("docstring") casadi::SmoothChecker "[INTERNAL]  Smoothness (by
default true)

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1SmoothChecker_3_01OP__AND_01_4.xml
%feature("docstring") casadi::SmoothChecker< OP_AND > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1SmoothChecker_3_01OP__CEIL_01_4.xml
%feature("docstring") casadi::SmoothChecker< OP_CEIL > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1SmoothChecker_3_01OP__COPYSIGN_01_4.xml
%feature("docstring") casadi::SmoothChecker< OP_COPYSIGN > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1SmoothChecker_3_01OP__EQ_01_4.xml
%feature("docstring") casadi::SmoothChecker< OP_EQ > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1SmoothChecker_3_01OP__FLOOR_01_4.xml
%feature("docstring") casadi::SmoothChecker< OP_FLOOR > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1SmoothChecker_3_01OP__IF__ELSE__ZERO_01_4.xml
%feature("docstring") casadi::SmoothChecker< OP_IF_ELSE_ZERO > " [INTERNAL]
C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1SmoothChecker_3_01OP__LE_01_4.xml
%feature("docstring") casadi::SmoothChecker< OP_LE > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1SmoothChecker_3_01OP__LT_01_4.xml
%feature("docstring") casadi::SmoothChecker< OP_LT > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1SmoothChecker_3_01OP__NE_01_4.xml
%feature("docstring") casadi::SmoothChecker< OP_NE > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1SmoothChecker_3_01OP__NOT_01_4.xml
%feature("docstring") casadi::SmoothChecker< OP_NOT > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1SmoothChecker_3_01OP__OR_01_4.xml
%feature("docstring") casadi::SmoothChecker< OP_OR > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: structcasadi_1_1SmoothChecker_3_01OP__SIGN_01_4.xml
%feature("docstring") casadi::SmoothChecker< OP_SIGN > " [INTERNAL] C++
includes: casadi_calculus.hpp ";


// File: classcasadi_1_1SnoptSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::SnoptSolver::setOptionsFromFile(const
std::string &file) "

Read options from snopt parameter xml.

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")  casadi::SnoptSolver::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::NLPSolver::jacG() "

Access the Jacobian of the constraint function.

>Input scheme: casadi::HessLagInput (HESSLAG_NUM_IN = 5) [hessLagIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| HESSLAG_X              | x                      | Decision variable .    |
+------------------------+------------------------+------------------------+
| HESSLAG_P              | p                      | Fixed parameter .      |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_F          | lam_f                  | Multiplier for f. Just |
|                        |                        | a scalar factor for    |
|                        |                        | the objective that the |
|                        |                        | NLP solver might use   |
|                        |                        | to scale the           |
|                        |                        | objective.             |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_G          | lam_g                  | Multiplier for g .     |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::HessLagOutput (HESSLAG_NUM_OUT = 6) [hessLagOut]
+----------------+--------+------------------------------------------------+
|   Full name    | Short  |                  Description                   |
+================+========+================================================+
| HESSLAG_HESS   | hess   | Hessian of the Lagrangian .                    |
+----------------+--------+------------------------------------------------+
| HESSLAG_F      | f      | Objective function .                           |
+----------------+--------+------------------------------------------------+
| HESSLAG_G      | g      | Constraint function .                          |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_X | grad_x | Gradient of the Lagrangian with respect to x . |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_P | grad_p | Gradient of the Lagrangian with respect to p . |
+----------------+--------+------------------------------------------------+

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::NLPSolver::getReportConstraints() "";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::NLPSolver::reportConstraints(std::ostream
&stream=std::cout) "

Prints out a human readable report about possible constraint violations,
after solving.

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::NLPSolver::gradF() "

Access the objective gradient function>Input scheme: casadi::GradFInput
(GRADF_NUM_IN = 3) [gradFIn] +-----------+-------+---------------------+ |
Full name | Short |     Description     |
+===========+=======+=====================+ | GRADF_X   | x     | Decision
variable . | +-----------+-------+---------------------+ | GRADF_P   | p
| Fixed parameter .   | +-----------+-------+---------------------+

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::SnoptSolver "

interface to SNOPT NLP solver

Solves the following parametric nonlinear program (NLP):min          F(x,p)
x  subject to             LBX <=   x    <= UBX LBG <= G(x,p) <= UBG
p  == P      nx: number of decision variables     ng: number of constraints
np: number of parameters

>Input scheme: casadi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| _iprint      | OT_INTEGER   | 0            |              | casadi::Snop |
|              |              |              |              | tInternal    |
+--------------+--------------+--------------+--------------+--------------+
| _isumm       | OT_INTEGER   | 6            |              | casadi::Snop |
|              |              |              |              | tInternal    |
+--------------+--------------+--------------+--------------+--------------+
| _start       | OT_STRING    | \"Cold\"       | (Cold|Warm)  | casadi::Snop |
|              |              |              |              | tInternal    |
+--------------+--------------+--------------+--------------+--------------+
| con_numeric_ | OT_DICTIONAR | GenericType( | constraints  | casadi::NLPS |
| md           | Y            | )            | to be passed | olverInterna |
|              |              |              | to IPOPT     | l            |
+--------------+--------------+--------------+--------------+--------------+
| contype      | OT_INTEGERVE |              |              | casadi::Snop |
|              | CTOR         |              |              | tInternal    |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_f     | OT_BOOLEAN   | GenericType( | Deprecated,  | casadi::NLPS |
|              |              | )            | use \"expand\" | olverInterna |
|              |              |              | instead.     | l            |
+--------------+--------------+--------------+--------------+--------------+
| expand_g     | OT_BOOLEAN   | GenericType( | Deprecated,  | casadi::NLPS |
|              |              | )            | use \"expand\" | olverInterna |
|              |              |              | instead.     | l            |
+--------------+--------------+--------------+--------------+--------------+
| generate_gra | OT_BOOLEAN   | GenericType( | the gradient | casadi::NLPS |
| dient        |              | )            | of the       | olverInterna |
|              |              |              | objective.   | l            |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_CALLBACK  | GenericType( | Check docume | casadi::NLPS |
| llback       |              | )            | ntation of   | olverInterna |
|              |              |              | Callback .   | l            |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | (eval_nlp|se | casadi::Snop |
|              | TOR          | )            | tup_nlp)     | tInternal    |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| parametric   | OT_BOOLEAN   | GenericType( | input        | casadi::NLPS |
|              |              | )            | argument     | olverInterna |
|              |              |              | appended at  | l            |
|              |              |              | the end,     |              |
|              |              |              | denoting     |              |
|              |              |              | fixed        |              |
|              |              |              | parameters.  |              |
+--------------+--------------+--------------+--------------+--------------+
| print_time   | OT_BOOLEAN   | true         | print        | casadi::Snop |
|              |              |              | information  | tInternal    |
|              |              |              | about        |              |
|              |              |              | execution    |              |
|              |              |              | time         |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available monitors
+-----------+-----------------------+
|    Id     |        Used in        |
+===========+=======================+
| eval_nlp  | casadi::SnoptInternal |
+-----------+-----------------------+
| setup_nlp | casadi::SnoptInternal |
+-----------+-----------------------+

>List of available stats
+----------------+-----------------------+
|       Id       |        Used in        |
+================+=======================+
| n_callback_fun | casadi::SnoptInternal |
+----------------+-----------------------+
| n_eval_grad_f  | casadi::SnoptInternal |
+----------------+-----------------------+
| n_eval_jac_g   | casadi::SnoptInternal |
+----------------+-----------------------+
| return_status  | casadi::SnoptInternal |
+----------------+-----------------------+
| t_callback_fun | casadi::SnoptInternal |
+----------------+-----------------------+
| t_eval_grad_f  | casadi::SnoptInternal |
+----------------+-----------------------+
| t_eval_jac_g   | casadi::SnoptInternal |
+----------------+-----------------------+
| t_mainloop     | casadi::SnoptInternal |
+----------------+-----------------------+

Diagrams

C++ includes: snopt_solver.hpp ";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::NLPSolver::setQPOptions() "

Set options that make the NLP solver more suitable for solving QPs.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")  casadi::NLPSolver::hessLag() "

Access the Hessian of the Lagrangian function.

>Input scheme: casadi::JacGInput (JACG_NUM_IN = 3) [jacGIn]
+-----------+-------+---------------------+
| Full name | Short |     Description     |
+===========+=======+=====================+
| JACG_X    | x     | Decision variable . |
+-----------+-------+---------------------+
| JACG_P    | p     | Fixed parameter .   |
+-----------+-------+---------------------+

>Output scheme: casadi::JacGOutput (JACG_NUM_OUT = 4) [jacGOut]
+-----------+-------+-------------------------------+
| Full name | Short |          Description          |
+===========+=======+===============================+
| JACG_JAC  | jac   | Jacobian of the constraints . |
+-----------+-------+-------------------------------+
| JACG_F    | f     | Objective function .          |
+-----------+-------+-------------------------------+
| JACG_G    | g     | Constraint function .         |
+-----------+-------+-------------------------------+

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::NLPSolver::nlp() "

Access the NLP.

>Input scheme: casadi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring") casadi::SnoptSolver::SnoptSolver() "

Default constructor.

";

%feature("docstring") casadi::SnoptSolver::SnoptSolver(const Function &nlp)
"

Create an NLP solver instance.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";


// File: classcasadi_1_1SOCPInputIOSchemeVector.xml
%feature("docstring")  casadi::IOSchemeVector< M  >::vector() const "
[INTERNAL] ";

%feature("docstring") casadi::SOCPInputIOSchemeVector "[INTERNAL]  Helper
function for 'SOCPInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring") casadi::SOCPInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::SOCPInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring")  casadi::IOSchemeVector< M  >::print(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "
[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::SOCPInputIOSchemeVector< M
>::SOCPInputIOSchemeVector(const std::vector< M > &t) " [INTERNAL] ";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "
[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::SOCPInputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring")  casadi::IOSchemeVector< M  >::repr(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a representation of the object.

";


// File: classcasadi_1_1SOCPOutputIOSchemeVector.xml
%feature("docstring") casadi::SOCPOutputIOSchemeVector "[INTERNAL]  Helper
function for 'SOCPOutput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "
[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::SOCPOutputIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring")  casadi::IOSchemeVector< M  >::vector() const "
[INTERNAL] ";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "
[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::SOCPOutputIOSchemeVector< M
>::SOCPOutputIOSchemeVector(const std::vector< M > &t) " [INTERNAL] ";

%feature("docstring")  casadi::IOSchemeVector< M  >::print(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::IOSchemeVector< M  >::repr(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a representation of the object.

";

%feature("docstring") casadi::SOCPOutputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::SOCPOutputIOSchemeVector::__getitem__ "[INTERNAL] ";


// File: classcasadi_1_1SOCPQCQPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::Function::spInit(bool fwd) " [INTERNAL]  Reset the sparsity
propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::SOCPQCQPSolver "

SOCP QCQP Solver for quadratic programming.

Note: this implementation relies on Cholesky decomposition: Chol(H) = L -> H
= LL' with L lower triangular This requires Pi, H to be positive definite.
Positive semi-definite is not sufficient. Notably, H==0 will not work.

A better implementation would rely on matrix square root, but we need
singular value decomposition to implement that.

This implementation makes use of the epigraph reformulation:*  min f(x) *
x * *   min  t *    x,t  f(x) <= t *

This implementation makes use of the following identity:*  || Gx+h||_2 <=
e'x + f * *  x'(G'G - ee')x + (2 h'G - 2 f e') x + h'h - f <= 0 * where we
put e = [0 0 ... 1] for the quadratic constraint arising from the epigraph
reformulation and e==0 for all other quadratic constraints.

Solves the following strictly convex problem:

min          1/2 x' H x + g' x  x  subject to             1/2 x' Pi x +  qi'
x + ri  <= 0   for i=0..nq-1             LBA <= A x <= UBA LBX <= x   <= UBX
with :       H, Pi sparse (n x n) positive definite       g, qi dense  (n x
1)       ri scalar      n: number of decision variables (x)     nc: number
of linear constraints (A) nq: number of quadratic constraints

If H, Pi is not positive-definite, the solver should throw an error.

Joris Gillis

>Input scheme: casadi::QCQPSolverInput (QCQP_SOLVER_NUM_IN = 13) [qcqpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QCQP_SOLVER_H          | h                      | The square matrix H:   |
|                        |                        | sparse, (n x n). Only  |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical.     |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_G          | g                      | The vector g: dense,   |
|                        |                        | (n x 1) .              |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_P          | p                      | The horizontal stack   |
|                        |                        | of all Pi. Each Pi is  |
|                        |                        | sparse (n x n). Only   |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical.     |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_Q          | q                      | The vertical stack of  |
|                        |                        | all qi: dense, (nq n x |
|                        |                        | 1) .                   |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_R          | r                      | The vertical stack of  |
|                        |                        | all scalars ri (nq x   |
|                        |                        | 1) .                   |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_A          | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_LBA        | lba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_UBA        | uba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_LBX        | lbx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_UBX        | ubx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_X0         | x0                     | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_LAM_X0     | lam_x0                 | dense                  |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::QCQPSolverOutput (QCQP_SOLVER_NUM_OUT = 5) [qcqpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QCQP_SOLVER_X          | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_COST       | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_LAM_A      | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_LAM_X      | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| parallelizat | OT_STRING    | \"serial\"     | (serial|open | casadi::SOCP |
| ion          |              |              | mp|mpi)      | QCQPInternal |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available stats
+-------------------+--------------------------+
|        Id         |         Used in          |
+===================+==========================+
| socp_solver_stats | casadi::SOCPQCQPInternal |
+-------------------+--------------------------+

Diagrams

C++ includes: socp_qcqp_solver.hpp ";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring") casadi::SOCPQCQPSolver::SOCPQCQPSolver() "

Default constructor.

";

%feature("docstring") casadi::SOCPQCQPSolver::SOCPQCQPSolver(const
QCQPStructure &st) "

Constructor.

Parameters:
-----------

st:  Problem structure

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::SOCPQCQPSolver::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::SOCPQCQPSolver::getSolver() "

Access underlying SOCP solver.

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::QCQPSolver::setQPOptions() "

Set options that make the QP solver more suitable for solving LPs.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";


// File: classcasadi_1_1SOCPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::SOCPSolver::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring") casadi::SOCPSolver::SOCPSolver() "

Default constructor.

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::SOCPSolver "

SOCPSolver.

Solves an Second Order Cone Programming (SOCP) problem in standard form.

Primal:

min          c' x  x subject to               || Gi' x + hi ||_2 <= ei' x +
fi  i = 1..m              LBA <= A x <= UBA             LBX <= x   <= UBX
with x ( n x 1)          c ( n x 1 )          Gi sparse (n x ni)          hi
dense (ni x 1)          ei  dense (n x 1) fi  dense (1 x 1)          N =
Sum_i^m ni          A sparse (nc x n) LBA, UBA dense vector (nc x 1)
LBX, UBX dense vector (n x 1)

Joris Gillis

>Input scheme: casadi::SOCPInput (SOCP_SOLVER_NUM_IN = 11) [socpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SOCP_SOLVER_G          | g                      | The horizontal stack   |
|                        |                        | of all matrices Gi: (  |
|                        |                        | n x N) .               |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_H          | h                      | The vertical stack of  |
|                        |                        | all vectors hi: ( N x  |
|                        |                        | 1) .                   |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_E          | e                      | The vertical stack of  |
|                        |                        | all vectors ei: ( nm x |
|                        |                        | 1) .                   |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_F          | f                      | The vertical stack of  |
|                        |                        | all scalars fi: ( m x  |
|                        |                        | 1) .                   |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_C          | c                      | The vector c: ( n x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_A          | a                      | The matrix A: ( nc x   |
|                        |                        | n) .                   |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_LBA        | lba                    | Lower bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_UBA        | uba                    | Upper bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_LBX        | lbx                    | Lower bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_UBX        | ubx                    | Upper bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::SOCPOutput (SOCP_SOLVER_NUM_OUT = 5) [socpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SOCP_SOLVER_X          | x                      | The primal solution (n |
|                        |                        | x 1) .                 |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_COST       | cost                   | The primal optimal     |
|                        |                        | cost (1 x 1) .         |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_LAM_A      | lam_a                  | The dual solution      |
|                        |                        | corresponding to the   |
|                        |                        | linear constraints (nc |
|                        |                        | x 1) .                 |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_LAM_X      | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds (n x 1)  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | (initial|ste | casadi::SOCP |
|              | TOR          | )            | p)           | SolverIntern |
|              |              |              |              | al           |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| print_proble | OT_BOOLEAN   | false        | Print out    | casadi::SOCP |
| m            |              |              | problem      | SolverIntern |
|              |              |              | statement    | al           |
|              |              |              | for          |              |
|              |              |              | debugging.   |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available monitors
+---------+----------------------------+
|   Id    |          Used in           |
+=========+============================+
| initial | casadi::SOCPSolverInternal |
+---------+----------------------------+
| step    | casadi::SOCPSolverInternal |
+---------+----------------------------+

Diagrams

C++ includes: socp_solver.hpp ";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";


// File: classcasadi_1_1SOCPStructIOSchemeVector.xml
%feature("docstring")  casadi::IOSchemeVector< M  >::vector() const "
[INTERNAL] ";

%feature("docstring") casadi::SOCPStructIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::SOCPStructIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring") casadi::SOCPStructIOSchemeVector< T
>::SOCPStructIOSchemeVector(const std::vector< M > &t) " [INTERNAL] ";

%feature("docstring")  casadi::IOSchemeVector< M  >::print(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::IOSchemeVector< M  >::repr(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a representation of the object.

";

%feature("docstring") casadi::SOCPStructIOSchemeVector::__len__ "[INTERNAL]
";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "
[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "
[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring") casadi::SOCPStructIOSchemeVector "[INTERNAL]  Helper
function for 'SOCPStruct'

C++ includes: casadi_types.hpp ";


// File: classcasadi_1_1Solve.xml
%feature("docstring")  casadi::MXNode::sparsity() const  " [INTERNAL]  Get
the sparsity.

";

%feature("docstring")  casadi::MXNode::sparsity(int oind) const  "
[INTERNAL]  Get the sparsity of output oind.

";

%feature("docstring")  casadi::MXNode::getFunctionInput() const  "
[INTERNAL]  Get function input.

";

%feature("docstring")  casadi::MXNode::isOutputNode() const  " [INTERNAL]
Check if evaluation output.

";

%feature("docstring")  casadi::MXNode::isEqual(const MXNode *node, int
depth) const  " [INTERNAL]  Check if two nodes are equivalent up to a given
depth.

";

%feature("docstring")  casadi::MXNode::isBinaryOp() const  " [INTERNAL]
Check if binary operation.

";

%feature("docstring")  casadi::MXNode::getUnary(int op) const  " [INTERNAL]
Get a unary operation.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep) "
[INTERNAL]  Set unary dependency.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2) " [INTERNAL]  Set binary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2, const MX &dep3) " [INTERNAL]  Set ternary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const std::vector< MX
> &dep) " [INTERNAL]  Set multiple dependencies.

";

%feature("docstring")  casadi::MXNode::getTranspose() const  " [INTERNAL]
Transpose.

";

%feature("docstring")  casadi::MXNode::isIdentity() const  " [INTERNAL]
Check if identity matrix.

";

%feature("docstring") casadi::Solve::~Solve "[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::MXNode::isZero() const  " [INTERNAL]  Check
if identically zero.

";

%feature("docstring")  casadi::MXNode::sameOpAndDeps(const MXNode *node, int
depth) const  " [INTERNAL]  Checks if two nodes have the same operation and
have equivalent dependencies up to a given depth.

";

%feature("docstring")  casadi::SharedObjectNode::getCount() const  "
[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::MXNode::addDependency(const MX &dep) "
[INTERNAL]  Add a dependency.

";

%feature("docstring")  casadi::Solve< Tr >::evaluateSX(const SXPtrV &input,
SXPtrV &output, std::vector< int > &itmp, std::vector< SXElement > &rtmp) "
[INTERNAL]  Evaluate the function symbolically (SX)

";

%feature("docstring")  casadi::MXNode::setSparsity(const Sparsity &sparsity)
" [INTERNAL]  Set the sparsity.

";

%feature("docstring")  casadi::MXNode::getHorzcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a horizontal concatenation node.

";

%feature("docstring") casadi::Solve< Tr >::Solve(const MX &r, const MX &A,
const LinearSolver &linear_solver) " [INTERNAL]  Constructor.

";

%feature("docstring")  casadi::MXNode::getBinary(int op, const MX &y, bool
scX, bool scY) const  " [INTERNAL]  Get a binary operation operation
(matrix-matrix)

";

%feature("docstring")  casadi::MXNode::getBinarySwitch(int op, const MX &y)
const  " [INTERNAL]  Get a binary operation operation.

";

%feature("docstring")  casadi::MXNode::hasDep() const  " [INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring")  casadi::MXNode::generateOperation(std::ostream
&stream, const std::vector< std::string > &arg, const std::vector<
std::string > &res, CodeGenerator &gen) const  " [INTERNAL]  Generate code
for the operation.

";

%feature("docstring")  casadi::MXNode::shape() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, const std::vector< int > &onz, bool add=false) "
[INTERNAL]  Assign nonzeros (mapping matrix)

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, bool add=false) " [INTERNAL]  Assign nonzeros
(mapping matrix), output indices sequential.

";

%feature("docstring")  casadi::MXNode::ndep() const  " [INTERNAL]  Number of
dependencies.

";

%feature("docstring")  casadi::MXNode::isOne() const  " [INTERNAL]  Check if
identically one.

";

%feature("docstring")  casadi::MXNode::getAssertion(const MX &y, const
std::string &fail_message="") const  " [INTERNAL]   Assertion.

";

%feature("docstring")  casadi::MXNode::getNumOutputs() const  " [INTERNAL]
Number of outputs.

";

%feature("docstring")  casadi::Solve< Tr >::clone() const  " [INTERNAL]
Clone function.

";

%feature("docstring")  casadi::MXNode::isUnaryOp() const  " [INTERNAL]
Check if unary operation.

";

%feature("docstring")  casadi::SharedObjectNode::weak() "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring")  casadi::Solve< Tr >::getFunction() " [INTERNAL]  Get
function reference.

";

%feature("docstring")  casadi::MXNode::getFunction() const  " [INTERNAL]
Get function reference.

";

%feature("docstring")  casadi::MXNode::getSetSparse(const Sparsity &sp)
const  " [INTERNAL]  Create set sparse.

";

%feature("docstring")  casadi::MXNode::getNormInf() const  " [INTERNAL]
Infinity norm.

";

%feature("docstring")  casadi::MXNode::getInverse() const  " [INTERNAL]
Inverse.

";

%feature("docstring")  casadi::MXNode::getHorzsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a horizontal split node.

";

%feature("docstring")  casadi::MXNode::getReshape(const Sparsity &sp) const
" [INTERNAL]   Reshape.

";

%feature("docstring")  casadi::MXNode::getVertsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a vertical split node (vectors
only)

";

%feature("docstring")  casadi::MXNode::getSetNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Assign the nonzeros of a matrix
to another matrix.

";

%feature("docstring")  casadi::Solve< Tr >::evaluateD(const DMatrixPtrV
&input, DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double >
&rtmp) " [INTERNAL]  Evaluate the function numerically.

";

%feature("docstring")  casadi::MXNode::getAddNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Add the nonzeros of a matrix to
another matrix.

";

%feature("docstring")  casadi::MXNode::size() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::simplifyMe(MX &ex) " [INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring")  casadi::MXNode::getSubAssign(const MX &y, const Slice
&i, const Slice &j) const  " [INTERNAL]  Get submatrix assignment.

";

%feature("docstring")  casadi::SharedObjectNode::assertInit() const  "
[INTERNAL]  Assert that the object has been initialized.

";

%feature("docstring")  casadi::MXNode::getName() const  " [INTERNAL]  Get
the name.

";

%feature("docstring")  casadi::MXNode::isValue(double val) const  "
[INTERNAL]  Check if a certain value.

";

%feature("docstring")  casadi::MXNode::getMultiplication(const MX &y, const
Sparsity &sp_z=Sparsity()) const  " [INTERNAL]   Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring")  casadi::Solve< Tr >::evaluateMX(const MXPtrV &input,
MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV
&adjSeed, MXPtrVV &adjSens, bool output_given) " [INTERNAL]  Evaluate the
function symbolically ( MX)

";

%feature("docstring")  casadi::MXNode::evaluateMX(const MXPtrV &input,
MXPtrV &output) " [INTERNAL]  Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring")  casadi::MXNode::isMultipleOutput() const  "
[INTERNAL]  Check if a multiple output node.

";

%feature("docstring") casadi::Solve "[INTERNAL]  An MX atomic for linear
solver solution: x = r * A^-1 or x = r * A^-T.

Forward derivatives: x_dot = (r_dot - x * A_dot) * A^-1

Adjoint derivatives: r_bar = x_bar * A^-T A_bar = -x^T * r_bar

Joel Andersson

C++ includes: solve.hpp ";

%feature("docstring")  casadi::MXNode::numel() const  " [INTERNAL]  Get
shape.

";

%feature("docstring")  casadi::MXNode::size1() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::mapping() const  " [INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring")  casadi::Solve< Tr >::print(std::ostream &stream, long
&remaining_calls) const  " [INTERNAL]  Print expression (make sure number of
calls is not exceeded)

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream) const  "
[INTERNAL]  Print a description.

";

%feature("docstring")  casadi::Solve< Tr >::printPart(std::ostream &stream,
int part) const  " [INTERNAL]  Print a part of the expression.

";

%feature("docstring")  casadi::MXNode::getMatrixValue() const  " [INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring")  casadi::MXNode::getDeterminant() const  " [INTERNAL]
Determinant.

";

%feature("docstring")  casadi::Solve< Tr >::getOp() const  " [INTERNAL]  Get
the operation.

";

%feature("docstring")  casadi::SharedObjectNode::init() "[INTERNAL]
Initialize the object.

";

%feature("docstring")  casadi::MXNode::getValue() const  " [INTERNAL]  Get
the value (only for scalar constant nodes)

";

%feature("docstring")  casadi::MXNode::getGetNonzeros(const Sparsity &sp,
const std::vector< int > &nz) const  " [INTERNAL]  Get the nonzeros of
matrix.

";

%feature("docstring")  casadi::Solve< Tr >::nTmp(size_t &ni, size_t &nr) "
[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::Solve< Tr >::numInplace() const  " [INTERNAL]
Can the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring")  casadi::MXNode::isNonLinear() "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring")  casadi::MXNode::getNormF() const  " [INTERNAL]
Frobenius norm.

";

%feature("docstring")  casadi::MXNode::getFunctionOutput() const  "
[INTERNAL]  Get function output.

";

%feature("docstring")  casadi::MXNode::size2() const  " [INTERNAL] ";

%feature("docstring")  casadi::Solve< Tr >::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied) " [INTERNAL]  Deep copy
data members.

";

%feature("docstring")  casadi::SharedObjectNode::isInit() const  "
[INTERNAL]  Check if the object has been initialized.

";

%feature("docstring")  casadi::MXNode::getInnerProd(const MX &y) const  "
[INTERNAL]  Inner product.

";

%feature("docstring")  casadi::MXNode::getSubRef(const Slice &i, const Slice
&j) const  " [INTERNAL]  Get submatrix reference.

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) const  " [INTERNAL]
dependencies - functions that have to be evaluated before this one

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getVertcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a vertical concatenation node (vectors only)

";

%feature("docstring") casadi::Solve::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring")  casadi::MXNode::repr(std::ostream &stream) const  "
[INTERNAL]  Print a representation.

";

%feature("docstring")  casadi::MXNode::getNorm2() const  " [INTERNAL]
Spectral norm.

";

%feature("docstring")  casadi::MXNode::getSolve(const MX &r, bool tr, const
LinearSolver &linear_solver) const  " [INTERNAL]   Solve a system of linear
equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring")  casadi::MXNode::getOutput(int oind) const  "
[INTERNAL]  Get an output.

";

%feature("docstring")  casadi::MXNode::getNorm1() const  " [INTERNAL]
1-norm

";

%feature("docstring")  casadi::Solve< Tr >::propagateSparsity(DMatrixPtrV
&input, DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double >
&rtmp, bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, bool fwd) " [INTERNAL]  Propagate sparsity, no work.

";


// File: classcasadi_1_1SparseStorage.xml
%feature("docstring")  casadi::SparseStorage< DataType >::sanityCheck(bool
complete=false) const  "

Check if the dimensions and colind,row vectors are compatible.

Parameters:
-----------

complete:  set to true to also check elementwise throws an error as possible
result

";

%feature("docstring")  casadi::SparseStorage< DataType >::end() " [INTERNAL]
";

%feature("docstring")  casadi::SparseStorage< DataType >::end() const  "
[INTERNAL] ";

%feature("docstring")  casadi::SparseStorage< DataType >::sparsityRef() "

Access the sparsity, make a copy if there are multiple references to it.

";

%feature("docstring")  casadi::SparseStorage< DataType >::front() "
[INTERNAL]  Get references to beginning and end.

";

%feature("docstring")  casadi::SparseStorage< DataType >::front() const  "
[INTERNAL] ";

%feature("docstring")  casadi::SparseStorage< DataType >::sparsity() const
"

Const access the sparsity - reference to data member.

";

%feature("docstring")  casadi::SparseStorage< DataType >::hasNZ(int rr, int
cc) const  "

Returns true if the matrix has a non-zero at location rr,cc.

";

%feature("docstring")  casadi::SparseStorage< DataType >::back() "
[INTERNAL] ";

%feature("docstring")  casadi::SparseStorage< DataType >::back() const  "
[INTERNAL] ";

%feature("docstring")  casadi::SparseStorage< DataType >::clear() " ";

%feature("docstring")  casadi::SparseStorage< DataType >::reserve(int nnz) "
";

%feature("docstring")  casadi::SparseStorage< DataType >::reserve(int nnz,
int ncol) " ";

%feature("docstring")  casadi::SparseStorage< DataType >::getElement(int rr,
int cc=0) const  "

get an element, do not allocate

";

%feature("docstring")  casadi::SparseStorage< DataType >::rbegin() "
[INTERNAL] ";

%feature("docstring")  casadi::SparseStorage< DataType >::rbegin() const  "
[INTERNAL] ";

%feature("docstring")  casadi::SparseStorage< DataType >::elem(int rr, int
cc=0) const  " [INTERNAL]  get an element

";

%feature("docstring")  casadi::SparseStorage< DataType >::elem(int rr, int
cc=0) " [INTERNAL]  get a reference to an element

";

%feature("docstring")  casadi::SparseStorage< DataType >::begin() "
[INTERNAL]  Get iterators to beginning and end.

";

%feature("docstring")  casadi::SparseStorage< DataType >::begin() const  "
[INTERNAL] ";

%feature("docstring")  casadi::SparseStorage< DataType >::colind() const  "
";

%feature("docstring")  casadi::SparseStorage< DataType >::colind(int col)
const  " ";

%feature("docstring")  casadi::SparseStorage< DataType >::toScalar() const
"

Convert to scalar type.

";

%feature("docstring") casadi::SparseStorage "C++ includes:
sparse_storage.hpp ";

%feature("docstring")  casadi::SparseStorage< DataType >::data() "

Access the non-zero elements.

";

%feature("docstring")  casadi::SparseStorage< DataType >::data() const  "

Const access the non-zero elements.

";

%feature("docstring") casadi::SparseStorage< DataType >::SparseStorage(const
Sparsity &sparsity, const DataType &val=DataType(0)) "

Sparse matrix with a given sparsity

";

%feature("docstring") casadi::SparseStorage< DataType >::SparseStorage() "

constructors

empty 0-by-0 matrix constructor

";

%feature("docstring") casadi::SparseStorage< DataType >::SparseStorage(const
SparseStorage< DataType > &m) "

Copy constructor.

";

%feature("docstring") casadi::SparseStorage< DataType >::SparseStorage(const
std::vector< std::vector< DataType > > &m) "

Dense matrix constructor with data given as vector of vectors.

";

%feature("docstring") casadi::SparseStorage< DataType >::SparseStorage(const
Sparsity &sparsity, const std::vector< DataType > &d) "

Sparse matrix with a given sparsity and non-zero elements.

";

%feature("docstring") casadi::SparseStorage< DataType >::SparseStorage(const
std::vector< DataType > &x) "

Construct from a vector.

Thanks to implicit conversion, you can pretend that SparseStorage(const
SXElement& x); exists. Note: above remark applies only to C++, not python or
octave interfaces

";

%feature("docstring") casadi::SparseStorage< DataType >::SparseStorage(const
std::vector< DataType > &x, int nrow, int ncol) "

Construct dense matrix from a vector with the elements in column major
ordering.

";

%feature("docstring") casadi::SparseStorage< DataType >::SparseStorage(const
SparseStorage< A > &x) "

Create a matrix from a matrix with a different type of matrix entries
(assuming that the scalar conversion is valid)

";

%feature("docstring") casadi::SparseStorage< DataType >::SparseStorage(const
std::vector< A > &x) "

Create an expression from an stl vector.

";

%feature("docstring") casadi::SparseStorage< DataType >::SparseStorage(const
std::vector< A > &x, int nrow, int ncol) "

Create a non-vector expression from an stl vector.

";

%feature("docstring")  casadi::SparseStorage< DataType >::row() const  " ";

%feature("docstring")  casadi::SparseStorage< DataType >::row(int el) const
" ";

%feature("docstring")  casadi::SparseStorage< DataType >::resize(int nrow,
int ncol) " ";

%feature("docstring")  casadi::SparseStorage< DataType >::rend() "
[INTERNAL] ";

%feature("docstring")  casadi::SparseStorage< DataType >::rend() const  "
[INTERNAL] ";

%feature("docstring")  casadi::SparseStorage< DataType >::at(int k) const  "
[INTERNAL]  Get a non-zero element.

";

%feature("docstring")  casadi::SparseStorage< DataType >::at(int k) "
[INTERNAL]  Access a non-zero element.

";


// File: classcasadi_1_1Sparsity.xml


/*  Check if two sparsity patterns are identical  */

/*  Size and element counting  */ %feature("docstring")
casadi::SharedObject::assertInit() const  " [INTERNAL]  Assert that it is
initialized

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::Sparsity::enlargeRows(int nrow, const
std::vector< int > &jj) "

Enlarge the matrix along the first dimension (i.e. insert rows)

";

%feature("docstring") casadi::Sparsity "

General sparsity class.

The storage format is a compressed column storage (CCS) format.  In this
format, the structural non-zero elements are stored in column-major order,
starting from the upper left corner of the matrix and ending in the lower
right corner.

In addition to the dimension ( size1(), size2()), (i.e. the number of rows
and the number of columns respectively), there are also two vectors of
integers:

\"colind\" [length size2()+1], which contains the index to the first non-
zero element on or after the corresponding column. All the non-zero elements
of a particular i are thus the elements with index el that fulfills:
colind[i] <= el < colind[i+1].

\"row\" [same length as the number of non-zero elements, size()] The rows
for each of the structural non-zeros.

Note that with this format, it is cheap to loop over all the non-zero
elements of a particular column, at constant time per element, but expensive
to jump to access a location (i,j).

If the matrix is dense, i.e. length(row) == size1()*size2(), the format
reduces to standard dense column major format, which allows access to an
arbitrary element in constant time.

Since the object is reference counted (it inherits from SharedObject),
several matrices are allowed to share the same sparsity pattern.

The implementations of some methods of this class has been taken from the
CSparse package and modified to use C++ standard library and CasADi data
structures.

See:   Matrix

Joel Andersson

C++ includes: sparsity.hpp ";

%feature("docstring")  casadi::Sparsity::reCache() "[INTERNAL]  Check if
there is an identical copy of the sparsity pattern in the cache, and if so,
make a shallow copy of that one.

";

%feature("docstring")  casadi::Sparsity::getDiag(std::vector< int >
&output_mapping) const  "

Get the diagonal of the matrix/create a diagonal matrix (mapping will
contain the nonzero mapping) When the input is square, the diagonal elements
are returned. If the input is vector-like, a diagonal matrix is constructed
with it.

";

%feature("docstring")  casadi::Sparsity::getElements(bool col_major=true)
const  "

Get the location of all non-zero elements as they would appear in a Dense
matrix A : DenseMatrix 4 x 3 B : SparseMatrix 4 x 3 , 5 structural non-
zeros.

k = A.getElements() A[k] will contain the elements of A that are non- zero
in B

";

%feature("docstring")  casadi::Sparsity::getElements(std::vector< int >
&loc, bool col_major=true) const  "

Get the location of all nonzero elements (inplace version)

";

%feature("docstring")  casadi::Sparsity::isSquare() const  "

Is square?

";

%feature("docstring")  casadi::Sparsity::rowsSequential(bool strictly=true)
const  "

Do the rows appear sequentially on each column.

Parameters:
-----------

strictly:  if true, then do not allow multiple entries

";

%feature("docstring")  casadi::Sparsity::set(T *data, const T *val_data,
const Sparsity &val_sp) const  " [INTERNAL]  Assign the nonzero entries of
one sparsity pattern to the nonzero entries of another sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::set(DataType *data, const DataType
*val_data, const Sparsity &val_sp) const  " [INTERNAL] ";

%feature("docstring")  casadi::Sparsity::isSymmetric() const  "

Is symmetric?

";

%feature("docstring")  casadi::Sparsity::reshape(int nrow, int ncol) const
"

Reshape a sparsity, order of nonzeros remains the same.

";

%feature("docstring")  casadi::Sparsity::patternProduct(const Sparsity
&x_trans, std::vector< std::vector< std::pair< int, int > > >
&output_mapping) const  "

Sparsity pattern for a matrix-matrix product Returns the sparsity pattern
resulting from pre-multiplying the pattern with the transpose of x. Returns
the new sparsity pattern as well as a mapping with the same length as the
number of non-zero elements The mapping contains a vector of the index pairs
that makes up the scalar products for each non-zero.

";

%feature("docstring")  casadi::Sparsity::patternProduct(const Sparsity
&x_trans) const  "

Sparsity pattern for a matrix-matrix product Returns the sparsity pattern
resulting from pre-multiplying the pattern with the transpose of x. Returns
the new sparsity pattern as well as a mapping with the same length as the
number of non-zero elements The mapping contains a vector of the index pairs
that makes up the scalar products for each non-zero.

";

%feature("docstring")  casadi::Sparsity::enlargeColumns(int ncol, const
std::vector< int > &ii) "

Enlarge the matrix along the second dimension (i.e. insert columns)

";

%feature("docstring")  casadi::Sparsity::hash() const  " ";

%feature("docstring")  casadi::Sparsity::resize(int nrow, int ncol) "

Resize.

";

%feature("docstring")  casadi::Sparsity::isTril() const  "

Is lower triangular?

";

%feature("docstring")  casadi::Sparsity::shape() const  " [INTERNAL]  Get
the shape.

";

%feature("docstring")  casadi::Sparsity::getLowerNZ() const  "

Get nonzeros in lower triangular part.

";

%feature("docstring")  casadi::Sparsity::getUpperNZ() const  "

Get nonzeros in upper triangular part.

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::Sparsity::sanityCheck(bool complete=false)
const  "

Check if the dimensions and colind, row vectors are compatible.

Parameters:
-----------

complete:  set to true to also check elementwise throws an error as possible
result

";

%feature("docstring")  casadi::Sparsity::bor(T *data, const T *val_data,
const Sparsity &val_sp) const  " [INTERNAL]  Bitwise or of the nonzero
entries of one sparsity pattern and the nonzero entries of another sparsity
pattern.

";

%feature("docstring")  casadi::Sparsity::bor(DataType *data, const DataType
*val_data, const Sparsity &val_sp) const  " [INTERNAL] ";

%feature("docstring")  casadi::Sparsity::T() const  " [INTERNAL]   Transpose
the matrix (shorthand)

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring") casadi::Sparsity::Sparsity(int dummy=0) "

Default constructor.

";

%feature("docstring") casadi::Sparsity::Sparsity(int nrow, int ncol, const
std::vector< int > &colind, const std::vector< int > &row) "

Construct from sparsity pattern vectors given in compressed column storage
format.

";

%feature("docstring")  casadi::Sparsity::isTranspose(const Sparsity &y)
const  "

Check if the sparsity is the transpose of another.

";

%feature("docstring")  casadi::Sparsity::isDense() const  "

Is dense?

";

%feature("docstring")  casadi::Sparsity::colind() const  "

Get a reference to the colindex of all column element (see class
description)

";

%feature("docstring")  casadi::Sparsity::colind(int i) const  "

Get a reference to the colindex of col i (see class description)

";

%feature("docstring")
casadi::Sparsity::stronglyConnectedComponents(std::vector< int >
&output_index, std::vector< int > &output_offset) const  "

Find the strongly connected components of the bigraph defined by the
sparsity pattern of a square matrix.

See Direct Methods for Sparse Linear Systems by Davis (2006). Returns:
Number of components

Offset for each components (length: 1 + number of components)

Indices for each components, component i has indices index[offset[i]], ...,
index[offset[i+1]]

In the case that the matrix is symmetric, the result has a particular
interpretation: Given a symmetric matrix A and n =
A.stronglyConnectedComponents(p,r)

=> A[p,p] will appear block-diagonal with n blocks and with the indices of
the block boundaries to be found in r.

";

%feature("docstring")  casadi::Sparsity::patternUnion(const Sparsity &y,
std::vector< unsigned char > &output_mapping) const  "

Union of two sparsity patterns.

";

%feature("docstring")  casadi::Sparsity::patternUnion(const Sparsity &y)
const  "

Union of two sparsity patterns.

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::Sparsity::getCCS(std::vector< int >
&output_colind, std::vector< int > &output_row) const  "

Get the sparsity in compressed column storage (CCS) format.

";

%feature("docstring")  casadi::Sparsity::rowRef() "[INTERNAL]  Get a
reference to the rows of all non-zero element (copy if not unique!)

";

%feature("docstring")  casadi::Sparsity::numel() const  "

The total number of elements, including structural zeros, i.e.
size2()*size1()

See:   size()

";

%feature("docstring")  casadi::Sparsity::getCRS(std::vector< int >
&output_rowind, std::vector< int > &output_col) const  "

Get the sparsity in compressed row storage (CRS) format.

";

%feature("docstring")  casadi::Sparsity::dulmageMendelsohn(std::vector< int
> &output_rowperm, std::vector< int > &output_colperm, std::vector< int >
&output_rowblock, std::vector< int > &output_colblock, std::vector< int >
&output_coarse_rowblock, std::vector< int > &output_coarse_colblock, int
seed=0) const  "

Compute the Dulmage-Mendelsohn decomposition See Direct Methods for Sparse
Linear Systems by Davis (2006).

Dulmage-Mendelsohn will try to bring your matrix into lower block-
triangular (LBT) form. It will not care about the distance of off- diagonal
elements to the diagonal: there is no guarantee you will get a block-
diagonal matrix if you supply a randomly permuted block- diagonal matrix.

If your matrix is symmetrical, this method is of limited use; permutation
can make it non-symmetric.

See:   stronglyConnectedComponents

";

%feature("docstring")  casadi::Sparsity::sparse(int nrow, int ncol=1) "

Create a sparse (empty) rectangular sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::sparse(const std::pair< int, int >
&rc) "

Create a sparse (empty) rectangular sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::isReshape(const Sparsity &y) const
"

Check if the sparsity is a reshape of another.

";

%feature("docstring")  casadi::Sparsity::getTriplet(std::vector< int >
&output_row, std::vector< int > &output_col) const  "

Get the sparsity in sparse triplet format.

";

%feature("docstring")  casadi::Sparsity::appendColumns(const Sparsity &sp) "

Append another sparsity patten horizontally.

";

%feature("docstring")  casadi::Sparsity::patternIntersection(const Sparsity
&y, std::vector< unsigned char > &output_mapping) const  "

Intersection of two sparsity patterns Returns the new sparsity pattern as
well as a mapping with the same length as the number of non-zero elements
The value is 1 if the non-zero comes from the first (i.e. this) object, 2 if
it is from the second and 3 (i.e. 1 | 2) if from both.

";

%feature("docstring")  casadi::Sparsity::patternIntersection(const Sparsity
&y) const  "

Intersection of two sparsity patterns Returns the new sparsity pattern as
well as a mapping with the same length as the number of non-zero elements
The value is 1 if the non-zero comes from the first (i.e. this) object, 2 if
it is from the second and 3 (i.e. 1 | 2) if from both.

";

%feature("docstring")  casadi::Sparsity::unidirectionalColoring(const
Sparsity &AT=Sparsity(), int cutoff=std::numeric_limits< int >::max()) const
"

Perform a unidirectional coloring: A greedy distance-2 coloring algorithm
(Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN)

";

%feature("docstring")  casadi::Sparsity::removeDuplicates(std::vector< int >
&mapping) "

Remove duplicate entries.

The same indices will be removed from the mapping vector, which must have
the same length as the number of nonzeros

";

%feature("docstring")  casadi::Sparsity::getTriu(bool includeDiagonal=true)
const  "

Get upper triangular part.

";

%feature("docstring")  casadi::Sparsity::getTril(bool includeDiagonal=true)
const  "

Get lower triangular part.

";

%feature("docstring")  casadi::Sparsity::isDiagonal() const  "

Is diagonal?

";

%feature("docstring")  casadi::Sparsity::makeDense(std::vector< int >
&mapping) const  "

Make a patten dense.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::Sparsity::dense(int nrow, int ncol=1) "

Create a dense rectangular sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::dense(const std::pair< int, int >
&rc) "

Create a dense rectangular sparsity pattern.

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::Sparsity::printCompact(std::ostream
&stream=std::cout) const  "

Print a compact description of the sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::diag(int nrow) "

Create diagonal sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::diag(int nrow, int ncol) "

Create diagonal sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::diag(const std::pair< int, int >
&rc) "

Create diagonal sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::sub(const std::vector< int > &jj,
const std::vector< int > &ii, std::vector< int > &output_mapping) const  "

Get a submatrix.

Returns the sparsity of the submatrix, with a mapping such that submatrix[k]
= originalmatrix[mapping[k]]

";

%feature("docstring")  casadi::Sparsity::unit(int n, int el) "

Create the sparsity pattern for a unit vector of length n and a nonzero on
position el.

";

%feature("docstring")  casadi::Sparsity::append(const Sparsity &sp) "

Append another sparsity patten vertically (NOTE: only efficient if vector)

";

%feature("docstring")  casadi::Sparsity::isScalar(bool
scalar_and_dense=false) const  "

Is scalar?

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::Sparsity::add(T *data, const T *val_data,
const Sparsity &val_sp) const  " [INTERNAL]  Add the nonzero entries of one
sparsity pattern to the nonzero entries of another sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::add(DataType *data, const DataType
*val_data, const Sparsity &val_sp) const  " [INTERNAL] ";

%feature("docstring")  casadi::Sparsity::row() const  "

Get a reference to row-vector, containing rows for all non-zero elements
(see class description)

";

%feature("docstring")  casadi::Sparsity::row(int el) const  "

Get the row of a non-zero element.

";

%feature("docstring")  casadi::Sparsity::spyMatlab(const std::string &mfile)
const  "

Generate a script for Matlab or Octave which visualizes the sparsity using
the spy command.

";

%feature("docstring")  casadi::Sparsity::starColoring(int ordering=1, int
cutoff=std::numeric_limits< int >::max()) const  "

Perform a star coloring of a symmetric matrix: A greedy distance-2 coloring
algorithm (Algorithm 4.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN) Ordering
options: None (0), largest first (1)

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::Sparsity::getNZInplace(std::vector< int >
&indices) const  "

Get the nonzero index for a set of elements The index vector is used both
for input and outputs and must be sorted by increasing nonzero index, i.e.
column-wise. Elements not found in the sparsity pattern are set to -1.

";

%feature("docstring")  casadi::Sparsity::largestFirstOrdering() const  "

Order the cols by decreasing degree.

";

%feature("docstring")  casadi::Sparsity::transpose() const  "

Transpose the matrix.

";

%feature("docstring")  casadi::Sparsity::transpose(std::vector< int >
&mapping, bool invert_mapping=false) const  "

Transpose the matrix and get the reordering of the non-zero entries.

Parameters:
-----------

mapping:  the non-zeros of the original matrix for each non-zero of the new
matrix

";

%feature("docstring")  casadi::Sparsity::isVector() const  "

Is vector (i.e. size2()==1)

";

%feature("docstring")  casadi::Sparsity::pmult(const std::vector< int > &p,
bool permute_rows=true, bool permute_cols=true, bool
invert_permutation=false) const  "

Permute rows and/or columns Multiply the sparsity with a permutation matrix
from the left and/or from the right P * A * trans(P), A * trans(P) or A *
trans(P) with P defined by an index vector containing the row for each col.
As an alternative, P can be transposed (inverted).

";

%feature("docstring")  casadi::Sparsity::starColoring2(int ordering=1, int
cutoff=std::numeric_limits< int >::max()) const  "

Perform a star coloring of a symmetric matrix: A new greedy distance-2
coloring algorithm (Algorithm 4.1 in A. H. GEBREMEDHIN, A. TARAFDAR, F.
MANNE, A. POTHEN) Ordering options: None (0), largest first (1)

";

%feature("docstring")  casadi::Sparsity::isSingular() const  "

Check whether the sparsity-pattern indicates structural singularity.

";

%feature("docstring")  casadi::Sparsity::patternCombine(const Sparsity &y,
bool f0x_is_zero, bool function0_is_zero, std::vector< unsigned char >
&output_mapping) const  "

Combine two sparsity patterns Returns the new sparsity pattern as well as a
mapping with the same length as the number of non-zero elements The mapping
matrix contains the arguments for each nonzero, the first bit indicates if
the first argument is nonzero, the second bit indicates if the second
argument is nonzero (note that none of, one of or both of the arguments can
be nonzero)

";

%feature("docstring")  casadi::Sparsity::patternCombine(const Sparsity &y,
bool f0x_is_zero, bool function0_is_zero) const  "

Combine two sparsity patterns Returns the new sparsity pattern as well as a
mapping with the same length as the number of non-zero elements The mapping
matrix contains the arguments for each nonzero, the first bit indicates if
the first argument is nonzero, the second bit indicates if the second
argument is nonzero (note that none of, one of or both of the arguments can
be nonzero)

";

%feature("docstring")  casadi::Sparsity::dimString() const  "

Get the dimension as a string.

";

%feature("docstring")  casadi::Sparsity::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::Sparsity::isTriu() const  "

Is upper triangular?

";

%feature("docstring")  casadi::Sparsity::compressed(const std::vector< int >
&v) "

Create from a single vector containing the pattern in compressed column
storage format: The format: The first two entries are the number of rows
(nrow) and columns (ncol) The next ncol+1 entries are the column offsets
(colind). Note that the last element, colind[ncol], gives the number of
nonzeros The last colind[ncol] entries are the row indices

";

%feature("docstring")  casadi::Sparsity::compressed(const int *v) "
[INTERNAL]  Create from a single vector containing the pattern in compressed
column storage format: The format: The first two entries are the number of
rows (nrow) and columns (ncol) The next ncol+1 entries are the column
offsets (colind). Note that the last element, colind[ncol], gives the number
of nonzeros The last colind[ncol] entries are the row indices

";

%feature("docstring")  casadi::Sparsity::isEqual(const Sparsity &y) const  "
";

%feature("docstring")  casadi::Sparsity::isEqual(int nrow, int ncol, const
std::vector< int > &colind, const std::vector< int > &row) const  " ";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::Sparsity::enlarge(int nrow, int ncol, const
std::vector< int > &jj, const std::vector< int > &ii) "

Enlarge matrix Make the matrix larger by inserting empty rows and columns,
keeping the existing non-zeros.

For the matrices A to B A(m,n) length(jj)=m , length(ii)=n B(nrow,ncol)

A=enlarge(m,n,ii,jj) makes sure that

B[jj,ii] == A

";

%feature("docstring")  casadi::Sparsity::sizeL() const  "

Number of non-zeros in the lower triangular half, i.e. the number of
elements (i,j) with j<=i.

";

%feature("docstring")  casadi::Sparsity::compress() const  "

Compress a sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::colindRef() "[INTERNAL]  Get a
reference to the colindex of all column element (copy if not unique!)

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::Sparsity::patternInverse() const  "

Take the inverse of a sparsity pattern; flip zeros and non-zeros.

";

%feature("docstring")  casadi::Sparsity::getNZ(int rr, int cc) "

Get the index of a non-zero element Add the element if it does not exist and
copy object if it's not unique.

";

%feature("docstring")  casadi::Sparsity::getNZ(int rr, int cc) const  "

Get the index of an existing non-zero element return -1 if the element does
not exist.

";

%feature("docstring")  casadi::Sparsity::getNZ(const std::vector< int > &rr,
const std::vector< int > &cc) const  "

Get a set of non-zero element return -1 if the element does not exist.

";

%feature("docstring")  casadi::Sparsity::size2() const  "

Get the number of columns.

";

%feature("docstring")  casadi::Sparsity::size1() const  "

Get the number of rows.

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::Sparsity::spy(std::ostream &stream=std::cout)
const  "

Print a textual representation of sparsity.

";

%feature("docstring")  casadi::Sparsity::depthFirstSearch(int j, int top,
std::vector< int > &xi, std::vector< int > &pstack, const std::vector< int >
&pinv, std::vector< bool > &marked) const  "

Depth-first search on the adjacency graph of the sparsity See Direct Methods
for Sparse Linear Systems by Davis (2006).

";

%feature("docstring")  casadi::Sparsity::sizeD() const  "

Number of non-zeros on the diagonal, i.e. the number of elements (i,j) with
j==i.

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::Sparsity::isEmpty(bool both=false) const  "

Check if the sparsity is empty.

A sparsity is considered empty if one of the dimensions is zero (or
optionally both dimensions)

";

%feature("docstring")  casadi::Sparsity::sizeU() const  "

Number of non-zeros in the upper triangular half, i.e. the number of
elements (i,j) with j>=i.

";

%feature("docstring")  casadi::Sparsity::size() const  "

Get the number of (structural) non-zeros.

See:   numel()

";

%feature("docstring")  casadi::Sparsity::hasNZ(int rr, int cc) const  "

Returns true if the pattern has a non-zero at location rr,cc.

";

%feature("docstring")  casadi::Sparsity::reserve(int nnz, int ncol) "

Reserve space.

";

%feature("docstring")  casadi::Sparsity::getCol() const  "

Get the column for each non-zero entry Together with the row-vector, this
vector gives the sparsity of the matrix in sparse triplet format, i.e. the
column and row for each non-zero elements.

";

%feature("docstring")  casadi::Sparsity::erase(const std::vector< int > &jj,
const std::vector< int > &ii) "

Erase rows and/or columns of a matrix.

";

%feature("docstring")  casadi::Sparsity::eliminationTree(bool ata=false)
const  "

Calculate the elimination tree See Direct Methods for Sparse Linear Systems
by Davis (2006). If the parameter ata is false, the algorithm is equivalent
to Matlab's etree(A), except that the indices are zero- based. If ata is
true, the algorithm is equivalent to Matlab's etree(A,'row').

";

%feature("docstring")  casadi::Sparsity::scalar(bool dense_scalar=true) "

Create a scalar sparsity pattern.

";


// File: classcasadi_1_1Split.xml
%feature("docstring")  casadi::MXNode::getSetNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Assign the nonzeros of a matrix
to another matrix.

";

%feature("docstring")  casadi::MXNode::numel() const  " [INTERNAL]  Get
shape.

";

%feature("docstring")  casadi::MXNode::getHorzsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a horizontal split node.

";

%feature("docstring")  casadi::MXNode::getSolve(const MX &r, bool tr, const
LinearSolver &linear_solver) const  " [INTERNAL]   Solve a system of linear
equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring")  casadi::MXNode::isBinaryOp() const  " [INTERNAL]
Check if binary operation.

";

%feature("docstring")  casadi::MXNode::mapping() const  " [INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring")  casadi::MXNode::getDeterminant() const  " [INTERNAL]
Determinant.

";

%feature("docstring")  casadi::Split::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp,
bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MultipleOutput::getOutput(int oind) const  "
[INTERNAL]  Get an output.

";

%feature("docstring")  casadi::MXNode::hasDep() const  " [INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring")  casadi::MXNode::numInplace() const  " [INTERNAL]  Can
the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring")  casadi::MXNode::getInnerProd(const MX &y) const  "
[INTERNAL]  Inner product.

";

%feature("docstring")  casadi::MXNode::getAddNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Add the nonzeros of a matrix to
another matrix.

";

%feature("docstring")  casadi::MXNode::setSparsity(const Sparsity &sparsity)
" [INTERNAL]  Set the sparsity.

";

%feature("docstring")  casadi::Split::sparsity(int oind) const  " [INTERNAL]
Get the sparsity of output oind.

";

%feature("docstring")  casadi::MXNode::sparsity() const  " [INTERNAL]  Get
the sparsity.

";

%feature("docstring")  casadi::MXNode::size() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::nTmp(size_t &ni, size_t &nr) "
[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::MXNode::printPart(std::ostream &stream, int
part) const  " [INTERNAL]  Print a part of the expression.

";

%feature("docstring")  casadi::MXNode::getSubAssign(const MX &y, const Slice
&i, const Slice &j) const  " [INTERNAL]  Get submatrix assignment.

";

%feature("docstring")  casadi::MXNode::getName() const  " [INTERNAL]  Get
the name.

";

%feature("docstring")  casadi::MXNode::getMultiplication(const MX &y, const
Sparsity &sp_z=Sparsity()) const  " [INTERNAL]   Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring")  casadi::Split::generateOperation(std::ostream
&stream, const std::vector< std::string > &arg, const std::vector<
std::string > &res, CodeGenerator &gen) const  " [INTERNAL]  Generate code
for the operation.

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) const  " [INTERNAL]
dependencies - functions that have to be evaluated before this one

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::isOne() const  " [INTERNAL]  Check if
identically one.

";

%feature("docstring")  casadi::SharedObjectNode::isInit() const  "
[INTERNAL]  Check if the object has been initialized.

";

%feature("docstring")  casadi::MXNode::getValue() const  " [INTERNAL]  Get
the value (only for scalar constant nodes)

";

%feature("docstring")  casadi::MXNode::getVertsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a vertical split node (vectors
only)

";

%feature("docstring")  casadi::MXNode::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied) " [INTERNAL]  Deep copy
data members.

";

%feature("docstring")  casadi::Split::evaluateD(const DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp)
" [INTERNAL]  Evaluate the function numerically.

";

%feature("docstring")  casadi::SharedObjectNode::weak() "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring")  casadi::MXNode::getHorzcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a horizontal concatenation node.

";

%feature("docstring")  casadi::MXNode::ndep() const  " [INTERNAL]  Number of
dependencies.

";

%feature("docstring")  casadi::MXNode::getNormInf() const  " [INTERNAL]
Infinity norm.

";

%feature("docstring")  casadi::MXNode::getNorm2() const  " [INTERNAL]
Spectral norm.

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, const std::vector< int > &onz, bool add=false) "
[INTERNAL]  Assign nonzeros (mapping matrix)

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, bool add=false) " [INTERNAL]  Assign nonzeros
(mapping matrix), output indices sequential.

";

%feature("docstring")  casadi::MXNode::isEqual(const MXNode *node, int
depth) const  " [INTERNAL]  Check if two nodes are equivalent up to a given
depth.

";

%feature("docstring")  casadi::MXNode::evaluateMX(const MXPtrV &input,
MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV
&adjSeed, MXPtrVV &adjSens, bool output_given) " [INTERNAL]  Evaluate
symbolically ( MX)

";

%feature("docstring")  casadi::MXNode::evaluateMX(const MXPtrV &input,
MXPtrV &output) " [INTERNAL]  Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring")  casadi::MXNode::getAssertion(const MX &y, const
std::string &fail_message="") const  " [INTERNAL]   Assertion.

";

%feature("docstring")  casadi::MXNode::getFunctionInput() const  "
[INTERNAL]  Get function input.

";

%feature("docstring") casadi::Split "[INTERNAL]   Split: Split into
multiple expressions splitting the nonzeros.

Joel Andersson

C++ includes: split.hpp ";

%feature("docstring")  casadi::MXNode::isOutputNode() const  " [INTERNAL]
Check if evaluation output.

";

%feature("docstring")  casadi::MXNode::getMatrixValue() const  " [INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring")  casadi::SharedObjectNode::getCount() const  "
[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::MXNode::getFunctionOutput() const  "
[INTERNAL]  Get function output.

";

%feature("docstring")  casadi::MXNode::getReshape(const Sparsity &sp) const
" [INTERNAL]   Reshape.

";

%feature("docstring")  casadi::MXNode::getNormF() const  " [INTERNAL]
Frobenius norm.

";

%feature("docstring")  casadi::MXNode::getBinarySwitch(int op, const MX &y)
const  " [INTERNAL]  Get a binary operation operation.

";

%feature("docstring")  casadi::MXNode::getTranspose() const  " [INTERNAL]
Transpose.

";

%feature("docstring")  casadi::MXNode::getBinary(int op, const MX &y, bool
scX, bool scY) const  " [INTERNAL]  Get a binary operation operation
(matrix-matrix)

";

%feature("docstring")  casadi::MXNode::getUnary(int op) const  " [INTERNAL]
Get a unary operation.

";

%feature("docstring")  casadi::MXNode::isValue(double val) const  "
[INTERNAL]  Check if a certain value.

";

%feature("docstring")  casadi::MXNode::size1() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::size2() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getOp() const  " [INTERNAL]  Get the
operation.

";

%feature("docstring")  casadi::MXNode::getSubRef(const Slice &i, const Slice
&j) const  " [INTERNAL]  Get submatrix reference.

";

%feature("docstring")  casadi::MXNode::repr(std::ostream &stream) const  "
[INTERNAL]  Print a representation.

";

%feature("docstring")  casadi::Split::evaluateGen(const MatV &input, MatV
&output, std::vector< int > &itmp, std::vector< T > &rtmp) " [INTERNAL]
Evaluate the function (template)

";

%feature("docstring")  casadi::MXNode::getGetNonzeros(const Sparsity &sp,
const std::vector< int > &nz) const  " [INTERNAL]  Get the nonzeros of
matrix.

";

%feature("docstring")  casadi::MXNode::isUnaryOp() const  " [INTERNAL]
Check if unary operation.

";

%feature("docstring") casadi::Split::~Split "[INTERNAL]  Destructor.

";

%feature("docstring") casadi::Split::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring")  casadi::Split::evaluateSX(const SXPtrV &input, SXPtrV
&output, std::vector< int > &itmp, std::vector< SXElement > &rtmp) "
[INTERNAL]  Evaluate the function symbolically (SX)

";

%feature("docstring")  casadi::MXNode::getNorm1() const  " [INTERNAL]
1-norm

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream) const  "
[INTERNAL]  Print a description.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream, long
&remaining_calls) const  " [INTERNAL]  Print expression (make sure number of
calls is not exceeded)

";

%feature("docstring")  casadi::MXNode::simplifyMe(MX &ex) " [INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring")  casadi::MXNode::getSetSparse(const Sparsity &sp)
const  " [INTERNAL]  Create set sparse.

";

%feature("docstring")  casadi::MXNode::clone() const  " [INTERNAL]  Clone
function.

";

%feature("docstring")  casadi::MXNode::isZero() const  " [INTERNAL]  Check
if identically zero.

";

%feature("docstring") casadi::Split::Split(const MX &x, const std::vector<
int > &offset) " [INTERNAL]  Constructor.

";

%feature("docstring")  casadi::MXNode::getVertcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a vertical concatenation node (vectors only)

";

%feature("docstring")  casadi::MultipleOutput::isMultipleOutput() const  "
[INTERNAL]  Check if a multiple output node.

";

%feature("docstring")  casadi::MXNode::getInverse() const  " [INTERNAL]
Inverse.

";

%feature("docstring")  casadi::MXNode::sameOpAndDeps(const MXNode *node, int
depth) const  " [INTERNAL]  Checks if two nodes have the same operation and
have equivalent dependencies up to a given depth.

";

%feature("docstring")  casadi::Split::getNumOutputs() const  " [INTERNAL]
Number of outputs.

";

%feature("docstring")  casadi::SharedObjectNode::assertInit() const  "
[INTERNAL]  Assert that the object has been initialized.

";

%feature("docstring")  casadi::MXNode::isIdentity() const  " [INTERNAL]
Check if identity matrix.

";

%feature("docstring")  casadi::SharedObjectNode::init() "[INTERNAL]
Initialize the object.

";

%feature("docstring")  casadi::MXNode::addDependency(const MX &dep) "
[INTERNAL]  Add a dependency.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep) "
[INTERNAL]  Set unary dependency.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2) " [INTERNAL]  Set binary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2, const MX &dep3) " [INTERNAL]  Set ternary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const std::vector< MX
> &dep) " [INTERNAL]  Set multiple dependencies.

";

%feature("docstring")  casadi::MXNode::isNonLinear() "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring")  casadi::MXNode::shape() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getFunction() "[INTERNAL]  Get
function reference.

";

%feature("docstring")  casadi::MXNode::getFunction() const  " [INTERNAL]
Get function reference.

";


// File: classcasadi_1_1SQICSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::OptionsFunctionality::hasOption(const std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::SQICSolver::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::SQICSolver::SQICSolver() "

Default constructor.

";

%feature("docstring") casadi::SQICSolver::SQICSolver(const QPStructure &st)
"

Constructor.

Parameters:
-----------

st:  Problem structure

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::QPSolver::generateNativeCode(const
std::string &filename) const  "

Generate native code in the interfaced language for debugging

";

%feature("docstring")  casadi::QPSolver::generateNativeCode(std::ostream
&file) const  "

Generate native code in the interfaced language for debugging

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring") casadi::SQICSolver "

Interface to the SQIC solver for quadratic programming.

Solves the following strictly convex problem:

min          1/2 x' H x + g' x  x  subject to             LBA <= A x <= UBA
LBX <= x   <= UBX      with :       H sparse (n x n) positive definite
g dense  (n x 1)      n: number of decision variables (x)     nc: number of
constraints (A)

If H is not positive-definite, the solver should throw an error. Joris
Gillis

>Input scheme: casadi::QPSolverInput (QP_SOLVER_NUM_IN = 10) [qpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_H            | h                      | The square matrix H:   |
|                        |                        | sparse, (n x n). Only  |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical.     |
+------------------------+------------------------+------------------------+
| QP_SOLVER_G            | g                      | The vector g: dense,   |
|                        |                        | (n x 1) .              |
+------------------------+------------------------+------------------------+
| QP_SOLVER_A            | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LBA          | lba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_UBA          | uba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LBX          | lbx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_UBX          | ubx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_X0           | x0                     | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X0       | lam_x0                 | dense                  |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::QPSolverOutput (QP_SOLVER_NUM_OUT = 5) [qpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_X            | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| QP_SOLVER_COST         | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_A        | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X        | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: sqic_solver.hpp ";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::QPSolver::setLPOptions() "

Set options that make the QP solver more suitable for solving LPs.

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";


// File: classcasadi_1_1SQPMethod.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::SharedObject::assignNode(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::NLPSolver::jacG() "

Access the Jacobian of the constraint function.

>Input scheme: casadi::HessLagInput (HESSLAG_NUM_IN = 5) [hessLagIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| HESSLAG_X              | x                      | Decision variable .    |
+------------------------+------------------------+------------------------+
| HESSLAG_P              | p                      | Fixed parameter .      |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_F          | lam_f                  | Multiplier for f. Just |
|                        |                        | a scalar factor for    |
|                        |                        | the objective that the |
|                        |                        | NLP solver might use   |
|                        |                        | to scale the           |
|                        |                        | objective.             |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_G          | lam_g                  | Multiplier for g .     |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::HessLagOutput (HESSLAG_NUM_OUT = 6) [hessLagOut]
+----------------+--------+------------------------------------------------+
|   Full name    | Short  |                  Description                   |
+================+========+================================================+
| HESSLAG_HESS   | hess   | Hessian of the Lagrangian .                    |
+----------------+--------+------------------------------------------------+
| HESSLAG_F      | f      | Objective function .                           |
+----------------+--------+------------------------------------------------+
| HESSLAG_G      | g      | Constraint function .                          |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_X | grad_x | Gradient of the Lagrangian with respect to x . |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_P | grad_p | Gradient of the Lagrangian with respect to p . |
+----------------+--------+------------------------------------------------+

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::NLPSolver::nlp() "

Access the NLP.

>Input scheme: casadi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::SQPMethod::getQPSolver() const  "

Access the QPSolver used internally.

";

%feature("docstring")  casadi::NLPSolver::hessLag() "

Access the Hessian of the Lagrangian function.

>Input scheme: casadi::JacGInput (JACG_NUM_IN = 3) [jacGIn]
+-----------+-------+---------------------+
| Full name | Short |     Description     |
+===========+=======+=====================+
| JACG_X    | x     | Decision variable . |
+-----------+-------+---------------------+
| JACG_P    | p     | Fixed parameter .   |
+-----------+-------+---------------------+

>Output scheme: casadi::JacGOutput (JACG_NUM_OUT = 4) [jacGOut]
+-----------+-------+-------------------------------+
| Full name | Short |          Description          |
+===========+=======+===============================+
| JACG_JAC  | jac   | Jacobian of the constraints . |
+-----------+-------+-------------------------------+
| JACG_F    | f     | Objective function .          |
+-----------+-------+-------------------------------+
| JACG_G    | g     | Constraint function .         |
+-----------+-------+-------------------------------+

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::NLPSolver::setQPOptions() "

Set options that make the NLP solver more suitable for solving QPs.

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::NLPSolver::reportConstraints(std::ostream
&stream=std::cout) "

Prints out a human readable report about possible constraint violations,
after solving.

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring") casadi::SQPMethod "

Sequential Quadratic Programming method.

The algorithm is a classical SQP method with either exact (may also be
provided) or damped BFGS Lagrange Hessian approximation. Two different line-
search algorithms are available. First, Armijo (Wolfe) condition with
backtracking (suffers from Maratos effect). Second, a line-search method
that checks if the merit function is lower than the last k values (no
Maratos effect). Both methods employ the L1 merit function.

The method solves the problems of form:min          F(x) x  subject to LBG
<= G(x) <= UBG LBX <=   x  <= UBX

Nonlinear equalities can be introduced by setting LBG and UBG equal at the
correct positions.

The method is still under development and should be used with care

Attila Kozma, Joel Andersson and Joris Gillis

>Input scheme: casadi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| barrier_maxi | OT_INTEGER   | 2.100e+09    | Maximum      | casadi::SQPI |
| ter          |              |              | number of    | nternal      |
|              |              |              | barrier      |              |
|              |              |              | iterations.  |              |
+--------------+--------------+--------------+--------------+--------------+
| con_numeric_ | OT_DICTIONAR | GenericType( | constraints  | casadi::NLPS |
| md           | Y            | )            | to be passed | olverInterna |
|              |              |              | to IPOPT     | l            |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_f     | OT_BOOLEAN   | GenericType( | Deprecated,  | casadi::NLPS |
|              |              | )            | use \"expand\" | olverInterna |
|              |              |              | instead.     | l            |
+--------------+--------------+--------------+--------------+--------------+
| expand_g     | OT_BOOLEAN   | GenericType( | Deprecated,  | casadi::NLPS |
|              |              | )            | use \"expand\" | olverInterna |
|              |              |              | instead.     | l            |
+--------------+--------------+--------------+--------------+--------------+
| generate_gra | OT_BOOLEAN   | GenericType( | the gradient | casadi::NLPS |
| dient        |              | )            | of the       | olverInterna |
|              |              |              | objective.   | l            |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_CALLBACK  | GenericType( | Check docume | casadi::NLPS |
| llback       |              | )            | ntation of   | olverInterna |
|              |              |              | Callback .   | l            |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| parametric   | OT_BOOLEAN   | GenericType( | input        | casadi::NLPS |
|              |              | )            | argument     | olverInterna |
|              |              |              | appended at  | l            |
|              |              |              | the end,     |              |
|              |              |              | denoting     |              |
|              |              |              | fixed        |              |
|              |              |              | parameters.  |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available stats
+--------------------+---------------------+
|         Id         |       Used in       |
+====================+=====================+
| iter_count         | casadi::SQPInternal |
+--------------------+---------------------+
| iteration          | casadi::SQPInternal |
+--------------------+---------------------+
| iterations         | casadi::SQPInternal |
+--------------------+---------------------+
| n_eval_f           | casadi::SQPInternal |
+--------------------+---------------------+
| n_eval_g           | casadi::SQPInternal |
+--------------------+---------------------+
| n_eval_grad_f      | casadi::SQPInternal |
+--------------------+---------------------+
| n_eval_h           | casadi::SQPInternal |
+--------------------+---------------------+
| n_eval_jac_g       | casadi::SQPInternal |
+--------------------+---------------------+
| return_status      | casadi::SQPInternal |
+--------------------+---------------------+
| t_callback_fun     | casadi::SQPInternal |
+--------------------+---------------------+
| t_callback_prepare | casadi::SQPInternal |
+--------------------+---------------------+
| t_eval_f           | casadi::SQPInternal |
+--------------------+---------------------+
| t_eval_g           | casadi::SQPInternal |
+--------------------+---------------------+
| t_eval_grad_f      | casadi::SQPInternal |
+--------------------+---------------------+
| t_eval_h           | casadi::SQPInternal |
+--------------------+---------------------+
| t_eval_jac_g       | casadi::SQPInternal |
+--------------------+---------------------+
| t_mainloop         | casadi::SQPInternal |
+--------------------+---------------------+

Diagrams

C++ includes: sqp_method.hpp ";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")  casadi::NLPSolver::getReportConstraints() "";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::NLPSolver::gradF() "

Access the objective gradient function>Input scheme: casadi::GradFInput
(GRADF_NUM_IN = 3) [gradFIn] +-----------+-------+---------------------+ |
Full name | Short |     Description     |
+===========+=======+=====================+ | GRADF_X   | x     | Decision
variable . | +-----------+-------+---------------------+ | GRADF_P   | p
| Fixed parameter .   | +-----------+-------+---------------------+

";

%feature("docstring") casadi::SQPMethod::SQPMethod() "

Default constructor.

";

%feature("docstring") casadi::SQPMethod::SQPMethod(const Function &nlp) "

Create an NLP solver instance.

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::SQPMethod::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";


// File: classcasadi_1_1StabilizedQPSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::StabilizedQPSolver "

StabilizedQPSolver.

Solves the following strictly convex problem:

min          1/2 x' H x + g' x  x  subject to             LBA <= A x <= UBA
LBX <= x   <= UBX      with :       H sparse (n x n) positive definite
g dense  (n x 1)      n: number of decision variables (x)     nc: number of
constraints (A)

If H is not positive-definite, the solver should throw an error.

Joel Andersson

>Input scheme: casadi::StabilizedQPSolverInput (STABILIZED_QP_SOLVER_NUM_IN = 13) [stabilizedQpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| STABILIZED_QP_SOLVER_H | h                      | The square matrix H:   |
|                        |                        | sparse, (n x n). Only  |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical.     |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_G | g                      | The vector g: dense,   |
|                        |                        | (n x 1) .              |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_A | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_L | lba                    | dense, (nc x 1)        |
| BA                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_U | uba                    | dense, (nc x 1)        |
| BA                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_L | lbx                    | dense, (n x 1)         |
| BX                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_U | ubx                    | dense, (n x 1)         |
| BX                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_X | x0                     | dense, (n x 1)         |
| 0                      |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_L | lam_x0                 | dense                  |
| AM_X0                  |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_M | muR                    | dense (1 x 1)          |
| UR                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_M | muE                    | dense (nc x 1)         |
| UE                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_M | mu                     | dense (nc x 1)         |
| U                      |                        |                        |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::QPSolverOutput (QP_SOLVER_NUM_OUT = 5) [qpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_X            | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| QP_SOLVER_COST         | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_A        | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X        | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: stabilized_qp_solver.hpp ";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")  casadi::StabilizedQPSolver::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::StabilizedQPSolver::generateNativeCode(const
std::string &filename) const  "

Generate native code in the interfaced language for debugging

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::StabilizedQPSolver::StabilizedQPSolver() "

Default constructor.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::StabilizedQPSolver::setLPOptions() "

Set options that make the QP solver more suitable for solving LPs.

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";


// File: classcasadi_1_1StabilizedQPSolverInputIOSchemeVector.xml
%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "
[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::IOSchemeVector< M  >::print(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::IOSchemeVector< M  >::vector() const "
[INTERNAL] ";

%feature("docstring") casadi::StabilizedQPSolverInputIOSchemeVector "[INTERNAL]  Helper function for 'StabilizedQPSolverInput'

C++ includes: schemes_helpers.hpp ";

%feature("docstring")
casadi::StabilizedQPSolverInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring")
casadi::StabilizedQPSolverInputIOSchemeVector::__getitem__ "[INTERNAL] ";

%feature("docstring")  casadi::IOSchemeVector< M  >::repr(std::ostream
&stream=std::cout) const " [INTERNAL]  Print a representation of the object.

";

%feature("docstring") casadi::StabilizedQPSolverInputIOSchemeVector< M
>::StabilizedQPSolverInputIOSchemeVector(const std::vector< M > &t) "
[INTERNAL] ";

%feature("docstring") casadi::StabilizedQPSolverInputIOSchemeVector::__len__
"[INTERNAL] ";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "
[INTERNAL]  Return a string with a description (for SWIG)

";


// File: classcasadi_1_1StabilizedSQICSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::StabilizedSQICSolver "

>Input scheme: casadi::StabilizedQPSolverInput (STABILIZED_QP_SOLVER_NUM_IN = 13) [stabilizedQpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| STABILIZED_QP_SOLVER_H | h                      | The square matrix H:   |
|                        |                        | sparse, (n x n). Only  |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical.     |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_G | g                      | The vector g: dense,   |
|                        |                        | (n x 1) .              |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_A | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_L | lba                    | dense, (nc x 1)        |
| BA                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_U | uba                    | dense, (nc x 1)        |
| BA                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_L | lbx                    | dense, (n x 1)         |
| BX                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_U | ubx                    | dense, (n x 1)         |
| BX                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_X | x0                     | dense, (n x 1)         |
| 0                      |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_L | lam_x0                 | dense                  |
| AM_X0                  |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_M | muR                    | dense (1 x 1)          |
| UR                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_M | muE                    | dense (nc x 1)         |
| UE                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_M | mu                     | dense (nc x 1)         |
| U                      |                        |                        |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::QPSolverOutput (QP_SOLVER_NUM_OUT = 5) [qpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_X            | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| QP_SOLVER_COST         | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_A        | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X        | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: stabilized_sqic_solver.hpp ";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::StabilizedSQICSolver::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::StabilizedQPSolver::setLPOptions() "

Set options that make the QP solver more suitable for solving LPs.

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring") casadi::StabilizedSQICSolver::StabilizedSQICSolver() "

Default constructor.

";

%feature("docstring")
casadi::StabilizedSQICSolver::StabilizedSQICSolver(const QPStructure &st) "

Constructor.

Parameters:
-----------

st:  Problem structure

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::StabilizedQPSolver::generateNativeCode(const
std::string &filename) const  "

Generate native code in the interfaced language for debugging

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";


// File: classcasadi_1_1StabilizedSQPMethod.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::OptionsFunctionality::getOption(const std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::NLPSolver::reportConstraints(std::ostream
&stream=std::cout) "

Prints out a human readable report about possible constraint violations,
after solving.

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")  casadi::StabilizedSQPMethod::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::NLPSolver::jacG() "

Access the Jacobian of the constraint function.

>Input scheme: casadi::HessLagInput (HESSLAG_NUM_IN = 5) [hessLagIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| HESSLAG_X              | x                      | Decision variable .    |
+------------------------+------------------------+------------------------+
| HESSLAG_P              | p                      | Fixed parameter .      |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_F          | lam_f                  | Multiplier for f. Just |
|                        |                        | a scalar factor for    |
|                        |                        | the objective that the |
|                        |                        | NLP solver might use   |
|                        |                        | to scale the           |
|                        |                        | objective.             |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_G          | lam_g                  | Multiplier for g .     |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::HessLagOutput (HESSLAG_NUM_OUT = 6) [hessLagOut]
+----------------+--------+------------------------------------------------+
|   Full name    | Short  |                  Description                   |
+================+========+================================================+
| HESSLAG_HESS   | hess   | Hessian of the Lagrangian .                    |
+----------------+--------+------------------------------------------------+
| HESSLAG_F      | f      | Objective function .                           |
+----------------+--------+------------------------------------------------+
| HESSLAG_G      | g      | Constraint function .                          |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_X | grad_x | Gradient of the Lagrangian with respect to x . |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_P | grad_p | Gradient of the Lagrangian with respect to p . |
+----------------+--------+------------------------------------------------+

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::NLPSolver::getReportConstraints() "";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring") casadi::StabilizedSQPMethod "

Stabilized Sequential Quadratic Programming method.

Slava Kung

>Input scheme: casadi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| con_numeric_ | OT_DICTIONAR | GenericType( | constraints  | casadi::NLPS |
| md           | Y            | )            | to be passed | olverInterna |
|              |              |              | to IPOPT     | l            |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_f     | OT_BOOLEAN   | GenericType( | Deprecated,  | casadi::NLPS |
|              |              | )            | use \"expand\" | olverInterna |
|              |              |              | instead.     | l            |
+--------------+--------------+--------------+--------------+--------------+
| expand_g     | OT_BOOLEAN   | GenericType( | Deprecated,  | casadi::NLPS |
|              |              | )            | use \"expand\" | olverInterna |
|              |              |              | instead.     | l            |
+--------------+--------------+--------------+--------------+--------------+
| generate_gra | OT_BOOLEAN   | GenericType( | the gradient | casadi::NLPS |
| dient        |              | )            | of the       | olverInterna |
|              |              |              | objective.   | l            |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_CALLBACK  | GenericType( | Check docume | casadi::NLPS |
| llback       |              | )            | ntation of   | olverInterna |
|              |              |              | Callback .   | l            |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Stab |
|              |              | red_object\"  | object       | ilizedSQPInt |
|              |              |              |              | ernal        |
+--------------+--------------+--------------+--------------+--------------+
| parametric   | OT_BOOLEAN   | GenericType( | input        | casadi::NLPS |
|              |              | )            | argument     | olverInterna |
|              |              |              | appended at  | l            |
|              |              |              | the end,     |              |
|              |              |              | denoting     |              |
|              |              |              | fixed        |              |
|              |              |              | parameters.  |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available stats
+---------------+-------------------------------+
|      Id       |            Used in            |
+===============+===============================+
| iter_count    | casadi::StabilizedSQPInternal |
+---------------+-------------------------------+
| return_status | casadi::StabilizedSQPInternal |
+---------------+-------------------------------+

Diagrams

C++ includes: stabilized_sqp_method.hpp ";

%feature("docstring")  casadi::NLPSolver::gradF() "

Access the objective gradient function>Input scheme: casadi::GradFInput
(GRADF_NUM_IN = 3) [gradFIn] +-----------+-------+---------------------+ |
Full name | Short |     Description     |
+===========+=======+=====================+ | GRADF_X   | x     | Decision
variable . | +-----------+-------+---------------------+ | GRADF_P   | p
| Fixed parameter .   | +-----------+-------+---------------------+

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::NLPSolver::setQPOptions() "

Set options that make the NLP solver more suitable for solving QPs.

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::NLPSolver::nlp() "

Access the NLP.

>Input scheme: casadi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

";

%feature("docstring")  casadi::StabilizedSQPMethod::getStabilizedQPSolver()
const  "

Access the StabilizedQPSolver used internally.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::NLPSolver::hessLag() "

Access the Hessian of the Lagrangian function.

>Input scheme: casadi::JacGInput (JACG_NUM_IN = 3) [jacGIn]
+-----------+-------+---------------------+
| Full name | Short |     Description     |
+===========+=======+=====================+
| JACG_X    | x     | Decision variable . |
+-----------+-------+---------------------+
| JACG_P    | p     | Fixed parameter .   |
+-----------+-------+---------------------+

>Output scheme: casadi::JacGOutput (JACG_NUM_OUT = 4) [jacGOut]
+-----------+-------+-------------------------------+
| Full name | Short |          Description          |
+===========+=======+===============================+
| JACG_JAC  | jac   | Jacobian of the constraints . |
+-----------+-------+-------------------------------+
| JACG_F    | f     | Objective function .          |
+-----------+-------+-------------------------------+
| JACG_G    | g     | Constraint function .         |
+-----------+-------+-------------------------------+

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring") casadi::StabilizedSQPMethod::StabilizedSQPMethod() "

Default constructor.

";

%feature("docstring") casadi::StabilizedSQPMethod::StabilizedSQPMethod(const
Function &nlp) "

Create an NLP solver instance.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";


// File: classcasadi_1_1SubAssign.xml
%feature("docstring")  casadi::SubAssign::clone() const  " [INTERNAL]  Clone
function.

";

%feature("docstring")  casadi::MXNode::getDeterminant() const  " [INTERNAL]
Determinant.

";

%feature("docstring")  casadi::MXNode::sparsity() const  " [INTERNAL]  Get
the sparsity.

";

%feature("docstring")  casadi::MXNode::sparsity(int oind) const  "
[INTERNAL]  Get the sparsity of output oind.

";

%feature("docstring")  casadi::MXNode::getSetSparse(const Sparsity &sp)
const  " [INTERNAL]  Create set sparse.

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) const  " [INTERNAL]
dependencies - functions that have to be evaluated before this one

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::isEqual(const MXNode *node, int
depth) const  " [INTERNAL]  Check if two nodes are equivalent up to a given
depth.

";

%feature("docstring")  casadi::MXNode::isBinaryOp() const  " [INTERNAL]
Check if binary operation.

";

%feature("docstring")  casadi::MXNode::nTmp(size_t &ni, size_t &nr) "
[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::MXNode::getSolve(const MX &r, bool tr, const
LinearSolver &linear_solver) const  " [INTERNAL]   Solve a system of linear
equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring")  casadi::SharedObjectNode::weak() "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring")  casadi::MXNode::getVertsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a vertical split node (vectors
only)

";

%feature("docstring")  casadi::SubAssign::evaluateSX(const SXPtrV &input,
SXPtrV &output, std::vector< int > &itmp, std::vector< SXElement > &rtmp) "
[INTERNAL]  Evaluate the function symbolically (SX)

";

%feature("docstring")  casadi::SubAssign::evaluateGen(const MatV &input,
MatV &output, std::vector< int > &itmp, std::vector< T > &rtmp) " [INTERNAL]
Evaluate the function (template)

";

%feature("docstring")  casadi::SubAssign::evaluateMX(const MXPtrV &input,
MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV
&adjSeed, MXPtrVV &adjSens, bool output_given) " [INTERNAL]  Evaluate the
function symbolically ( MX)

";

%feature("docstring")  casadi::MXNode::evaluateMX(const MXPtrV &input,
MXPtrV &output) " [INTERNAL]  Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring")  casadi::MXNode::isNonLinear() "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring")  casadi::SubAssign::getOp() const  " [INTERNAL]  Get
the operation.

";

%feature("docstring")  casadi::MXNode::getAddNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Add the nonzeros of a matrix to
another matrix.

";

%feature("docstring")  casadi::MXNode::setSparsity(const Sparsity &sparsity)
" [INTERNAL]  Set the sparsity.

";

%feature("docstring")  casadi::MXNode::getInverse() const  " [INTERNAL]
Inverse.

";

%feature("docstring")  casadi::MXNode::getBinary(int op, const MX &y, bool
scX, bool scY) const  " [INTERNAL]  Get a binary operation operation
(matrix-matrix)

";

%feature("docstring")  casadi::MXNode::getHorzcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a horizontal concatenation node.

";

%feature("docstring")  casadi::MXNode::isOutputNode() const  " [INTERNAL]
Check if evaluation output.

";

%feature("docstring") casadi::SubAssign "[INTERNAL]  Reference to a
submatrix.

Joel Andersson

C++ includes: subassign.hpp ";

%feature("docstring")  casadi::MXNode::getSetNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Assign the nonzeros of a matrix
to another matrix.

";

%feature("docstring")  casadi::SubAssign::propagateSparsity(DMatrixPtrV
&input, DMatrixPtrV &output, bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp,
bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring") casadi::SubAssign::SubAssign(const MX &x, const MX &y,
const Slice &i, const Slice &j) " [INTERNAL]  Constructor.

";

%feature("docstring")  casadi::MXNode::getInnerProd(const MX &y) const  "
[INTERNAL]  Inner product.

";

%feature("docstring")  casadi::MXNode::getHorzsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a horizontal split node.

";

%feature("docstring")  casadi::MXNode::getNormInf() const  " [INTERNAL]
Infinity norm.

";

%feature("docstring")  casadi::MXNode::getValue() const  " [INTERNAL]  Get
the value (only for scalar constant nodes)

";

%feature("docstring")  casadi::MXNode::getSubRef(const Slice &i, const Slice
&j) const  " [INTERNAL]  Get submatrix reference.

";

%feature("docstring")  casadi::MXNode::getGetNonzeros(const Sparsity &sp,
const std::vector< int > &nz) const  " [INTERNAL]  Get the nonzeros of
matrix.

";

%feature("docstring")  casadi::MXNode::isValue(double val) const  "
[INTERNAL]  Check if a certain value.

";

%feature("docstring")  casadi::MXNode::getFunction() "[INTERNAL]  Get
function reference.

";

%feature("docstring")  casadi::MXNode::getFunction() const  " [INTERNAL]
Get function reference.

";

%feature("docstring")  casadi::MXNode::size2() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::size1() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::simplifyMe(MX &ex) " [INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring")  casadi::MXNode::hasDep() const  " [INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring")  casadi::MXNode::getNormF() const  " [INTERNAL]
Frobenius norm.

";

%feature("docstring")  casadi::SharedObjectNode::init() "[INTERNAL]
Initialize the object.

";

%feature("docstring")  casadi::SubAssign::printPart(std::ostream &stream,
int part) const  " [INTERNAL]  Print a part of the expression */.

";

%feature("docstring")  casadi::MXNode::getOutput(int oind) const  "
[INTERNAL]  Get an output.

";

%feature("docstring")  casadi::MXNode::getVertcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a vertical concatenation node (vectors only)

";

%feature("docstring")  casadi::SubAssign::generateOperation(std::ostream
&stream, const std::vector< std::string > &arg, const std::vector<
std::string > &res, CodeGenerator &gen) const  " [INTERNAL]  Generate code
for the operation.

";

%feature("docstring")  casadi::MXNode::getFunctionInput() const  "
[INTERNAL]  Get function input.

";

%feature("docstring")  casadi::MXNode::getMatrixValue() const  " [INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring")  casadi::MXNode::getUnary(int op) const  " [INTERNAL]
Get a unary operation.

";

%feature("docstring")  casadi::MXNode::isUnaryOp() const  " [INTERNAL]
Check if unary operation.

";

%feature("docstring")  casadi::MXNode::ndep() const  " [INTERNAL]  Number of
dependencies.

";

%feature("docstring")  casadi::MXNode::getNorm2() const  " [INTERNAL]
Spectral norm.

";

%feature("docstring")  casadi::MXNode::getMultiplication(const MX &y, const
Sparsity &sp_z=Sparsity()) const  " [INTERNAL]   Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring")  casadi::MXNode::getAssertion(const MX &y, const
std::string &fail_message="") const  " [INTERNAL]   Assertion.

";

%feature("docstring")  casadi::MXNode::getName() const  " [INTERNAL]  Get
the name.

";

%feature("docstring")  casadi::MXNode::numInplace() const  " [INTERNAL]  Can
the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring") casadi::SubAssign::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring") casadi::SubAssign::~SubAssign "[INTERNAL]
Destructor.

";

%feature("docstring")  casadi::MXNode::getNorm1() const  " [INTERNAL]
1-norm

";

%feature("docstring")  casadi::MXNode::sameOpAndDeps(const MXNode *node, int
depth) const  " [INTERNAL]  Checks if two nodes have the same operation and
have equivalent dependencies up to a given depth.

";

%feature("docstring")  casadi::MXNode::repr(std::ostream &stream) const  "
[INTERNAL]  Print a representation.

";

%feature("docstring")  casadi::MXNode::numel() const  " [INTERNAL]  Get
shape.

";

%feature("docstring")  casadi::MXNode::getNumOutputs() const  " [INTERNAL]
Number of outputs.

";

%feature("docstring")  casadi::MXNode::shape() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::size() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep) "
[INTERNAL]  Set unary dependency.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2) " [INTERNAL]  Set binary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2, const MX &dep3) " [INTERNAL]  Set ternary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const std::vector< MX
> &dep) " [INTERNAL]  Set multiple dependencies.

";

%feature("docstring")  casadi::MXNode::getTranspose() const  " [INTERNAL]
Transpose.

";

%feature("docstring")  casadi::SubAssign::evaluateD(const DMatrixPtrV
&input, DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double >
&rtmp) " [INTERNAL]  Evaluate the function numerically.

";

%feature("docstring")  casadi::MXNode::isOne() const  " [INTERNAL]  Check if
identically one.

";

%feature("docstring")  casadi::MXNode::isZero() const  " [INTERNAL]  Check
if identically zero.

";

%feature("docstring")  casadi::SharedObjectNode::getCount() const  "
[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream) const  "
[INTERNAL]  Print a description.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream, long
&remaining_calls) const  " [INTERNAL]  Print expression (make sure number of
calls is not exceeded)

";

%feature("docstring")  casadi::SharedObjectNode::assertInit() const  "
[INTERNAL]  Assert that the object has been initialized.

";

%feature("docstring")  casadi::SharedObjectNode::isInit() const  "
[INTERNAL]  Check if the object has been initialized.

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, const std::vector< int > &onz, bool add=false) "
[INTERNAL]  Assign nonzeros (mapping matrix)

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, bool add=false) " [INTERNAL]  Assign nonzeros
(mapping matrix), output indices sequential.

";

%feature("docstring")  casadi::MXNode::isIdentity() const  " [INTERNAL]
Check if identity matrix.

";

%feature("docstring")  casadi::MXNode::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied) " [INTERNAL]  Deep copy
data members.

";

%feature("docstring")  casadi::MXNode::getFunctionOutput() const  "
[INTERNAL]  Get function output.

";

%feature("docstring")  casadi::MXNode::addDependency(const MX &dep) "
[INTERNAL]  Add a dependency.

";

%feature("docstring")  casadi::MXNode::mapping() const  " [INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring")  casadi::MXNode::getBinarySwitch(int op, const MX &y)
const  " [INTERNAL]  Get a binary operation operation.

";

%feature("docstring")  casadi::MXNode::getSubAssign(const MX &y, const Slice
&i, const Slice &j) const  " [INTERNAL]  Get submatrix assignment.

";

%feature("docstring")  casadi::MXNode::getReshape(const Sparsity &sp) const
" [INTERNAL]   Reshape.

";

%feature("docstring")  casadi::MXNode::isMultipleOutput() const  "
[INTERNAL]  Check if a multiple output node.

";


// File: classcasadi_1_1SubMatrix.xml
%feature("docstring") casadi::SubMatrix "

submatrix

SubMatrix class for Matrix SubMatrix is the return type for operator() of
the Matrix class, it allows access to the value as well as changing the
parent object Joel Andersson

C++ includes: submatrix.hpp ";

%feature("docstring") casadi::SubMatrix< M, I, J >::SubMatrix(M &mat, const
I &i, const J &j) "

Constructor.

";


// File: classcasadi_1_1SubRef.xml
%feature("docstring")  casadi::MXNode::isNonLinear() "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring")  casadi::MXNode::sameOpAndDeps(const MXNode *node, int
depth) const  " [INTERNAL]  Checks if two nodes have the same operation and
have equivalent dependencies up to a given depth.

";

%feature("docstring")  casadi::MXNode::getSubRef(const Slice &i, const Slice
&j) const  " [INTERNAL]  Get submatrix reference.

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, const std::vector< int > &onz, bool add=false) "
[INTERNAL]  Assign nonzeros (mapping matrix)

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, bool add=false) " [INTERNAL]  Assign nonzeros
(mapping matrix), output indices sequential.

";

%feature("docstring")  casadi::SubRef::evaluateGen(const MatV &input, MatV
&output, std::vector< int > &itmp, std::vector< T > &rtmp) " [INTERNAL]
Evaluate the function (template)

";

%feature("docstring")  casadi::MXNode::size() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep) "
[INTERNAL]  Set unary dependency.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2) " [INTERNAL]  Set binary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2, const MX &dep3) " [INTERNAL]  Set ternary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const std::vector< MX
> &dep) " [INTERNAL]  Set multiple dependencies.

";

%feature("docstring")  casadi::MXNode::isUnaryOp() const  " [INTERNAL]
Check if unary operation.

";

%feature("docstring")  casadi::MXNode::getValue() const  " [INTERNAL]  Get
the value (only for scalar constant nodes)

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream) const  "
[INTERNAL]  Print a description.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream, long
&remaining_calls) const  " [INTERNAL]  Print expression (make sure number of
calls is not exceeded)

";

%feature("docstring")  casadi::MXNode::getUnary(int op) const  " [INTERNAL]
Get a unary operation.

";

%feature("docstring")  casadi::MXNode::getInverse() const  " [INTERNAL]
Inverse.

";

%feature("docstring")  casadi::MXNode::simplifyMe(MX &ex) " [INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring")  casadi::MXNode::numInplace() const  " [INTERNAL]  Can
the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring")  casadi::MXNode::setSparsity(const Sparsity &sparsity)
" [INTERNAL]  Set the sparsity.

";

%feature("docstring")  casadi::MXNode::getNormInf() const  " [INTERNAL]
Infinity norm.

";

%feature("docstring")  casadi::MXNode::isIdentity() const  " [INTERNAL]
Check if identity matrix.

";

%feature("docstring")  casadi::SharedObjectNode::assertInit() const  "
[INTERNAL]  Assert that the object has been initialized.

";

%feature("docstring")  casadi::MXNode::getFunctionOutput() const  "
[INTERNAL]  Get function output.

";

%feature("docstring")  casadi::SubRef::evaluateMX(const MXPtrV &input,
MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV
&adjSeed, MXPtrVV &adjSens, bool output_given) " [INTERNAL]  Evaluate the
function symbolically ( MX)

";

%feature("docstring")  casadi::MXNode::evaluateMX(const MXPtrV &input,
MXPtrV &output) " [INTERNAL]  Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring")  casadi::SharedObjectNode::isInit() const  "
[INTERNAL]  Check if the object has been initialized.

";

%feature("docstring")  casadi::MXNode::isMultipleOutput() const  "
[INTERNAL]  Check if a multiple output node.

";

%feature("docstring")  casadi::MXNode::getAssertion(const MX &y, const
std::string &fail_message="") const  " [INTERNAL]   Assertion.

";

%feature("docstring")  casadi::MXNode::getTranspose() const  " [INTERNAL]
Transpose.

";

%feature("docstring")  casadi::SharedObjectNode::init() "[INTERNAL]
Initialize the object.

";

%feature("docstring")  casadi::MXNode::addDependency(const MX &dep) "
[INTERNAL]  Add a dependency.

";

%feature("docstring") casadi::SubRef::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring") casadi::SubRef "[INTERNAL]  Reference to a submatrix.

Joel Andersson

C++ includes: subref.hpp ";

%feature("docstring")  casadi::MXNode::getInnerProd(const MX &y) const  "
[INTERNAL]  Inner product.

";

%feature("docstring")  casadi::MXNode::getMultiplication(const MX &y, const
Sparsity &sp_z=Sparsity()) const  " [INTERNAL]   Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring")  casadi::SubRef::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp,
bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::getNormF() const  " [INTERNAL]
Frobenius norm.

";

%feature("docstring")  casadi::MXNode::getHorzsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a horizontal split node.

";

%feature("docstring")  casadi::MXNode::shape() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getSolve(const MX &r, bool tr, const
LinearSolver &linear_solver) const  " [INTERNAL]   Solve a system of linear
equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring")  casadi::SharedObjectNode::getCount() const  "
[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::MXNode::sparsity() const  " [INTERNAL]  Get
the sparsity.

";

%feature("docstring")  casadi::MXNode::sparsity(int oind) const  "
[INTERNAL]  Get the sparsity of output oind.

";

%feature("docstring")  casadi::MXNode::getFunctionInput() const  "
[INTERNAL]  Get function input.

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) const  " [INTERNAL]
dependencies - functions that have to be evaluated before this one

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getName() const  " [INTERNAL]  Get
the name.

";

%feature("docstring")  casadi::MXNode::getNorm1() const  " [INTERNAL]
1-norm

";

%feature("docstring")  casadi::SubRef::getOp() const  " [INTERNAL]  Get the
operation.

";

%feature("docstring")  casadi::MXNode::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied) " [INTERNAL]  Deep copy
data members.

";

%feature("docstring")  casadi::MXNode::getVertcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a vertical concatenation node (vectors only)

";

%feature("docstring")  casadi::MXNode::getGetNonzeros(const Sparsity &sp,
const std::vector< int > &nz) const  " [INTERNAL]  Get the nonzeros of
matrix.

";

%feature("docstring")  casadi::MXNode::getOutput(int oind) const  "
[INTERNAL]  Get an output.

";

%feature("docstring")  casadi::MXNode::isValue(double val) const  "
[INTERNAL]  Check if a certain value.

";

%feature("docstring")  casadi::MXNode::hasDep() const  " [INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring")  casadi::SharedObjectNode::weak() "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring")  casadi::MXNode::getFunction() "[INTERNAL]  Get
function reference.

";

%feature("docstring")  casadi::MXNode::getFunction() const  " [INTERNAL]
Get function reference.

";

%feature("docstring")  casadi::MXNode::getSetSparse(const Sparsity &sp)
const  " [INTERNAL]  Create set sparse.

";

%feature("docstring")  casadi::MXNode::getAddNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Add the nonzeros of a matrix to
another matrix.

";

%feature("docstring")  casadi::SubRef::clone() const  " [INTERNAL]  Clone
function.

";

%feature("docstring")  casadi::MXNode::getVertsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a vertical split node (vectors
only)

";

%feature("docstring")  casadi::MXNode::isBinaryOp() const  " [INTERNAL]
Check if binary operation.

";

%feature("docstring")  casadi::MXNode::mapping() const  " [INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring")  casadi::MXNode::getNumOutputs() const  " [INTERNAL]
Number of outputs.

";

%feature("docstring") casadi::SubRef::~SubRef "[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::MXNode::nTmp(size_t &ni, size_t &nr) "
[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::MXNode::isEqual(const MXNode *node, int
depth) const  " [INTERNAL]  Check if two nodes are equivalent up to a given
depth.

";

%feature("docstring")  casadi::MXNode::getSetNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Assign the nonzeros of a matrix
to another matrix.

";

%feature("docstring")  casadi::MXNode::size1() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::size2() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getBinarySwitch(int op, const MX &y)
const  " [INTERNAL]  Get a binary operation operation.

";

%feature("docstring")  casadi::SubRef::evaluateD(const DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp)
" [INTERNAL]  Evaluate the function numerically.

";

%feature("docstring")  casadi::MXNode::getNorm2() const  " [INTERNAL]
Spectral norm.

";

%feature("docstring")  casadi::MXNode::getReshape(const Sparsity &sp) const
" [INTERNAL]   Reshape.

";

%feature("docstring")  casadi::MXNode::isOne() const  " [INTERNAL]  Check if
identically one.

";

%feature("docstring")  casadi::MXNode::isZero() const  " [INTERNAL]  Check
if identically zero.

";

%feature("docstring")  casadi::MXNode::ndep() const  " [INTERNAL]  Number of
dependencies.

";

%feature("docstring")  casadi::MXNode::getBinary(int op, const MX &y, bool
scX, bool scY) const  " [INTERNAL]  Get a binary operation operation
(matrix-matrix)

";

%feature("docstring")  casadi::MXNode::getHorzcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a horizontal concatenation node.

";

%feature("docstring")  casadi::MXNode::repr(std::ostream &stream) const  "
[INTERNAL]  Print a representation.

";

%feature("docstring")  casadi::MXNode::getSubAssign(const MX &y, const Slice
&i, const Slice &j) const  " [INTERNAL]  Get submatrix assignment.

";

%feature("docstring") casadi::SubRef::SubRef(const MX &x, const Slice &i,
const Slice &j) " [INTERNAL]  Constructor.

";

%feature("docstring")  casadi::MXNode::getMatrixValue() const  " [INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring")  casadi::MXNode::getDeterminant() const  " [INTERNAL]
Determinant.

";

%feature("docstring")  casadi::SubRef::evaluateSX(const SXPtrV &input,
SXPtrV &output, std::vector< int > &itmp, std::vector< SXElement > &rtmp) "
[INTERNAL]  Evaluate the function symbolically (SX)

";

%feature("docstring")  casadi::MXNode::isOutputNode() const  " [INTERNAL]
Check if evaluation output.

";

%feature("docstring")  casadi::SubRef::generateOperation(std::ostream
&stream, const std::vector< std::string > &arg, const std::vector<
std::string > &res, CodeGenerator &gen) const  " [INTERNAL]  Generate code
for the operation.

";

%feature("docstring")  casadi::MXNode::numel() const  " [INTERNAL]  Get
shape.

";

%feature("docstring")  casadi::SubRef::printPart(std::ostream &stream, int
part) const  " [INTERNAL]  Print a part of the expression */.

";


// File: classcasadi_1_1SundialsIntegrator.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::SharedObject::weak() " [INTERNAL]  Get a weak reference to the
object.

";

%feature("docstring") casadi::SundialsIntegrator::SundialsIntegrator() "

Default constructor.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::Integrator::integrate(double t_out) "

Integrate forward until a specified time point.

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::SundialsIntegrator::setStopTime(double tf) "

Set a stop time for the forward integration.

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::SundialsIntegrator::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::Integrator::reset() "

Reset the forward problem Time will be set to t0 and state to
input(INTEGRATOR_X0)

";

%feature("docstring")  casadi::Integrator::printStats(std::ostream
&stream=std::cout) const  "

Print solver statistics.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::Integrator::resetB() "

Reset the backward problem.

Time will be set to tf and backward state to input(INTEGRATOR_RX0)

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring") casadi::SundialsIntegrator "

Interface to the Sundials integrators.

Base class for integrators. Solves an initial value problem (IVP) coupled to
a terminal value problem with differential equation given as an implicit ODE
coupled to an algebraic equation and a set of quadratures: Initial
conditions at t=t0  x(t0)  = x0  q(t0)  = 0   Forward integration from t=t0
to t=tf  der(x) = function(x,z,p,t) Forward ODE  0 = fz(x,z,p,t)
Forward algebraic equations  der(q) = fq(x,z,p,t)                  Forward
quadratures Terminal conditions at t=tf  rx(tf)  = rx0  rq(tf)  = 0
Backward integration from t=tf to t=t0  der(rx) = gx(rx,rz,rp,x,z,p,t)
Backward ODE  0 = gz(rx,rz,rp,x,z,p,t)        Backward algebraic equations
der(rq) = gq(rx,rz,rp,x,z,p,t)        Backward quadratures where we assume
that both the forward and backwards integrations are index-1  (i.e. dfz/dz,
dgz/drz are invertible) and furthermore that gx, gz and gq have a linear
dependency on rx, rz and rp.

>Input scheme: casadi::IntegratorInput (INTEGRATOR_NUM_IN = 7) [integratorIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_X0          | x0                     | Differential state at  |
|                        |                        | the initial time .     |
+------------------------+------------------------+------------------------+
| INTEGRATOR_P           | p                      | Parameters .           |
+------------------------+------------------------+------------------------+
| INTEGRATOR_Z0          | z0                     | Initial guess for the  |
|                        |                        | algebraic variable .   |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RX0         | rx0                    | Backward differential  |
|                        |                        | state at the final     |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RP          | rp                     | Backward parameter     |
|                        |                        | vector .               |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZ0         | rz0                    | Initial guess for the  |
|                        |                        | backwards algebraic    |
|                        |                        | variable .             |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::IntegratorOutput (INTEGRATOR_NUM_OUT = 7) [integratorOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_XF          | xf                     | Differential state at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_QF          | qf                     | Quadrature state at    |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_ZF          | zf                     | Algebraic variable at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RXF         | rxf                    | Backward differential  |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RQF         | rqf                    | Backward quadrature    |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZF         | rzf                    | Backward algebraic     |
|                        |                        | variable at the        |
|                        |                        | initial time .         |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| artol        | OT_REAL      | 0.000        | tolerance as | casadi::Inte |
|              |              |              | provided     | gratorIntern |
|              |              |              | with         | al           |
|              |              |              | setArTol to  |              |
|              |              |              | OOQP         |              |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| exact_jacobi | OT_BOOLEAN   | GenericType( | [default:    | casadi::Sund |
| anB          |              | )            | equal to exa | ialsInternal |
|              |              |              | ct_jacobian] |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_augme | OT_BOOLEAN   | true         | DAE callback | casadi::Inte |
| nted         |              |              | function     | gratorIntern |
|              |              |              | also be      | al           |
|              |              |              | SXFunction . |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_LINEARSOL | GenericType( | [default:    | casadi::Sund |
| rB           | VER          | )            | equal to lin | ialsInternal |
|              |              |              | ear_solver]  |              |
+--------------+--------------+--------------+--------------+--------------+
| linear_solve | OT_DICTIONAR | GenericType( | [default:    | casadi::Sund |
| r_optionsB   | Y            | )            | equal to lin | ialsInternal |
|              |              |              | ear_solver_o |              |
|              |              |              | ptions]      |              |
+--------------+--------------+--------------+--------------+--------------+
| lower_bandwi | OT_INTEGER   | GenericType( | [default:    | casadi::Sund |
| dthB         |              | )            | equal to low | ialsInternal |
|              |              |              | er_bandwidth |              |
|              |              |              | ]            |              |
+--------------+--------------+--------------+--------------+--------------+
| max_multiste | OT_INTEGER   | 5            |              | casadi::Sund |
| p_order      |              |              |              | ialsInternal |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | GenericType( | (eval_f|eval | casadi::Sund |
|              | TOR          | )            | _djac)       | ialsInternal |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| upper_bandwi | OT_INTEGER   | GenericType( | [default:    | casadi::Sund |
| dthB         |              | )            | equal to upp | ialsInternal |
|              |              |              | er_bandwidth |              |
|              |              |              | ]            |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available monitors
+-----------+--------------------------+
|    Id     |         Used in          |
+===========+==========================+
| eval_djac | casadi::SundialsInternal |
+-----------+--------------------------+
| eval_f    | casadi::SundialsInternal |
+-----------+--------------------------+

Diagrams

C++ includes: sundials_integrator.hpp ";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Integrator::clone() const  "

Clone.

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::Integrator::getAugmented(int nfwd, int nadj)
"

Generate a augmented DAE system with nfwd forward sensitivities and nadj
adjoint sensitivities.

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::Integrator::getDAE() "

Get the DAE.

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Integrator::integrateB(double t_out) "

Integrate backward until a specified time point.

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";


// File: classcasadi_1_1SXElement.xml


/*  Operations from the left  */

/* For Python

*/ %feature("docstring")  casadi::SXElement::logic_not() const  " ";

%feature("docstring") casadi::SXElement::~SXElement "[INTERNAL]
Destructor.

";

%feature("docstring") casadi::SXElement::__mrdivide__ "";

%feature("docstring") casadi::SXElement::__mldivide__ "

Matrix division from left.

";

%feature("docstring")  casadi::SXElement::isMinusInf() const  " ";

%feature("docstring")  casadi::SXElement::isNonNegative() const  "

Check if a value is always nonnegative (false negatives are allowed)

";

%feature("docstring") casadi::SXElement::__div__ "";

%feature("docstring") casadi::SXElement::__rne__ "";

%feature("docstring") casadi::SXElement::__radd__ "";

%feature("docstring")  casadi::SXElement::tanh() const  " ";

%feature("docstring")  casadi::SXElement::fabs() const  " ";

%feature("docstring")  casadi::SXElement::cos() const  " ";

%feature("docstring") casadi::SXElement::__rdiv__ "";

%feature("docstring")  casadi::SXElement::isZero() const  " ";

%feature("docstring")  casadi::SXElement::arccos() const  " ";

%feature("docstring")  casadi::SXElement::isOne() const  " ";

%feature("docstring")  casadi::SXElement::getOp() const  " ";

%feature("docstring")  casadi::SXElement::trans() const  " ";

%feature("docstring")  casadi::SXElement::assignNoDelete(const SXElement
&scalar) " [INTERNAL]  Assign the node to something, without invoking the
deletion of the node, if the count reaches 0.

";

%feature("docstring")  casadi::SXElement::getValue() const  " ";

%feature("docstring")  casadi::SXElement::log() const  " ";

%feature("docstring") casadi::SXElement::__nonzero__ "

Check the truth value of this node Introduced to catch bool(x) situations in
python.

";

%feature("docstring")  casadi::SXElement::getNdeps() const  "

Get the number of dependencies of a binary SXElement.

";

%feature("docstring")  casadi::SXElement::logic_and(const SXElement &y)
const  " ";

%feature("docstring")  casadi::SXElement::isAlmostZero(double tol) const  "
";

%feature("docstring")  casadi::SXElement::isLeaf() const  "

check if this SXElement is a leaf of the SX graph

An SXElement qualifies as leaf when it has no dependencies.

";

%feature("docstring")  casadi::SXElement::getName() const  " ";

%feature("docstring")  casadi::SXElement::sin() const  " ";

%feature("docstring")  casadi::SXElement::isInteger() const  " ";

%feature("docstring")  casadi::SXElement::mul(const SXElement &y) const  "
";

%feature("docstring")  casadi::SXElement::tan() const  " ";

%feature("docstring")  casadi::SXElement::isNull() "

SXElement nodes are not allowed to be null.

";

%feature("docstring")  casadi::SXElement::inv() const  " ";

%feature("docstring")  casadi::SXElement::ceil() const  " ";

%feature("docstring")  casadi::SXElement::mark() "[INTERNAL]  Mark by
flipping the sign of the temporary and decreasing by one.

";

%feature("docstring")  casadi::SXElement::erfinv() const  " ";

%feature("docstring")  casadi::SXElement::arcsin() const  " ";

%feature("docstring")  casadi::SXElement::assignIfDuplicate(const SXElement
&scalar, int depth=1) " [INTERNAL]  Assign to another expression, if a
duplicate. Check for equality up to a given depth.

";

%feature("docstring")  casadi::SXElement::getDep(int ch=0) const  " ";

%feature("docstring")  casadi::SXElement::isInf() const  " ";

%feature("docstring")  casadi::SXElement::cosh() const  " ";

%feature("docstring")  casadi::SXElement::sqrt() const  " ";

%feature("docstring")  casadi::SXElement::getIntValue() const  " ";

%feature("docstring")  casadi::SXElement::getTemp() const  " [INTERNAL]  Get
the temporary variable

";

%feature("docstring")  casadi::SXElement::print(std::ostream &stream, long
&remaining_calls) const  " [INTERNAL]  print to stream, limited

";

%feature("docstring")  casadi::SXElement::isConstant() const  " ";

%feature("docstring")  casadi::SXElement::floor() const  " ";

%feature("docstring") casadi::SXElement::__copysign__ "";

%feature("docstring") casadi::SXElement::__copysign__ "";

%feature("docstring")  casadi::SXElement::constpow(const SXElement &y) const
" ";

%feature("docstring")  casadi::SXElement::constpow(const Matrix< SXElement >
&n) const  " ";

%feature("docstring")  casadi::SXElement::isMinusOne() const  " ";

%feature("docstring") casadi::SXElement::__mul__ "";

%feature("docstring") casadi::SXElement::__req__ "";

%feature("docstring") casadi::SXElement::__pow__ "";

%feature("docstring")  casadi::SXElement::fmax(const SXElement &y) const  "
";

%feature("docstring")  casadi::SXElement::fmax(const Matrix< SXElement > &b)
const  " ";

%feature("docstring")  casadi::SXElement::log10() const  " ";

%feature("docstring") casadi::SXElement "

The basic scalar symbolic class of CasADi.

Joel Andersson

C++ includes: sx_element.hpp ";

%feature("docstring")  casadi::SXElement::isOp(int op) const  " ";

%feature("docstring") casadi::SXElement::__lt__ "";

%feature("docstring")  casadi::SXElement::isEqual(const SXElement &scalar,
int depth=0) const  "

Check if two nodes are equivalent up to a given depth. Depth=0 checks if the
expressions are identical, i.e. points to the same node.

a = x*x b = x*x

a.isEqual(b,0) will return false, but a.isEqual(b,1) will return true

";

%feature("docstring") casadi::SXElement::__rge__ "";

%feature("docstring")  casadi::SXElement::isDoubled() const  "

Check if the node is the sum of two equal expressions.

";

%feature("docstring")  casadi::SXElement::arctan() const  " ";

%feature("docstring")  casadi::SXElement::sinh() const  " ";

%feature("docstring")  casadi::SXElement::erf() const  " ";

%feature("docstring") casadi::SXElement::__gt__ "

No need to have both < and >

";

%feature("docstring")  casadi::SXElement::arctan2(const SXElement &y) const
" ";

%feature("docstring")  casadi::SXElement::arctan2(const Matrix< SXElement >
&b) const  " ";

%feature("docstring") casadi::SXElement::__ne__ "";

%feature("docstring")  casadi::SXElement::marked() const  " [INTERNAL]
Check if marked (i.e. temporary is negative)

";

%feature("docstring")  casadi::SXElement::isCommutative() const  "

Check whether a binary SXElement is commutative.

";

%feature("docstring")  casadi::SXElement::isSymbolic() const  " ";

%feature("docstring") casadi::SXElement::__eq__ "";

%feature("docstring") casadi::SXElement::__constpow__ "";

%feature("docstring")  casadi::SXElement::arccosh() const  " ";

%feature("docstring") casadi::SXElement::__add__ "";

%feature("docstring")  casadi::SXElement::isNan() const  " ";

%feature("docstring") casadi::SXElement::__rsub__ "";

%feature("docstring")  casadi::SXElement::isRegular() const  "

Checks if expression does not contain NaN or Inf.

";

%feature("docstring")  casadi::SXElement::printme(const SXElement &y) const
" ";

%feature("docstring")  casadi::SXElement::exp() const  " ";

%feature("docstring") casadi::SXElement::__ge__ "

No need to have both <= and >=.

";

%feature("docstring") casadi::SXElement::__rtruediv__ "";

%feature("docstring") casadi::SXElement::__rle__ "";

%feature("docstring") casadi::SXElement::__hash__ "

Returns a number that is unique for a given SXNode. If the SXElement does
not point to any node, 0 is returned.

";

%feature("docstring")  casadi::SXElement::sq() const  " ";

%feature("docstring")  casadi::SXElement::get() const  " [INTERNAL]  Get a
pointer to the node.

";

%feature("docstring") casadi::SXElement::__mpower__ "";

%feature("docstring")  casadi::SXElement::toString() const  " [INTERNAL]
string representation (SWIG workaround)

";

%feature("docstring")  casadi::SXElement::logic_or(const SXElement &y) const
" ";

%feature("docstring") casadi::SXElement::__truediv__ "";

%feature("docstring") casadi::SXElement::SXElement() "

Default constructor (not-a-number) Object is initialized as not-a-number.

";

%feature("docstring") casadi::SXElement::SXElement(double val) "

Numerical constant constructor.

Parameters:
-----------

val:  Numerical value

";

%feature("docstring") casadi::SXElement::SXElement(SXNode *node, bool dummy)
" [INTERNAL]  Create an expression from a node: extra dummy argument to
avoid ambiguity for 0/NULL

";

%feature("docstring") casadi::SXElement::SXElement(const SXElement &scalar)
" [INTERNAL]  Copy constructor.

";

%feature("docstring") casadi::SXElement::__sub__ "";

%feature("docstring")  casadi::SXElement::arcsinh() const  " ";

%feature("docstring")  casadi::SXElement::arctanh() const  " ";

%feature("docstring") casadi::SXElement::__le__ "";

%feature("docstring") casadi::SXElement::__rgt__ "";

%feature("docstring")  casadi::SXElement::setTemp(int t) " [INTERNAL]  Set
the temporary variable.

";

%feature("docstring") casadi::SXElement::__rmul__ "";

%feature("docstring")  casadi::SXElement::sign() const  " ";

%feature("docstring")  casadi::SXElement::if_else_zero(const SXElement &y)
const  " ";

%feature("docstring")  casadi::SXElement::hasDep() const  " ";

%feature("docstring") casadi::SXElement::__rlt__ "";

%feature("docstring")  casadi::SXElement::fmin(const SXElement &y) const  "
";

%feature("docstring")  casadi::SXElement::fmin(const Matrix< SXElement > &b)
const  " ";


// File: classcasadi_1_1SXFunction.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::OptionsFunctionality::hasSetOption(const std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::SXFunction::outputExpr(int oind) const  "

Get function output.

";

%feature("docstring")  casadi::SXFunction::outputExpr(const std::string
&oname) const  " ";

%feature("docstring")  casadi::SXFunction::outputExpr() const  "

Get all function outputs.

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::SXFunction::getAtomicInput(int k) const  "

Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::SXFunction::getFree() const  "

Get all the free variables of the function.

";

%feature("docstring")  casadi::SXFunction::getWorkSize() const  "

Get the length of the work vector.

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::SXFunction::getAtomicInputReal(int k) const
"

Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::SXFunction::getAlgorithmSize() const  "

Get the number of atomic operations.

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::SXFunction::getAtomicOutput(int k) const  "

Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::SXFunction::algorithm() const  " [INTERNAL]
Access the algorithm directly.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::SXFunction::countNodes() const  "

Number of nodes in the algorithm.

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::SXFunction::tang(int iind=0, int oind=0) "

Tangent via source code transformation

";

%feature("docstring")  casadi::SXFunction::tang(const std::string &iname,
int oind=0) "

Tangent via source code transformation

";

%feature("docstring")  casadi::SXFunction::tang(int iind, const std::string
&oname) "

Tangent via source code transformation

";

%feature("docstring")  casadi::SXFunction::tang(const std::string &iname,
const std::string &oname) "

Tangent via source code transformation

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::SXFunction::grad(int iind=0, int oind=0) "

Gradient via source code transformation

";

%feature("docstring")  casadi::SXFunction::grad(const std::string &iname,
int oind=0) "

Gradient via source code transformation

";

%feature("docstring")  casadi::SXFunction::grad(int iind, const std::string
&oname) "

Gradient via source code transformation

";

%feature("docstring")  casadi::SXFunction::grad(const std::string &iname,
const std::string &oname) "

Gradient via source code transformation

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::SXFunction::clearSymbolic() "

Clear the function from its symbolic representation, to free up memory, no
symbolic evaluations are possible after this.

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::SXFunction::inputExpr(int iind) const  "

Get function input.

";

%feature("docstring")  casadi::SXFunction::inputExpr(const std::string
&iname) const  " ";

%feature("docstring")  casadi::SXFunction::inputExpr() const  "

Get all function inputs.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::SXFunction::hess(int iind=0, int oind=0) "

Hessian (forward over adjoint) via source code transformation

";

%feature("docstring")  casadi::SXFunction::hess(const std::string &iname,
int oind=0) "

Hessian (forward over adjoint) via source code transformation

";

%feature("docstring")  casadi::SXFunction::hess(int iind, const std::string
&oname) "

Hessian (forward over adjoint) via source code transformation

";

%feature("docstring")  casadi::SXFunction::hess(const std::string &iname,
const std::string &oname) "

Hessian (forward over adjoint) via source code transformation

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring") casadi::SXFunction::SXFunction() "

Default constructor.

";

%feature("docstring") casadi::SXFunction::SXFunction(const MXFunction &f) "

Expand an MXFunction.

";

%feature("docstring") casadi::SXFunction::SXFunction(const Function &f) "

Expand an Function.

";

%feature("docstring") casadi::SXFunction::SXFunction(const std::vector< SX >
&arg, const std::vector< SX > &res) "

Multiple (matrix valued) input, multiple (matrix valued) output.

";

%feature("docstring") casadi::SXFunction::SXFunction(const std::vector< SX >
&arg, const IOSchemeVector< SX > &res) "

Multiple (matrix valued) input, multiple (matrix valued) output.

";

%feature("docstring") casadi::SXFunction::SXFunction(const IOSchemeVector<
SX > &arg, const std::vector< SX > &res) "

Multiple (matrix valued) input, multiple (matrix valued) output.

";

%feature("docstring") casadi::SXFunction::SXFunction(const IOSchemeVector<
SX > &arg, const IOSchemeVector< SX > &res) "

Multiple (matrix valued) input, multiple (matrix valued) output.

";

%feature("docstring") casadi::SXFunction::SXFunction(const std::vector<
std::vector< SXElement > > &arg, const std::vector< std::vector< SXElement >
> &res) " [INTERNAL]  Multiple (vector valued) input, multiple (vector
valued) output.

";

%feature("docstring") casadi::SXFunction::SXFunction(const SX &arg, const SX
&res) " [INTERNAL]  Single (scalar/matrix/vector valued) input, single
(scalar/matrix/vector valued) output.

";

%feature("docstring") casadi::SXFunction::SXFunction(const std::vector<
std::vector< SXElement > > &arg, const SX &res) " [INTERNAL]  Multiple
(vector valued) input, single (scalar/vector/matrix valued) output.

";

%feature("docstring") casadi::SXFunction::SXFunction(const std::vector< SX >
&arg, const SX &res) " [INTERNAL]  Multiple (matrix valued) input, single
(scalar/vector/matrix valued) output.

";

%feature("docstring") casadi::SXFunction::SXFunction(const SX &arg, const
std::vector< std::vector< SXElement > > &res) " [INTERNAL]  Single
(scalar/vector/matrix valued) input, multiple (vector valued) output.

";

%feature("docstring") casadi::SXFunction::SXFunction(const SX &arg, const
std::vector< SX > &res) " [INTERNAL]  Single (scalar/vector/matrix valued)
input, multiple (matrix valued) output.

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::SXFunction::jac(int iind=0, int oind=0, bool
compact=false, bool symmetric=false) "

Jacobian via source code transformation.

See:  casadi::Jacobian for an AD approach

";

%feature("docstring")  casadi::SXFunction::jac(const std::string &iname, int
oind=0, bool compact=false, bool symmetric=false) "

Jacobian via source code transformation.

See:  casadi::Jacobian for an AD approach

";

%feature("docstring")  casadi::SXFunction::jac(int iind, const std::string
&oname, bool compact=false, bool symmetric=false) "

Jacobian via source code transformation.

See:  casadi::Jacobian for an AD approach

";

%feature("docstring")  casadi::SXFunction::jac(const std::string &iname,
const std::string &oname, bool compact=false, bool symmetric=false) "

Jacobian via source code transformation.

See:  casadi::Jacobian for an AD approach

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring") casadi::SXFunction "

Dynamically created function that can be expanded into a series of scalar
operations.

Joel Andersson

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| just_in_time | OT_BOOLEAN   | false        | compilation  | casadi::SXFu |
| _sparsity    |              |              | to a CPU or  | nctionIntern |
|              |              |              | GPU using    | al           |
|              |              |              | OpenCL       |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: sx_function.hpp ";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::SXFunction::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::SXFunction::getAtomicOperation(int k) const
"

Get an atomic operation operator index.

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";


// File: classcasadi_1_1SXNode.xml
%feature("docstring")  casadi::SXNode::isNan() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring")  casadi::SXNode::getValue() const  " [INTERNAL]  Get
value of a constant node.

";

%feature("docstring")  casadi::SXNode::print(std::ostream &stream) const  "
[INTERNAL]  print

";

%feature("docstring")  casadi::SXNode::print(std::ostream &stream, long
&remaining_calls) const  " [INTERNAL]  print

";

%feature("docstring")  casadi::SXNode::marked() const  " [INTERNAL] ";

%feature("docstring")  casadi::SXNode::isEqual(const SXNode *node, int
depth) const  " [INTERNAL]  Check if two nodes are equivalent up to a given
depth.

";

%feature("docstring") casadi::SXNode::~SXNode "[INTERNAL]  destructor

";

%feature("docstring")  casadi::SXNode::getIntValue() const  " [INTERNAL]
Get value of a constant node.

";

%feature("docstring")  casadi::SXNode::isSmooth() const  " [INTERNAL]  Check
if smooth.

";

%feature("docstring")  casadi::SXNode::isSymbolic() const  " [INTERNAL]
check properties of a node

";

%feature("docstring")  casadi::SXNode::ndep() const  " [INTERNAL]  Number of
dependencies.

";

%feature("docstring")  casadi::SXNode::getName() const  " [INTERNAL] ";

%feature("docstring")  casadi::SXNode::isInteger() const  " [INTERNAL]
check properties of a node

";

%feature("docstring")  casadi::SXNode::dep(int i) const  " [INTERNAL]  get
the reference of a child

";

%feature("docstring")  casadi::SXNode::dep(int i) " [INTERNAL]  get the
reference of a child

";

%feature("docstring")  casadi::SXNode::init() "[INTERNAL]  Initialize the
node (currently used only to give a similar interface to MXNode)

";

%feature("docstring")  casadi::SXNode::hasDep() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring")  casadi::SXNode::mark() "[INTERNAL] ";

%feature("docstring")  casadi::SXNode::isZero() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring")  casadi::SXNode::isOne() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring")  casadi::SXNode::getOp() const  " [INTERNAL]  get the
operation

";

%feature("docstring") casadi::SXNode::SXNode() "[INTERNAL]  constructor

";

%feature("docstring")  casadi::SXNode::isInf() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring")  casadi::SXNode::isMinusOne() const  " [INTERNAL]
check properties of a node

";

%feature("docstring") casadi::SXNode "[INTERNAL]  Internal node class for
SX.

Joel Andersson

C++ includes: sx_node.hpp ";

%feature("docstring")  casadi::SXNode::isAlmostZero(double tol) const  "
[INTERNAL]  check properties of a node

";

%feature("docstring")  casadi::SXNode::isConstant() const  " [INTERNAL]
check properties of a node

";

%feature("docstring")  casadi::SXNode::isMinusInf() const  " [INTERNAL]
check properties of a node

";


// File: classcasadi_1_1SymbolicMX.xml
%feature("docstring")  casadi::SharedObjectNode::getCount() const  "
[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::MXNode::size() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getSubAssign(const MX &y, const Slice
&i, const Slice &j) const  " [INTERNAL]  Get submatrix assignment.

";

%feature("docstring")  casadi::SymbolicMX::clone() const  " [INTERNAL]
Clone function.

";

%feature("docstring")  casadi::MXNode::isEqual(const MXNode *node, int
depth) const  " [INTERNAL]  Check if two nodes are equivalent up to a given
depth.

";

%feature("docstring")  casadi::MXNode::getAssertion(const MX &y, const
std::string &fail_message="") const  " [INTERNAL]   Assertion.

";

%feature("docstring")  casadi::MXNode::mapping() const  " [INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring")  casadi::MXNode::getFunction() "[INTERNAL]  Get
function reference.

";

%feature("docstring")  casadi::MXNode::getFunction() const  " [INTERNAL]
Get function reference.

";

%feature("docstring")  casadi::MXNode::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied) " [INTERNAL]  Deep copy
data members.

";

%feature("docstring")  casadi::MXNode::getNumOutputs() const  " [INTERNAL]
Number of outputs.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream) const  "
[INTERNAL]  Print a description.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream, long
&remaining_calls) const  " [INTERNAL]  Print expression (make sure number of
calls is not exceeded)

";

%feature("docstring")  casadi::MXNode::getVertcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a vertical concatenation node (vectors only)

";

%feature("docstring") casadi::SymbolicMX "[INTERNAL]  Represents a symbolic
MX.

Joel Andersson

C++ includes: symbolic_mx.hpp ";

%feature("docstring")  casadi::MXNode::getGetNonzeros(const Sparsity &sp,
const std::vector< int > &nz) const  " [INTERNAL]  Get the nonzeros of
matrix.

";

%feature("docstring")  casadi::MXNode::getFunctionOutput() const  "
[INTERNAL]  Get function output.

";

%feature("docstring")  casadi::MXNode::getBinarySwitch(int op, const MX &y)
const  " [INTERNAL]  Get a binary operation operation.

";

%feature("docstring") casadi::SymbolicMX::__nonzero__ "[INTERNAL]  Check
the truth value of this node.

";

%feature("docstring")  casadi::MXNode::getMultiplication(const MX &y, const
Sparsity &sp_z=Sparsity()) const  " [INTERNAL]   Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring")  casadi::SymbolicMX::getName() const  " [INTERNAL]
Get the name.

";

%feature("docstring")  casadi::MXNode::getReshape(const Sparsity &sp) const
" [INTERNAL]   Reshape.

";

%feature("docstring")  casadi::MXNode::setSparsity(const Sparsity &sparsity)
" [INTERNAL]  Set the sparsity.

";

%feature("docstring")  casadi::MXNode::getNormF() const  " [INTERNAL]
Frobenius norm.

";

%feature("docstring")  casadi::MXNode::getHorzcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a horizontal concatenation node.

";

%feature("docstring")  casadi::MXNode::size2() const  " [INTERNAL] ";

%feature("docstring")  casadi::SymbolicMX::evaluateMX(const MXPtrV &input,
MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV
&adjSeed, MXPtrVV &adjSens, bool output_given) " [INTERNAL]  Evaluate the
function symbolically ( MX)

";

%feature("docstring")  casadi::MXNode::evaluateMX(const MXPtrV &input,
MXPtrV &output) " [INTERNAL]  Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring")  casadi::MXNode::size1() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::isMultipleOutput() const  "
[INTERNAL]  Check if a multiple output node.

";

%feature("docstring")  casadi::MXNode::isZero() const  " [INTERNAL]  Check
if identically zero.

";

%feature("docstring")  casadi::MXNode::getSolve(const MX &r, bool tr, const
LinearSolver &linear_solver) const  " [INTERNAL]   Solve a system of linear
equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring") casadi::SymbolicMX::~SymbolicMX "[INTERNAL]
Destructor.

";

%feature("docstring")  casadi::MXNode::getUnary(int op) const  " [INTERNAL]
Get a unary operation.

";

%feature("docstring")  casadi::MXNode::getDeterminant() const  " [INTERNAL]
Determinant.

";

%feature("docstring")  casadi::SharedObjectNode::init() "[INTERNAL]
Initialize the object.

";

%feature("docstring")  casadi::MXNode::getSetNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Assign the nonzeros of a matrix
to another matrix.

";

%feature("docstring")  casadi::SymbolicMX::evaluateSX(const SXPtrV &input,
SXPtrV &output, std::vector< int > &itmp, std::vector< SXElement > &rtmp) "
[INTERNAL]  Evaluate the function symbolically (SX)

";

%feature("docstring")  casadi::MXNode::getInverse() const  " [INTERNAL]
Inverse.

";

%feature("docstring")  casadi::SharedObjectNode::weak() "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring")  casadi::MXNode::generateOperation(std::ostream
&stream, const std::vector< std::string > &arg, const std::vector<
std::string > &res, CodeGenerator &gen) const  " [INTERNAL]  Generate code
for the operation.

";

%feature("docstring")  casadi::MXNode::getAddNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Add the nonzeros of a matrix to
another matrix.

";

%feature("docstring")  casadi::SymbolicMX::getOp() const  " [INTERNAL]  Get
the operation.

";

%feature("docstring")  casadi::MXNode::shape() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getSetSparse(const Sparsity &sp)
const  " [INTERNAL]  Create set sparse.

";

%feature("docstring")  casadi::MXNode::getInnerProd(const MX &y) const  "
[INTERNAL]  Inner product.

";

%feature("docstring")  casadi::MXNode::getNormInf() const  " [INTERNAL]
Infinity norm.

";

%feature("docstring")  casadi::MXNode::getBinary(int op, const MX &y, bool
scX, bool scY) const  " [INTERNAL]  Get a binary operation operation
(matrix-matrix)

";

%feature("docstring")  casadi::MXNode::isIdentity() const  " [INTERNAL]
Check if identity matrix.

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, const std::vector< int > &onz, bool add=false) "
[INTERNAL]  Assign nonzeros (mapping matrix)

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, bool add=false) " [INTERNAL]  Assign nonzeros
(mapping matrix), output indices sequential.

";

%feature("docstring")  casadi::MXNode::getFunctionInput() const  "
[INTERNAL]  Get function input.

";

%feature("docstring")  casadi::MXNode::addDependency(const MX &dep) "
[INTERNAL]  Add a dependency.

";

%feature("docstring")  casadi::MXNode::hasDep() const  " [INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring")  casadi::MXNode::getTranspose() const  " [INTERNAL]
Transpose.

";

%feature("docstring")  casadi::MXNode::getMatrixValue() const  " [INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring")  casadi::MXNode::isUnaryOp() const  " [INTERNAL]
Check if unary operation.

";

%feature("docstring")  casadi::MXNode::getOutput(int oind) const  "
[INTERNAL]  Get an output.

";

%feature("docstring")  casadi::SymbolicMX::printPart(std::ostream &stream,
int part) const  " [INTERNAL]  Print a part of the expression.

";

%feature("docstring")  casadi::MXNode::isOne() const  " [INTERNAL]  Check if
identically one.

";

%feature("docstring")  casadi::MXNode::getSubRef(const Slice &i, const Slice
&j) const  " [INTERNAL]  Get submatrix reference.

";

%feature("docstring")  casadi::SymbolicMX::evaluateD(const DMatrixPtrV
&input, DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double >
&rtmp) " [INTERNAL]  Evaluate the function numerically.

";

%feature("docstring")  casadi::MXNode::simplifyMe(MX &ex) " [INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring")  casadi::MXNode::numInplace() const  " [INTERNAL]  Can
the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring")  casadi::MXNode::isBinaryOp() const  " [INTERNAL]
Check if binary operation.

";

%feature("docstring")  casadi::MXNode::ndep() const  " [INTERNAL]  Number of
dependencies.

";

%feature("docstring")  casadi::SharedObjectNode::assertInit() const  "
[INTERNAL]  Assert that the object has been initialized.

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) const  " [INTERNAL]
dependencies - functions that have to be evaluated before this one

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::sameOpAndDeps(const MXNode *node, int
depth) const  " [INTERNAL]  Checks if two nodes have the same operation and
have equivalent dependencies up to a given depth.

";

%feature("docstring")  casadi::MXNode::isOutputNode() const  " [INTERNAL]
Check if evaluation output.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep) "
[INTERNAL]  Set unary dependency.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2) " [INTERNAL]  Set binary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2, const MX &dep3) " [INTERNAL]  Set ternary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const std::vector< MX
> &dep) " [INTERNAL]  Set multiple dependencies.

";

%feature("docstring") casadi::SymbolicMX::SymbolicMX(const std::string
&name, int nrow=1, int ncol=1) " [INTERNAL]  Constructors.

";

%feature("docstring") casadi::SymbolicMX::SymbolicMX(const std::string
&name, const Sparsity &sp) " [INTERNAL]  Constructors.

";

%feature("docstring")  casadi::MXNode::numel() const  " [INTERNAL]  Get
shape.

";

%feature("docstring")  casadi::MXNode::repr(std::ostream &stream) const  "
[INTERNAL]  Print a representation.

";

%feature("docstring")  casadi::MXNode::getNorm1() const  " [INTERNAL]
1-norm

";

%feature("docstring")  casadi::MXNode::getNorm2() const  " [INTERNAL]
Spectral norm.

";

%feature("docstring")  casadi::MXNode::isNonLinear() "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring")  casadi::MXNode::isValue(double val) const  "
[INTERNAL]  Check if a certain value.

";

%feature("docstring")  casadi::SymbolicMX::propagateSparsity(DMatrixPtrV
&input, DMatrixPtrV &output, bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp,
bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::getValue() const  " [INTERNAL]  Get
the value (only for scalar constant nodes)

";

%feature("docstring")  casadi::MXNode::getHorzsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a horizontal split node.

";

%feature("docstring")  casadi::MXNode::nTmp(size_t &ni, size_t &nr) "
[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::MXNode::getVertsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a vertical split node (vectors
only)

";

%feature("docstring")  casadi::SharedObjectNode::isInit() const  "
[INTERNAL]  Check if the object has been initialized.

";

%feature("docstring")  casadi::MXNode::sparsity() const  " [INTERNAL]  Get
the sparsity.

";

%feature("docstring")  casadi::MXNode::sparsity(int oind) const  "
[INTERNAL]  Get the sparsity of output oind.

";


// File: classcasadi_1_1SymbolicNLP.xml


/*  Symbolic representation of the NLP  */

/* Data members

*/ %feature("docstring")  casadi::SymbolicNLP::parseNL(const std::string
&filename, const Dictionary &options=Dictionary()) "

Parse an AMPL och PyOmo NL-file.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::SymbolicNLP "

A symbolic NLP representation.

Joel Andersson

C++ includes: symbolic_nlp.hpp ";

%feature("docstring")  casadi::SymbolicNLP::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::SymbolicNLP::repr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a representation of the
object.

";


// File: classcasadi_1_1SymbolicOCP.xml


/*  Variables and equations  */

/* Public data members

*/

/*  Objective function terms  */

/* Terms in the objective function.

*/

/*  Manipulation  */

/* Reformulate the dynamic optimization problem.

*/ %feature("docstring")  casadi::SymbolicOCP::setMax(const std::string
&name, const SX &val) "

Set the upper bound by name.

";

%feature("docstring")  casadi::SymbolicOCP::setMax(const SX &var, const SX
&val) "

Set the upper bound(s) by expression.

";

%feature("docstring")  casadi::SymbolicOCP::sortOutputs() "

Sort the outputs.

";

%feature("docstring") casadi::SymbolicOCP::SymbolicOCP(bool
ignore_timed_variables=true) "

Default constructor.

";

%feature("docstring")  casadi::SymbolicOCP::sortDependentParameters() "

Sort the dependent parameters.

";

%feature("docstring")
casadi::SymbolicOCP::eliminateDependentParameterInterdependencies() "

Eliminate interdependencies amongst the dependent parameters.

";

%feature("docstring")  casadi::SymbolicOCP::setBeq(const std::string &name,
const SX &val) "

Set a binding equation by name.

";

%feature("docstring")  casadi::SymbolicOCP::setBeq(const SX &var, const SX
&val) "

Set an binding expression by non-differentiated expression.

";

%feature("docstring")  casadi::SymbolicOCP::scaleVariables() "

Scale the variables.

";

%feature("docstring")  casadi::SymbolicOCP::eliminateAlgebraic() "

Eliminate algebraic variables, transforming them into outputs.

";

%feature("docstring")  casadi::SymbolicOCP::generateMuscodDatFile(const
std::string &filename, const Dictionary &mc2_ops=Dictionary()) const  "

Generate a MUSCOD-II compatible DAT file.

";

%feature("docstring")  casadi::SymbolicOCP::ode(const std::string &name)
const  "

Get a derivative binding equation (i.e. ordinary differential equation, ODE)
by name.

Returns variable expression if unknown.

";

%feature("docstring")  casadi::SymbolicOCP::ode(const SX &var) const  "

Get a derivative binding expression (i.e. ordinary differential equation,
ODE) by non-differentiated expression.

Returns derivative expression if unknown.

";

%feature("docstring")  casadi::SymbolicOCP::scaleEquations() "

Scale the implicit equations.

";

%feature("docstring")  casadi::SymbolicOCP::derivativeStart(const
std::string &name, bool normalized=false) const  "

Get the (optionally normalized) derivative value at time 0 by name.

";

%feature("docstring")  casadi::SymbolicOCP::derivativeStart(const SX &var,
bool normalized=false) const  "

Get the (optionally normalized) derivative value(s) at time 0 by expression.

";

%feature("docstring")  casadi::SymbolicOCP::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print description.

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::SymbolicOCP::nominal(const std::string &name)
const  "

Get the nominal value by name.

";

%feature("docstring")  casadi::SymbolicOCP::nominal(const SX &var) const  "

Get the nominal value(s) by expression.

";

%feature("docstring")  casadi::SymbolicOCP::setInitialGuess(const
std::string &name, const SX &val) "

Set the initial guess by name.

";

%feature("docstring")  casadi::SymbolicOCP::setInitialGuess(const SX &var,
const SX &val) "

Set the initial guess(es) by expression.

";

%feature("docstring")  casadi::SymbolicOCP::eliminateDependentParameters() "

Eliminate dependent parameters.

";

%feature("docstring")  casadi::SymbolicOCP::makeExplicit() "

Transform the implicit DAE or semi-explicit DAE into an explicit ODE.

";

%feature("docstring")  casadi::SymbolicOCP::variable(const std::string
&name) "

Access a variable by name

";

%feature("docstring")  casadi::SymbolicOCP::variable(const std::string
&name) const  "

Access a variable by name

";

%feature("docstring")  casadi::SymbolicOCP::sortDAE() "

Sort the DAE and implicitly defined states.

";

%feature("docstring")  casadi::SymbolicOCP::atTime(const std::string &name,
double t, bool allocate=false) const  "

Timed variable (never allocate)

";

%feature("docstring")  casadi::SymbolicOCP::atTime(const std::string &name,
double t, bool allocate=false) "

Timed variable (allocate if necessary)

";

%feature("docstring")  casadi::SymbolicOCP::setDerivativeStart(const
std::string &name, double val, bool normalized=false) "

Set the (optionally normalized) derivative value at time 0 by name.

";

%feature("docstring")  casadi::SymbolicOCP::setDerivativeStart(const SX
&var, const std::vector< double > &val, bool normalized=false) "

Set the (optionally normalized) derivative value(s) at time 0 by expression.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::SymbolicOCP::beq(const std::string &name)
const  "

Get a binding equation by name.

";

%feature("docstring")  casadi::SymbolicOCP::beq(const SX &var) const  "

Get a binding equation by non-differentiated expression.

";

%feature("docstring")  casadi::SymbolicOCP::makeSemiExplicit() "

Transform the implicit DAE to a semi-explicit DAE.

";

%feature("docstring")  casadi::SymbolicOCP::max(const std::string &name)
const  "

Get the upper bound by name.

";

%feature("docstring")  casadi::SymbolicOCP::max(const SX &var) const  "

Get the upper bound(s) by expression.

";

%feature("docstring")  casadi::SymbolicOCP::eliminateIndependentParameters()
"

Eliminate independent parameters.

";

%feature("docstring")  casadi::SymbolicOCP::min(const std::string &name)
const  "

Get the lower bound by name.

";

%feature("docstring")  casadi::SymbolicOCP::min(const SX &var) const  "

Get the lower bound(s) by expression.

";

%feature("docstring")  casadi::SymbolicOCP::setMin(const std::string &name,
const SX &val) "

Set the lower bound by name.

";

%feature("docstring")  casadi::SymbolicOCP::setMin(const SX &var, const SX
&val) "

Set the lower bound(s) by expression.

";

%feature("docstring")  casadi::SymbolicOCP::setNominal(const std::string
&name, double val) "

Set the nominal value by name.

";

%feature("docstring")  casadi::SymbolicOCP::setNominal(const SX &var, const
std::vector< double > &val) "

Set the nominal value(s) by expression.

";

%feature("docstring")  casadi::SymbolicOCP::setUnit(const std::string &name,
const std::string &val) "

Set the unit for a component.

";

%feature("docstring")  casadi::SymbolicOCP::setOde(const std::string &name,
const SX &val) "

Set a derivative binding equation by name.

";

%feature("docstring")  casadi::SymbolicOCP::setOde(const SX &var, const SX
&val) "

Set an derivative binding expression by non-differentiated expression.

";

%feature("docstring")  casadi::SymbolicOCP::eliminateLagrangeTerms() "

Eliminate Lagrange terms from the objective function and make them
quadrature states.

";

%feature("docstring")  casadi::SymbolicOCP::der(const std::string &name)
const  "

Get a derivative expression by name.

";

%feature("docstring")  casadi::SymbolicOCP::der(const SX &var) const  "

Get a derivative expression by non-differentiated expression.

";

%feature("docstring")  casadi::SymbolicOCP::repr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print representation.

";

%feature("docstring")  casadi::SymbolicOCP::eliminateOutputs() "

Eliminate outputs.

";

%feature("docstring")  casadi::SymbolicOCP::eliminateQuadratureStates() "

Eliminate quadrature states and turn them into ODE states.

";

%feature("docstring")  casadi::SymbolicOCP::sortALG() "

Sort the algebraic equations and algebraic states.

";

%feature("docstring")
casadi::SymbolicOCP::eliminateOutputInterdependencies() "

Eliminate interdependencies amongst the outputs.

";

%feature("docstring") casadi::SymbolicOCP "

A flat OCP representation coupled to an XML file.

Variables:

x:      differential states z:      algebraic states p : independent
parameters t :     time u :     control signals q : quadrature states y :
dependent variables

Equations:

explicit or implicit ODE: \\\\dot{x} = ode(t,x,z,u,p_free,pi,pd) or 0 =
ode(t,x,z,\\\\dot{x},u,p_free,pi,pd) algebraic equations: 0 =
alg(t,x,z,u,p_free,pi,pd) quadratures:              \\\\dot{q} =
quad(t,x,z,u,p_free,pi,pd) dependent equations:            y =
dep(t,x,z,u,p_free,pi,pd) initial equations:              0 =
initial(t,x,z,u,p_free,pi,pd)

Objective function terms:

Mayer terms:          \\\\sum{mterm_k} Lagrange terms:
\\\\sum{\\\\integral{mterm}}

Note that when parsed, all dynamic equations end up in the implicit category
\"dae\". At a later state, the DAE can be reformulated, for example in semi-
explicit form, possibly in addition to a set of quadrature states.

Usage skeleton:

Call default constructor  SymbolicOCP ocp;

Parse an FMI conformant XML file ocp.parseFMI(xml_file_name)

Modify/add variables, equations, optimization ...

When the optimal control problem is in a suitable form, it is possible to
either generate functions for numeric/symbolic evaluation or exporting the
OCP formulation into a new FMI conformant XML file. The latter functionality
is not yet available.

Joel Andersson

C++ includes: symbolic_ocp.hpp ";

%feature("docstring")  casadi::SymbolicOCP::parseFMI(const std::string
&filename) "

Parse from XML to C++ format.

";

%feature("docstring")  casadi::SymbolicOCP::setStart(const std::string
&name, double val, bool normalized=false) "

Set the (optionally normalized) value at time 0 by name.

";

%feature("docstring")  casadi::SymbolicOCP::setStart(const SX &var, const
std::vector< double > &val, bool normalized=false) "

Set the (optionally normalized) value(s) at time 0 by expression.

";

%feature("docstring")  casadi::SymbolicOCP::addVariable(const std::string
&name, const Variable &var) "

Add a variable.

";

%feature("docstring")  casadi::SymbolicOCP::start(const std::string &name,
bool normalized=false) const  "

Get the (optionally normalized) value at time 0 by name.

";

%feature("docstring")  casadi::SymbolicOCP::start(const SX &var, bool
normalized=false) const  "

Get the (optionally normalized) value(s) at time 0 by expression.

";

%feature("docstring")  casadi::SymbolicOCP::initialGuess(const std::string
&name) const  "

Get the initial guess by name.

";

%feature("docstring")  casadi::SymbolicOCP::initialGuess(const SX &var)
const  "

Get the initial guess(es) by expression.

";

%feature("docstring")  casadi::SymbolicOCP::separateAlgebraic() "

Identify and separate the algebraic variables and equations in the DAE.

";

%feature("docstring")  casadi::SymbolicOCP::unit(const std::string &name)
const  "

Get the unit for a component.

";

%feature("docstring")  casadi::SymbolicOCP::unit(const SX &var) const  "

Get the unit given a vector of symbolic variables (all units must be
identical)

";


// File: classcasadi_1_1SymbolicQR.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")  casadi::IOInterface<
Function  >::inputSchemeEntry(const std::string &name) const " [INTERNAL]
Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionNames() const
"

INTERNAL.

Get a list of all option names

";

%feature("docstring")  casadi::LinearSolver::spSolve(bvec_t *X, const bvec_t
*B, bool transpose=false) const  " [INTERNAL]  Propagate sparsity through a
linear solve

";

%feature("docstring")  casadi::LinearSolver::spSolve(DMatrix &X, const
DMatrix &B, bool transpose=false) const  " [INTERNAL]  Propagate sparsity
through a linear solve

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::LinearSolver::solve(bool transpose=false) "

Solve the system of equations, internal vector.

";

%feature("docstring")  casadi::LinearSolver::solve(double *x, int nrhs=1,
bool transpose=false) " [INTERNAL]   Solve the factorized system of
equations.

";

%feature("docstring")  casadi::LinearSolver::solve(const MX &A, const MX &B,
bool transpose=false) "

Create a solve node.

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::LinearSolver::prepared() const  "

Check if prepared.

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::SymbolicQR::SymbolicQR() "

Default (empty) constructor.

";

%feature("docstring") casadi::SymbolicQR::SymbolicQR(const Sparsity &sp, int
nrhs=1) "

Create a linear solver given a sparsity pattern.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring") casadi::SymbolicQR "

LinearSolver based on QR factorization with sparsity pattern based
reordering without partial pivoting.

Solves the linear system A*X = B or A^T*X = B for X with A square and non-
singular

If A is structurally singular, an error will be thrown during init. If A is
numerically singular, the prepare step will fail. Joel Andersson

>Input scheme: casadi::LinsolInput (LINSOL_NUM_IN = 3) [linsolIn]
+-----------+-------+------------------------------------------------+
| Full name | Short |                  Description                   |
+===========+=======+================================================+
| LINSOL_A  | A     | The square matrix A: sparse, (n x n). .        |
+-----------+-------+------------------------------------------------+
| LINSOL_B  | B     | The right-hand-side matrix b: dense, (n x m) . |
+-----------+-------+------------------------------------------------+

>Output scheme: casadi::LinsolOutput (LINSOL_NUM_OUT = 2) [linsolOut]
+-----------+-------+----------------------------------------------+
| Full name | Short |                 Description                  |
+===========+=======+==============================================+
| LINSOL_X  | X     | Solution to the linear system of equations . |
+-----------+-------+----------------------------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| codegen      | OT_BOOLEAN   | false        | C-code       | casadi::Symb |
|              |              |              | generation   | olicQRIntern |
|              |              |              |              | al           |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Func |
| rn           |              | scaleIntern  | scaling on   | tionInternal |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+

Diagrams

C++ includes: symbolic_qr.hpp ";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::LinearSolver::prepare() "

Factorize the matrix.

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::SymbolicQR::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";


// File: classcasadi_1_1SymbolicSX.xml
%feature("docstring") casadi::SymbolicSX "[INTERNAL]  Represents a scalar
symbolic expression.

Joel Andersson

C++ includes: symbolic_sx.hpp ";

%feature("docstring") casadi::SymbolicSX::~SymbolicSX "[INTERNAL] ";

%feature("docstring")  casadi::SXNode::isZero() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring")  casadi::SXNode::isInteger() const  " [INTERNAL]
check properties of a node

";

%feature("docstring")  casadi::SXNode::isNan() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring")  casadi::SXNode::getIntValue() const  " [INTERNAL]
Get value of a constant node.

";

%feature("docstring")  casadi::SXNode::marked() const  " [INTERNAL] ";

%feature("docstring")  casadi::SXNode::isOne() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring")  casadi::SymbolicSX::isSymbolic() const  " [INTERNAL]
check properties of a node

";

%feature("docstring")  casadi::SXNode::hasDep() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring")  casadi::SXNode::init() "[INTERNAL]  Initialize the
node (currently used only to give a similar interface to MXNode)

";

%feature("docstring")  casadi::SXNode::isInf() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring")  casadi::SymbolicSX::getName() const  " [INTERNAL] ";

%feature("docstring")  casadi::SXNode::isSmooth() const  " [INTERNAL]  Check
if smooth.

";

%feature("docstring")  casadi::SXNode::isConstant() const  " [INTERNAL]
check properties of a node

";

%feature("docstring")  casadi::SXNode::mark() "[INTERNAL] ";

%feature("docstring")  casadi::SXNode::dep(int i) const  " [INTERNAL]  get
the reference of a child

";

%feature("docstring")  casadi::SXNode::dep(int i) " [INTERNAL]  get the
reference of a child

";

%feature("docstring")  casadi::SXNode::isAlmostZero(double tol) const  "
[INTERNAL]  check properties of a node

";

%feature("docstring")  casadi::SymbolicSX::getOp() const  " [INTERNAL]  Get
the operation.

";

%feature("docstring")  casadi::SXNode::isMinusOne() const  " [INTERNAL]
check properties of a node

";

%feature("docstring")  casadi::SXNode::ndep() const  " [INTERNAL]  Number of
dependencies.

";

%feature("docstring")  casadi::SXNode::isMinusInf() const  " [INTERNAL]
check properties of a node

";

%feature("docstring") casadi::SymbolicSX::SymbolicSX(const std::string
&name) " [INTERNAL] ";

%feature("docstring")  casadi::SXNode::print(std::ostream &stream) const  "
[INTERNAL]  print

";

%feature("docstring")  casadi::SXNode::getValue() const  " [INTERNAL]  Get
value of a constant node.

";

%feature("docstring")  casadi::SXNode::isEqual(const SXNode *node, int
depth) const  " [INTERNAL]  Check if two nodes are equivalent up to a given
depth.

";


// File: classcasadi_1_1Transpose.xml
%feature("docstring")  casadi::MXNode::getFunctionOutput() const  "
[INTERNAL]  Get function output.

";

%feature("docstring")  casadi::MXNode::getSubRef(const Slice &i, const Slice
&j) const  " [INTERNAL]  Get submatrix reference.

";

%feature("docstring")  casadi::MXNode::getMultiplication(const MX &y, const
Sparsity &sp_z=Sparsity()) const  " [INTERNAL]   Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring")  casadi::MXNode::getNorm2() const  " [INTERNAL]
Spectral norm.

";

%feature("docstring")  casadi::MXNode::getNorm1() const  " [INTERNAL]
1-norm

";

%feature("docstring")  casadi::SharedObjectNode::getCount() const  "
[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::MXNode::addDependency(const MX &dep) "
[INTERNAL]  Add a dependency.

";

%feature("docstring") casadi::Transpose::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring")  casadi::MXNode::getFunction() "[INTERNAL]  Get
function reference.

";

%feature("docstring")  casadi::MXNode::getFunction() const  " [INTERNAL]
Get function reference.

";

%feature("docstring")  casadi::MXNode::size2() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::isOne() const  " [INTERNAL]  Check if
identically one.

";

%feature("docstring")  casadi::Transpose::evaluateMX(const MXPtrV &input,
MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV
&adjSeed, MXPtrVV &adjSens, bool output_given) " [INTERNAL]  Evaluate the
function symbolically ( MX)

";

%feature("docstring")  casadi::MXNode::evaluateMX(const MXPtrV &input,
MXPtrV &output) " [INTERNAL]  Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring")  casadi::MXNode::getInnerProd(const MX &y) const  "
[INTERNAL]  Inner product.

";

%feature("docstring")  casadi::SharedObjectNode::init() "[INTERNAL]
Initialize the object.

";

%feature("docstring")  casadi::MXNode::repr(std::ostream &stream) const  "
[INTERNAL]  Print a representation.

";

%feature("docstring")  casadi::MXNode::getReshape(const Sparsity &sp) const
" [INTERNAL]   Reshape.

";

%feature("docstring")  casadi::MXNode::getVertsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a vertical split node (vectors
only)

";

%feature("docstring")  casadi::Transpose::propagateSparsity(DMatrixPtrV
&input, DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double >
&rtmp, bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, bool fwd) " [INTERNAL]  Propagate sparsity, no work.

";

%feature("docstring")  casadi::MXNode::getFunctionInput() const  "
[INTERNAL]  Get function input.

";

%feature("docstring")  casadi::MXNode::isBinaryOp() const  " [INTERNAL]
Check if binary operation.

";

%feature("docstring")  casadi::MXNode::mapping() const  " [INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep) "
[INTERNAL]  Set unary dependency.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2) " [INTERNAL]  Set binary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2, const MX &dep3) " [INTERNAL]  Set ternary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const std::vector< MX
> &dep) " [INTERNAL]  Set multiple dependencies.

";

%feature("docstring")  casadi::MXNode::simplifyMe(MX &ex) " [INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring")  casadi::MXNode::numel() const  " [INTERNAL]  Get
shape.

";

%feature("docstring")  casadi::MXNode::isOutputNode() const  " [INTERNAL]
Check if evaluation output.

";

%feature("docstring")  casadi::MXNode::getNormF() const  " [INTERNAL]
Frobenius norm.

";

%feature("docstring")  casadi::MXNode::getVertcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a vertical concatenation node (vectors only)

";

%feature("docstring")  casadi::MXNode::getName() const  " [INTERNAL]  Get
the name.

";

%feature("docstring")  casadi::MXNode::isValue(double val) const  "
[INTERNAL]  Check if a certain value.

";

%feature("docstring")  casadi::MXNode::sparsity() const  " [INTERNAL]  Get
the sparsity.

";

%feature("docstring")  casadi::MXNode::sparsity(int oind) const  "
[INTERNAL]  Get the sparsity of output oind.

";

%feature("docstring")  casadi::Transpose::evaluateD(const DMatrixPtrV
&input, DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double >
&rtmp) " [INTERNAL]  Evaluate the function numerically.

";

%feature("docstring")  casadi::MXNode::getBinarySwitch(int op, const MX &y)
const  " [INTERNAL]  Get a binary operation operation.

";

%feature("docstring")  casadi::Transpose::printPart(std::ostream &stream,
int part) const  " [INTERNAL]  Print a part of the expression */.

";

%feature("docstring")  casadi::Transpose::evaluateSX(const SXPtrV &input,
SXPtrV &output, std::vector< int > &itmp, std::vector< SXElement > &rtmp) "
[INTERNAL]  Evaluate the function symbolically (SX)

";

%feature("docstring")  casadi::MXNode::getNormInf() const  " [INTERNAL]
Infinity norm.

";

%feature("docstring")  casadi::MXNode::getHorzsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a horizontal split node.

";

%feature("docstring")  casadi::Transpose::generateOperation(std::ostream
&stream, const std::vector< std::string > &arg, const std::vector<
std::string > &res, CodeGenerator &gen) const  " [INTERNAL]  Generate code
for the operation.

";

%feature("docstring") casadi::Transpose::Transpose(const MX &x) " [INTERNAL]
Constructor.

";

%feature("docstring")  casadi::Transpose::nTmp(size_t &ni, size_t &nr) "
[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::MXNode::numInplace() const  " [INTERNAL]  Can
the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring")  casadi::MXNode::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied) " [INTERNAL]  Deep copy
data members.

";

%feature("docstring")  casadi::Transpose::getOp() const  " [INTERNAL]  Get
the operation.

";

%feature("docstring")  casadi::MXNode::getSetNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Assign the nonzeros of a matrix
to another matrix.

";

%feature("docstring")  casadi::MXNode::isUnaryOp() const  " [INTERNAL]
Check if unary operation.

";

%feature("docstring")  casadi::MXNode::getSubAssign(const MX &y, const Slice
&i, const Slice &j) const  " [INTERNAL]  Get submatrix assignment.

";

%feature("docstring")  casadi::MXNode::getAssertion(const MX &y, const
std::string &fail_message="") const  " [INTERNAL]   Assertion.

";

%feature("docstring")  casadi::MXNode::getDeterminant() const  " [INTERNAL]
Determinant.

";

%feature("docstring")  casadi::Transpose::clone() const  " [INTERNAL]  Clone
function.

";

%feature("docstring")  casadi::MXNode::getAddNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Add the nonzeros of a matrix to
another matrix.

";

%feature("docstring")  casadi::MXNode::getBinary(int op, const MX &y, bool
scX, bool scY) const  " [INTERNAL]  Get a binary operation operation
(matrix-matrix)

";

%feature("docstring")  casadi::MXNode::getMatrixValue() const  " [INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring")  casadi::MXNode::getSetSparse(const Sparsity &sp)
const  " [INTERNAL]  Create set sparse.

";

%feature("docstring") casadi::Transpose::~Transpose "[INTERNAL]
Destructor.

";

%feature("docstring")  casadi::MXNode::sameOpAndDeps(const MXNode *node, int
depth) const  " [INTERNAL]  Checks if two nodes have the same operation and
have equivalent dependencies up to a given depth.

";

%feature("docstring")  casadi::MXNode::getInverse() const  " [INTERNAL]
Inverse.

";

%feature("docstring")  casadi::MXNode::getSolve(const MX &r, bool tr, const
LinearSolver &linear_solver) const  " [INTERNAL]   Solve a system of linear
equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring")  casadi::MXNode::size1() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::isMultipleOutput() const  "
[INTERNAL]  Check if a multiple output node.

";

%feature("docstring")  casadi::MXNode::size() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::dep(int ind=0) const  " [INTERNAL]
dependencies - functions that have to be evaluated before this one

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getOutput(int oind) const  "
[INTERNAL]  Get an output.

";

%feature("docstring")  casadi::MXNode::getGetNonzeros(const Sparsity &sp,
const std::vector< int > &nz) const  " [INTERNAL]  Get the nonzeros of
matrix.

";

%feature("docstring")  casadi::Transpose::isEqual(const MXNode *node, int
depth) const  " [INTERNAL]   Solve for square linear system.

Check if two nodes are equivalent up to a given depth

";

%feature("docstring")  casadi::MXNode::isZero() const  " [INTERNAL]  Check
if identically zero.

";

%feature("docstring")  casadi::MXNode::getValue() const  " [INTERNAL]  Get
the value (only for scalar constant nodes)

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream) const  "
[INTERNAL]  Print a description.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream, long
&remaining_calls) const  " [INTERNAL]  Print expression (make sure number of
calls is not exceeded)

";

%feature("docstring")  casadi::MXNode::getUnary(int op) const  " [INTERNAL]
Get a unary operation.

";

%feature("docstring")  casadi::Transpose::evaluateGen(const MatV &input,
MatV &output, std::vector< int > &itmp, std::vector< T > &rtmp) " [INTERNAL]
Evaluate the function (template)

";

%feature("docstring")  casadi::SharedObjectNode::assertInit() const  "
[INTERNAL]  Assert that the object has been initialized.

";

%feature("docstring")  casadi::Transpose::getTranspose() const  " [INTERNAL]
Transpose.

";

%feature("docstring")  casadi::MXNode::isIdentity() const  " [INTERNAL]
Check if identity matrix.

";

%feature("docstring")  casadi::SharedObjectNode::isInit() const  "
[INTERNAL]  Check if the object has been initialized.

";

%feature("docstring")  casadi::MXNode::shape() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::hasDep() const  " [INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring")  casadi::MXNode::setSparsity(const Sparsity &sparsity)
" [INTERNAL]  Set the sparsity.

";

%feature("docstring")  casadi::MXNode::getHorzcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a horizontal concatenation node.

";

%feature("docstring") casadi::Transpose "[INTERNAL]   Matrix transpose.

Joel Andersson

C++ includes: transpose.hpp ";

%feature("docstring")  casadi::MXNode::getNumOutputs() const  " [INTERNAL]
Number of outputs.

";

%feature("docstring")  casadi::MXNode::ndep() const  " [INTERNAL]  Number of
dependencies.

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, const std::vector< int > &onz, bool add=false) "
[INTERNAL]  Assign nonzeros (mapping matrix)

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, bool add=false) " [INTERNAL]  Assign nonzeros
(mapping matrix), output indices sequential.

";

%feature("docstring")  casadi::MXNode::isNonLinear() "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring")  casadi::SharedObjectNode::weak() "[INTERNAL]  Get a
weak reference to the object.

";


// File: classcasadi_1_1UnaryMX.xml
%feature("docstring")  casadi::MXNode::getSetSparse(const Sparsity &sp)
const  " [INTERNAL]  Create set sparse.

";

%feature("docstring")  casadi::MXNode::hasDep() const  " [INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring")  casadi::MXNode::isZero() const  " [INTERNAL]  Check
if identically zero.

";

%feature("docstring")  casadi::UnaryMX::getBinary(int op, const MX &y, bool
scX, bool scY) const  " [INTERNAL]  Get a binary operation operation.

";

%feature("docstring")  casadi::UnaryMX::evaluateMX(const MXPtrV &input,
MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV
&adjSeed, MXPtrVV &adjSens, bool output_given) " [INTERNAL]  Evaluate the
function symbolically ( MX)

";

%feature("docstring")  casadi::MXNode::evaluateMX(const MXPtrV &input,
MXPtrV &output) " [INTERNAL]  Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring")  casadi::MXNode::nTmp(size_t &ni, size_t &nr) "
[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::MXNode::setSparsity(const Sparsity &sparsity)
" [INTERNAL]  Set the sparsity.

";

%feature("docstring")  casadi::MXNode::getNormInf() const  " [INTERNAL]
Infinity norm.

";

%feature("docstring")  casadi::SharedObjectNode::weak() "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring")  casadi::MXNode::getValue() const  " [INTERNAL]  Get
the value (only for scalar constant nodes)

";

%feature("docstring")  casadi::MXNode::getAssertion(const MX &y, const
std::string &fail_message="") const  " [INTERNAL]   Assertion.

";

%feature("docstring")  casadi::MXNode::getFunction() "[INTERNAL]  Get
function reference.

";

%feature("docstring")  casadi::MXNode::getFunction() const  " [INTERNAL]
Get function reference.

";

%feature("docstring")  casadi::MXNode::getSetNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Assign the nonzeros of a matrix
to another matrix.

";

%feature("docstring")  casadi::MXNode::size1() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::size2() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::dep(int ind=0) const  " [INTERNAL]
dependencies - functions that have to be evaluated before this one

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::sparsity() const  " [INTERNAL]  Get
the sparsity.

";

%feature("docstring")  casadi::MXNode::sparsity(int oind) const  "
[INTERNAL]  Get the sparsity of output oind.

";

%feature("docstring")  casadi::MXNode::getVertcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a vertical concatenation node (vectors only)

";

%feature("docstring")  casadi::MXNode::repr(std::ostream &stream) const  "
[INTERNAL]  Print a representation.

";

%feature("docstring")  casadi::MXNode::getBinarySwitch(int op, const MX &y)
const  " [INTERNAL]  Get a binary operation operation.

";

%feature("docstring")  casadi::MXNode::getReshape(const Sparsity &sp) const
" [INTERNAL]   Reshape.

";

%feature("docstring") casadi::UnaryMX::UnaryMX(Operation op, MX x) "
[INTERNAL]  Constructor is private, use \"create\" below.

";

%feature("docstring")  casadi::MXNode::getSubAssign(const MX &y, const Slice
&i, const Slice &j) const  " [INTERNAL]  Get submatrix assignment.

";

%feature("docstring")  casadi::SharedObjectNode::isInit() const  "
[INTERNAL]  Check if the object has been initialized.

";

%feature("docstring")  casadi::MXNode::isMultipleOutput() const  "
[INTERNAL]  Check if a multiple output node.

";

%feature("docstring")  casadi::MXNode::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied) " [INTERNAL]  Deep copy
data members.

";

%feature("docstring")  casadi::MXNode::getOutput(int oind) const  "
[INTERNAL]  Get an output.

";

%feature("docstring")  casadi::MXNode::getAddNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Add the nonzeros of a matrix to
another matrix.

";

%feature("docstring")  casadi::UnaryMX::getOp() const  " [INTERNAL]  Get the
operation.

";

%feature("docstring")  casadi::MXNode::getNormF() const  " [INTERNAL]
Frobenius norm.

";

%feature("docstring")  casadi::MXNode::getName() const  " [INTERNAL]  Get
the name.

";

%feature("docstring")  casadi::MXNode::getVertsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a vertical split node (vectors
only)

";

%feature("docstring")  casadi::UnaryMX::printPart(std::ostream &stream, int
part) const  " [INTERNAL]  Print a part of the expression.

";

%feature("docstring") casadi::UnaryMX::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring")  casadi::SharedObjectNode::getCount() const  "
[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::MXNode::getInnerProd(const MX &y) const  "
[INTERNAL]  Inner product.

";

%feature("docstring")  casadi::MXNode::getGetNonzeros(const Sparsity &sp,
const std::vector< int > &nz) const  " [INTERNAL]  Get the nonzeros of
matrix.

";

%feature("docstring")  casadi::MXNode::getSolve(const MX &r, bool tr, const
LinearSolver &linear_solver) const  " [INTERNAL]   Solve a system of linear
equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring")  casadi::MXNode::shape() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::isBinaryOp() const  " [INTERNAL]
Check if binary operation.

";

%feature("docstring")  casadi::MXNode::mapping() const  " [INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring")  casadi::MXNode::isOne() const  " [INTERNAL]  Check if
identically one.

";

%feature("docstring")  casadi::MXNode::isNonLinear() "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring")  casadi::UnaryMX::evaluateD(const DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp)
" [INTERNAL]  Evaluate the function numerically.

";

%feature("docstring")  casadi::MXNode::getDeterminant() const  " [INTERNAL]
Determinant.

";

%feature("docstring")  casadi::MXNode::getFunctionInput() const  "
[INTERNAL]  Get function input.

";

%feature("docstring") casadi::UnaryMX "[INTERNAL]  Represents a general
unary operation on an MX.

Joel Andersson

C++ includes: unary_mx.hpp ";

%feature("docstring")  casadi::MXNode::addDependency(const MX &dep) "
[INTERNAL]  Add a dependency.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream) const  "
[INTERNAL]  Print a description.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream, long
&remaining_calls) const  " [INTERNAL]  Print expression (make sure number of
calls is not exceeded)

";

%feature("docstring")  casadi::MXNode::ndep() const  " [INTERNAL]  Number of
dependencies.

";

%feature("docstring")  casadi::MXNode::getSubRef(const Slice &i, const Slice
&j) const  " [INTERNAL]  Get submatrix reference.

";

%feature("docstring")  casadi::UnaryMX::numInplace() const  " [INTERNAL]
Can the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring")  casadi::UnaryMX::generateOperation(std::ostream
&stream, const std::vector< std::string > &arg, const std::vector<
std::string > &res, CodeGenerator &gen) const  " [INTERNAL]  Generate code
for the operation.

";

%feature("docstring")  casadi::UnaryMX::evaluateSX(const SXPtrV &input,
SXPtrV &output, std::vector< int > &itmp, std::vector< SXElement > &rtmp) "
[INTERNAL]  Evaluate the function symbolically (SX)

";

%feature("docstring")  casadi::UnaryMX::isEqual(const MXNode *node, int
depth) const  " [INTERNAL]  Check if two nodes are equivalent up to a given
depth.

";

%feature("docstring")  casadi::UnaryMX::propagateSparsity(DMatrixPtrV
&input, DMatrixPtrV &output, bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp,
bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::getNumOutputs() const  " [INTERNAL]
Number of outputs.

";

%feature("docstring")  casadi::MXNode::isValue(double val) const  "
[INTERNAL]  Check if a certain value.

";

%feature("docstring")  casadi::SharedObjectNode::init() "[INTERNAL]
Initialize the object.

";

%feature("docstring") casadi::UnaryMX::~UnaryMX "[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::UnaryMX::isUnaryOp() const  " [INTERNAL]
Check if unary operation.

";

%feature("docstring")  casadi::MXNode::getHorzcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a horizontal concatenation node.

";

%feature("docstring")  casadi::MXNode::getTranspose() const  " [INTERNAL]
Transpose.

";

%feature("docstring")  casadi::MXNode::getInverse() const  " [INTERNAL]
Inverse.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep) "
[INTERNAL]  Set unary dependency.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2) " [INTERNAL]  Set binary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2, const MX &dep3) " [INTERNAL]  Set ternary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const std::vector< MX
> &dep) " [INTERNAL]  Set multiple dependencies.

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, const std::vector< int > &onz, bool add=false) "
[INTERNAL]  Assign nonzeros (mapping matrix)

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, bool add=false) " [INTERNAL]  Assign nonzeros
(mapping matrix), output indices sequential.

";

%feature("docstring")  casadi::SharedObjectNode::assertInit() const  "
[INTERNAL]  Assert that the object has been initialized.

";

%feature("docstring")  casadi::UnaryMX::clone() const  " [INTERNAL]  Clone
function.

";

%feature("docstring")  casadi::MXNode::getNorm1() const  " [INTERNAL]
1-norm

";

%feature("docstring")  casadi::MXNode::getMatrixValue() const  " [INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring")  casadi::UnaryMX::getUnary(int op) const  " [INTERNAL]
Get a unary operation.

";

%feature("docstring")  casadi::MXNode::size() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::numel() const  " [INTERNAL]  Get
shape.

";

%feature("docstring")  casadi::MXNode::getHorzsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a horizontal split node.

";

%feature("docstring")  casadi::MXNode::isIdentity() const  " [INTERNAL]
Check if identity matrix.

";

%feature("docstring")  casadi::MXNode::simplifyMe(MX &ex) " [INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring")  casadi::MXNode::getFunctionOutput() const  "
[INTERNAL]  Get function output.

";

%feature("docstring")  casadi::MXNode::getMultiplication(const MX &y, const
Sparsity &sp_z=Sparsity()) const  " [INTERNAL]   Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring")  casadi::MXNode::getNorm2() const  " [INTERNAL]
Spectral norm.

";

%feature("docstring")  casadi::MXNode::sameOpAndDeps(const MXNode *node, int
depth) const  " [INTERNAL]  Checks if two nodes have the same operation and
have equivalent dependencies up to a given depth.

";

%feature("docstring")  casadi::MXNode::isOutputNode() const  " [INTERNAL]
Check if evaluation output.

";


// File: structcasadi_1_1UnaryOperation.xml
%feature("docstring") casadi::UnaryOperation "[INTERNAL] C++ includes:
casadi_calculus.hpp ";


// File: structcasadi_1_1UnaryOperation_3_01OP__ACOS_01_4.xml
%feature("docstring") casadi::UnaryOperation< OP_ACOS > " [INTERNAL]  Arcus
cosine.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1UnaryOperation_3_01OP__ACOSH_01_4.xml
%feature("docstring") casadi::UnaryOperation< OP_ACOSH > " [INTERNAL]
Inverse hyperbolic cosine.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1UnaryOperation_3_01OP__ASIN_01_4.xml
%feature("docstring") casadi::UnaryOperation< OP_ASIN > " [INTERNAL]  Arcus
sine.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1UnaryOperation_3_01OP__ASINH_01_4.xml
%feature("docstring") casadi::UnaryOperation< OP_ASINH > " [INTERNAL]
Inverse hyperbolic sine.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1UnaryOperation_3_01OP__ASSIGN_01_4.xml
%feature("docstring") casadi::UnaryOperation< OP_ASSIGN > " [INTERNAL]
Simple assignment.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1UnaryOperation_3_01OP__ATAN_01_4.xml
%feature("docstring") casadi::UnaryOperation< OP_ATAN > " [INTERNAL]  Arcus
tangent.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1UnaryOperation_3_01OP__ATANH_01_4.xml
%feature("docstring") casadi::UnaryOperation< OP_ATANH > " [INTERNAL]
Inverse hyperbolic tangent.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1UnaryOperation_3_01OP__CEIL_01_4.xml
%feature("docstring") casadi::UnaryOperation< OP_CEIL > " [INTERNAL]  Ceil
function.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1UnaryOperation_3_01OP__COS_01_4.xml
%feature("docstring") casadi::UnaryOperation< OP_COS > " [INTERNAL]  Cosine.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1UnaryOperation_3_01OP__COSH_01_4.xml
%feature("docstring") casadi::UnaryOperation< OP_COSH > " [INTERNAL]
Hyperbolic cosine.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1UnaryOperation_3_01OP__ERF_01_4.xml
%feature("docstring") casadi::UnaryOperation< OP_ERF > " [INTERNAL]  Error
function.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1UnaryOperation_3_01OP__ERFINV_01_4.xml
%feature("docstring") casadi::UnaryOperation< OP_ERFINV > " [INTERNAL]
Inverse of error function.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1UnaryOperation_3_01OP__EXP_01_4.xml
%feature("docstring") casadi::UnaryOperation< OP_EXP > " [INTERNAL]  Natural
exponent.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1UnaryOperation_3_01OP__FABS_01_4.xml
%feature("docstring") casadi::UnaryOperation< OP_FABS > " [INTERNAL]
Absolute value.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1UnaryOperation_3_01OP__FLOOR_01_4.xml
%feature("docstring") casadi::UnaryOperation< OP_FLOOR > " [INTERNAL]  Floor
function.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1UnaryOperation_3_01OP__INV_01_4.xml
%feature("docstring") casadi::UnaryOperation< OP_INV > " [INTERNAL]
Elementwise inverse.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1UnaryOperation_3_01OP__LOG_01_4.xml
%feature("docstring") casadi::UnaryOperation< OP_LOG > " [INTERNAL]  Natural
logarithm.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1UnaryOperation_3_01OP__NEG_01_4.xml
%feature("docstring") casadi::UnaryOperation< OP_NEG > " [INTERNAL]
Negation.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1UnaryOperation_3_01OP__NOT_01_4.xml
%feature("docstring") casadi::UnaryOperation< OP_NOT > " [INTERNAL]  Logical
not.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1UnaryOperation_3_01OP__SIGN_01_4.xml
%feature("docstring") casadi::UnaryOperation< OP_SIGN > " [INTERNAL]  Sign.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1UnaryOperation_3_01OP__SIN_01_4.xml
%feature("docstring") casadi::UnaryOperation< OP_SIN > " [INTERNAL]  Sine.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1UnaryOperation_3_01OP__SINH_01_4.xml
%feature("docstring") casadi::UnaryOperation< OP_SINH > " [INTERNAL]
Hyperbolic sine.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1UnaryOperation_3_01OP__SQ_01_4.xml
%feature("docstring") casadi::UnaryOperation< OP_SQ > " [INTERNAL]  Square.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1UnaryOperation_3_01OP__SQRT_01_4.xml
%feature("docstring") casadi::UnaryOperation< OP_SQRT > " [INTERNAL]  Square
root.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1UnaryOperation_3_01OP__TAN_01_4.xml
%feature("docstring") casadi::UnaryOperation< OP_TAN > " [INTERNAL]
Tangent.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1UnaryOperation_3_01OP__TANH_01_4.xml
%feature("docstring") casadi::UnaryOperation< OP_TANH > " [INTERNAL]
Hyperbolic tangent.

C++ includes: casadi_calculus.hpp ";


// File: structcasadi_1_1UnaryOperation_3_01OP__TWICE_01_4.xml
%feature("docstring") casadi::UnaryOperation< OP_TWICE > " [INTERNAL]  Times
two.

C++ includes: casadi_calculus.hpp ";


// File: classcasadi_1_1UnarySX.xml
%feature("docstring")  casadi::SXNode::isSymbolic() const  " [INTERNAL]
check properties of a node

";

%feature("docstring")  casadi::SXNode::init() "[INTERNAL]  Initialize the
node (currently used only to give a similar interface to MXNode)

";

%feature("docstring")  casadi::SXNode::isOne() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring")  casadi::SXNode::getName() const  " [INTERNAL] ";

%feature("docstring")  casadi::UnarySX::dep(int i) const  " [INTERNAL]  get
the reference of a dependency

";

%feature("docstring")  casadi::UnarySX::dep(int i) " [INTERNAL]  get the
reference of a child

";

%feature("docstring")  casadi::UnarySX::hasDep() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring")  casadi::SXNode::isMinusInf() const  " [INTERNAL]
check properties of a node

";

%feature("docstring")  casadi::SXNode::isConstant() const  " [INTERNAL]
check properties of a node

";

%feature("docstring")  casadi::UnarySX::isEqual(const SXNode *node, int
depth) const  " [INTERNAL]  Check if two nodes are equivalent up to a given
depth.

";

%feature("docstring")  casadi::SXNode::isInf() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring") casadi::UnarySX::~UnarySX "[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::UnarySX::isSmooth() const  " [INTERNAL]
Check if smooth.

";

%feature("docstring")  casadi::SXNode::getValue() const  " [INTERNAL]  Get
value of a constant node.

";

%feature("docstring")  casadi::UnarySX::ndep() const  " [INTERNAL]  Number
of dependencies.

";

%feature("docstring")  casadi::SXNode::isMinusOne() const  " [INTERNAL]
check properties of a node

";

%feature("docstring")  casadi::SXNode::mark() "[INTERNAL] ";

%feature("docstring")  casadi::SXNode::isNan() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring")  casadi::UnarySX::print(std::ostream &stream, long
&remaining_calls) const  " [INTERNAL]  Print the expression (recursively
with a maximum number of levels)

";

%feature("docstring")  casadi::SXNode::print(std::ostream &stream) const  "
[INTERNAL]  print

";

%feature("docstring")  casadi::SXNode::getIntValue() const  " [INTERNAL]
Get value of a constant node.

";

%feature("docstring")  casadi::SXNode::isAlmostZero(double tol) const  "
[INTERNAL]  check properties of a node

";

%feature("docstring") casadi::UnarySX "[INTERNAL]  Represents a basic unary
operation on an SXElement node.

Joel Andersson

C++ includes: unary_sx.hpp ";

%feature("docstring")  casadi::SXNode::isInteger() const  " [INTERNAL]
check properties of a node

";

%feature("docstring")  casadi::UnarySX::getOp() const  " [INTERNAL]  Get the
operation.

";

%feature("docstring")  casadi::SXNode::marked() const  " [INTERNAL] ";

%feature("docstring")  casadi::SXNode::isZero() const  " [INTERNAL]  check
properties of a node

";


// File: structcasadi_1_1Variable.xml
%feature("docstring") casadi::Variable "

Holds expressions and meta-data corresponding to a physical quantity
evolving in time.

Joel Andersson

C++ includes: variable.hpp ";

%feature("docstring")  casadi::Variable::setName(const std::string &name) "

Set the variable name (and corresponding expressions)

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::Variable::name() const  "

Variable name.

";

%feature("docstring") casadi::Variable::Variable() "

Default constructor.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::Variable::atTime(double t, bool
allocate=false) const  "

Timed variable (never allocate)

";

%feature("docstring")  casadi::Variable::atTime(double t, bool
allocate=false) "

Timed variable (allocate if necessary)

";


// File: classcasadi_1_1Vertcat.xml
%feature("docstring")  casadi::Vertcat::printPart(std::ostream &stream, int
part) const  " [INTERNAL]  Print a part of the expression */.

";

%feature("docstring")  casadi::MXNode::addDependency(const MX &dep) "
[INTERNAL]  Add a dependency.

";

%feature("docstring")  casadi::MXNode::getInnerProd(const MX &y) const  "
[INTERNAL]  Inner product.

";

%feature("docstring")  casadi::MXNode::getMultiplication(const MX &y, const
Sparsity &sp_z=Sparsity()) const  " [INTERNAL]   Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring")  casadi::Concat::isEqual(const MXNode *node, int
depth) const  " [INTERNAL]  Check if two nodes are equivalent up to a given
depth.

";

%feature("docstring")  casadi::MXNode::sameOpAndDeps(const MXNode *node, int
depth) const  " [INTERNAL]  Checks if two nodes have the same operation and
have equivalent dependencies up to a given depth.

";

%feature("docstring")  casadi::MXNode::getDeterminant() const  " [INTERNAL]
Determinant.

";

%feature("docstring") casadi::Vertcat::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring")  casadi::MXNode::getTranspose() const  " [INTERNAL]
Transpose.

";

%feature("docstring")  casadi::MXNode::isIdentity() const  " [INTERNAL]
Check if identity matrix.

";

%feature("docstring")  casadi::MXNode::isNonLinear() "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) const  " [INTERNAL]
dependencies - functions that have to be evaluated before this one

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) " [INTERNAL] ";

%feature("docstring")  casadi::SharedObjectNode::getCount() const  "
[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::MXNode::numInplace() const  " [INTERNAL]  Can
the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring")  casadi::MXNode::isValue(double val) const  "
[INTERNAL]  Check if a certain value.

";

%feature("docstring")  casadi::MXNode::getNumOutputs() const  " [INTERNAL]
Number of outputs.

";

%feature("docstring")  casadi::MXNode::sparsity() const  " [INTERNAL]  Get
the sparsity.

";

%feature("docstring")  casadi::MXNode::sparsity(int oind) const  "
[INTERNAL]  Get the sparsity of output oind.

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, const std::vector< int > &onz, bool add=false) "
[INTERNAL]  Assign nonzeros (mapping matrix)

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, bool add=false) " [INTERNAL]  Assign nonzeros
(mapping matrix), output indices sequential.

";

%feature("docstring") casadi::Vertcat::Vertcat(const std::vector< MX > &x) "
[INTERNAL]  Constructor.

";

%feature("docstring")  casadi::MXNode::getHorzsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a horizontal split node.

";

%feature("docstring")  casadi::MXNode::getHorzcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a horizontal concatenation node.

";

%feature("docstring")  casadi::MXNode::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied) " [INTERNAL]  Deep copy
data members.

";

%feature("docstring")  casadi::SharedObjectNode::init() "[INTERNAL]
Initialize the object.

";

%feature("docstring")  casadi::MXNode::isBinaryOp() const  " [INTERNAL]
Check if binary operation.

";

%feature("docstring")  casadi::MXNode::getInverse() const  " [INTERNAL]
Inverse.

";

%feature("docstring")  casadi::MXNode::getAddNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Add the nonzeros of a matrix to
another matrix.

";

%feature("docstring")  casadi::MXNode::isZero() const  " [INTERNAL]  Check
if identically zero.

";

%feature("docstring")  casadi::Concat::evaluateSX(const SXPtrV &input,
SXPtrV &output, std::vector< int > &itmp, std::vector< SXElement > &rtmp) "
[INTERNAL]  Evaluate the function symbolically (SX)

";

%feature("docstring")  casadi::MXNode::getNormF() const  " [INTERNAL]
Frobenius norm.

";

%feature("docstring")  casadi::MXNode::mapping() const  " [INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring")  casadi::MXNode::getMatrixValue() const  " [INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring")  casadi::MXNode::getFunctionInput() const  "
[INTERNAL]  Get function input.

";

%feature("docstring")  casadi::Concat::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp,
bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::getName() const  " [INTERNAL]  Get
the name.

";

%feature("docstring")  casadi::MXNode::getSetSparse(const Sparsity &sp)
const  " [INTERNAL]  Create set sparse.

";

%feature("docstring")  casadi::MXNode::isMultipleOutput() const  "
[INTERNAL]  Check if a multiple output node.

";

%feature("docstring")  casadi::Concat::getGetNonzeros(const Sparsity &sp,
const std::vector< int > &nz) const  " [INTERNAL]  Get the nonzeros of
matrix.

";

%feature("docstring")  casadi::MXNode::simplifyMe(MX &ex) " [INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring")  casadi::MXNode::getNorm1() const  " [INTERNAL]
1-norm

";

%feature("docstring")  casadi::MXNode::shape() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getNormInf() const  " [INTERNAL]
Infinity norm.

";

%feature("docstring") casadi::Vertcat::~Vertcat "[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::MXNode::setSparsity(const Sparsity &sparsity)
" [INTERNAL]  Set the sparsity.

";

%feature("docstring")  casadi::SharedObjectNode::assertInit() const  "
[INTERNAL]  Assert that the object has been initialized.

";

%feature("docstring")  casadi::MXNode::nTmp(size_t &ni, size_t &nr) "
[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::MXNode::isOutputNode() const  " [INTERNAL]
Check if evaluation output.

";

%feature("docstring")  casadi::MXNode::getValue() const  " [INTERNAL]  Get
the value (only for scalar constant nodes)

";

%feature("docstring")  casadi::MXNode::size2() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getFunction() "[INTERNAL]  Get
function reference.

";

%feature("docstring")  casadi::MXNode::getFunction() const  " [INTERNAL]
Get function reference.

";

%feature("docstring")  casadi::SharedObjectNode::weak() "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring")  casadi::MXNode::getAssertion(const MX &y, const
std::string &fail_message="") const  " [INTERNAL]   Assertion.

";

%feature("docstring")  casadi::MXNode::size() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getBinarySwitch(int op, const MX &y)
const  " [INTERNAL]  Get a binary operation operation.

";

%feature("docstring")  casadi::MXNode::isUnaryOp() const  " [INTERNAL]
Check if unary operation.

";

%feature("docstring")  casadi::SharedObjectNode::isInit() const  "
[INTERNAL]  Check if the object has been initialized.

";

%feature("docstring")  casadi::MXNode::getSolve(const MX &r, bool tr, const
LinearSolver &linear_solver) const  " [INTERNAL]   Solve a system of linear
equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring")  casadi::Concat::generateOperation(std::ostream
&stream, const std::vector< std::string > &arg, const std::vector<
std::string > &res, CodeGenerator &gen) const  " [INTERNAL]  Generate code
for the operation.

";

%feature("docstring")  casadi::MXNode::getSubRef(const Slice &i, const Slice
&j) const  " [INTERNAL]  Get submatrix reference.

";

%feature("docstring")  casadi::Vertcat::clone() const  " [INTERNAL]  Clone
function.

";

%feature("docstring")  casadi::MXNode::isOne() const  " [INTERNAL]  Check if
identically one.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream) const  "
[INTERNAL]  Print a description.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream, long
&remaining_calls) const  " [INTERNAL]  Print expression (make sure number of
calls is not exceeded)

";

%feature("docstring")  casadi::MXNode::numel() const  " [INTERNAL]  Get
shape.

";

%feature("docstring")  casadi::MXNode::getVertsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a vertical split node (vectors
only)

";

%feature("docstring")  casadi::MXNode::getReshape(const Sparsity &sp) const
" [INTERNAL]   Reshape.

";

%feature("docstring")  casadi::MXNode::getSetNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Assign the nonzeros of a matrix
to another matrix.

";

%feature("docstring")  casadi::MXNode::getSubAssign(const MX &y, const Slice
&i, const Slice &j) const  " [INTERNAL]  Get submatrix assignment.

";

%feature("docstring")  casadi::MXNode::getFunctionOutput() const  "
[INTERNAL]  Get function output.

";

%feature("docstring")  casadi::MXNode::repr(std::ostream &stream) const  "
[INTERNAL]  Print a representation.

";

%feature("docstring")  casadi::MXNode::getUnary(int op) const  " [INTERNAL]
Get a unary operation.

";

%feature("docstring")  casadi::MXNode::getBinary(int op, const MX &y, bool
scX, bool scY) const  " [INTERNAL]  Get a binary operation operation
(matrix-matrix)

";

%feature("docstring")  casadi::Vertcat::evaluateMX(const MXPtrV &input,
MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV
&adjSeed, MXPtrVV &adjSens, bool output_given) " [INTERNAL]  Evaluate the
function symbolically ( MX)

";

%feature("docstring")  casadi::MXNode::evaluateMX(const MXPtrV &input,
MXPtrV &output) " [INTERNAL]  Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep) "
[INTERNAL]  Set unary dependency.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2) " [INTERNAL]  Set binary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2, const MX &dep3) " [INTERNAL]  Set ternary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const std::vector< MX
> &dep) " [INTERNAL]  Set multiple dependencies.

";

%feature("docstring")  casadi::MXNode::getOutput(int oind) const  "
[INTERNAL]  Get an output.

";

%feature("docstring")  casadi::MXNode::ndep() const  " [INTERNAL]  Number of
dependencies.

";

%feature("docstring") casadi::Vertcat "[INTERNAL]  Vertical concatenation
of vectors.

Joel Andersson

C++ includes: concat.hpp ";

%feature("docstring")  casadi::MXNode::hasDep() const  " [INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring")  casadi::Concat::evaluateD(const DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp)
" [INTERNAL]  Evaluate the function numerically.

";

%feature("docstring")  casadi::MXNode::size1() const  " [INTERNAL] ";

%feature("docstring")  casadi::Vertcat::getOp() const  " [INTERNAL]  Get the
operation.

";

%feature("docstring")  casadi::MXNode::getVertcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a vertical concatenation node (vectors only)

";

%feature("docstring")  casadi::Concat::evaluateGen(const MatV &input, MatV
&output, std::vector< int > &itmp, std::vector< T > &rtmp) " [INTERNAL]
Evaluate the function (template)

";

%feature("docstring")  casadi::MXNode::getNorm2() const  " [INTERNAL]
Spectral norm.

";


// File: classcasadi_1_1Vertsplit.xml
%feature("docstring")  casadi::MXNode::size1() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getUnary(int op) const  " [INTERNAL]
Get a unary operation.

";

%feature("docstring")  casadi::MXNode::isBinaryOp() const  " [INTERNAL]
Check if binary operation.

";

%feature("docstring")  casadi::MXNode::size2() const  " [INTERNAL] ";

%feature("docstring")  casadi::Vertsplit::getVertcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a vertical concatenation node (vectors only)

";

%feature("docstring")  casadi::MXNode::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied) " [INTERNAL]  Deep copy
data members.

";

%feature("docstring")  casadi::SharedObjectNode::weak() "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring")  casadi::Vertsplit::printPart(std::ostream &stream,
int part) const  " [INTERNAL]  Print a part of the expression */.

";

%feature("docstring")  casadi::MXNode::getMatrixValue() const  " [INTERNAL]
Get the value (only for constant nodes)

";

%feature("docstring")  casadi::Split::evaluateSX(const SXPtrV &input, SXPtrV
&output, std::vector< int > &itmp, std::vector< SXElement > &rtmp) "
[INTERNAL]  Evaluate the function symbolically (SX)

";

%feature("docstring")  casadi::MXNode::getSolve(const MX &r, bool tr, const
LinearSolver &linear_solver) const  " [INTERNAL]   Solve a system of linear
equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring")  casadi::MXNode::isZero() const  " [INTERNAL]  Check
if identically zero.

";

%feature("docstring")  casadi::MultipleOutput::isMultipleOutput() const  "
[INTERNAL]  Check if a multiple output node.

";

%feature("docstring")  casadi::Split::evaluateD(const DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp)
" [INTERNAL]  Evaluate the function numerically.

";

%feature("docstring")  casadi::MXNode::isOne() const  " [INTERNAL]  Check if
identically one.

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) const  " [INTERNAL]
dependencies - functions that have to be evaluated before this one

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getTranspose() const  " [INTERNAL]
Transpose.

";

%feature("docstring") casadi::Vertsplit::Vertsplit(const MX &x, const
std::vector< int > &offset) " [INTERNAL]  Constructor.

";

%feature("docstring")  casadi::Vertsplit::getOp() const  " [INTERNAL]  Get
the operation.

";

%feature("docstring")  casadi::Split::sparsity(int oind) const  " [INTERNAL]
Get the sparsity of output oind.

";

%feature("docstring")  casadi::MXNode::sparsity() const  " [INTERNAL]  Get
the sparsity.

";

%feature("docstring")  casadi::SharedObjectNode::isInit() const  "
[INTERNAL]  Check if the object has been initialized.

";

%feature("docstring")  casadi::MXNode::getSubAssign(const MX &y, const Slice
&i, const Slice &j) const  " [INTERNAL]  Get submatrix assignment.

";

%feature("docstring")  casadi::MXNode::getReshape(const Sparsity &sp) const
" [INTERNAL]   Reshape.

";

%feature("docstring")  casadi::MultipleOutput::getOutput(int oind) const  "
[INTERNAL]  Get an output.

";

%feature("docstring")  casadi::MXNode::numel() const  " [INTERNAL]  Get
shape.

";

%feature("docstring")  casadi::MXNode::getValue() const  " [INTERNAL]  Get
the value (only for scalar constant nodes)

";

%feature("docstring")  casadi::MXNode::getBinarySwitch(int op, const MX &y)
const  " [INTERNAL]  Get a binary operation operation.

";

%feature("docstring") casadi::Vertsplit::__nonzero__ "[INTERNAL]  Check the
truth value of this node.

";

%feature("docstring")  casadi::SharedObjectNode::assertInit() const  "
[INTERNAL]  Assert that the object has been initialized.

";

%feature("docstring")  casadi::MXNode::getGetNonzeros(const Sparsity &sp,
const std::vector< int > &nz) const  " [INTERNAL]  Get the nonzeros of
matrix.

";

%feature("docstring")  casadi::Vertsplit::clone() const  " [INTERNAL]  Clone
function.

";

%feature("docstring")  casadi::MXNode::getVertsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a vertical split node (vectors
only)

";

%feature("docstring")  casadi::MXNode::hasDep() const  " [INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring")  casadi::MXNode::getSetNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Assign the nonzeros of a matrix
to another matrix.

";

%feature("docstring") casadi::Vertsplit::~Vertsplit "[INTERNAL]
Destructor.

";

%feature("docstring")  casadi::MXNode::getNormInf() const  " [INTERNAL]
Infinity norm.

";

%feature("docstring")  casadi::MXNode::getAssertion(const MX &y, const
std::string &fail_message="") const  " [INTERNAL]   Assertion.

";

%feature("docstring")  casadi::MXNode::size() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getFunction() "[INTERNAL]  Get
function reference.

";

%feature("docstring")  casadi::MXNode::getFunction() const  " [INTERNAL]
Get function reference.

";

%feature("docstring")  casadi::MXNode::getFunctionOutput() const  "
[INTERNAL]  Get function output.

";

%feature("docstring")  casadi::MXNode::addDependency(const MX &dep) "
[INTERNAL]  Add a dependency.

";

%feature("docstring")  casadi::MXNode::getName() const  " [INTERNAL]  Get
the name.

";

%feature("docstring")  casadi::MXNode::ndep() const  " [INTERNAL]  Number of
dependencies.

";

%feature("docstring")  casadi::MXNode::sameOpAndDeps(const MXNode *node, int
depth) const  " [INTERNAL]  Checks if two nodes have the same operation and
have equivalent dependencies up to a given depth.

";

%feature("docstring")  casadi::MXNode::getInverse() const  " [INTERNAL]
Inverse.

";

%feature("docstring")  casadi::MXNode::repr(std::ostream &stream) const  "
[INTERNAL]  Print a representation.

";

%feature("docstring")  casadi::MXNode::shape() const  " [INTERNAL] ";

%feature("docstring")  casadi::Split::generateOperation(std::ostream
&stream, const std::vector< std::string > &arg, const std::vector<
std::string > &res, CodeGenerator &gen) const  " [INTERNAL]  Generate code
for the operation.

";

%feature("docstring")  casadi::MXNode::nTmp(size_t &ni, size_t &nr) "
[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::MXNode::isIdentity() const  " [INTERNAL]
Check if identity matrix.

";

%feature("docstring")  casadi::MXNode::getFunctionInput() const  "
[INTERNAL]  Get function input.

";

%feature("docstring")  casadi::SharedObjectNode::getCount() const  "
[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream) const  "
[INTERNAL]  Print a description.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream, long
&remaining_calls) const  " [INTERNAL]  Print expression (make sure number of
calls is not exceeded)

";

%feature("docstring")  casadi::MXNode::getNorm1() const  " [INTERNAL]
1-norm

";

%feature("docstring")  casadi::MXNode::getSubRef(const Slice &i, const Slice
&j) const  " [INTERNAL]  Get submatrix reference.

";

%feature("docstring")  casadi::MXNode::getNorm2() const  " [INTERNAL]
Spectral norm.

";

%feature("docstring")  casadi::Vertsplit::evaluateMX(const MXPtrV &input,
MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV
&adjSeed, MXPtrVV &adjSens, bool output_given) " [INTERNAL]  Evaluate the
function symbolically ( MX)

";

%feature("docstring")  casadi::MXNode::evaluateMX(const MXPtrV &input,
MXPtrV &output) " [INTERNAL]  Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring")  casadi::MXNode::getHorzcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a horizontal concatenation node.

";

%feature("docstring")  casadi::Split::getNumOutputs() const  " [INTERNAL]
Number of outputs.

";

%feature("docstring")  casadi::MXNode::numInplace() const  " [INTERNAL]  Can
the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring")  casadi::MXNode::getHorzsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a horizontal split node.

";

%feature("docstring")  casadi::MXNode::getInnerProd(const MX &y) const  "
[INTERNAL]  Inner product.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep) "
[INTERNAL]  Set unary dependency.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2) " [INTERNAL]  Set binary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2, const MX &dep3) " [INTERNAL]  Set ternary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const std::vector< MX
> &dep) " [INTERNAL]  Set multiple dependencies.

";

%feature("docstring")  casadi::MXNode::simplifyMe(MX &ex) " [INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring")  casadi::MXNode::getSetSparse(const Sparsity &sp)
const  " [INTERNAL]  Create set sparse.

";

%feature("docstring")  casadi::Split::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp,
bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring") casadi::Vertsplit "[INTERNAL]  Vertical split of
vectors, x -> x0, x1,...

Joel Andersson

C++ includes: split.hpp ";

%feature("docstring")  casadi::MXNode::isOutputNode() const  " [INTERNAL]
Check if evaluation output.

";

%feature("docstring")  casadi::MXNode::getBinary(int op, const MX &y, bool
scX, bool scY) const  " [INTERNAL]  Get a binary operation operation
(matrix-matrix)

";

%feature("docstring")  casadi::MXNode::getDeterminant() const  " [INTERNAL]
Determinant.

";

%feature("docstring")  casadi::MXNode::mapping() const  " [INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring")  casadi::MXNode::setSparsity(const Sparsity &sparsity)
" [INTERNAL]  Set the sparsity.

";

%feature("docstring")  casadi::MXNode::isValue(double val) const  "
[INTERNAL]  Check if a certain value.

";

%feature("docstring")  casadi::MXNode::isEqual(const MXNode *node, int
depth) const  " [INTERNAL]  Check if two nodes are equivalent up to a given
depth.

";

%feature("docstring")  casadi::Split::evaluateGen(const MatV &input, MatV
&output, std::vector< int > &itmp, std::vector< T > &rtmp) " [INTERNAL]
Evaluate the function (template)

";

%feature("docstring")  casadi::MXNode::getMultiplication(const MX &y, const
Sparsity &sp_z=Sparsity()) const  " [INTERNAL]   Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring")  casadi::MXNode::getNormF() const  " [INTERNAL]
Frobenius norm.

";

%feature("docstring")  casadi::MXNode::isNonLinear() "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, const std::vector< int > &onz, bool add=false) "
[INTERNAL]  Assign nonzeros (mapping matrix)

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, bool add=false) " [INTERNAL]  Assign nonzeros
(mapping matrix), output indices sequential.

";

%feature("docstring")  casadi::MXNode::isUnaryOp() const  " [INTERNAL]
Check if unary operation.

";

%feature("docstring")  casadi::SharedObjectNode::init() "[INTERNAL]
Initialize the object.

";

%feature("docstring")  casadi::MXNode::getAddNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Add the nonzeros of a matrix to
another matrix.

";


// File: classcasadi_1_1WeakRef.xml
%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "
[INTERNAL]  Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::WeakRef::shared() "[INTERNAL]  Get a shared
(owning) reference.

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "
[INTERNAL]  Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::WeakRef::alive() const  " [INTERNAL]  Check
if alive.

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) " [INTERNAL]  Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::SharedObject::checkNode() const  " [INTERNAL]
Assert that the node is pointing to the right type of object

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring") casadi::WeakRef "[INTERNAL]  Weak reference type A
weak reference to a SharedObject.

Joel Andersson

C++ includes: weak_ref.hpp ";

%feature("docstring")  casadi::SharedObject::isInit() const  " [INTERNAL]
Is initialized?

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::SharedObject::isNull() const  " [INTERNAL]
Is a null pointer?

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "
[INTERNAL]  Return a string with a representation (for SWIG)

";

%feature("docstring") casadi::WeakRef::WeakRef(int dummy=0) " [INTERNAL]
Default constructor.

";

%feature("docstring") casadi::WeakRef::WeakRef(SharedObject shared) "
[INTERNAL]  Construct from a shared object (also implicit type conversion)

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";


// File: classcasadi_1_1WorhpSolver.xml


/*  Simple Getters & Setters  */

/*  Advanced Getters  */

/*  Option Functionality  */ %feature("docstring")
casadi::OptionsFunctionality::getOptionNames() const  "

INTERNAL.

Get a list of all option names

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByAllowedIndex(const std::string
&name, int i) " [INTERNAL]  Set a certain option by giving its index into
the allowed values.

";

%feature("docstring")  casadi::OptionsFunctionality::hasOption(const
std::string &str) const  "

check if there is an option str

";

%feature("docstring")  casadi::SharedObject::repr(std::ostream &stream)
const  " [INTERNAL]  Print a representation of the object.

";

%feature("docstring")  casadi::NLPSolver::hessLag() "

Access the Hessian of the Lagrangian function.

>Input scheme: casadi::JacGInput (JACG_NUM_IN = 3) [jacGIn]
+-----------+-------+---------------------+
| Full name | Short |     Description     |
+===========+=======+=====================+
| JACG_X    | x     | Decision variable . |
+-----------+-------+---------------------+
| JACG_P    | p     | Fixed parameter .   |
+-----------+-------+---------------------+

>Output scheme: casadi::JacGOutput (JACG_NUM_OUT = 4) [jacGOut]
+-----------+-------+-------------------------------+
| Full name | Short |          Description          |
+===========+=======+===============================+
| JACG_JAC  | jac   | Jacobian of the constraints . |
+-----------+-------+-------------------------------+
| JACG_F    | f     | Objective function .          |
+-----------+-------+-------------------------------+
| JACG_G    | g     | Constraint function .         |
+-----------+-------+-------------------------------+

";

%feature("docstring")  casadi::Function::input_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::input_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::spCanEvaluate(bool fwd) "
[INTERNAL]  Is the class able to propagate seeds through the algorithm?

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring") casadi::WorhpSolver "

interface to WORHP NLP solver

Solves the following parametric nonlinear program (NLP):min          F(x,p)
x  subject to             LBX <=   x    <= UBX LBG <= G(x,p) <= UBG
p  == P      nx: number of decision variables     ng: number of constraints
np: number of parameters

>Input scheme: casadi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

>List of available options
+--------------+--------------+--------------+--------------+--------------+
|      Id      |     Type     |   Default    | Description  |   Used in    |
+==============+==============+==============+==============+==============+
| AcceptTolFea | OT_REAL      | 0.001        | Tolerance    | casadi::Worh |
| s            |              |              | for          | pInternal    |
|              |              |              | acceptable   |              |
|              |              |              | feasibility  |              |
+--------------+--------------+--------------+--------------+--------------+
| AcceptTolOpt | OT_REAL      | 0.001        | Tolerance    | casadi::Worh |
| i            |              |              | for          | pInternal    |
|              |              |              | acceptable   |              |
|              |              |              | optimality   |              |
+--------------+--------------+--------------+--------------+--------------+
| AlphaMinCons | OT_BOOLEAN   | False        | Use a        | casadi::Worh |
| t            |              |              | constant     | pInternal    |
|              |              |              | lower bound  |              |
|              |              |              | on Armijo    |              |
|              |              |              | stepsize in  |              |
|              |              |              | Filter       |              |
+--------------+--------------+--------------+--------------+--------------+
| Ares         | OT_INTEGERVE | [42, 41, 42, | Armijo       | casadi::Worh |
|              | CTOR         | 43, 44, 41,  | recovery     | pInternal    |
|              |              | 50]          | strategies.  |              |
|              |              |              | Vector of    |              |
|              |              |              | size 7       |              |
+--------------+--------------+--------------+--------------+--------------+
| ArmijoBeta   | OT_REAL      | 0.712        | Trial        | casadi::Worh |
|              |              |              | stepsize     | pInternal    |
|              |              |              | decrease     |              |
|              |              |              | factor for   |              |
|              |              |              | Armijo rule  |              |
+--------------+--------------+--------------+--------------+--------------+
| ArmijoMaxAlp | OT_REAL      | 1            | Initial      | casadi::Worh |
| ha           |              |              | alpha for    | pInternal    |
|              |              |              | Armijo rule  |              |
+--------------+--------------+--------------+--------------+--------------+
| ArmijoMinAlp | OT_REAL      | 0.000        | Lower bound  | casadi::Worh |
| ha           |              |              | on alpha for | pInternal    |
|              |              |              | Armijo rule  |              |
+--------------+--------------+--------------+--------------+--------------+
| ArmijoMinAlp | OT_REAL      | 0.000        | Lower bound  | casadi::Worh |
| haRec        |              |              | on alpha for | pInternal    |
|              |              |              | Armijo rule  |              |
|              |              |              | during       |              |
|              |              |              | recovery     |              |
+--------------+--------------+--------------+--------------+--------------+
| ArmijoSigma  | OT_REAL      | 0.005        | Scale factor | casadi::Worh |
|              |              |              | for          | pInternal    |
|              |              |              | linearised   |              |
|              |              |              | descent      |              |
|              |              |              | check in     |              |
|              |              |              | Armijo rule  |              |
+--------------+--------------+--------------+--------------+--------------+
| AutoQPRecove | OT_BOOLEAN   | True         | Enable       | casadi::Worh |
| ry           |              |              | automatic QP | pInternal    |
|              |              |              | recovery     |              |
+--------------+--------------+--------------+--------------+--------------+
| BFGSmaxblock | OT_INTEGER   | 300          | Block size   | casadi::Worh |
| Size         |              |              | parameter    | pInternal    |
|              |              |              | used by      |              |
|              |              |              | certain BFGS |              |
|              |              |              | methods      |              |
+--------------+--------------+--------------+--------------+--------------+
| BFGSmethod   | OT_INTEGER   | 0            | Choose BFGS  | casadi::Worh |
|              |              |              | method (0:   | pInternal    |
|              |              |              | dense, 1-3:  |              |
|              |              |              | block, 100+: |              |
|              |              |              | sparse)      |              |
+--------------+--------------+--------------+--------------+--------------+
| BFGSminblock | OT_INTEGER   | 300          | Block size   | casadi::Worh |
| Size         |              |              | parameter    | pInternal    |
|              |              |              | used by      |              |
|              |              |              | certain BFGS |              |
|              |              |              | methods      |              |
+--------------+--------------+--------------+--------------+--------------+
| BFGSrestart  | OT_INTEGER   | 50           | Restart BFGS | casadi::Worh |
|              |              |              | update after | pInternal    |
|              |              |              | this many    |              |
|              |              |              | iterations   |              |
+--------------+--------------+--------------+--------------+--------------+
| BettsFactor  | OT_REAL      | 2.100        | Update       | casadi::Worh |
|              |              |              | factor for   | pInternal    |
|              |              |              | Betts'       |              |
|              |              |              | Hessian regu |              |
|              |              |              | larisation   |              |
+--------------+--------------+--------------+--------------+--------------+
| BettsPoint   | OT_REAL      | 1            | Smallest     | casadi::Worh |
|              |              |              | eigenvalue   | pInternal    |
|              |              |              | of the       |              |
|              |              |              | regularised  |              |
|              |              |              | Hessian      |              |
+--------------+--------------+--------------+--------------+--------------+
| BoundTolFac  | OT_REAL      | 1000         | Factor in    | casadi::Worh |
|              |              |              | determining  | pInternal    |
|              |              |              | active       |              |
|              |              |              | constraints  |              |
|              |              |              | by KKT       |              |
+--------------+--------------+--------------+--------------+--------------+
| CheckFJ      | OT_REAL      | 1.000e+12    | Upper bound  | casadi::Worh |
|              |              |              | used by      | pInternal    |
|              |              |              | Fritz-John   |              |
|              |              |              | heuristic    |              |
+--------------+--------------+--------------+--------------+--------------+
| CheckStructu | OT_BOOLEAN   | True         | Enable       | casadi::Worh |
| reDF         |              |              | structural   | pInternal    |
|              |              |              | checking of  |              |
|              |              |              | DF           |              |
+--------------+--------------+--------------+--------------+--------------+
| CheckStructu | OT_BOOLEAN   | True         | Enable       | casadi::Worh |
| reDG         |              |              | structural   | pInternal    |
|              |              |              | checking of  |              |
|              |              |              | DG           |              |
+--------------+--------------+--------------+--------------+--------------+
| CheckStructu | OT_BOOLEAN   | True         | Enable       | casadi::Worh |
| reHM         |              |              | structural   | pInternal    |
|              |              |              | checking of  |              |
|              |              |              | HM           |              |
+--------------+--------------+--------------+--------------+--------------+
| CorStepBetts | OT_REAL      | 0.500        | (experimenta | casadi::Worh |
| Sum          |              |              | l)           | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| CorStepConSt | OT_REAL      | 0.000        | (experimenta | casadi::Worh |
| op           |              |              | l)           | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| CorStepConvi | OT_REAL      | 1            | (experimenta | casadi::Worh |
| o            |              |              | l)           | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| CorStepMaxIt | OT_INTEGER   | 50           | (experimenta | casadi::Worh |
| er           |              |              | l)           | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| CorStepMetho | OT_INTEGER   | 0            | (experimenta | casadi::Worh |
| d            |              |              | l)           | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| CorStepMode  | OT_INTEGER   | 1            | (experimenta | casadi::Worh |
|              |              |              | l)           | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| CorStepPFact | OT_REAL      | 1            | (experimenta | casadi::Worh |
| or           |              |              | l)           | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| CorStepPMax  | OT_REAL      | 1000000      | (experimenta | casadi::Worh |
|              |              |              | l)           | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| CorStepRecov | OT_BOOLEAN   | False        | (experimenta | casadi::Worh |
| eryDX        |              |              | l)           | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| CurvBCond    | OT_REAL      | 0.020        | Block BFGS   | casadi::Worh |
|              |              |              | curvature    | pInternal    |
|              |              |              | condition    |              |
|              |              |              | bound        |              |
+--------------+--------------+--------------+--------------+--------------+
| CurvBFac     | OT_REAL      | 0.300        | Block BFGS   | casadi::Worh |
|              |              |              | curvature    | pInternal    |
|              |              |              | condition re |              |
|              |              |              | gularisation |              |
|              |              |              | factor       |              |
+--------------+--------------+--------------+--------------+--------------+
| CurvCond     | OT_REAL      | 0.020        | BFGS         | casadi::Worh |
|              |              |              | Curvature    | pInternal    |
|              |              |              | condition    |              |
|              |              |              | bound        |              |
+--------------+--------------+--------------+--------------+--------------+
| CurvFac      | OT_REAL      | 0.300        | BFGS         | casadi::Worh |
|              |              |              | curvature    | pInternal    |
|              |              |              | condition re |              |
|              |              |              | gularisation |              |
|              |              |              | factor       |              |
+--------------+--------------+--------------+--------------+--------------+
| DebugMarker0 | OT_INTEGER   | 42           | Debug        | casadi::Worh |
| 5            |              |              | marker. Used | pInternal    |
|              |              |              | to find      |              |
|              |              |              | memory align |              |
|              |              |              | ment/padding |              |
|              |              |              | issues       |              |
+--------------+--------------+--------------+--------------+--------------+
| DebugMarker0 | OT_INTEGER   | 42           | Debug        | casadi::Worh |
| 6            |              |              | marker. Used | pInternal    |
|              |              |              | to find      |              |
|              |              |              | memory align |              |
|              |              |              | ment/padding |              |
|              |              |              | issues       |              |
+--------------+--------------+--------------+--------------+--------------+
| FGtogether   | OT_BOOLEAN   | False        | F and G      | casadi::Worh |
|              |              |              | cannot be    | pInternal    |
|              |              |              | evaluated    |              |
|              |              |              | separately   |              |
+--------------+--------------+--------------+--------------+--------------+
| FJandND      | OT_BOOLEAN   | False        | Enable       | casadi::Worh |
|              |              |              | Fritz-John   | pInternal    |
|              |              |              | and non-diff |              |
|              |              |              | erentiable   |              |
|              |              |              | check        |              |
|              |              |              | heuristics   |              |
+--------------+--------------+--------------+--------------+--------------+
| FeasibleDual | OT_BOOLEAN   | False        | Activate     | casadi::Worh |
|              |              |              | dual         | pInternal    |
|              |              |              | feasibility  |              |
|              |              |              | mode         |              |
+--------------+--------------+--------------+--------------+--------------+
| FeasibleInit | OT_BOOLEAN   | False        | Activate     | casadi::Worh |
|              |              |              | initial      | pInternal    |
|              |              |              | feasibility  |              |
|              |              |              | mode         |              |
+--------------+--------------+--------------+--------------+--------------+
| FeasibleInit | OT_REAL      | 0.001        | Feasibility  | casadi::Worh |
| Tol          |              |              | tolerance    | pInternal    |
|              |              |              | for no-      |              |
|              |              |              | objective    |              |
|              |              |              | feasible     |              |
|              |              |              | mode         |              |
+--------------+--------------+--------------+--------------+--------------+
| FeasibleOnly | OT_BOOLEAN   | False        | Activate     | casadi::Worh |
|              |              |              | feasible-    | pInternal    |
|              |              |              | only mode    |              |
+--------------+--------------+--------------+--------------+--------------+
| FidifEps     | OT_REAL      | 0.000        | Finite       | casadi::Worh |
|              |              |              | difference   | pInternal    |
|              |              |              | perturbation |              |
+--------------+--------------+--------------+--------------+--------------+
| FidifHM      | OT_BOOLEAN   | False        | Approximate  | casadi::Worh |
|              |              |              | Hessian by   | pInternal    |
|              |              |              | finite       |              |
|              |              |              | differences  |              |
|              |              |              | (otherwise   |              |
|              |              |              | BFGS)        |              |
+--------------+--------------+--------------+--------------+--------------+
| FilterBisecA | OT_BOOLEAN   | True         | Filter       | casadi::Worh |
| lpha         |              |              | heuristic to | pInternal    |
|              |              |              | save Armijo  |              |
|              |              |              | iterations   |              |
+--------------+--------------+--------------+--------------+--------------+
| FilterGammaC | OT_REAL      | 0.000        | Constraint   | casadi::Worh |
| V            |              |              | violation    | pInternal    |
|              |              |              | decrease     |              |
|              |              |              | factor in    |              |
|              |              |              | Filter       |              |
|              |              |              | acceptance   |              |
|              |              |              | check        |              |
+--------------+--------------+--------------+--------------+--------------+
| FilterGammaF | OT_REAL      | 0.000        | Objective    | casadi::Worh |
|              |              |              | decrease     | pInternal    |
|              |              |              | factor in    |              |
|              |              |              | Filter       |              |
|              |              |              | acceptance   |              |
|              |              |              | check        |              |
+--------------+--------------+--------------+--------------+--------------+
| FilterInters | OT_BOOLEAN   | True         | Filter       | casadi::Worh |
| ecAlpha      |              |              | heuristic to | pInternal    |
|              |              |              | save Armijo  |              |
|              |              |              | iterations   |              |
+--------------+--------------+--------------+--------------+--------------+
| FirstDifCent | OT_BOOLEAN   | True         | Use central  | casadi::Worh |
| ral          |              |              | finite       | pInternal    |
|              |              |              | difference   |              |
|              |              |              | quotient for |              |
|              |              |              | first        |              |
|              |              |              | derivatives  |              |
+--------------+--------------+--------------+--------------+--------------+
| FocusOnFeas  | OT_BOOLEAN   | True         | Enable       | casadi::Worh |
|              |              |              | Focus-on-    | pInternal    |
|              |              |              | Feasibility  |              |
|              |              |              | mode         |              |
+--------------+--------------+--------------+--------------+--------------+
| FocusOnFeasF | OT_REAL      | 1.360        | Factor in    | casadi::Worh |
| actor        |              |              | Focus-on-    | pInternal    |
|              |              |              | Feasibility  |              |
|              |              |              | mode         |              |
+--------------+--------------+--------------+--------------+--------------+
| GammaAlpha   | OT_REAL      | 0.050        | Safety       | casadi::Worh |
|              |              |              | factor for   | pInternal    |
|              |              |              | alphamin     |              |
|              |              |              | calculation  |              |
|              |              |              | by Filter    |              |
+--------------+--------------+--------------+--------------+--------------+
| GroupMethod  | OT_INTEGER   | 1            | Select       | casadi::Worh |
|              |              |              | method to    | pInternal    |
|              |              |              | determine    |              |
|              |              |              | graph        |              |
|              |              |              | colouring    |              |
|              |              |              | groups       |              |
+--------------+--------------+--------------+--------------+--------------+
| IgnoreFilter | OT_BOOLEAN   | False        | Activate     | casadi::Worh |
| Crit         |              |              | accelerating | pInternal    |
|              |              |              | heuristics   |              |
|              |              |              | for Filter   |              |
+--------------+--------------+--------------+--------------+--------------+
| IncBettsTau  | OT_REAL      | 2            | Increase     | casadi::Worh |
|              |              |              | factor for   | pInternal    |
|              |              |              | Betts'       |              |
|              |              |              | update       |              |
|              |              |              | dampening    |              |
|              |              |              | term         |              |
+--------------+--------------+--------------+--------------+--------------+
| IncBettsTauM | OT_REAL      | 100          | Larger       | casadi::Worh |
| ore          |              |              | increase     | pInternal    |
|              |              |              | factor for   |              |
|              |              |              | Betts'       |              |
|              |              |              | update       |              |
|              |              |              | dampening    |              |
|              |              |              | term         |              |
+--------------+--------------+--------------+--------------+--------------+
| IncreaseIWS  | OT_REAL      | 1            | Increase     | casadi::Worh |
|              |              |              | factor for   | pInternal    |
|              |              |              | estimated    |              |
|              |              |              | integer      |              |
|              |              |              | workspace    |              |
|              |              |              | requirement  |              |
+--------------+--------------+--------------+--------------+--------------+
| IncreaseRWS  | OT_REAL      | 1            | Increase     | casadi::Worh |
|              |              |              | factor for   | pInternal    |
|              |              |              | estimated    |              |
|              |              |              | real         |              |
|              |              |              | workspace    |              |
|              |              |              | requirement  |              |
+--------------+--------------+--------------+--------------+--------------+
| Infty        | OT_REAL      | 1.000e+20    | Upper bound  | casadi::Worh |
|              |              |              | for numbers  | pInternal    |
|              |              |              | to be        |              |
|              |              |              | regarded as  |              |
|              |              |              | finite       |              |
+--------------+--------------+--------------+--------------+--------------+
| InftyUnbound | OT_REAL      | 1.000e+20    | Tolerance    | casadi::Worh |
| ed           |              |              | for unbounde | pInternal    |
|              |              |              | dness        |              |
|              |              |              | detection    |              |
|              |              |              | heuristic    |              |
+--------------+--------------+--------------+--------------+--------------+
| InitialLMest | OT_BOOLEAN   | True         | Enable       | casadi::Worh |
|              |              |              | initial      | pInternal    |
|              |              |              | Lagrange     |              |
|              |              |              | multiplier   |              |
|              |              |              | estimate     |              |
+--------------+--------------+--------------+--------------+--------------+
| KeepAcceptab | OT_BOOLEAN   | True         | Save         | casadi::Worh |
| leSol        |              |              | acceptable   | pInternal    |
|              |              |              | solutions as |              |
|              |              |              | fallback     |              |
+--------------+--------------+--------------+--------------+--------------+
| LMestQPipCom | OT_REAL      | 0.003        | IP complemen | casadi::Worh |
| Tol          |              |              | tarity       | pInternal    |
|              |              |              | tolerance in |              |
|              |              |              | initial      |              |
|              |              |              | multiplier   |              |
|              |              |              | estimate     |              |
+--------------+--------------+--------------+--------------+--------------+
| LMestQPipRes | OT_REAL      | 1            | IP residual  | casadi::Worh |
| Tol          |              |              | tolerance in | pInternal    |
|              |              |              | initial      |              |
|              |              |              | multiplier   |              |
|              |              |              | estimate     |              |
+--------------+--------------+--------------+--------------+--------------+
| LinMult      | OT_BOOLEAN   | False        | Control      | casadi::Worh |
|              |              |              | Lagrange     | pInternal    |
|              |              |              | multiplier   |              |
|              |              |              | update       |              |
+--------------+--------------+--------------+--------------+--------------+
| LogLevel     | OT_INTEGER   | 0            | Enable XML   | casadi::Worh |
|              |              |              | logfiles and | pInternal    |
|              |              |              | writing      |              |
|              |              |              | interval     |              |
+--------------+--------------+--------------+--------------+--------------+
| LogResult    | OT_INTEGER   | 0            | Enable XML   | casadi::Worh |
|              |              |              | result       | pInternal    |
|              |              |              | logging and  |              |
|              |              |              | detail level |              |
+--------------+--------------+--------------+--------------+--------------+
| LowPassAlpha | OT_REAL      | 0.950        | Lowpass-     | casadi::Worh |
| F            |              |              | filter       | pInternal    |
|              |              |              | update       |              |
|              |              |              | factor for   |              |
|              |              |              | objective    |              |
|              |              |              | values       |              |
+--------------+--------------+--------------+--------------+--------------+
| LowPassAlpha | OT_REAL      | 0.950        | Lowpass-     | casadi::Worh |
| G            |              |              | filter       | pInternal    |
|              |              |              | update       |              |
|              |              |              | factor for   |              |
|              |              |              | constraint   |              |
|              |              |              | values       |              |
+--------------+--------------+--------------+--------------+--------------+
| LowPassAlpha | OT_REAL      | 0.100        | Lowpass-     | casadi::Worh |
| Merit        |              |              | filter       | pInternal    |
|              |              |              | update       |              |
|              |              |              | factor for   |              |
|              |              |              | merit        |              |
|              |              |              | function     |              |
|              |              |              | values       |              |
+--------------+--------------+--------------+--------------+--------------+
| LowPassFilte | OT_BOOLEAN   | True         | Enable       | casadi::Worh |
| r            |              |              | lowpass-     | pInternal    |
|              |              |              | filter       |              |
|              |              |              | termination  |              |
|              |              |              | criterion    |              |
+--------------+--------------+--------------+--------------+--------------+
| MAPivotThres | OT_REAL      | 0.000        | Pivoting     | casadi::Worh |
| hold         |              |              | tolerance    | pInternal    |
|              |              |              | for MA       |              |
|              |              |              | solvers      |              |
+--------------+--------------+--------------+--------------+--------------+
| MatrixCC     | OT_BOOLEAN   | False        | Not to be    | casadi::Worh |
|              |              |              | included     | pInternal    |
|              |              |              | into a       |              |
|              |              |              | parameter    |              |
|              |              |              | file!        |              |
+--------------+--------------+--------------+--------------+--------------+
| MaxCalls     | OT_INTEGER   | 2.147e+09    | Upper bound  | casadi::Worh |
|              |              |              | to Reverse C | pInternal    |
|              |              |              | ommunication |              |
|              |              |              | calls        |              |
+--------------+--------------+--------------+--------------+--------------+
| MaxForce     | OT_INTEGER   | 1000         | Maximum      | casadi::Worh |
|              |              |              | number of    | pInternal    |
|              |              |              | Force        |              |
|              |              |              | recovery     |              |
|              |              |              | strategy     |              |
|              |              |              | steps        |              |
+--------------+--------------+--------------+--------------+--------------+
| MaxGPart     | OT_INTEGER   | 1            | (experimenta | casadi::Worh |
|              |              |              | l)           | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| MaxIter      | OT_INTEGER   | 500          | Upper bound  | casadi::Worh |
|              |              |              | on major     | pInternal    |
|              |              |              | iterations   |              |
+--------------+--------------+--------------+--------------+--------------+
| MaxLScounter | OT_INTEGER   | 3            | Control      | casadi::Worh |
|              |              |              | activation   | pInternal    |
|              |              |              | of Filter    |              |
|              |              |              | acceleration |              |
|              |              |              | heuristics   |              |
+--------------+--------------+--------------+--------------+--------------+
| MaxNorm      | OT_BOOLEAN   | True         | Select max-  | casadi::Worh |
|              |              |              | norm instead | pInternal    |
|              |              |              | of 1-norm in |              |
|              |              |              | Filter       |              |
+--------------+--------------+--------------+--------------+--------------+
| MeritFunctio | OT_INTEGER   | 4            | Select merit | casadi::Worh |
| n            |              |              | function and | pInternal    |
|              |              |              | penalty      |              |
|              |              |              | update [0,   |              |
|              |              |              | 3..5]        |              |
+--------------+--------------+--------------+--------------+--------------+
| MeritGradTol | OT_REAL      | 0.000        | Threshold of | casadi::Worh |
|              |              |              | meritfunctio | pInternal    |
|              |              |              | n gradient   |              |
|              |              |              | for          |              |
|              |              |              | increasing   |              |
|              |              |              | Hessian regu |              |
|              |              |              | larisation   |              |
+--------------+--------------+--------------+--------------+--------------+
| MinBettsTau  | OT_REAL      | 0.000        | Lower bound  | casadi::Worh |
|              |              |              | for Betts'   | pInternal    |
|              |              |              | update       |              |
|              |              |              | dampening    |              |
|              |              |              | term         |              |
+--------------+--------------+--------------+--------------+--------------+
| MoreRelax    | OT_BOOLEAN   | False        | Introduce    | casadi::Worh |
|              |              |              | one          | pInternal    |
|              |              |              | relaxation   |              |
|              |              |              | variable for |              |
|              |              |              | every        |              |
|              |              |              | constraint   |              |
+--------------+--------------+--------------+--------------+--------------+
| NLPmethod    | OT_INTEGER   | 1            | Select (1) M | casadi::Worh |
|              |              |              | eritfunction | pInternal    |
|              |              |              | or (3)       |              |
|              |              |              | Filter globa |              |
|              |              |              | lisation     |              |
+--------------+--------------+--------------+--------------+--------------+
| NLPprint     | OT_INTEGER   | 2            | NLP print    | casadi::Worh |
|              |              |              | level        | pInternal    |
|              |              |              | [-1..4]      |              |
+--------------+--------------+--------------+--------------+--------------+
| PairMethod   | OT_INTEGER   | 1            | Select       | casadi::Worh |
|              |              |              | method to    | pInternal    |
|              |              |              | determine    |              |
|              |              |              | graph        |              |
|              |              |              | colouring    |              |
|              |              |              | pairgroups   |              |
+--------------+--------------+--------------+--------------+--------------+
| PenUpdEpsBar | OT_REAL      | 0.900        | Penalty      | casadi::Worh |
|              |              |              | update       | pInternal    |
|              |              |              | parameter    |              |
|              |              |              | factor for M |              |
|              |              |              | eritFunction |              |
|              |              |              | = 3          |              |
+--------------+--------------+--------------+--------------+--------------+
| PenUpdEpsKFa | OT_REAL      | 2            | Penalty      | casadi::Worh |
| c            |              |              | update       | pInternal    |
|              |              |              | parameter    |              |
|              |              |              | factor for M |              |
|              |              |              | eritFunction |              |
|              |              |              | = 4          |              |
+--------------+--------------+--------------+--------------+--------------+
| PenUpdEpsKSe | OT_INTEGER   | 2            | Penalty      | casadi::Worh |
| quence       |              |              | update       | pInternal    |
|              |              |              | parameter    |              |
+--------------+--------------+--------------+--------------+--------------+
| PenUpdMaxDel | OT_REAL      | 11           | Max penalty  | casadi::Worh |
| taK          |              |              | for MeritFun | pInternal    |
|              |              |              | ction = 4    |              |
+--------------+--------------+--------------+--------------+--------------+
| PenUpdMaxFac | OT_REAL      | 100000000    | Max factor   | casadi::Worh |
|              |              |              | for          | pInternal    |
|              |              |              | increasing   |              |
|              |              |              | penalty for  |              |
|              |              |              | MeritFunctio |              |
|              |              |              | n = 4        |              |
+--------------+--------------+--------------+--------------+--------------+
| PenUpdRBar   | OT_REAL      | 2            | Penalty      | casadi::Worh |
|              |              |              | update       | pInternal    |
|              |              |              | parameter    |              |
|              |              |              | for MeritFun |              |
|              |              |              | ction = 3    |              |
+--------------+--------------+--------------+--------------+--------------+
| PrecisionF   | OT_REAL      | 0.000        | (currently   | casadi::Worh |
|              |              |              | unused)      | pInternal    |
|              |              |              | Relative     |              |
|              |              |              | precision of |              |
|              |              |              | objective    |              |
+--------------+--------------+--------------+--------------+--------------+
| PrecisionG   | OT_REAL      | 0.000        | (currently   | casadi::Worh |
|              |              |              | unused)      | pInternal    |
|              |              |              | Relative     |              |
|              |              |              | precision of |              |
|              |              |              | constraints  |              |
+--------------+--------------+--------------+--------------+--------------+
| QPscaleParam | OT_REAL      | 0            | (currently   | casadi::Worh |
|              |              |              | unused)      | pInternal    |
|              |              |              | Scaling      |              |
|              |              |              | factor for   |              |
|              |              |              | QP           |              |
+--------------+--------------+--------------+--------------+--------------+
| QuadraticPro | OT_BOOLEAN   | False        | Not to be    | casadi::Worh |
| blem         |              |              | included     | pInternal    |
|              |              |              | into a       |              |
|              |              |              | parameter    |              |
|              |              |              | file!        |              |
+--------------+--------------+--------------+--------------+--------------+
| ReduceBettsT | OT_REAL      | 0.300        | Decrease     | casadi::Worh |
| au           |              |              | factor for   | pInternal    |
|              |              |              | Betts'       |              |
|              |              |              | update       |              |
|              |              |              | dampening    |              |
|              |              |              | term         |              |
+--------------+--------------+--------------+--------------+--------------+
| RegStrategy  | OT_INTEGER   | 1            | Select       | casadi::Worh |
|              |              |              | Hessian regu | pInternal    |
|              |              |              | larisation   |              |
|              |              |              | strategy in  |              |
|              |              |              | Filter       |              |
+--------------+--------------+--------------+--------------+--------------+
| ReinitFilter | OT_BOOLEAN   | False        | Enables      | casadi::Worh |
|              |              |              | Filter-reini | pInternal    |
|              |              |              | tialisation  |              |
|              |              |              | accelerating |              |
|              |              |              | heuristic    |              |
+--------------+--------------+--------------+--------------+--------------+
| RelaxMaxDelt | OT_REAL      | 0.920        | Upper bound  | casadi::Worh |
| a            |              |              | for          | pInternal    |
|              |              |              | accepting    |              |
|              |              |              | the          |              |
|              |              |              | constraint   |              |
|              |              |              | relaxation   |              |
|              |              |              | variable     |              |
+--------------+--------------+--------------+--------------+--------------+
| RelaxMaxPen  | OT_REAL      | 50000000     | Upper bound  | casadi::Worh |
|              |              |              | on the       | pInternal    |
|              |              |              | constraint   |              |
|              |              |              | relaxation   |              |
|              |              |              | penalty      |              |
+--------------+--------------+--------------+--------------+--------------+
| RelaxRho     | OT_REAL      | 6            | Update       | casadi::Worh |
|              |              |              | factor for   | pInternal    |
|              |              |              | the          |              |
|              |              |              | constraint   |              |
|              |              |              | relaxation   |              |
|              |              |              | penalty      |              |
+--------------+--------------+--------------+--------------+--------------+
| RelaxStart   | OT_REAL      | 1            | Initial      | casadi::Worh |
|              |              |              | value of the | pInternal    |
|              |              |              | constraint   |              |
|              |              |              | relaxation   |              |
|              |              |              | penalty      |              |
+--------------+--------------+--------------+--------------+--------------+
| RestUntilFea | OT_BOOLEAN   | False        | Do           | casadi::Worh |
| s            |              |              | restoration  | pInternal    |
|              |              |              | until a      |              |
|              |              |              | feasible     |              |
|              |              |              | solution is  |              |
|              |              |              | found        |              |
+--------------+--------------+--------------+--------------+--------------+
| ScaleConIter | OT_BOOLEAN   | False        | Scale        | casadi::Worh |
|              |              |              | constraints  | pInternal    |
|              |              |              | in every     |              |
|              |              |              | iteration    |              |
+--------------+--------------+--------------+--------------+--------------+
| ScaleFacObj  | OT_REAL      | 10           | Value to     | casadi::Worh |
|              |              |              | scale large  | pInternal    |
|              |              |              | objective    |              |
|              |              |              | functions to |              |
+--------------+--------------+--------------+--------------+--------------+
| ScaleFacQP   | OT_REAL      | 10           | Upper bound  | casadi::Worh |
|              |              |              | on resulting | pInternal    |
|              |              |              | matrix norm  |              |
|              |              |              | for QP       |              |
|              |              |              | scaling      |              |
+--------------+--------------+--------------+--------------+--------------+
| ScaledFD     | OT_BOOLEAN   | True         | Use a scaled | casadi::Worh |
|              |              |              | perturbation | pInternal    |
|              |              |              | for finite   |              |
|              |              |              | differences  |              |
+--------------+--------------+--------------+--------------+--------------+
| ScaledKKT    | OT_BOOLEAN   | True         | Scale KKT    | casadi::Worh |
|              |              |              | conditions   | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| ScaledObj    | OT_BOOLEAN   | True         | Scale the    | casadi::Worh |
|              |              |              | objective    | pInternal    |
|              |              |              | function     |              |
+--------------+--------------+--------------+--------------+--------------+
| ScaledQP     | OT_BOOLEAN   | True         | Scale some   | casadi::Worh |
|              |              |              | matrices     | pInternal    |
|              |              |              | handed to    |              |
|              |              |              | the QP       |              |
+--------------+--------------+--------------+--------------+--------------+
| StartBettsTa | OT_REAL      | 0.100        | Initial      | casadi::Worh |
| u            |              |              | value for    | pInternal    |
|              |              |              | Betts'       |              |
|              |              |              | update       |              |
|              |              |              | dampening    |              |
|              |              |              | term         |              |
+--------------+--------------+--------------+--------------+--------------+
| SwitchingDel | OT_REAL      | 0.010        | Filter       | casadi::Worh |
| ta           |              |              | switching    | pInternal    |
|              |              |              | condition    |              |
|              |              |              | parameter    |              |
+--------------+--------------+--------------+--------------+--------------+
| SwitchingSCV | OT_REAL      | 1.100        | Filter       | casadi::Worh |
|              |              |              | switching    | pInternal    |
|              |              |              | condition    |              |
|              |              |              | parameter    |              |
+--------------+--------------+--------------+--------------+--------------+
| SwitchingSF  | OT_REAL      | 2.300        | Filter       | casadi::Worh |
|              |              |              | switching    | pInternal    |
|              |              |              | condition    |              |
|              |              |              | parameter    |              |
+--------------+--------------+--------------+--------------+--------------+
| TakeQPSol    | OT_BOOLEAN   | False        | Evaluate QP  | casadi::Worh |
|              |              |              | search       | pInternal    |
|              |              |              | direction    |              |
|              |              |              | regardless   |              |
|              |              |              | of           |              |
|              |              |              | convergence  |              |
+--------------+--------------+--------------+--------------+--------------+
| Timeout      | OT_REAL      | 300          | Timeout in   | casadi::Worh |
|              |              |              | seconds      | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| TolComp      | OT_REAL      | 0.001        | Complementar | casadi::Worh |
|              |              |              | ity          | pInternal    |
|              |              |              | tolerance    |              |
+--------------+--------------+--------------+--------------+--------------+
| TolFeas      | OT_REAL      | 0.000        | Feasibility  | casadi::Worh |
|              |              |              | tolerance    | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| TolOpti      | OT_REAL      | 0.000        | Optimality   | casadi::Worh |
|              |              |              | tolerance    | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| TolWeakActiv | OT_REAL      | 1            | (experimenta | casadi::Worh |
| e            |              |              | l)           | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| TooBig       | OT_BOOLEAN   | True         | Enable too-  | casadi::Worh |
|              |              |              | big          | pInternal    |
|              |              |              | termination  |              |
|              |              |              | heuristics   |              |
+--------------+--------------+--------------+--------------+--------------+
| TooBigCV     | OT_REAL      | 1.000e+25    | Upper bound  | casadi::Worh |
|              |              |              | on           | pInternal    |
|              |              |              | constraint   |              |
|              |              |              | violation    |              |
|              |              |              | for too-big  |              |
|              |              |              | heuristic    |              |
+--------------+--------------+--------------+--------------+--------------+
| TooBigKKT    | OT_REAL      | 1.000e+30    | Upper bound  | casadi::Worh |
|              |              |              | on KKT       | pInternal    |
|              |              |              | values for   |              |
|              |              |              | too-big      |              |
|              |              |              | heuristic    |              |
+--------------+--------------+--------------+--------------+--------------+
| UserDF       | OT_BOOLEAN   | True         | Objective    | casadi::Worh |
|              |              |              | gradient     | pInternal    |
|              |              |              | values       |              |
|              |              |              | supplied by  |              |
|              |              |              | caller       |              |
+--------------+--------------+--------------+--------------+--------------+
| UserDG       | OT_BOOLEAN   | True         | Jacobian     | casadi::Worh |
|              |              |              | values       | pInternal    |
|              |              |              | supplied by  |              |
|              |              |              | caller       |              |
+--------------+--------------+--------------+--------------+--------------+
| UserHM       | OT_BOOLEAN   | True         | Hessian      | casadi::Worh |
|              |              |              | values       | pInternal    |
|              |              |              | supplied by  |              |
|              |              |              | caller       |              |
+--------------+--------------+--------------+--------------+--------------+
| UserHMstruct | OT_INTEGER   | 2            | Enable       | casadi::Worh |
| ure          |              |              | automatic    | pInternal    |
|              |              |              | Hessian      |              |
|              |              |              | structure    |              |
|              |              |              | generation   |              |
|              |              |              | or checking  |              |
+--------------+--------------+--------------+--------------+--------------+
| WeakActiveSe | OT_BOOLEAN   | False        | (experimenta | casadi::Worh |
| t            |              |              | l)           | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| ad_mode      | OT_STRING    | automatic    | How to       | casadi::Worh |
|              |              |              | calculate    | pInternal    |
|              |              |              | the          |              |
|              |              |              | Jacobians.   |              |
+--------------+--------------+--------------+--------------+--------------+
| con_numeric_ | OT_DICTIONAR | GenericType( | constraints  | casadi::NLPS |
| md           | Y            | )            | to be passed | olverInterna |
|              |              |              | to IPOPT     | l            |
+--------------+--------------+--------------+--------------+--------------+
| derivative_g | OT_DERIVATIV | GenericType( | and reverse  | casadi::Func |
| enerator     | EGENERATOR   | )            | directional  | tionInternal |
|              |              |              | derivative,  |              |
|              |              |              | overrides    |              |
|              |              |              | internal     |              |
|              |              |              | routines.    |              |
|              |              |              | Check docume |              |
|              |              |              | ntation of D |              |
|              |              |              | erivativeGen |              |
|              |              |              | erator .     |              |
+--------------+--------------+--------------+--------------+--------------+
| eps          | OT_REAL      | 0.000        | Machine      | casadi::Worh |
|              |              |              | epsilon      | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| eps_unstable | OT_REAL      | 0.000        | A margin for | casadi::Worh |
|              |              |              | unstability  | pInternal    |
|              |              |              | detection    |              |
+--------------+--------------+--------------+--------------+--------------+
| expand       | OT_BOOLEAN   | False        | Expand the   | casadi::Worh |
|              |              |              | NLP function | pInternal    |
|              |              |              | in terms of  |              |
|              |              |              | scalar       |              |
|              |              |              | operations,  |              |
|              |              |              | i.e. MX->SX  |              |
+--------------+--------------+--------------+--------------+--------------+
| expand_f     | OT_BOOLEAN   | GenericType( | Deprecated,  | casadi::NLPS |
|              |              | )            | use \"expand\" | olverInterna |
|              |              |              | instead.     | l            |
+--------------+--------------+--------------+--------------+--------------+
| expand_g     | OT_BOOLEAN   | GenericType( | Deprecated,  | casadi::NLPS |
|              |              | )            | use \"expand\" | olverInterna |
|              |              |              | instead.     | l            |
+--------------+--------------+--------------+--------------+--------------+
| gather_stats | OT_BOOLEAN   | False        | Flag to      | casadi::Worh |
|              |              |              | indicate     | pInternal    |
|              |              |              | whether      |              |
|              |              |              | statistics   |              |
|              |              |              | must be      |              |
|              |              |              | gathered     |              |
+--------------+--------------+--------------+--------------+--------------+
| gauss_newton | OT_BOOLEAN   | None         | Deprecated   | casadi::Worh |
|              |              |              | option. Use  | pInternal    |
|              |              |              | Gauss Newton |              |
|              |              |              | Hessian appr |              |
|              |              |              | oximation    |              |
+--------------+--------------+--------------+--------------+--------------+
| generate_gra | OT_BOOLEAN   | GenericType( | the gradient | casadi::NLPS |
| dient        |              | )            | of the       | olverInterna |
|              |              |              | objective.   | l            |
+--------------+--------------+--------------+--------------+--------------+
| generate_hes | OT_BOOLEAN   | None         | Deprecated   | casadi::Worh |
| sian         |              |              | option.      | pInternal    |
|              |              |              | Generate an  |              |
|              |              |              | exact        |              |
|              |              |              | Hessian of   |              |
|              |              |              | the          |              |
|              |              |              | Lagrangian   |              |
|              |              |              | if not       |              |
|              |              |              | supplied.    |              |
+--------------+--------------+--------------+--------------+--------------+
| generate_jac | OT_BOOLEAN   | None         | Deprecated   | casadi::Worh |
| obian        |              |              | option.      | pInternal    |
|              |              |              | Generate an  |              |
|              |              |              | exact        |              |
|              |              |              | Jacobian of  |              |
|              |              |              | the          |              |
|              |              |              | constraints  |              |
|              |              |              | if not       |              |
|              |              |              | supplied.    |              |
+--------------+--------------+--------------+--------------+--------------+
| grad_f       | OT_Function  | None         | Function for | casadi::Worh |
|              |              |              | calculating  | pInternal    |
|              |              |              | the gradient |              |
|              |              |              | of the       |              |
|              |              |              | objective    |              |
|              |              |              | (column, aut |              |
|              |              |              | ogenerated   |              |
|              |              |              | by default)  |              |
+--------------+--------------+--------------+--------------+--------------+
| grad_lag     | OT_Function  | None         | Function for | casadi::Worh |
|              |              |              | calculating  | pInternal    |
|              |              |              | the gradient |              |
|              |              |              | of the       |              |
|              |              |              | Lagrangian ( |              |
|              |              |              | autogenerate |              |
|              |              |              | d by         |              |
|              |              |              | default)     |              |
+--------------+--------------+--------------+--------------+--------------+
| hess_lag     | OT_Function  | None         | Function for | casadi::Worh |
|              |              |              | calculating  | pInternal    |
|              |              |              | the Hessian  |              |
|              |              |              | of the       |              |
|              |              |              | Lagrangian ( |              |
|              |              |              | autogenerate |              |
|              |              |              | d by         |              |
|              |              |              | default)     |              |
+--------------+--------------+--------------+--------------+--------------+
| ignore_check | OT_BOOLEAN   | False        | If set to    | casadi::Worh |
| _vec         |              |              | true, the    | pInternal    |
|              |              |              | input shape  |              |
|              |              |              | of F will    |              |
|              |              |              | not be       |              |
|              |              |              | checked.     |              |
+--------------+--------------+--------------+--------------+--------------+
| inputs_check | OT_BOOLEAN   | True         | Throw        | casadi::Worh |
|              |              |              | exceptions   | pInternal    |
|              |              |              | when the     |              |
|              |              |              | numerical    |              |
|              |              |              | values of    |              |
|              |              |              | the inputs   |              |
|              |              |              | don't make   |              |
|              |              |              | sense        |              |
+--------------+--------------+--------------+--------------+--------------+
| internalParC | OT_INTEGER   | 0            | Counter for  | casadi::Worh |
| hanged       |              |              | changed      | pInternal    |
|              |              |              | parameters.  |              |
|              |              |              | Internal use |              |
|              |              |              | only.        |              |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_CALLBACK  | GenericType( | Check docume | casadi::NLPS |
| llback       |              | )            | ntation of   | olverInterna |
|              |              |              | Callback .   | l            |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_BOOLEAN   | False        | If set to    | casadi::Worh |
| llback_ignor |              |              | true, errors | pInternal    |
| e_errors     |              |              | thrown by it |              |
|              |              |              | eration_call |              |
|              |              |              | back will be |              |
|              |              |              | ignored.     |              |
+--------------+--------------+--------------+--------------+--------------+
| iteration_ca | OT_INTEGER   | 1            | Only call    | casadi::Worh |
| llback_step  |              |              | the callback | pInternal    |
|              |              |              | function     |              |
|              |              |              | every few    |              |
|              |              |              | iterations.  |              |
+--------------+--------------+--------------+--------------+--------------+
| jac_f        | OT_Function  | None         | Function for | casadi::Worh |
|              |              |              | calculating  | pInternal    |
|              |              |              | the jacobian |              |
|              |              |              | of the       |              |
|              |              |              | objective    |              |
|              |              |              | (sparse row, |              |
|              |              |              | autogenerate |              |
|              |              |              | d by         |              |
|              |              |              | default)     |              |
+--------------+--------------+--------------+--------------+--------------+
| jac_g        | OT_Function  | None         | Function for | casadi::Worh |
|              |              |              | calculating  | pInternal    |
|              |              |              | the Jacobian |              |
|              |              |              | of the       |              |
|              |              |              | constraints  |              |
|              |              |              | (autogenerat |              |
|              |              |              | ed by        |              |
|              |              |              | default)     |              |
+--------------+--------------+--------------+--------------+--------------+
| monitor      | OT_STRINGVEC | None         | Monitors to  | casadi::Worh |
|              | TOR          |              | be activated | pInternal    |
|              |              |              | Monitor      |              |
|              |              |              | functions    |              |
+--------------+--------------+--------------+--------------+--------------+
| name         | OT_STRING    | \"unnamed_sha | name of the  | casadi::Opti |
|              |              | red_object\"  | object       | onsFunctiona |
|              |              |              |              | lityNode     |
+--------------+--------------+--------------+--------------+--------------+
| parametric   | OT_BOOLEAN   | GenericType( | input        | casadi::NLPS |
|              |              | )            | argument     | olverInterna |
|              |              |              | appended at  | l            |
|              |              |              | the end,     |              |
|              |              |              | denoting     |              |
|              |              |              | fixed        |              |
|              |              |              | parameters.  |              |
+--------------+--------------+--------------+--------------+--------------+
| print_time   | OT_BOOLEAN   | True         | Print        | casadi::Worh |
|              |              |              | information  | pInternal    |
|              |              |              | about        |              |
|              |              |              | execution    |              |
|              |              |              | time         |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_ipBarrier | OT_REAL      | 7.800        | IP barrier   | casadi::Worh |
|              |              |              | parameter.   | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| qp_ipComTol  | OT_REAL      | 0.000        | IP complemen | casadi::Worh |
|              |              |              | tarity       | pInternal    |
|              |              |              | tolerance.   |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_ipFracBou | OT_REAL      | 0.880        | IP fraction- | casadi::Worh |
| nd           |              |              | to-the-      | pInternal    |
|              |              |              | boundary     |              |
|              |              |              | parameter.   |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_ipLsMetho | OT_STRING    | None         | Select the   | casadi::Worh |
| d            |              |              | direct       | pInternal    |
|              |              |              | linear       |              |
|              |              |              | solver used  |              |
|              |              |              | by the IP    |              |
|              |              |              | method.      |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_ipMinAlph | OT_REAL      | 0.000        | IP line      | casadi::Worh |
| a            |              |              | search       | pInternal    |
|              |              |              | minimum step |              |
|              |              |              | size.        |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_ipRelaxDi | OT_REAL      | 2            | The          | casadi::Worh |
| v            |              |              | relaxation   | pInternal    |
|              |              |              | term is      |              |
|              |              |              | divided by   |              |
|              |              |              | this value   |              |
|              |              |              | if           |              |
|              |              |              | successful.  |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_ipRelaxMa | OT_REAL      | 0.000        | Maximum      | casadi::Worh |
| x            |              |              | relaxation   | pInternal    |
|              |              |              | value.       |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_ipRelaxMi | OT_REAL      | 0.000        | Mimimum      | casadi::Worh |
| n            |              |              | relaxation   | pInternal    |
|              |              |              | value.       |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_ipRelaxMu | OT_REAL      | 10           | The          | casadi::Worh |
| lt           |              |              | relaxation   | pInternal    |
|              |              |              | term is      |              |
|              |              |              | multiplied   |              |
|              |              |              | by this      |              |
|              |              |              | value if uns |              |
|              |              |              | uccessful.   |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_ipResTol  | OT_REAL      | 0.000        | IP residuals | casadi::Worh |
|              |              |              | tolerance.   | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| qp_ipTryRela | OT_BOOLEAN   | True         | Enable       | casadi::Worh |
| x            |              |              | relaxation   | pInternal    |
|              |              |              | strategy     |              |
|              |              |              | when         |              |
|              |              |              | encountering |              |
|              |              |              | an error.    |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_lsItMaxIt | OT_INTEGER   | 1000         | Maximum      | casadi::Worh |
| er           |              |              | number of    | pInternal    |
|              |              |              | iterations   |              |
|              |              |              | of the       |              |
|              |              |              | iterative    |              |
|              |              |              | linear       |              |
|              |              |              | solvers.     |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_lsItMetho | OT_STRING    | None         | Select the   | casadi::Worh |
| d            |              |              | iterative    | pInternal    |
|              |              |              | linear       |              |
|              |              |              | solver.      |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_lsItPreco | OT_STRING    | None         | Select preco | casadi::Worh |
| ndMethod     |              |              | nditioner    | pInternal    |
|              |              |              | for the      |              |
|              |              |              | iterative    |              |
|              |              |              | linear       |              |
|              |              |              | solver.      |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_lsRefineM | OT_INTEGER   | 10           | Maximum      | casadi::Worh |
| axIter       |              |              | number of    | pInternal    |
|              |              |              | iterative    |              |
|              |              |              | refinement   |              |
|              |              |              | steps of the |              |
|              |              |              | direct       |              |
|              |              |              | linear       |              |
|              |              |              | solvers.     |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_lsScale   | OT_BOOLEAN   | True         | Enables      | casadi::Worh |
|              |              |              | scaling on   | pInternal    |
|              |              |              | linear       |              |
|              |              |              | solver       |              |
|              |              |              | level.       |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_lsTol     | OT_REAL      | 0.000        | Tolerance    | casadi::Worh |
|              |              |              | for the      | pInternal    |
|              |              |              | linear       |              |
|              |              |              | solver.      |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_lsTrySimp | OT_BOOLEAN   | False        | Some         | casadi::Worh |
| le           |              |              | matrices can | pInternal    |
|              |              |              | be solved    |              |
|              |              |              | without      |              |
|              |              |              | calling a    |              |
|              |              |              | linear       |              |
|              |              |              | equation sol |              |
|              |              |              | ver.Currentl |              |
|              |              |              | y only       |              |
|              |              |              | diagonal     |              |
|              |              |              | matrices are |              |
|              |              |              | supported    |              |
|              |              |              | .Non-        |              |
|              |              |              | diagonal     |              |
|              |              |              | matrices     |              |
|              |              |              | will         |              |
|              |              |              | besolved     |              |
|              |              |              | with the     |              |
|              |              |              | chosen       |              |
|              |              |              | linear       |              |
|              |              |              | equation     |              |
|              |              |              | solver.      |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_maxIter   | OT_INTEGER   | 80           | Imposes an   | casadi::Worh |
|              |              |              | upper limit  | pInternal    |
|              |              |              | on the       |              |
|              |              |              | number of    |              |
|              |              |              | minor solver |              |
|              |              |              | iterations,  |              |
|              |              |              | i.e. for the |              |
|              |              |              | quadratic    |              |
|              |              |              | subproblem   |              |
|              |              |              | solver.If    |              |
|              |              |              | the limit is |              |
|              |              |              | reached      |              |
|              |              |              | before conve |              |
|              |              |              | rgence,WORHP |              |
|              |              |              | will         |              |
|              |              |              | activate QP  |              |
|              |              |              | recovery     |              |
|              |              |              | strategies   |              |
|              |              |              | to prevent a |              |
|              |              |              | solver       |              |
|              |              |              | breakdown.   |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_method    | OT_STRING    | None         | Select the   | casadi::Worh |
|              |              |              | solution     | pInternal    |
|              |              |              | method used  |              |
|              |              |              | by the QP    |              |
|              |              |              | solver.      |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_nsnBeta   | OT_REAL      | 0.900        | NSN stepsize | casadi::Worh |
|              |              |              | decrease     | pInternal    |
|              |              |              | factor.      |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_nsnGradSt | OT_BOOLEAN   | True         | Enable       | casadi::Worh |
| ep           |              |              | gradient     | pInternal    |
|              |              |              | steps in the |              |
|              |              |              | NSN method.  |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_nsnKKT    | OT_REAL      | 0.000        | NSN KKT      | casadi::Worh |
|              |              |              | tolerance.   | pInternal    |
+--------------+--------------+--------------+--------------+--------------+
| qp_nsnLsMeth | OT_STRING    | None         | Select the   | casadi::Worh |
| od           |              |              | direct       | pInternal    |
|              |              |              | linear       |              |
|              |              |              | solver used  |              |
|              |              |              | by the NSN   |              |
|              |              |              | method.      |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_nsnMinAlp | OT_REAL      | 0.000        | NSN line     | casadi::Worh |
| ha           |              |              | search       | pInternal    |
|              |              |              | minimum step |              |
|              |              |              | size.        |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_nsnSigma  | OT_REAL      | 0.010        | NSN line     | casadi::Worh |
|              |              |              | search slope | pInternal    |
|              |              |              | parameter.   |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_printLeve | OT_STRING    | None         | Controls the | casadi::Worh |
| l            |              |              | amount of QP | pInternal    |
|              |              |              | solver       |              |
|              |              |              | output.      |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_scaleInte | OT_BOOLEAN   | worhp_p_.qp. | Enable       | casadi::Worh |
| rn           |              | scaleIntern  | scaling on   | pInternal    |
|              |              |              | QP level.    |              |
+--------------+--------------+--------------+--------------+--------------+
| qp_strict    | OT_BOOLEAN   | True         | Use strict   | casadi::Worh |
|              |              |              | termination  | pInternal    |
|              |              |              | criteria in  |              |
|              |              |              | IP method.   |              |
+--------------+--------------+--------------+--------------+--------------+
| regularity_c | OT_BOOLEAN   | True         | Throw        | casadi::Worh |
| heck         |              |              | exceptions   | pInternal    |
|              |              |              | when NaN or  |              |
|              |              |              | Inf appears  |              |
|              |              |              | during       |              |
|              |              |              | evaluation   |              |
+--------------+--------------+--------------+--------------+--------------+
| user_data    | OT_VOIDPTR   | GenericType( | the function | casadi::Func |
|              |              | )            | or pass      | tionInternal |
|              |              |              | additional   |              |
|              |              |              | information  |              |
+--------------+--------------+--------------+--------------+--------------+
| verbose      | OT_BOOLEAN   | False        | Verbose      | casadi::Worh |
|              |              |              | evaluation   | pInternal    |
|              |              |              | for          |              |
|              |              |              | debugging    |              |
+--------------+--------------+--------------+--------------+--------------+
| warn_initial | OT_BOOLEAN   | False        | Warn if the  | casadi::Worh |
| _bounds      |              |              | initial      | pInternal    |
|              |              |              | guess does   |              |
|              |              |              | not satisfy  |              |
|              |              |              | LBX and UBX  |              |
+--------------+--------------+--------------+--------------+--------------+

>List of available stats
+--------------------+-----------------------+
|         Id         |        Used in        |
+====================+=======================+
| iter_count         | casadi::WorhpInternal |
+--------------------+-----------------------+
| iteration          | casadi::WorhpInternal |
+--------------------+-----------------------+
| iterations         | casadi::WorhpInternal |
+--------------------+-----------------------+
| n_eval_f           | casadi::WorhpInternal |
+--------------------+-----------------------+
| n_eval_g           | casadi::WorhpInternal |
+--------------------+-----------------------+
| n_eval_grad_f      | casadi::WorhpInternal |
+--------------------+-----------------------+
| n_eval_h           | casadi::WorhpInternal |
+--------------------+-----------------------+
| n_eval_jac_g       | casadi::WorhpInternal |
+--------------------+-----------------------+
| return_code        | casadi::WorhpInternal |
+--------------------+-----------------------+
| return_status      | casadi::WorhpInternal |
+--------------------+-----------------------+
| t_callback_fun     | casadi::WorhpInternal |
+--------------------+-----------------------+
| t_callback_prepare | casadi::WorhpInternal |
+--------------------+-----------------------+
| t_eval_f           | casadi::WorhpInternal |
+--------------------+-----------------------+
| t_eval_g           | casadi::WorhpInternal |
+--------------------+-----------------------+
| t_eval_grad_f      | casadi::WorhpInternal |
+--------------------+-----------------------+
| t_eval_h           | casadi::WorhpInternal |
+--------------------+-----------------------+
| t_eval_jac_g       | casadi::WorhpInternal |
+--------------------+-----------------------+
| t_mainloop         | casadi::WorhpInternal |
+--------------------+-----------------------+

Diagrams

C++ includes: worhp_solver.hpp ";

%feature("docstring")  casadi::Function::jacobian(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
int oind=0, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::Function::jacobian(const std::string &iind,
const std::string &oind, bool compact=false, bool symmetric=false) "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. If
compact is set to true, only the nonzeros of the input and output
expressions are considered. If symmetric is set to true, the Jacobian being
calculated is known to be symmetric (usually a Hessian), which can be
exploited by the algorithm.

The generated Jacobian has one more output than the calling function
corresponding to the Jacobian and the same number of inputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
int oind=0) "

Set an output by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setOutput(T val,
const std::string &oname) "

Set an output by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::SharedObject::assertInit() const  "
[INTERNAL]  Assert that it is initialized

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(int
oind=0) const "

Get an output by index.

Parameters:
-----------

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(const
std::string &oname) const "

Get an output by name.

Parameters:
-----------

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
int oind=0) " [INTERNAL]  Get an output by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oind:  index within the range [0.. getNumOutputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getOutput(T val,
const std::string &oname) " [INTERNAL]  Get an output by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

oname:  output name. Only allowed when an output scheme is set.

";

%feature("docstring")  casadi::NLPSolver::jacG() "

Access the Jacobian of the constraint function.

>Input scheme: casadi::HessLagInput (HESSLAG_NUM_IN = 5) [hessLagIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| HESSLAG_X              | x                      | Decision variable .    |
+------------------------+------------------------+------------------------+
| HESSLAG_P              | p                      | Fixed parameter .      |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_F          | lam_f                  | Multiplier for f. Just |
|                        |                        | a scalar factor for    |
|                        |                        | the objective that the |
|                        |                        | NLP solver might use   |
|                        |                        | to scale the           |
|                        |                        | objective.             |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_G          | lam_g                  | Multiplier for g .     |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::HessLagOutput (HESSLAG_NUM_OUT = 6) [hessLagOut]
+----------------+--------+------------------------------------------------+
|   Full name    | Short  |                  Description                   |
+================+========+================================================+
| HESSLAG_HESS   | hess   | Hessian of the Lagrangian .                    |
+----------------+--------+------------------------------------------------+
| HESSLAG_F      | f      | Objective function .                           |
+----------------+--------+------------------------------------------------+
| HESSLAG_G      | g      | Constraint function .                          |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_X | grad_x | Gradient of the Lagrangian with respect to x . |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_P | grad_p | Gradient of the Lagrangian with respect to p . |
+----------------+--------+------------------------------------------------+

";

%feature("docstring")  casadi::SharedObject::makeUnique(bool
clone_members=true) "

Make unique.

If there are other references to the object, then make a deep copy of it and
point to this new object

";

%feature("docstring")  casadi::SharedObject::makeUnique(std::map<
SharedObjectNode *, SharedObject > &already_copied, bool clone_members=true)
" [INTERNAL]  SWIGINTERNAL

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionDefault(const
std::string &str) const  "

INTERNAL.

Get the default of a certain option

";

%feature("docstring")  casadi::Function::callDerivative(const DMatrixVector
&arg, DMatrixVector &output_res, const DMatrixVectorVector &fseed,
DMatrixVectorVector &output_fsens, const DMatrixVectorVector &aseed,
DMatrixVectorVector &output_asens, bool always_inline=false, bool
never_inline=false) " [INTERNAL]  Evaluate the function symbolically or
numerically with directional derivatives The first two arguments are the
nondifferentiated inputs and results of the evaluation, the next two
arguments are a set of forward directional seeds and the resulting forward
directional derivatives, the length of the vector being the number of
forward directions. The next two arguments are a set of adjoint directional
seeds and the resulting adjoint directional derivatives, the length of the
vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const SXVector &arg,
SXVector &output_res, const SXVectorVector &fseed, SXVectorVector
&output_fsens, const SXVectorVector &aseed, SXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::callDerivative(const MXVector &arg,
MXVector &output_res, const MXVectorVector &fseed, MXVectorVector
&output_fsens, const MXVectorVector &aseed, MXVectorVector &output_asens,
bool always_inline=false, bool never_inline=false) " [INTERNAL]  Evaluate
the function symbolically or numerically with directional derivatives The
first two arguments are the nondifferentiated inputs and results of the
evaluation, the next two arguments are a set of forward directional seeds
and the resulting forward directional derivatives, the length of the vector
being the number of forward directions. The next two arguments are a set of
adjoint directional seeds and the resulting adjoint directional derivatives,
the length of the vector being the number of adjoint directions.

";

%feature("docstring")  casadi::Function::addMonitor(const std::string &mon)
"

Add modules to be monitored.

";

%feature("docstring")  casadi::Function::output_struct() const  " [INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::output_struct() "[INTERNAL]
Input/output structures of the function

";

%feature("docstring")  casadi::Function::setInputScheme(const
casadi::IOScheme &scheme) "

Set input scheme.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) "
[INTERNAL]  Access an input.

";

%feature("docstring")  casadi::IOInterface< Function  >::inputS(int i) const
" [INTERNAL]  Const access an input.

";

%feature("docstring")  casadi::Function::gradient(int iind=0, int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
int oind=0) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(int iind, const
std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::gradient(const std::string &iind,
const std::string &oind) "

Generate a gradient function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the output must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::NLPSolver::reportConstraints(std::ostream
&stream=std::cout) "

Prints out a human readable report about possible constraint violations,
after solving.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumInputs()
const "

Get the number of function inputs.

";

%feature("docstring")  casadi::IOInterface< Function
>::outputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an output scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::getNumInputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::Function::getStats() const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::SharedObject::clone() const  " [INTERNAL]
Deep copy.

";

%feature("docstring")  casadi::Function::setFullJacobian(const Function
&jac) "

Set the Jacobian of all the input nonzeros with respect to all output
nonzeros NOTE: Does not take ownership, only weak references to the Jacobian
are kept internally

";

%feature("docstring")  casadi::Function::callParallel(const std::vector<
std::vector< MX > > &arg, const Dictionary &paropt=Dictionary()) "

Evaluate symbolically in parallel (matrix graph)

Parameters:
-----------

paropt:  Set of options to be passed to the Parallelizer

";

%feature("docstring")  casadi::IOInterface< Function  >::schemeEntry(const
casadi::IOScheme &scheme, const std::string &name, bool input) const "
[INTERNAL]  Find the index for a string describing a particular entry of a
scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::checkInputs() const  " [INTERNAL]
Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::NLPSolver::gradF() "

Access the objective gradient function>Input scheme: casadi::GradFInput
(GRADF_NUM_IN = 3) [gradFIn] +-----------+-------+---------------------+ |
Full name | Short |     Description     |
+===========+=======+=====================+ | GRADF_X   | x     | Decision
variable . | +-----------+-------+---------------------+ | GRADF_P   | p
| Fixed parameter .   | +-----------+-------+---------------------+

";

%feature("docstring")  casadi::WorhpSolver::setOptionsFromFile(const
std::string &file) "

Read options from worhp parameter xml.

";

%feature("docstring")  casadi::Function::setJacobian(const Function &jac,
int iind=0, int oind=0, bool compact=false) "

Set the Jacobian function of output oind with respect to input iind NOTE:
Does not take ownership, only weak references to the Jacobians are kept
internally

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionAllowedIndex(const std::string &name)
const  " [INTERNAL]  Get the index into allowed options of a certain option.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionEnumValue(const std::string &name)
const  " [INTERNAL]  Get the enum value corresponding to th certain option.

";

%feature("docstring")  casadi::Function::getOutputScheme() const  "

Get output scheme.

";

%feature("docstring")  casadi::SharedObject::isInit() const  "

Is initialized?

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionAllowed(const
std::string &str) const  "

Get the allowed values of a certain option.

";

%feature("docstring")  casadi::IOInterface< Function
>::inputSchemeEntry(const std::string &name) const " [INTERNAL]  Find the
index for a string describing a particular entry of an input scheme.

example: schemeEntry(\"x_opt\") -> returns NLP_SOLVER_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::getNumOutputNonzeros() const  "

Get total number of nonzeros in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i) "
[INTERNAL]  Access an output.

";

%feature("docstring")  casadi::IOInterface< Function  >::outputS(int i)
const " [INTERNAL]  Const access an output.

";

%feature("docstring")
casadi::OptionsFunctionality::setOptionByEnumValue(const std::string &name,
int v) " [INTERNAL]  Set a certain option by giving an enum value.

";

%feature("docstring") casadi::WorhpSolver::WorhpSolver() "

Default constructor.

";

%feature("docstring") casadi::WorhpSolver::WorhpSolver(const Function &nlp)
"

Create an NLP solver instance.

";

%feature("docstring")
casadi::OptionsFunctionality::getOptionDescription(const std::string &str)
const  "

Get the description of a certain option.

";

%feature("docstring")  casadi::OptionsFunctionality::dictionary() const  "

Get the dictionary.

";

%feature("docstring")  casadi::NLPSolver::nlp() "

Access the NLP.

>Input scheme: casadi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

>Output scheme: casadi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

";

%feature("docstring")  casadi::SharedObject::weak() "[INTERNAL]  Get a weak
reference to the object.

";

%feature("docstring")  casadi::SharedObject::isNull() const  "

Is a null pointer?

";

%feature("docstring")  casadi::Function::fullJacobian() "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::SharedObject::printPtr(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print the pointer to the internal
class

";

%feature("docstring")  casadi::Function::setDerivative(const Function &fcn,
int nfwd, int nadj) "

Set a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

NOTE: Does not take ownership, only weak references to the derivatives are
kept internally

";

%feature("docstring")  casadi::Function::getStat(const std::string &name)
const  "

Get a single statistic obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::getSanitizedName() const  "

get function name with all non alphanumeric characters converted to '_'

";

%feature("docstring")  casadi::Function::solve() "

the same as evaluate()

";

%feature("docstring")  casadi::Function::spInit(bool fwd) " [INTERNAL]
Reset the sparsity propagation.

(for usage, see the example propagating_sparsity.cpp)

";

%feature("docstring")  casadi::Function::getNumOutputElements() const  "

Get total number of elements in all of the matrix-valued outputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumInputs(int
num_in) "

Set the number of function inputs.

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, int oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
int iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::setJacSparsity(const Sparsity &sp,
const std::string &iind, const std::string &oind, bool compact=false) "

Generate the sparsity of a Jacobian block

";

%feature("docstring")  casadi::NLPSolver::setQPOptions() "

Set options that make the NLP solver more suitable for solving QPs.

";

%feature("docstring")  casadi::Function::getNumInputElements() const  "

Get total number of elements in all of the matrix-valued inputs.

";

%feature("docstring")  casadi::Function::jacSparsity(int iind=0, int oind=0,
bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, int oind=0, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(int iind, const
std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::jacSparsity(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false) "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::symbolicInputSX() const  "

Get a vector of symbolic variables with the same dimensions as the inputs,
SX graph.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) const "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(int oind=0)
"

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::IOInterface< Function  >::output(const
std::string &oname) "

[UNSAFE] Obtain reference to outputs  getOutput, getOutput

Access output argument

";

%feature("docstring")  casadi::Function::hessian(int iind=0, int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
int oind=0) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(int iind, const std::string
&oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::Function::hessian(const std::string &iind,
const std::string &oind) "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The generated Hessian has two more outputs than the calling function
corresponding to the Hessian and the gradients.

";

%feature("docstring")  casadi::SharedObject::print(std::ostream
&stream=std::cout) const  " [INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::Function::evaluate() "

Evaluate.

";

%feature("docstring")  casadi::SharedObject::swap(SharedObject &other) "
[INTERNAL]  Swap content with another instance.

";

%feature("docstring")  casadi::Function::symbolicInput() const  "

Get a vector of symbolic variables with the same dimensions as the inputs.

There is no guarantee that consecutive calls return identical objects

";

%feature("docstring")
casadi::OptionsFunctionality::printOptions(std::ostream &stream=std::cout)
const  "

Print options to a stream.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionType(const
std::string &str) const  "

Get the type of a certain option.

";

%feature("docstring")  casadi::OptionsFunctionality::hasSetOption(const
std::string &str) const  "

check if the user has there is an option str

";

%feature("docstring")  casadi::Function::getInputScheme() const  "

Get input scheme.

";

%feature("docstring")  casadi::OptionsFunctionality::copyOptions(const
OptionsFunctionality &obj, bool skipUnknown=false) "

Copy all options from another object.

";

%feature("docstring")  casadi::IOInterface< Function  >::setNumOutputs(int
num_out) "

Set the number of function outputs.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(int
iind=0) const "

Get an input by index.

Parameters:
-----------

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(const
std::string &iname) const "

Get an input by name.

Parameters:
-----------

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val, int
iind=0) " [INTERNAL]  Get an input by index.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::getInput(T val,
const std::string &iname) " [INTERNAL]  Get an input by name.

Parameters:
-----------

val:  can be double&, std::vector<double>&, Matrix<double>&, double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
std::string &str, const GenericType &val) "

set an option. For a list of options, check the class documentation of this
class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::OptionsFunctionality::setOption(const
Dictionary &dict, bool skipUnknown=false) "

set a set of options. For a list of options, check the class documentation
of this class.

The setOptions are only considered before the init function. If properties
changes, the init function should be called again.

";

%feature("docstring")  casadi::Function::outputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::outputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::NLPSolver::getReportConstraints() "";

%feature("docstring")  casadi::WorhpSolver::checkNode() const  "

Check if the node is pointing to the right type of object.

";

%feature("docstring")  casadi::Function::spEvaluate(bool fwd) " [INTERNAL]
Propagate the sparsity pattern through a set of directional.

derivatives forward or backward (for usage, see the example
propagating_sparsity.cpp)

";

%feature("docstring")  casadi::SharedObject::get() const  " [INTERNAL]  Get
a const pointer to the node.

";

%feature("docstring")  casadi::SharedObject::get() "[INTERNAL]  Get a
pointer to the node.

";

%feature("docstring")  casadi::Function::setOutputScheme(const
casadi::IOScheme &scheme) "

Set output scheme.

";

%feature("docstring")  casadi::SharedObject::init(bool allow_reinit=true) "

Initialize or re-initialize the object:

more documentation in the node class ( SharedObjectNode and derived classes)

";

%feature("docstring")  casadi::Function::derivative(int nfwd, int nadj) "

Get a function that calculates nfwd forward derivatives and nadj adjoint
derivatives.

Returns a function with (1+nfwd)*n_in+nadj*n_out inputs and (1+nfwd)*n_out +
nadj*n_in outputs. The first n_in inputs correspond to nondifferentiated
inputs. The next nfwd*n_in inputs correspond to forward seeds, one direction
at a time and the last nadj*n_out inputs correspond to adjoint seeds, one
direction at a time. The first n_out outputs correspond to nondifferentiated
outputs. The next nfwd*n_out outputs correspond to forward sensitivities,
one direction at a time and the last nadj*n_in outputs corresponds to
adjoint sensitivities, one direction at a time.

(n_in = getNumInputs(), n_out = getNumOutputs())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::PrintableObject::getDescription() const  "

Return a string with a description (for SWIG)

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0)
const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) const "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(int iind=0) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::IOInterface< Function  >::input(const
std::string &iname) "

[UNSAFE] Obtain reference to inputs  getInput, setInput

Access input argument

";

%feature("docstring")  casadi::Function::tangent(int iind=0, int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
int oind=0) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(int iind, const std::string
&oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::Function::tangent(const std::string &iind,
const std::string &oind) "

Generate a tangent function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output

The default behavior of this class is defined by the derived class. Note
that the input must be scalar. In other cases, use the Jacobian instead.

";

%feature("docstring")  casadi::IOInterface< Function  >::getNumOutputs()
const "

Get the number of function outputs.

";

%feature("docstring")  casadi::SharedObject::getCount() const  " [INTERNAL]
Get the reference count.

";

%feature("docstring")  casadi::Function::removeMonitor(const std::string
&mon) "

Remove modules to be monitored.

";

%feature("docstring")  casadi::Function::generateCode(const std::string
&filename) "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode() "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::generateCode(std::ostream
&filename) "

Generate C code for the function.

";

%feature("docstring")  casadi::Function::inputScheme() const  " [INTERNAL]
Access input/output scheme.

";

%feature("docstring")  casadi::Function::inputScheme() "[INTERNAL]  Access
input/output scheme.

";

%feature("docstring")  casadi::OptionsFunctionality::getOptionTypeName(const
std::string &str) const  "

Get the type name of a certain option.

";

%feature("docstring")  casadi::OptionsFunctionality::getOption(const
std::string &str) const  "

get an option value

";

%feature("docstring")  casadi::PrintableObject::getRepresentation() const  "

Return a string with a representation (for SWIG)

";

%feature("docstring")  casadi::Function::call(const std::vector< DMatrix >
&arg, bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
bool always_inline=false, bool never_inline=false) "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val, int
iind=0) "

Set an input by index.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iind:  index within the range [0.. getNumInputs()-1]

";

%feature("docstring")  casadi::IOInterface< Function  >::setInput(T val,
const std::string &iname) "

Set an input by name.

Parameters:
-----------

val:  can be double, const std::vector<double>&, const Matrix<double>&,
double *

iname:  input name. Only allowed when an input scheme is set.

";

%feature("docstring")
casadi::SharedObject::assignNodeNoCount(SharedObjectNode *node) " [INTERNAL]
Assign the node to a node class pointer without reference counting.

improper use will cause memory leaks!

";

%feature("docstring")  casadi::SharedObject::assignNode(SharedObjectNode
*node) " [INTERNAL]  Assign the node to a node class pointer (or null)

";


// File: classcasadi_1_1XMLNode.xml
%feature("docstring")  casadi::XMLNode::dump(std::ostream &stream, int
indent=0) const  " [INTERNAL] ";

%feature("docstring") casadi::XMLNode "[INTERNAL] C++ includes:
xml_node.hpp ";

%feature("docstring")  casadi::XMLNode::getName() const  " [INTERNAL]  Get
the name of the node.

";

%feature("docstring")  casadi::XMLNode::checkName(const std::string &str)
const  " [INTERNAL]  check if the name is equal to something

";

%feature("docstring")  casadi::XMLNode::getText() const  " [INTERNAL]  Get
the text field.

";

%feature("docstring")  casadi::XMLNode::getText(T &val) const  " [INTERNAL]
Get value of text field.

";

%feature("docstring")  casadi::XMLNode::addNode(TiXmlNode *node) "
[INTERNAL]  Read node from parsed XML file.

";

%feature("docstring")  casadi::XMLNode::hasAttribute(const std::string
&attribute_name) const  " [INTERNAL]  Check if an attribute is present.

";

%feature("docstring")  casadi::XMLNode::setName(const std::string &name) "
[INTERNAL]  Set the name of the node.

";

%feature("docstring")  casadi::XMLNode::readAttribute(const std::string
&attribute_name, T &val, bool assert_existance=true) const  " [INTERNAL]
Read the value of an attribute.

";

%feature("docstring") casadi::XMLNode::XMLNode() "[INTERNAL] ";

%feature("docstring") casadi::XMLNode::~XMLNode "[INTERNAL] ";

%feature("docstring")  casadi::XMLNode::setAttribute(const std::string
&attribute_name, const std::string &attribute) " [INTERNAL]  Add an
attribute.

";

%feature("docstring")  casadi::XMLNode::size() const  " [INTERNAL]  Get the
number of children.

";

%feature("docstring")  casadi::XMLNode::getAttribute(const std::string
&attribute_name) const  " [INTERNAL]  Get an attribute by its name.

";

%feature("docstring")  casadi::XMLNode::hasChild(const std::string
&childname) const  " [INTERNAL]  Check if a child is present.

";


// File: classcasadi_1_1ZeroByZero.xml
%feature("docstring")  casadi::MXNode::isMultipleOutput() const  "
[INTERNAL]  Check if a multiple output node.

";

%feature("docstring")  casadi::MXNode::ndep() const  " [INTERNAL]  Number of
dependencies.

";

%feature("docstring")  casadi::MXNode::size() const  " [INTERNAL] ";

%feature("docstring")  casadi::ZeroByZero::getReshape(const Sparsity &sp)
const  " [INTERNAL]   Reshape.

";

%feature("docstring")  casadi::ZeroByZero::generateOperation(std::ostream
&stream, const std::vector< std::string > &arg, const std::vector<
std::string > &res, CodeGenerator &gen) const  " [INTERNAL]  Generate code
for the operation.

";

%feature("docstring")  casadi::ConstantMX::getInnerProd(const MX &y) const
" [INTERNAL]   Matrix multiplication.

Inner product

";

%feature("docstring")  casadi::MXNode::nTmp(size_t &ni, size_t &nr) "
[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::MXNode::getInverse() const  " [INTERNAL]
Inverse.

";

%feature("docstring")  casadi::MXNode::getName() const  " [INTERNAL]  Get
the name.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream) const  "
[INTERNAL]  Print a description.

";

%feature("docstring")  casadi::MXNode::print(std::ostream &stream, long
&remaining_calls) const  " [INTERNAL]  Print expression (make sure number of
calls is not exceeded)

";

%feature("docstring")  casadi::ZeroByZero::getGetNonzeros(const Sparsity
&sp, const std::vector< int > &nz) const  " [INTERNAL]  Get the nonzeros of
matrix.

";

%feature("docstring")  casadi::ZeroByZero::clone() const  " [INTERNAL]
Clone function.

";

%feature("docstring") casadi::ZeroByZero::__nonzero__ "[INTERNAL]  Return
truth value of an MX.

";

%feature("docstring")  casadi::MXNode::sparsity() const  " [INTERNAL]  Get
the sparsity.

";

%feature("docstring")  casadi::MXNode::sparsity(int oind) const  "
[INTERNAL]  Get the sparsity of output oind.

";

%feature("docstring")  casadi::MXNode::addDependency(const MX &dep) "
[INTERNAL]  Add a dependency.

";

%feature("docstring")  casadi::ConstantMX::evaluateMX(const MXPtrV &input,
MXPtrV &output, const MXPtrVV &fwdSeed, MXPtrVV &fwdSens, const MXPtrVV
&adjSeed, MXPtrVV &adjSens, bool output_given) " [INTERNAL]  Evaluate the
function symbolically ( MX)

";

%feature("docstring")  casadi::MXNode::evaluateMX(const MXPtrV &input,
MXPtrV &output) " [INTERNAL]  Evaluate symbolically ( MX), no derivatives.

";

%feature("docstring")  casadi::SharedObjectNode::getCount() const  "
[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::ZeroByZero::getSetSparse(const Sparsity &sp)
const  " [INTERNAL]  Get densification.

";

%feature("docstring")  casadi::MXNode::hasDep() const  " [INTERNAL]  Does
the node depend on other nodes.

";

%feature("docstring") casadi::ZeroByZero "[INTERNAL]  A zero-by-zero
matrix.

C++ includes: constant_mx.hpp ";

%feature("docstring") casadi::ZeroByZero::~ZeroByZero "[INTERNAL]
Destructor.

";

%feature("docstring")  casadi::ZeroByZero::evaluateD(const DMatrixPtrV
&input, DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double >
&rtmp) " [INTERNAL]  Evaluate the function numerically.

";

%feature("docstring")  casadi::MXNode::getFunctionInput() const  "
[INTERNAL]  Get function input.

";

%feature("docstring")  casadi::MXNode::repr(std::ostream &stream) const  "
[INTERNAL]  Print a representation.

";

%feature("docstring")  casadi::MXNode::getNorm1() const  " [INTERNAL]
1-norm

";

%feature("docstring")  casadi::SharedObjectNode::isInit() const  "
[INTERNAL]  Check if the object has been initialized.

";

%feature("docstring")  casadi::MXNode::getDeterminant() const  " [INTERNAL]
Determinant.

";

%feature("docstring")  casadi::SharedObjectNode::init() "[INTERNAL]
Initialize the object.

";

%feature("docstring")  casadi::MXNode::isZero() const  " [INTERNAL]  Check
if identically zero.

";

%feature("docstring")  casadi::MXNode::isUnaryOp() const  " [INTERNAL]
Check if unary operation.

";

%feature("docstring")  casadi::ZeroByZero::getValue() const  " [INTERNAL]
Get the value (only for scalar constant nodes)

";

%feature("docstring")  casadi::MXNode::getHorzsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a horizontal split node.

";

%feature("docstring")  casadi::MXNode::getSolve(const MX &r, bool tr, const
LinearSolver &linear_solver) const  " [INTERNAL]   Solve a system of linear
equations.

For system Ax = b:

A->getSolve(b)

";

%feature("docstring")  casadi::MXNode::getVertcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a vertical concatenation node (vectors only)

";

%feature("docstring")  casadi::MXNode::size2() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep) "
[INTERNAL]  Set unary dependency.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2) " [INTERNAL]  Set binary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const MX &dep1, const
MX &dep2, const MX &dep3) " [INTERNAL]  Set ternary dependencies.

";

%feature("docstring")  casadi::MXNode::setDependencies(const std::vector< MX
> &dep) " [INTERNAL]  Set multiple dependencies.

";

%feature("docstring")  casadi::MXNode::isOne() const  " [INTERNAL]  Check if
identically one.

";

%feature("docstring")  casadi::MXNode::setSparsity(const Sparsity &sparsity)
" [INTERNAL]  Set the sparsity.

";

%feature("docstring")  casadi::MXNode::sameOpAndDeps(const MXNode *node, int
depth) const  " [INTERNAL]  Checks if two nodes have the same operation and
have equivalent dependencies up to a given depth.

";

%feature("docstring")  casadi::ZeroByZero::evaluateSX(const SXPtrV &input,
SXPtrV &output, std::vector< int > &itmp, std::vector< SXElement > &rtmp) "
[INTERNAL]  Evaluate the function symbolically (SX)

";

%feature("docstring")  casadi::ZeroByZero::printPart(std::ostream &stream,
int part) const  " [INTERNAL]  Print a part of the expression.

";

%feature("docstring")  casadi::MXNode::getNormInf() const  " [INTERNAL]
Infinity norm.

";

%feature("docstring")  casadi::MXNode::isIdentity() const  " [INTERNAL]
Check if identity matrix.

";

%feature("docstring")  casadi::ConstantMX::propagateSparsity(DMatrixPtrV
&input, DMatrixPtrV &output, bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::MXNode::propagateSparsity(DMatrixPtrV &input,
DMatrixPtrV &output, std::vector< int > &itmp, std::vector< double > &rtmp,
bool fwd) " [INTERNAL]  Propagate sparsity.

";

%feature("docstring")  casadi::ConstantMX::getOp() const  " [INTERNAL]  Get
the operation.

";

%feature("docstring")  casadi::MXNode::deepCopyMembers(std::map<
SharedObjectNode *, SharedObject > &already_copied) " [INTERNAL]  Deep copy
data members.

";

%feature("docstring")  casadi::MXNode::isBinaryOp() const  " [INTERNAL]
Check if binary operation.

";

%feature("docstring")  casadi::ZeroByZero::getUnary(int op) const  "
[INTERNAL]  Get a unary operation.

";

%feature("docstring")  casadi::MXNode::numel() const  " [INTERNAL]  Get
shape.

";

%feature("docstring")  casadi::SharedObjectNode::weak() "[INTERNAL]  Get a
weak reference to the object.

";

%feature("docstring")  casadi::MXNode::getVertsplit(const std::vector< int >
&output_offset) const  " [INTERNAL]  Create a vertical split node (vectors
only)

";

%feature("docstring")  casadi::MXNode::isValue(double val) const  "
[INTERNAL]  Check if a certain value.

";

%feature("docstring")  casadi::MXNode::isNonLinear() "[INTERNAL]  Is the
node nonlinear.

";

%feature("docstring")  casadi::ZeroByZero::getBinary(int op, const MX &y,
bool ScX, bool ScY) const  " [INTERNAL]  Get a binary operation operation.

";

%feature("docstring")  casadi::MXNode::getAddNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Add the nonzeros of a matrix to
another matrix.

";

%feature("docstring")  casadi::MXNode::simplifyMe(MX &ex) " [INTERNAL]
Simplify the expression (ex is a reference to the node)

";

%feature("docstring")  casadi::MXNode::getHorzcat(const std::vector< MX >
&x) const  " [INTERNAL]  Create a horizontal concatenation node.

";

%feature("docstring")  casadi::MXNode::getBinarySwitch(int op, const MX &y)
const  " [INTERNAL]  Get a binary operation operation.

";

%feature("docstring")  casadi::ZeroByZero::getTranspose() const  "
[INTERNAL]   Transpose.

";

%feature("docstring")  casadi::MXNode::getNormF() const  " [INTERNAL]
Frobenius norm.

";

%feature("docstring")  casadi::MXNode::isEqual(const MXNode *node, int
depth) const  " [INTERNAL]  Check if two nodes are equivalent up to a given
depth.

";

%feature("docstring")  casadi::MXNode::getNorm2() const  " [INTERNAL]
Spectral norm.

";

%feature("docstring")  casadi::MXNode::isOutputNode() const  " [INTERNAL]
Check if evaluation output.

";

%feature("docstring")  casadi::ZeroByZero::getMatrixValue() const  "
[INTERNAL]  Get the value (only for constant nodes)

";

%feature("docstring")  casadi::MXNode::getSubAssign(const MX &y, const Slice
&i, const Slice &j) const  " [INTERNAL]  Get submatrix assignment.

";

%feature("docstring")  casadi::MXNode::getOutput(int oind) const  "
[INTERNAL]  Get an output.

";

%feature("docstring")  casadi::MXNode::getSubRef(const Slice &i, const Slice
&j) const  " [INTERNAL]  Get submatrix reference.

";

%feature("docstring")  casadi::MXNode::numInplace() const  " [INTERNAL]  Can
the operation be performed inplace (i.e. overwrite the result)

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, const std::vector< int > &onz, bool add=false) "
[INTERNAL]  Assign nonzeros (mapping matrix)

";

%feature("docstring")  casadi::MXNode::assign(const MX &d, const
std::vector< int > &inz, bool add=false) " [INTERNAL]  Assign nonzeros
(mapping matrix), output indices sequential.

";

%feature("docstring")  casadi::MXNode::getFunctionOutput() const  "
[INTERNAL]  Get function output.

";

%feature("docstring")  casadi::MXNode::mapping() const  " [INTERNAL]  Get an
IMatrix representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring")  casadi::SharedObjectNode::assertInit() const  "
[INTERNAL]  Assert that the object has been initialized.

";

%feature("docstring")  casadi::MXNode::getNumOutputs() const  " [INTERNAL]
Number of outputs.

";

%feature("docstring")  casadi::MXNode::shape() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getMultiplication(const MX &y, const
Sparsity &sp_z=Sparsity()) const  " [INTERNAL]   Matrix multiplication.

The optimal argument sp_z will be used as the sparsity pattern of the result

";

%feature("docstring")  casadi::ZeroByZero::getSetNonzeros(const MX &y, const
std::vector< int > &nz) const  " [INTERNAL]  Assign the nonzeros of a matrix
to another matrix.

";

%feature("docstring")  casadi::MXNode::size1() const  " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getFunction() "[INTERNAL]  Get
function reference.

";

%feature("docstring")  casadi::MXNode::getFunction() const  " [INTERNAL]
Get function reference.

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) const  " [INTERNAL]
dependencies - functions that have to be evaluated before this one

";

%feature("docstring")  casadi::MXNode::dep(int ind=0) " [INTERNAL] ";

%feature("docstring")  casadi::MXNode::getAssertion(const MX &y, const
std::string &fail_message="") const  " [INTERNAL]   Assertion.

";


// File: classcasadi_1_1ZeroSX.xml
%feature("docstring")  casadi::SXNode::mark() "[INTERNAL] ";

%feature("docstring")  casadi::SXNode::isMinusInf() const  " [INTERNAL]
check properties of a node

";

%feature("docstring") casadi::ZeroSX "[INTERNAL]  Represents a zero SX.

Joel Andersson

C++ includes: constant_sx.hpp ";

%feature("docstring") casadi::ZeroSX::ZeroSX() "[INTERNAL] ";

%feature("docstring")  casadi::SXNode::print(std::ostream &stream) const  "
[INTERNAL]  print

";

%feature("docstring")  casadi::SXNode::ndep() const  " [INTERNAL]  Number of
dependencies.

";

%feature("docstring")  casadi::SXNode::isNan() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring")  casadi::ConstantSX::getOp() const  " [INTERNAL]  Get
the operation.

";

%feature("docstring")  casadi::SXNode::isSmooth() const  " [INTERNAL]  Check
if smooth.

";

%feature("docstring")  casadi::SXNode::isMinusOne() const  " [INTERNAL]
check properties of a node

";

%feature("docstring")  casadi::SXNode::marked() const  " [INTERNAL] ";

%feature("docstring")  casadi::ZeroSX::isInteger() const  " [INTERNAL]
Properties.

";

%feature("docstring")  casadi::SXNode::init() "[INTERNAL]  Initialize the
node (currently used only to give a similar interface to MXNode)

";

%feature("docstring")  casadi::ConstantSX::isConstant() const  " [INTERNAL]
Properties.

";

%feature("docstring")  casadi::SXNode::getName() const  " [INTERNAL] ";

%feature("docstring")  casadi::SXNode::isInf() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring")  casadi::SXNode::isOne() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring")  casadi::SXNode::hasDep() const  " [INTERNAL]  check
properties of a node

";

%feature("docstring")  casadi::SXNode::isSymbolic() const  " [INTERNAL]
check properties of a node

";

%feature("docstring") casadi::ZeroSX::~ZeroSX "[INTERNAL] ";

%feature("docstring")  casadi::ZeroSX::isAlmostZero(double tol) const  "
[INTERNAL]  Properties.

";

%feature("docstring")  casadi::SXNode::dep(int i) const  " [INTERNAL]  get
the reference of a child

";

%feature("docstring")  casadi::SXNode::dep(int i) " [INTERNAL]  get the
reference of a child

";

%feature("docstring")  casadi::ConstantSX::isEqual(const SXNode *node, int
depth) const  " [INTERNAL]  Check if two nodes are equivalent up to a given
depth.

";

%feature("docstring")  casadi::ZeroSX::isZero() const  " [INTERNAL]
Properties.

";

%feature("docstring")  casadi::ZeroSX::getValue() const  " [INTERNAL]  Get
the value.

";

%feature("docstring")  casadi::ZeroSX::getIntValue() const  " [INTERNAL]
Get the value.

";


// File: namespacecasadi.xml
%feature("docstring")  casadi::matrixName< double >() "
Get typename.

";

%feature("docstring")  casadi::complement(const std::vector< int > &v, int
size) "

Returns the list of all i in [0,size[ not found in supplied list.

The supplied vector may contain duplicates and may be non-monotonous The
supplied vector will be checked for bounds The result vector is guaranteed
to be monotonously increasing

";

%feature("docstring")  casadi::vertsplit(const Sparsity &sp, const
std::vector< int > &output_offset) "

Split up a sparsity pattern vertically.

";

%feature("docstring")  casadi::vertsplit(const MX &x, const std::vector< int
> &output_offset) "

split horizontally, retaining groups of rows

Parameters:
-----------

output_offset:  List of all start rows for each group the last row group
will run to the end.

vertcat(vertsplit(x,...)) = x

";

%feature("docstring")  casadi::vertsplit(const MX &x, int incr=1) "

split horizontally, retaining fixed-sized groups of rows

Parameters:
-----------

incr:  Size of each group of rows

vertcat(vertsplit(x,...)) = x

";

%feature("docstring")  casadi::vertsplit(const Matrix< DataType > &v, const
std::vector< int > &offset) "

split horizontally, retaining groups of rows

Parameters:
-----------

output_offset:  List of all start rows for each group the last row group
will run to the end.

vertcat(vertsplit(x,...)) = x

";

%feature("docstring")  casadi::vertsplit(const Matrix< DataType > &v, int
incr=1) "

split horizontally, retaining fixed-sized groups of rows

Parameters:
-----------

incr:  Size of each group of rows

vertcat(vertsplit(x,...)) = x

";

%feature("docstring")  casadi::ProfilingType< ProfilingData_TIMELINE >() "
[INTERNAL] ";

%feature("docstring")  casadi::describeOutput(InputOutputScheme scheme, int
i) " ";

%feature("docstring")  casadi::blockcat(const std::vector< std::vector< MX >
> &v) "

Construct a matrix from a list of list of blocks.

blockcat(blocksplit(x,...,...)) = x

";

%feature("docstring")  casadi::blockcat(const MX &A, const MX &B, const MX
&C, const MX &D) " [INTERNAL]  Construct a matrix from a list of list of
blocks.

";

%feature("docstring")  casadi::blockcat(const std::vector< std::vector<
Matrix< DataType > > > &v) "

Construct a matrix from a list of list of blocks.

";

%feature("docstring")  casadi::blockcat(const Matrix< DataType > &A, const
Matrix< DataType > &B, const Matrix< DataType > &C, const Matrix< DataType >
&D) " [INTERNAL]  Construct a matrix from 4 blocks.

";

%feature("docstring")  casadi::pw_lin(const SXElement &t, const SX &tval,
const SX &val) "

t a scalar variable (e.g. time)

Create a piecewise linear function Create a piecewise linear function:

Inputs: tval vector with the the discrete values of t (monotonically
increasing) val vector with the corresponding function values (same length
as tval)

";

%feature("docstring")  casadi::makeSemiExplicit(const SX &f, const SX &x, SX
&fe, SX &fi, SX &xe, SX &xi) " ";

%feature("docstring")  casadi::getSchemeSize(InputOutputScheme scheme) " ";

%feature("docstring")  casadi::erfinv(const T &x) " [INTERNAL]   Inverse of
the error function.

";

%feature("docstring")  casadi::erfinv(double x) " [INTERNAL]  throw ()
CasADi additions.

";

%feature("docstring")  casadi::all(const Matrix< DataType > &x) " ";

%feature("docstring")  casadi::dense_mul_tn(int n, int m, int l, const
double *A, const double *B, double *C) " [INTERNAL] ";

%feature("docstring")  casadi::dlaqge_(int *m, int *n, double *a, int *lda,
double *r, double *c, double *colcnd, double *rowcnd, double *amax, char
*equed) " [INTERNAL]  Equilibrate the system.

";

%feature("docstring")  casadi::jacGIn(const std::string &arg_s0="", const M
&arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M()) "

Input arguments of an NLP Jacobian function

>Input scheme: casadi::JacGInput (JACG_NUM_IN = 3) [jacGIn]
+-----------+-------+---------------------+
| Full name | Short |     Description     |
+===========+=======+=====================+
| JACG_X    | x     | Decision variable . |
+-----------+-------+---------------------+
| JACG_P    | p     | Fixed parameter .   |
+-----------+-------+---------------------+

";

%feature("docstring")  casadi::jacGIn(const std::vector< M > &args, const
std::string &arg_s0="", const std::string &arg_s1="") " ";

%feature("docstring")  casadi::unite(const MX &A, const MX &B) "

Unite two matrices no overlapping sparsity.

";

%feature("docstring")  casadi::unite(const Matrix< DataType > &A, const
Matrix< DataType > &B) "

Unite two matrices no overlapping sparsity.

";

%feature("docstring")  casadi::getPtr(Matrix< DataType > &v) " [INTERNAL]
Get a pointer to the data contained in the vector

";

%feature("docstring")  casadi::getPtr(const Matrix< DataType > &v) "
[INTERNAL]  Get a pointer to the data contained in the vector.

";

%feature("docstring")  casadi::getPtr(std::vector< T > &v) " [INTERNAL]  Get
a pointer to the data contained in the vector.

";

%feature("docstring")  casadi::getPtr(const std::vector< T > &v) "
[INTERNAL]  Get a pointer to the data contained in the vector.

";

%feature("docstring")  casadi::profileWriteEntry(std::ofstream &f, T *a) "
[INTERNAL] ";

%feature("docstring")  casadi::polyval(const MX &p, const MX &x) "

Evaluate a polynomial with coefficients p in x.

";

%feature("docstring")  casadi::polyval(const Matrix< DataType > &p, const
Matrix< DataType > &x) "

Evaluate a polynomial with coefficients p in x.

";

%feature("docstring")  casadi::eig_symbolic(const SX &m) "

Attempts to find the eigenvalues of a symbolic matrix This will only work
for up to 3x3 matrices.

Bring m in block diagonal form, calculating eigenvalues of each block
seperately ";

%feature("docstring")  casadi::ProfilingType< ProfilingData_SOURCE >() "
[INTERNAL] ";

%feature("docstring")  casadi::controlsimulatorIn(const std::string
&arg_s0="", const M &arg_m0=M(), const std::string &arg_s1="", const M
&arg_m1=M(), const std::string &arg_s2="", const M &arg_m2=M()) "

Input arguments of a control simulator

>Input scheme: casadi::ControlSimulatorInput (CONTROLSIMULATOR_NUM_IN = 4) [controlsimulatorIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| CONTROLSIMULATOR_X0    | x0                     | Differential or        |
|                        |                        | algebraic state at t0  |
|                        |                        | (dimension nx-by-1) .  |
+------------------------+------------------------+------------------------+
| CONTROLSIMULATOR_P     | p                      | Parameters that are    |
|                        |                        | fixed over the entire  |
|                        |                        | horizon (dimension np- |
|                        |                        | by-1) .                |
+------------------------+------------------------+------------------------+
| CONTROLSIMULATOR_U     | u                      | Parameters that change |
|                        |                        | over the integration   |
|                        |                        | intervals (dimension   |
|                        |                        | nu-by-(ns-1)) .        |
+------------------------+------------------------+------------------------+

";

%feature("docstring")  casadi::controlsimulatorIn(const std::vector< M >
&args, const std::string &arg_s0="", const std::string &arg_s1="", const
std::string &arg_s2="") " ";

%feature("docstring")  casadi::daeIn(const std::string &arg_s0="", const M
&arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const
std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="",
const M &arg_m3=M()) "

Input arguments of an ODE/DAE function

>Input scheme: casadi::DAEInput (DAE_NUM_IN = 5) [daeIn]
+-----------+-------+----------------------------+
| Full name | Short |        Description         |
+===========+=======+============================+
| DAE_X     | x     | Differential state .       |
+-----------+-------+----------------------------+
| DAE_Z     | z     | Algebraic state .          |
+-----------+-------+----------------------------+
| DAE_P     | p     | Parameter .                |
+-----------+-------+----------------------------+
| DAE_T     | t     | Explicit time dependence . |
+-----------+-------+----------------------------+

";

%feature("docstring")  casadi::daeIn(const std::vector< M > &args, const
std::string &arg_s0="", const std::string &arg_s1="", const std::string
&arg_s2="", const std::string &arg_s3="") " ";

%feature("docstring")  casadi::sdpOut(const std::string &arg_s0="", const M
&arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const
std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="",
const M &arg_m3=M(), const std::string &arg_s4="", const M &arg_m4=M(),
const std::string &arg_s5="", const M &arg_m5=M(), const std::string
&arg_s6="", const M &arg_m6=M()) "

Output arguments of an SDP Solver

>Output scheme: casadi::SDPOutput (SDP_SOLVER_NUM_OUT = 8) [sdpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SDP_SOLVER_X           | x                      | The primal solution (n |
|                        |                        | x 1) - may be used as  |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_P           | p                      | The solution P (m x m) |
|                        |                        | - may be used as       |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_DUAL        | dual                   | The dual solution (m x |
|                        |                        | m) - may be used as    |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_COST        | cost                   | The primal optimal     |
|                        |                        | cost (1 x 1) .         |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_DUAL_COST   | dual_cost              | The dual optimal cost  |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_LAM_A       | lam_a                  | The dual solution      |
|                        |                        | corresponding to the   |
|                        |                        | linear constraints (nc |
|                        |                        | x 1) .                 |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_LAM_X       | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds (n x 1)  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

";

%feature("docstring")  casadi::sdpOut(const std::vector< M > &args, const
std::string &arg_s0="", const std::string &arg_s1="", const std::string
&arg_s2="", const std::string &arg_s3="", const std::string &arg_s4="",
const std::string &arg_s5="", const std::string &arg_s6="") " ";

%feature("docstring")  casadi::integratorIn(const std::string &arg_s0="",
const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(),
const std::string &arg_s2="", const M &arg_m2=M(), const std::string
&arg_s3="", const M &arg_m3=M(), const std::string &arg_s4="", const M
&arg_m4=M(), const std::string &arg_s5="", const M &arg_m5=M()) "

Input arguments of an integrator

>Input scheme: casadi::IntegratorInput (INTEGRATOR_NUM_IN = 7) [integratorIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_X0          | x0                     | Differential state at  |
|                        |                        | the initial time .     |
+------------------------+------------------------+------------------------+
| INTEGRATOR_P           | p                      | Parameters .           |
+------------------------+------------------------+------------------------+
| INTEGRATOR_Z0          | z0                     | Initial guess for the  |
|                        |                        | algebraic variable .   |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RX0         | rx0                    | Backward differential  |
|                        |                        | state at the final     |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RP          | rp                     | Backward parameter     |
|                        |                        | vector .               |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZ0         | rz0                    | Initial guess for the  |
|                        |                        | backwards algebraic    |
|                        |                        | variable .             |
+------------------------+------------------------+------------------------+

";

%feature("docstring")  casadi::integratorIn(const std::vector< M > &args,
const std::string &arg_s0="", const std::string &arg_s1="", const
std::string &arg_s2="", const std::string &arg_s3="", const std::string
&arg_s4="", const std::string &arg_s5="") " ";

%feature("docstring")  casadi::expand(const SX &ex, SX &weights, SX &terms)
"

Expand the expression as a weighted sum (with constant weights)

";

%feature("docstring")  casadi::profileWriteSourceLine(std::ofstream &f, T
*a, int line_number, const std::string &sourceline, int opcode, T2
*dependency) " [INTERNAL] ";

%feature("docstring")  casadi::profileWriteSourceLine(std::ofstream &f, T
*a, int line_number, const std::string &sourceline, int opcode) " [INTERNAL]
";

%feature("docstring")  casadi::createParent(std::vector< MX > &deps) "

Create a parent MX on which all given MX's will depend.

In some sense, this function is the inverse of

Parameters:
-----------

deps:  Must all be symbolic matrices.

";

%feature("docstring")  casadi::createParent(const std::vector< Sparsity >
&deps, std::vector< MX > &output_children) "

Create a parent MX on which a bunch of MX's (sizes given as argument) will
depend.

";

%feature("docstring")  casadi::createParent(const std::vector< MX > &deps,
std::vector< MX > &output_children) "

Create a parent MX on which a bunch of MX's (sizes given as argument) will
depend.

";

%feature("docstring")  casadi::cos(const T &x) " [INTERNAL]  Pre-C99
elementary functions from the 'math.h' ('cmath') header.

";

%feature("docstring")  casadi::dgetrf_(int *m, int *n, double *a, int *lda,
int *ipiv, int *info) " [INTERNAL]  LU-Factorize dense matrix (lapack)

";

%feature("docstring")  casadi::ProfilingType< ProfilingData_NAME >() "
[INTERNAL] ";

%feature("docstring")  casadi::tanh(const T &x) " [INTERNAL]  Pre-C99
elementary functions from the 'math.h' ('cmath') header.

";

%feature("docstring")  casadi::isDecreasing(const std::vector< T > &v) "

Check if the vector is strictly decreasing.

";

%feature("docstring")  casadi::range(int start, int stop, int step, int len)
" [INTERNAL]  Range function

Parameters:
-----------

start:

stop:

step:

len:  Consider a infinitely long list [start, start+step, start+2*step, ...]
Elements larger than or equal to stop are chopped off.

";

%feature("docstring")  casadi::range(int stop) " [INTERNAL]  Range function

Parameters:
-----------

stop:

list [0,1,2...stop-1]

";

%feature("docstring")  casadi::constpow(const T &x, const T &n) " [INTERNAL]
CasADi additions.

";

%feature("docstring")  casadi::tril2symm(const GenericMatrix< MatType > &a)
"

Convert a lower triangular matrix to a symmetric one.

";

%feature("docstring")  casadi::asinh(const T &x) " [INTERNAL]  Pre-C99
elementary functions from the 'math.h' ('cmath') header.

";

%feature("docstring")  casadi::asinh(double x) " [INTERNAL]  throw ()
Pre-C99 elementary functions from the 'math.h' ('cmath') header.

";

%feature("docstring")  casadi::implicitRK(Function &f,
implicitFunctionCreator impl, const Dictionary &dict=Dictionary(), const MX
&tf=1, int order=4, const std::string &scheme="radau", int ne=1) "

Construct an implicit Runge-Kutta integrator.

Parameters:
-----------

f:  dynamical system

>Input scheme: casadi::DAEInput (DAE_NUM_IN = 5) [daeIn]
+-----------+-------+----------------------------+
| Full name | Short |        Description         |
+===========+=======+============================+
| DAE_X     | x     | Differential state .       |
+-----------+-------+----------------------------+
| DAE_Z     | z     | Algebraic state .          |
+-----------+-------+----------------------------+
| DAE_P     | p     | Parameter .                |
+-----------+-------+----------------------------+
| DAE_T     | t     | Explicit time dependence . |
+-----------+-------+----------------------------+

>Output scheme: casadi::DAEOutput (DAE_NUM_OUT = 4) [daeOut]
+-----------+-------+--------------------------------------------+
| Full name | Short |                Description                 |
+===========+=======+============================================+
| DAE_ODE   | ode   | Right hand side of the implicit ODE .      |
+-----------+-------+--------------------------------------------+
| DAE_ALG   | alg   | Right hand side of algebraic equations .   |
+-----------+-------+--------------------------------------------+
| DAE_QUAD  | quad  | Right hand side of quadratures equations . |
+-----------+-------+--------------------------------------------+

Parameters:
-----------

tf:  Integration end time

order:  Order of integration

scheme:  Collocation scheme, as excepted by collocationPoints function.

ne:  Number of times the RK primitive is repeated over the integration
interval

";

%feature("docstring")  casadi::profileWriteName(std::ofstream &f, T *a,
const std::string &name, ProfilingData_FunctionType type, int
algorithm_size) " [INTERNAL] ";

%feature("docstring")  casadi::bvec_clear(bvec_t *s, int begin, int end) "
[INTERNAL] ";

%feature("docstring")  casadi::reshape(const Sparsity &a, int nrow, int
ncol) "

Reshape the sparsity pattern keeping the relative location of the nonzeros.

";

%feature("docstring")  casadi::reshape(const MX &x, std::pair< int, int >
rc) "

Returns a reshaped version of the MX, dimensions as a vector.

";

%feature("docstring")  casadi::reshape(const MX &x, int nrow, int ncol) "
[INTERNAL]  Returns a reshaped version of the MX.

";

%feature("docstring")  casadi::reshape(const MX &x, const Sparsity &sp) "

Reshape the MX.

";

%feature("docstring")  casadi::reshape(const Matrix< DataType > &a, int
nrow, int ncol) " ";

%feature("docstring")  casadi::reshape(const Matrix< DataType > &a,
std::pair< int, int > rc) " ";

%feature("docstring")  casadi::reshape(const Matrix< DataType > &a, const
Sparsity &sp) " ";

%feature("docstring")  casadi::slicot_periodic_schur(int n, int K, const
std::vector< double > &a, std::vector< double > &t, std::vector< double >
&z, std::vector< double > &eig_real, std::vector< double > &eig_imag) "
[INTERNAL] ";

%feature("docstring")  casadi::slicot_periodic_schur(int n, int K, const
std::vector< double > &a, std::vector< double > &t, std::vector< double >
&z, std::vector< double > &dwork, std::vector< double > &eig_real,
std::vector< double > &eig_imag) " [INTERNAL] ";

%feature("docstring")  casadi::slicot_periodic_schur(const std::vector<
Matrix< double > > &A, std::vector< Matrix< double > > &output_T,
std::vector< Matrix< double > > &output_Z, std::vector< double > &eig_real,
std::vector< double > &output_eig_imag) "

Obtain Periodic Schur Form of a set of matrices.

Finds Z_i such that

Z_1' * H_1 * Z_2 = T_1,           Z_2' * H_2 * Z_3 = T_2, ...           Z_K'
* H_K * Z_1 = T_K,

with T_1 in Hessenberg form (upper triangular + one band below the diagonal)
and T_2..T_K upper diagonal

";

%feature("docstring")  casadi::ProfilingType< ProfilingData_EXIT >() "
[INTERNAL] ";

%feature("docstring")  casadi::blocksplit(const MX &x, const std::vector<
int > &vert_offset, const std::vector< int > &horz_offset) "

chop up into blocks

vert_offset Defines the boundaries of the block cols horz_offset Defines the
boundaries of the block rows

blockcat(blocksplit(x,...,...)) = x

";

%feature("docstring")  casadi::blocksplit(const MX &x, int vert_incr=1, int
horz_incr=1) "

chop up into blocks

vert_incr Defines the increment for block boundaries in col dimension
horz_incr Defines the increment for block boundaries in row dimension

blockcat(blocksplit(x,...,...)) = x

";

%feature("docstring")  casadi::blocksplit(const Matrix< DataType > &x, const
std::vector< int > &vert_offset, const std::vector< int > &horz_offset) "

chop up into blocks

vert_offset Defines the boundaries of the block rows horz_offset Defines the
boundaries of the block columns

blockcat(blocksplit(x,...,...)) = x

";

%feature("docstring")  casadi::blocksplit(const Matrix< DataType > &x, int
vert_incr=1, int horz_incr=1) "

chop up into blocks

vert_incr Defines the increment for block boundaries in row dimension
horz_incr Defines the increment for block boundaries in column dimension

blockcat(blocksplit(x,...,...)) = x

";

%feature("docstring")  casadi::jacobianTimesVector(const SX &ex, const SX
&arg, const SX &v, bool transpose_jacobian=false) "

Calculate the Jacobian and multiply by a vector from the left This is
equivalent to mul(jacobian(ex,arg),v) or mul(jacobian(ex,arg).T,v) for
transpose_jacobian set to false and true respectively. If contrast to these
expressions, it will use directional derivatives which is typically (but not
necessarily) more efficient if the complete Jacobian is not needed and v has
few rows.

";

%feature("docstring")  casadi::casadi_scal(int n, real_t alpha, real_t *x,
int inc_x) " [INTERNAL]  SCAL: x <- alpha*x.

";

%feature("docstring")  casadi::mayerIn(const std::string &arg_s0="", const M
&arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M()) "

Input arguments of a Mayer Term nx: Number of states: from
ffcn.input(INTEGRATOR_X0).size() np: Number of parameters: from option
number_of_parameters>Input scheme: casadi::MayerInput (MAYER_NUM_IN = 3)
[mayerIn]
+-----------+-------+---------------------------------------------+ | Full
name | Short |                 Description                 |
+===========+=======+=============================================+ |
MAYER_X   | x     | States at the end of integration (nx x 1) . |
+-----------+-------+---------------------------------------------+ |
MAYER_P   | p     | Problem parameters (np x 1) .               |
+-----------+-------+---------------------------------------------+

";

%feature("docstring")  casadi::mayerIn(const std::vector< M > &args, const
std::string &arg_s0="", const std::string &arg_s1="") " ";

%feature("docstring")  casadi::ProfilingType< ProfilingData_ENTRY >() "
[INTERNAL] ";

%feature("docstring")  casadi::logic_not(const DataType &x) "

Logical not, returns (an expression evaluating to) 1 if expression is zero
and 0 otherwise.

";

%feature("docstring")  casadi::socpIn(const std::string &arg_s0="", const M
&arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const
std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="",
const M &arg_m3=M(), const std::string &arg_s4="", const M &arg_m4=M(),
const std::string &arg_s5="", const M &arg_m5=M(), const std::string
&arg_s6="", const M &arg_m6=M(), const std::string &arg_s7="", const M
&arg_m7=M(), const std::string &arg_s8="", const M &arg_m8=M(), const
std::string &arg_s9="", const M &arg_m9=M()) "

Input arguments of a SOCP problem

>Input scheme: casadi::SOCPInput (SOCP_SOLVER_NUM_IN = 11) [socpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SOCP_SOLVER_G          | g                      | The horizontal stack   |
|                        |                        | of all matrices Gi: (  |
|                        |                        | n x N) .               |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_H          | h                      | The vertical stack of  |
|                        |                        | all vectors hi: ( N x  |
|                        |                        | 1) .                   |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_E          | e                      | The vertical stack of  |
|                        |                        | all vectors ei: ( nm x |
|                        |                        | 1) .                   |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_F          | f                      | The vertical stack of  |
|                        |                        | all scalars fi: ( m x  |
|                        |                        | 1) .                   |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_C          | c                      | The vector c: ( n x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_A          | a                      | The matrix A: ( nc x   |
|                        |                        | n) .                   |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_LBA        | lba                    | Lower bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_UBA        | uba                    | Upper bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_LBX        | lbx                    | Lower bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_UBX        | ubx                    | Upper bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+

";

%feature("docstring")  casadi::socpIn(const std::vector< M > &args, const
std::string &arg_s0="", const std::string &arg_s1="", const std::string
&arg_s2="", const std::string &arg_s3="", const std::string &arg_s4="",
const std::string &arg_s5="", const std::string &arg_s6="", const
std::string &arg_s7="", const std::string &arg_s8="", const std::string
&arg_s9="") " ";

%feature("docstring")  casadi::repr(const PrintableObject &obj) " ";

%feature("docstring")  casadi::repr(const std::vector< T > &v, std::ostream
&stream=std::cout) " [INTERNAL]  Print representation.

";

%feature("docstring")  casadi::hash_value(T v) " [INTERNAL]  Hash value of
an integer.

";

%feature("docstring")  casadi::ramp(const SX &x) "

ramp function

\\\\[ \\\\begin{cases} R(x) = 0 & x <= 1 \\\\\\\\ R(x) = x & x > 1 \\\\\\\\
\\\\end{cases} \\\\]

Also called: slope function

";

%feature("docstring")  casadi::tangent(const MX &ex, const MX &arg) "

split vertically, retaining groups of cols

Parameters:
-----------

output_offset:  List of all start cols for each group the last col group
will run to the end.

horzcat(horzsplit(x,...)) = x

";

%feature("docstring")  casadi::tangent(const SX &ex, const SX &arg) "

Integrate f from a to b using Gaussian quadrature with n points.

";

%feature("docstring")  casadi::ceil(const T &x) " [INTERNAL]  Pre-C99
elementary functions from the 'math.h' ('cmath') header.

";

%feature("docstring")  casadi::jacobian(const MX &ex, const MX &arg) "

Calculate jacobian via source code transformation.

Uses casadi::MXFunction::jac

";

%feature("docstring")  casadi::jacobian(const SX &ex, const SX &arg) "

Calculate jacobian via source code transformation.

Uses casadi::SXFunction::jac

";

%feature("docstring")  casadi::hash_combine(std::size_t &seed, T v) "
[INTERNAL]  Generate a hash value incrementally (function taken from boost)

";

%feature("docstring")  casadi::hash_combine(std::size_t &seed, const
std::vector< int > &v) " [INTERNAL]  Generate a hash value incrementally
(function taken from boost)

";

%feature("docstring")  casadi::inBounds(const std::vector< T > &v, int
upper) "

Check if for each element of v holds: v_i < upper.

";

%feature("docstring")  casadi::inBounds(const std::vector< T > &v, int
lower, int upper) "

Check if for each element of v holds: lower <= v_i < upper.

";

%feature("docstring")  casadi::casadi_swap(int n, real_t *x, int inc_x,
real_t *y, int inc_y) " [INTERNAL]  SWAP: x <-> y.

";

%feature("docstring")  casadi::sumRows(const MX &x) "

Return a row-wise summation of elements.

";

%feature("docstring")  casadi::sumRows(const Matrix< DataType > &x) "

Return a row-wise summation of elements.

";

%feature("docstring")  casadi::project(const Matrix< DataType > &A, const
Sparsity &sparsity) "

Create a new matrix with a given sparsity pattern but with the nonzeros
taken from an existing matrix.

";

%feature("docstring")  casadi::spy(const SX &A) "

Get the sparsity pattern of a matrix.

";

%feature("docstring")  casadi::substitute(const MX &ex, const MX &v, const
MX &vdef) "

Substitute variable v with expression vdef in an expression ex.

";

%feature("docstring")  casadi::substitute(const std::vector< MX > &ex, const
std::vector< MX > &v, const std::vector< MX > &vdef) "

Substitute variable var with expression expr in multiple expressions.

";

%feature("docstring")  casadi::substitute(const std::vector< SX > &ex, const
std::vector< SX > &v, const std::vector< SX > &vdef) "

Substitute variable var with expression expr in multiple expressions.

";

%feature("docstring")  casadi::substitute(const SX &ex, const SX &v, const
SX &vdef) "

Substitute variable v with expression vdef in an expression ex.

";

%feature("docstring")  casadi::abs(const T &x) " [INTERNAL]  Pre-C99
elementary functions from the 'math.h' ('cmath') header.

";

%feature("docstring")  casadi::cross(const GenericMatrix< MatType > &a,
const GenericMatrix< MatType > &b, int dim=-1) "

Matlab's cross command.

";

%feature("docstring")  casadi::acos(const T &x) " [INTERNAL]  Pre-C99
elementary functions from the 'math.h' ('cmath') header.

";

%feature("docstring")  casadi::rdaeIn(const std::string &arg_s0="", const M
&arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const
std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="",
const M &arg_m3=M(), const std::string &arg_s4="", const M &arg_m4=M(),
const std::string &arg_s5="", const M &arg_m5=M(), const std::string
&arg_s6="", const M &arg_m6=M()) "

Input arguments of an ODE/DAE backward integration function

>Input scheme: casadi::RDAEInput (RDAE_NUM_IN = 8) [rdaeIn]
+-----------+-------+-------------------------------+
| Full name | Short |          Description          |
+===========+=======+===============================+
| RDAE_RX   | rx    | Backward differential state . |
+-----------+-------+-------------------------------+
| RDAE_RZ   | rz    | Backward algebraic state .    |
+-----------+-------+-------------------------------+
| RDAE_RP   | rp    | Backward parameter vector .   |
+-----------+-------+-------------------------------+
| RDAE_X    | x     | Forward differential state .  |
+-----------+-------+-------------------------------+
| RDAE_Z    | z     | Forward algebraic state .     |
+-----------+-------+-------------------------------+
| RDAE_P    | p     | Parameter vector .            |
+-----------+-------+-------------------------------+
| RDAE_T    | t     | Explicit time dependence .    |
+-----------+-------+-------------------------------+

";

%feature("docstring")  casadi::rdaeIn(const std::vector< M > &args, const
std::string &arg_s0="", const std::string &arg_s1="", const std::string
&arg_s2="", const std::string &arg_s3="", const std::string &arg_s4="",
const std::string &arg_s5="", const std::string &arg_s6="") " ";

%feature("docstring")  casadi::dependsOn(const SX &f, const SX &arg) "

Check if expression depends on the argument The argument must be symbolic.

";

%feature("docstring")  casadi::dependsOn(const MX &ex, const std::vector< MX
> &arg) "

Check if expression depends on any of the arguments The arguments must be
symbolic.

";

%feature("docstring")  casadi::profileWriteExit(std::ofstream &f, T *a,
double total) " [INTERNAL] ";

%feature("docstring")  casadi::sdqpIn(const std::string &arg_s0="", const M
&arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const
std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="",
const M &arg_m3=M(), const std::string &arg_s4="", const M &arg_m4=M(),
const std::string &arg_s5="", const M &arg_m5=M(), const std::string
&arg_s6="", const M &arg_m6=M(), const std::string &arg_s7="", const M
&arg_m7=M(), const std::string &arg_s8="", const M &arg_m8=M()) "

Input arguments of a SDQP problem

>Input scheme: casadi::SDQPInput (SDQP_SOLVER_NUM_IN = 10) [sdqpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SDQP_SOLVER_H          | h                      | The matrix H: sparse ( |
|                        |                        | n x n) .               |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_C          | c                      | The vector c: ( n x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_F          | f                      | The horizontal stack   |
|                        |                        | of all matrices F_i: ( |
|                        |                        | m x nm) .              |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_G          | g                      | The matrix G: ( m x m) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_A          | a                      | The matrix A: ( nc x   |
|                        |                        | n) .                   |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_LBA        | lba                    | Lower bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_UBA        | uba                    | Upper bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_LBX        | lbx                    | Lower bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_UBX        | ubx                    | Upper bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+

";

%feature("docstring")  casadi::sdqpIn(const std::vector< M > &args, const
std::string &arg_s0="", const std::string &arg_s1="", const std::string
&arg_s2="", const std::string &arg_s3="", const std::string &arg_s4="",
const std::string &arg_s5="", const std::string &arg_s6="", const
std::string &arg_s7="", const std::string &arg_s8="") " ";

%feature("docstring")  casadi::triangle(const SX &x) "

triangle function

\\\\[ \\\\begin{cases} \\\\Lambda(x) = 0 & |x| >= 1 \\\\\\\\ \\\\Lambda(x) =
1-|x| & |x| < 1 \\\\end{cases} \\\\]

";

%feature("docstring")  casadi::graph_substitute(const MX &ex, const
std::vector< MX > &v, const std::vector< MX > &vdef) "

Substitute variable v with expression vdef in an expression ex, preserving
nodes.

";

%feature("docstring")  casadi::graph_substitute(const std::vector< MX > &ex,
const std::vector< MX > &v, const std::vector< MX > &vdef) "

Substitute variable var with expression expr in multiple expressions,
preserving nodes.

";

%feature("docstring")  casadi::read_matlab(std::istream &stream,
std::vector< T > &v) "

Read vector, matlab style.

";

%feature("docstring")  casadi::read_matlab(std::ifstream &file, std::vector<
std::vector< T > > &v) "

Read matrix, matlab style.

";

%feature("docstring")  casadi::nullspace(const Matrix< DataType > &A) "

Computes the nullspace of a matrix A.

Finds Z m-by-(m-n) such that AZ = 0 with A n-by-m with m > n

Assumes A is full rank

Inspired by Numerical Methods in Scientific Computing by Ake Bjorck

";

%feature("docstring")  casadi::nullspace(const MX &A) "

Computes the nullspace of a matrix A.

Finds Z m-by-(m-n) such that AZ = 0 with A n-by-m with m > n

Assumes A is full rank

Inspired by Numerical Methods in Scientific Computing by Ake Bjorck

";

%feature("docstring")  casadi::casadi_iamax(int n, const real_t *x, int
inc_x) " [INTERNAL]  IAMAX: index corresponding to the entry with the
largest absolute value.

";

%feature("docstring")  casadi::write_matlab(std::ostream &stream, const
std::vector< T > &v) "

Print vector, matlab style.

";

%feature("docstring")  casadi::write_matlab(std::ostream &stream, const
std::vector< std::vector< T > > &v) "

Print matrix, matlab style.

";

%feature("docstring")  casadi::isinf(double x) " [INTERNAL]  throw () C99
elementary functions from the 'math.h' header.

";

%feature("docstring")  casadi::hash_sparsity(int nrow, int ncol, const
std::vector< int > &colind, const std::vector< int > &row) " [INTERNAL]
Hash a sparsity pattern.

";

%feature("docstring")  casadi::ocpOut(const std::string &arg_s0="", const M
&arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const
std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="",
const M &arg_m3=M()) "

Output arguments of an OCP Solver

>Output scheme: casadi::OCPOutput (OCP_NUM_OUT = 5) [ocpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| OCP_X_OPT              | x_opt                  | Optimal state          |
|                        |                        | trajectory .           |
+------------------------+------------------------+------------------------+
| OCP_U_OPT              | u_opt                  | Optimal control        |
|                        |                        | trajectory .           |
+------------------------+------------------------+------------------------+
| OCP_P_OPT              | p_opt                  | Optimal parameters .   |
+------------------------+------------------------+------------------------+
| OCP_COST               | cost                   | Objective/cost         |
|                        |                        | function for optimal   |
|                        |                        | solution (1 x 1) .     |
+------------------------+------------------------+------------------------+

";

%feature("docstring")  casadi::ocpOut(const std::vector< M > &args, const
std::string &arg_s0="", const std::string &arg_s1="", const std::string
&arg_s2="", const std::string &arg_s3="") " ";

%feature("docstring")  casadi::ocpIn(const std::string &arg_s0="", const M
&arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const
std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="",
const M &arg_m3=M(), const std::string &arg_s4="", const M &arg_m4=M(),
const std::string &arg_s5="", const M &arg_m5=M(), const std::string
&arg_s6="", const M &arg_m6=M(), const std::string &arg_s7="", const M
&arg_m7=M(), const std::string &arg_s8="", const M &arg_m8=M(), const
std::string &arg_s9="", const M &arg_m9=M(), const std::string &arg_s10="",
const M &arg_m10=M(), const std::string &arg_s11="", const M &arg_m11=M(),
const std::string &arg_s12="", const M &arg_m12=M()) "

Input arguments of an OCP Solver ns: Number of shooting nodes: from option
number_of_grid_points nx: Number of states: from
ffcn.input(INTEGRATOR_X0).size() nc: Number of constants during integration:
ffcn.input(INTEGRATOR_P).size() nu: Number of controls: from nc - np np:
Number of parameters: from option number_of_parameters nh: Number of point
constraints: from cfcn.input(0).size()

>Input scheme: casadi::OCPInput (OCP_NUM_IN = 14) [ocpIn]
+------------+--------+----------------------------------------------+
| Full name  | Short  |                 Description                  |
+============+========+==============================================+
| OCP_LBX    | lbx    | States lower bounds (nx x (ns+1)) .          |
+------------+--------+----------------------------------------------+
| OCP_UBX    | ubx    | States upper bounds (nx x (ns+1)) .          |
+------------+--------+----------------------------------------------+
| OCP_X_INIT | x_init | States initial guess (nx x (ns+1)) .         |
+------------+--------+----------------------------------------------+
| OCP_LBU    | lbu    | Controls lower bounds (nu x ns) .            |
+------------+--------+----------------------------------------------+
| OCP_UBU    | ubu    | Controls upper bounds (nu x ns) .            |
+------------+--------+----------------------------------------------+
| OCP_U_INIT | u_init | Controls initial guess (nu x ns) .           |
+------------+--------+----------------------------------------------+
| OCP_LBP    | lbp    | Parameters lower bounds (np x 1) .           |
+------------+--------+----------------------------------------------+
| OCP_UBP    | ubp    | Parameters upper bounds (np x 1) .           |
+------------+--------+----------------------------------------------+
| OCP_P_INIT | p_init | Parameters initial guess (np x 1) .          |
+------------+--------+----------------------------------------------+
| OCP_LBH    | lbh    | Point constraint lower bound (nh x (ns+1)) . |
+------------+--------+----------------------------------------------+
| OCP_UBH    | ubh    | Point constraint upper bound (nh x (ns+1)) . |
+------------+--------+----------------------------------------------+
| OCP_LBG    | lbg    | Lower bound for the coupling constraints .   |
+------------+--------+----------------------------------------------+
| OCP_UBG    | ubg    | Upper bound for the coupling constraints .   |
+------------+--------+----------------------------------------------+

";

%feature("docstring")  casadi::ocpIn(const std::vector< M > &args, const
std::string &arg_s0="", const std::string &arg_s1="", const std::string
&arg_s2="", const std::string &arg_s3="", const std::string &arg_s4="",
const std::string &arg_s5="", const std::string &arg_s6="", const
std::string &arg_s7="", const std::string &arg_s8="", const std::string
&arg_s9="", const std::string &arg_s10="", const std::string &arg_s11="",
const std::string &arg_s12="") " ";

%feature("docstring")  casadi::addMultiple(const Matrix< DataType > &A,
const std::vector< DataType > &v, std::vector< DataType > &res, bool
trans_A=false) "

same as: res += mul(A,v)

";

%feature("docstring")  casadi::isStrictlyMonotone(const std::vector< T > &v)
"

Check if the vector is strictly monotone.

";

%feature("docstring")  casadi::vecNZ(const MX &x) "

Returns a vectorized version of the MX, preserving only nonzeros.

";

%feature("docstring")  casadi::vecNZ(const Matrix< DataType > &a) "

Returns a flattened version of the Matrix, preserving only nonzeros.

";

%feature("docstring")  casadi::vecNZcat(const std::vector< MX > &comp) "

concatenate vertically while vecing all arguments with vecNZ

";

%feature("docstring")  casadi::vecNZcat(const std::vector< Matrix< DataType
> > &comp) "

concatenate vertically while vectorizing all arguments with vecNZ

";

%feature("docstring")  casadi::vecNZcat(const vector< MX > &comp) " ";

%feature("docstring")  casadi::casadi_dot(int n, const real_t *x, int inc_x,
const real_t *y, int inc_y) " [INTERNAL]  DOT: inner_prod(x,y) -> return.

";

%feature("docstring")  casadi::isMonotone(const std::vector< T > &v) "

Check if the vector is monotone.

";

%feature("docstring")  casadi::mtaylor(const SX &ex, const SX &x, const SX
&a, int order=1) "

multivariate Taylor series expansion

Do Taylor expansions until the aggregated order of a term is equal to
'order'. The aggregated order of $x^n y^m$ equals $n+m$.

";

%feature("docstring")  casadi::mtaylor(const SX &ex, const SX &x, const SX
&a, int order, const std::vector< int > &order_contributions) "

multivariate Taylor series expansion

Do Taylor expansions until the aggregated order of a term is equal to
'order'. The aggregated order of $x^n y^m$ equals $n+m$.

The argument order_contributions can denote how match each variable
contributes to the aggregated order. If x=[x,y] and
order_contributions=[1,2], then the aggregated order of $x^n y^m$ equals
$1n+2m$.

Example usage

$ \\\\sin(b+a)+\\\\cos(b+a)(x-a)+\\\\cos(b+a)(y-b) $ $ y+x-(x^3+3y x^2+3 y^2
x+y^3)/6 $ $ (-3 x^2 y-x^3)/6+y+x $

";

%feature("docstring")  casadi::sign(const T &x) " [INTERNAL]  Sign function,
note that sign(nan) == nan.

";

%feature("docstring")  casadi::sign(double x) " [INTERNAL]  Sign function,
note that sign(nan) == nan.

";

%feature("docstring")  casadi::isRegular(const std::vector< T > &v) "

Checks if vector does not contain NaN or Inf.

";

%feature("docstring")  casadi::log10(const T &x) " [INTERNAL]  Pre-C99
elementary functions from the 'math.h' ('cmath') header.

";

%feature("docstring")  casadi::sdpIn(const std::string &arg_s0="", const M
&arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const
std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="",
const M &arg_m3=M(), const std::string &arg_s4="", const M &arg_m4=M(),
const std::string &arg_s5="", const M &arg_m5=M(), const std::string
&arg_s6="", const M &arg_m6=M(), const std::string &arg_s7="", const M
&arg_m7=M()) "

Input arguments of a SDP problem

>Input scheme: casadi::SDPInput (SDP_SOLVER_NUM_IN = 9) [sdpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SDP_SOLVER_F           | f                      | The horizontal stack   |
|                        |                        | of all matrices F_i: ( |
|                        |                        | m x nm) .              |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_C           | c                      | The vector c: ( n x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_G           | g                      | The matrix G: ( m x m) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_A           | a                      | The matrix A: ( nc x   |
|                        |                        | n) .                   |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_LBA         | lba                    | Lower bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_UBA         | uba                    | Upper bounds on Ax (   |
|                        |                        | nc x 1) .              |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_LBX         | lbx                    | Lower bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+
| SDP_SOLVER_UBX         | ubx                    | Upper bounds on x ( n  |
|                        |                        | x 1 ) .                |
+------------------------+------------------------+------------------------+

";

%feature("docstring")  casadi::sdpIn(const std::vector< M > &args, const
std::string &arg_s0="", const std::string &arg_s1="", const std::string
&arg_s2="", const std::string &arg_s3="", const std::string &arg_s4="",
const std::string &arg_s5="", const std::string &arg_s6="", const
std::string &arg_s7="") " ";

%feature("docstring")  casadi::casadi_copy_sparse(const real_t *x, const int
*sp_x, real_t *y, const int *sp_y) " [INTERNAL]  COPY sparse: y <- x.

";

%feature("docstring")  casadi::printme(const T &x, const T &y) " [INTERNAL]
CasADi additions.

";

%feature("docstring")  casadi::printme(double x, double y) " [INTERNAL]
CasADi additions.

";

%feature("docstring")  casadi::rdaeOut(const std::string &arg_s0="", const M
&arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const
std::string &arg_s2="", const M &arg_m2=M()) "

Output arguments of an ODE/DAE backward integration function

>Output scheme: casadi::RDAEOutput (RDAE_NUM_OUT = 4) [rdaeOut]
+-----------+-------+-------------------------------------------+
| Full name | Short |                Description                |
+===========+=======+===========================================+
| RDAE_ODE  | ode   | Right hand side of ODE. .                 |
+-----------+-------+-------------------------------------------+
| RDAE_ALG  | alg   | Right hand side of algebraic equations. . |
+-----------+-------+-------------------------------------------+
| RDAE_QUAD | quad  | Right hand side of quadratures. .         |
+-----------+-------+-------------------------------------------+

";

%feature("docstring")  casadi::rdaeOut(const std::vector< M > &args, const
std::string &arg_s0="", const std::string &arg_s1="", const std::string
&arg_s2="") " ";

%feature("docstring")  casadi::tril(const GenericMatrix< MatType > &a) "

Get the lower triangular part of a matrix.

";

%feature("docstring")  casadi::tril(const Sparsity &sp, bool
includeDiagonal=true) "

Get lower triangular part.

";

%feature("docstring")  casadi::dgeequ_(int *m, int *n, double *a, int *lda,
double *r, double *c, double *colcnd, double *rowcnd, double *amax, int
*info) " [INTERNAL]  Calculate col and row scaling.

";

%feature("docstring")  casadi::lookupvector(const std::vector< int > &v, int
size) "

Returns a vector for quickly looking up entries of supplied list.

lookupvector[i]!=-1 <=> v contains i v[lookupvector[i]] == i <=> v contains
i

Duplicates are treated by looking up last occurrence

";

%feature("docstring")  casadi::ProfilingType< ProfilingData_IO >() "
[INTERNAL] ";

%feature("docstring")  casadi::dormqr_(char *side, char *trans, int *n, int
*m, int *k, double *a, int *lda, double *tau, double *c, int *ldc, double
*work, int *lwork, int *info) " [INTERNAL]  Multiply right hand side with
Q-transpose (lapack)

";

%feature("docstring")  casadi::getRealTime() "[INTERNAL]  Returns the real
time, in seconds, or -1.0 if an error occurred.

Time is measured since an arbitrary and OS-dependent start time. The
returned real time is only useful for computing an elapsed time between two
calls to this function.

";

%feature("docstring")  casadi::integratorOut(const std::string &arg_s0="",
const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(),
const std::string &arg_s2="", const M &arg_m2=M(), const std::string
&arg_s3="", const M &arg_m3=M(), const std::string &arg_s4="", const M
&arg_m4=M(), const std::string &arg_s5="", const M &arg_m5=M()) "

Output arguments of an integrator

>Output scheme: casadi::IntegratorOutput (INTEGRATOR_NUM_OUT = 7) [integratorOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| INTEGRATOR_XF          | xf                     | Differential state at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_QF          | qf                     | Quadrature state at    |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_ZF          | zf                     | Algebraic variable at  |
|                        |                        | the final time .       |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RXF         | rxf                    | Backward differential  |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RQF         | rqf                    | Backward quadrature    |
|                        |                        | state at the initial   |
|                        |                        | time .                 |
+------------------------+------------------------+------------------------+
| INTEGRATOR_RZF         | rzf                    | Backward algebraic     |
|                        |                        | variable at the        |
|                        |                        | initial time .         |
+------------------------+------------------------+------------------------+

";

%feature("docstring")  casadi::integratorOut(const std::vector< M > &args,
const std::string &arg_s0="", const std::string &arg_s1="", const
std::string &arg_s2="", const std::string &arg_s3="", const std::string
&arg_s4="", const std::string &arg_s5="") " ";

%feature("docstring")  casadi::outer_prod(const MX &x, const MX &y) "

Take the outer product of two vectors Equals.

with x and y vectors

";

%feature("docstring")  casadi::outer_prod(const Matrix< DataType > &x, const
Matrix< DataType > &y) "

Outer product of two vectors Equals.

with x and y vectors

";

%feature("docstring")  casadi::operation_checker(unsigned int op) "
[INTERNAL] ";

%feature("docstring")  casadi::horzcat(const std::vector< Sparsity > &v) "

Concatenate a list of sparsities horizontally Alternative terminology:
horizontal stack, hstack, horizontal append, [a b].

";

%feature("docstring")  casadi::horzcat(const Sparsity &a, const Sparsity &b)
" [INTERNAL]   Reshape the sparsity pattern keeping the relative location of
the nonzeros.

";

%feature("docstring")  casadi::horzcat(const MX &a, const MX &b) "
[INTERNAL]  concatenate vertically, two matrices

";

%feature("docstring")  casadi::horzcat(const std::vector< MX > &x) "

concatenate vertically

horzcat(horzsplit(x,...)) = x

";

%feature("docstring")  casadi::horzcat(const std::vector< Matrix< DataType >
> &v) "

Concatenate a list of matrices vertically Alternative terminology: vertical
stack, vstack, vertical append, [a;b].

horzcat(horzsplit(x,...)) = x

";

%feature("docstring")  casadi::horzcat(const Matrix< DataType > &x, const
Matrix< DataType > &y) " [INTERNAL] ";

%feature("docstring")  casadi::horzcat(const vector< MX > &x) " ";

%feature("docstring")  casadi::controldaeIn(const std::string &arg_s0="",
const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(),
const std::string &arg_s2="", const M &arg_m2=M(), const std::string
&arg_s3="", const M &arg_m3=M(), const std::string &arg_s4="", const M
&arg_m4=M(), const std::string &arg_s5="", const M &arg_m5=M(), const
std::string &arg_s6="", const M &arg_m6=M(), const std::string &arg_s7="",
const M &arg_m7=M(), const std::string &arg_s8="", const M &arg_m8=M()) "

Input arguments of an ODE/DAE function

>Input scheme: casadi::ControlledDAEInput (CONTROL_DAE_NUM_IN = 10) [controldaeIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| CONTROL_DAE_T          | t                      | Global physical time.  |
|                        |                        | (1-by-1) .             |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_X          | x                      | State vector           |
|                        |                        | (dimension nx-by-1).   |
|                        |                        | Should have the same   |
|                        |                        | amount of non-zeros as |
|                        |                        | DAEOutput:DAE_RES      |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_Z          | z                      | Algebraic state vector |
|                        |                        | (dimension np-by-1). . |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_P          | p                      | Parameter vector       |
|                        |                        | (dimension np-by-1). . |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_U          | u                      | Control vector         |
|                        |                        | (dimension nu-by-1). . |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_U_INTERP   | u_interp               | Control vector,        |
|                        |                        | linearly interpolated  |
|                        |                        | (dimension nu-by-1). . |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_X_MAJOR    | x_major                | State vector           |
|                        |                        | (dimension nx-by-1) at |
|                        |                        | the last major time-   |
|                        |                        | step .                 |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_T0         | t0                     | Time at start of       |
|                        |                        | control interval       |
|                        |                        | (1-by-1) .             |
+------------------------+------------------------+------------------------+
| CONTROL_DAE_TF         | tf                     | Time at end of control |
|                        |                        | interval (1-by-1) .    |
+------------------------+------------------------+------------------------+

";

%feature("docstring")  casadi::controldaeIn(const std::vector< M > &args,
const std::string &arg_s0="", const std::string &arg_s1="", const
std::string &arg_s2="", const std::string &arg_s3="", const std::string
&arg_s4="", const std::string &arg_s5="", const std::string &arg_s6="",
const std::string &arg_s7="", const std::string &arg_s8="") " ";

%feature("docstring")  casadi::sprank(const Matrix< DataType > &A) "

Obtain the structural rank of a sparsity-pattern.

";

%feature("docstring")  casadi::triu(const GenericMatrix< MatType > &a) "

Get the upper triangular part of a matrix.

";

%feature("docstring")  casadi::triu(const Sparsity &sp, bool
includeDiagonal=true) "

Get upper triangular part.

";

%feature("docstring")  casadi::toVector(const T &v0) " [INTERNAL] ";

%feature("docstring")  casadi::toVector(const T &v0, const T &v1) "
[INTERNAL] ";

%feature("docstring")  casadi::toVector(const T &v0, const T &v1, const T
&v2) " [INTERNAL] ";

%feature("docstring")  casadi::hessLagOut(const std::string &arg_s0="",
const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(),
const std::string &arg_s2="", const M &arg_m2=M(), const std::string
&arg_s3="", const M &arg_m3=M(), const std::string &arg_s4="", const M
&arg_m4=M()) "

Output arguments of an NLP Hessian function

>Output scheme: casadi::HessLagOutput (HESSLAG_NUM_OUT = 6) [hessLagOut]
+----------------+--------+------------------------------------------------+
|   Full name    | Short  |                  Description                   |
+================+========+================================================+
| HESSLAG_HESS   | hess   | Hessian of the Lagrangian .                    |
+----------------+--------+------------------------------------------------+
| HESSLAG_F      | f      | Objective function .                           |
+----------------+--------+------------------------------------------------+
| HESSLAG_G      | g      | Constraint function .                          |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_X | grad_x | Gradient of the Lagrangian with respect to x . |
+----------------+--------+------------------------------------------------+
| HESSLAG_GRAD_P | grad_p | Gradient of the Lagrangian with respect to p . |
+----------------+--------+------------------------------------------------+

";

%feature("docstring")  casadi::hessLagOut(const std::vector< M > &args,
const std::string &arg_s0="", const std::string &arg_s1="", const
std::string &arg_s2="", const std::string &arg_s3="", const std::string
&arg_s4="") " ";

%feature("docstring")  casadi::heaviside(const SX &x) "

Heaviside function.

\\\\[ \\\\begin{cases} H(x) = 0 & x<0 \\\\\\\\ H(x) = 1/2 & x=0 \\\\\\\\
H(x) = 1 & x>0 \\\\\\\\ \\\\end{cases} \\\\]

";

%feature("docstring")  casadi::twice(const T &x) " [INTERNAL] ";

%feature("docstring")  casadi::getcopy(const A &a, std::map<
SharedObjectNode *, SharedObject > &already_copied) " [INTERNAL]  Make a
deep copy of an object (Note: default is a shallow copy!)

";

%feature("docstring")  casadi::getSchemeEntryEnum(InputOutputScheme scheme,
const std::string &name) " ";

%feature("docstring")  casadi::bvec_toggle(bvec_t *s, int begin, int end,
int j) " [INTERNAL] ";

%feature("docstring")  casadi::shared_cast(SharedObject &A) " [INTERNAL]
Typecast a shared object to a base class to a shared object to a derived
class, cf. dynamic_cast.

Get a pointer to the node

Create a return object

Assign node of B and return

Null pointer if not pointing towards the right type of object ";

%feature("docstring")  casadi::shared_cast(const SharedObject &A) "
[INTERNAL]  Typecast a shared object to a base class to a shared object to a
derived class, cf. dynamic_cast (const)

";

%feature("docstring")  casadi::qcqpOut(const std::string &arg_s0="", const M
&arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const
std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="",
const M &arg_m3=M()) "

Output arguments of an QP Solver

>Output scheme: casadi::QCQPSolverOutput (QCQP_SOLVER_NUM_OUT = 5) [qcqpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QCQP_SOLVER_X          | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_COST       | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_LAM_A      | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_LAM_X      | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

";

%feature("docstring")  casadi::qcqpOut(const std::vector< M > &args, const
std::string &arg_s0="", const std::string &arg_s1="", const std::string
&arg_s2="", const std::string &arg_s3="") " ";

%feature("docstring")  casadi::profileWriteTime(std::ofstream &f, T *a, int
line_number, double local, double total) " [INTERNAL] ";

%feature("docstring")  casadi::trim_empty(const vector< MX > &x) " ";

%feature("docstring")  casadi::deepcopy(const A &a) " [INTERNAL]  Make a
deep copy of an object (Note: default is a shallow copy!)

";

%feature("docstring")  casadi::deepcopy(const A &a, std::map<
SharedObjectNode *, SharedObject > &already_copied) " [INTERNAL]  Make a
deep copy of an object (Note: default is a shallow copy!)

";

%feature("docstring")  casadi::deepcopy(const std::vector< A > &a, std::map<
SharedObjectNode *, SharedObject > &already_copied) " [INTERNAL]  Make a
deep copy of an object (Note: default is a shallow copy!)

";

%feature("docstring")  casadi::inv(const Matrix< DataType > &a) " ";

%feature("docstring")  casadi::inv(const MX &A) "

Matrix inverse (experimental)

";

%feature("docstring")  casadi::if_else(const MX &cond, const MX &if_true,
const MX &if_false) "

Branching on MX nodes Ternary operator, \"cond ? if_true : if_false\".

";

%feature("docstring")  casadi::if_else(const SX &cond, const SX &if_true,
const SX &if_false) "

Integrate f from a to b using Gaussian quadrature with n points.

";

%feature("docstring")  casadi::if_else(const SXElement &cond, const T
&if_true, const T &if_false) " [INTERNAL]  Expand the expression as a
weighted sum (with constant weights)

";

%feature("docstring")  casadi::if_else(const SXElement &cond, const T
&if_true, const T &if_false) " [INTERNAL]  Expand the expression as a
weighted sum (with constant weights)

";

%feature("docstring")  casadi::if_else(const SXElement &cond, const
SXElement &if_true, const SXElement &if_false) "

replaces the ternary conditional operator \"?:\", which cannot be overloaded

";

%feature("docstring")  casadi::sumCols(const MX &x) "

Return a col-wise summation of elements.

";

%feature("docstring")  casadi::sumCols(const Matrix< DataType > &x) "

Return a col-wise summation of elements.

";

%feature("docstring")  casadi::kron(const Matrix< DataType > &a, const
Matrix< DataType > &b) "

Kronecker tensor product.

Creates a block matrix in which each element (i,j) is a_ij*b

";

%feature("docstring")  casadi::kron(const MX &a, const MX &b) "

Kronecker tensor product.

Creates a block matrix in which each element (i,j) is a_ij*b

";

%feature("docstring")  casadi::sin(const T &x) " [INTERNAL]  Pre-C99
elementary functions from the 'math.h' ('cmath') header.

";

%feature("docstring")  casadi::hnlpIn(const std::string &arg_s0="", const M
&arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const
std::string &arg_s2="", const M &arg_m2=M()) "

Input arguments of an Homotopy NLP function

>Input scheme: casadi::HNLPInput (HNL_NUM_IN = 4) [hnlpIn]
+-----------+-------+----------------------+
| Full name | Short |     Description      |
+===========+=======+======================+
| HNL_X     | x     | Decision variable .  |
+-----------+-------+----------------------+
| HNL_P     | p     | Fixed parameter .    |
+-----------+-------+----------------------+
| HNL_TAU   | tau   | Homotopy parameter . |
+-----------+-------+----------------------+

";

%feature("docstring")  casadi::hnlpIn(const std::vector< M > &args, const
std::string &arg_s0="", const std::string &arg_s1="", const std::string
&arg_s2="") " ";

%feature("docstring")  casadi::casadi_mm_tn_sparse(const real_t *trans_x,
const int *sp_trans_x, const real_t *y, const int *sp_y, real_t *z, const
int *sp_z) " [INTERNAL]  Sparse matrix-matrix multiplication, the first
argument is transposed: z <- z + x'*y.

";

%feature("docstring")  casadi::dense_mul_nn(int n, int m, int l, const
double *A, const double *B, double *C) " [INTERNAL] ";

%feature("docstring")  casadi::if_else_zero(const T &x, const T &y) "
[INTERNAL]  Conditional assignment.

";

%feature("docstring")  casadi::if_else_zero(double x, double y) " [INTERNAL]
Conditional assignment.

";

%feature("docstring")  casadi::simplify(MX &ex) "

Simplify an expression.

";

%feature("docstring")  casadi::simplify(SX &ex) "

Simplify an expression.

";

%feature("docstring")  casadi::simplify(SXElement &ex) " [INTERNAL]
Simplify the expression: formulates the expression as and eliminates terms.

";

%feature("docstring")  casadi::hessian(const SX &ex, const SX &arg, SX &H,
SX &g) "

Integrate f from a to b using Gaussian quadrature with n points.

";

%feature("docstring")  casadi::hessian(const SX &ex, const SX &arg) "

Integrate f from a to b using Gaussian quadrature with n points.

";

%feature("docstring")  casadi::qr(const Matrix< DataType > &A, Matrix<
DataType > &Q, Matrix< DataType > &R) " [INTERNAL]  QR factorization using
the modified Gram-Schmidt algorithm More stable than the classical Gram-
Schmidt, but may break down if the rows of A are nearly linearly dependent
See J. Demmel: Applied Numerical Linear Algebra (algorithm 3.1.). Note that
in SWIG, Q and R are returned by value.

";

%feature("docstring")  casadi::is_a(const SharedObject &A) " [INTERNAL]
Check if a shared object is of a certain type.

";

%feature("docstring")  casadi::isIncreasing(const std::vector< T > &v) "

Check if the vector is strictly increasing.

";

%feature("docstring")  casadi::gradFIn(const std::string &arg_s0="", const M
&arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M()) "

Input arguments of an NLP objective gradient function

>Input scheme: casadi::GradFInput (GRADF_NUM_IN = 3) [gradFIn]
+-----------+-------+---------------------+
| Full name | Short |     Description     |
+===========+=======+=====================+
| GRADF_X   | x     | Decision variable . |
+-----------+-------+---------------------+
| GRADF_P   | p     | Fixed parameter .   |
+-----------+-------+---------------------+

";

%feature("docstring")  casadi::gradFIn(const std::vector< M > &args, const
std::string &arg_s0="", const std::string &arg_s1="") " ";

%feature("docstring")  casadi::getFree(const SX &ex) "

Get all the free variables in an expression.

";

%feature("docstring")  casadi::acosh(const T &x) " [INTERNAL]  Pre-C99
elementary functions from the 'math.h' ('cmath') header.

";

%feature("docstring")  casadi::acosh(double x) " [INTERNAL]  throw ()
Pre-C99 elementary functions from the 'math.h' ('cmath') header.

";

%feature("docstring")  casadi::erf(const T &x) " [INTERNAL]  C99 elementary
functions from the 'math.h' header.

";

%feature("docstring")  casadi::erf(double x) " [INTERNAL]  throw () C99
elementary functions from the 'math.h' header.

";

%feature("docstring")  casadi::pow(const T &x, const T &n) " [INTERNAL]
Pre-C99 elementary functions from the 'math.h' ('cmath') header.

";

%feature("docstring")  casadi::pow(const T &x, double n) " [INTERNAL]
Pre-C99 elementary functions from the 'math.h' ('cmath') header.

";

%feature("docstring")  casadi::pow(double x, const T &n) " [INTERNAL]
Pre-C99 elementary functions from the 'math.h' ('cmath') header.

";

%feature("docstring")  casadi::ptrVec(std::vector< T > &v) " [INTERNAL]
Convenience function, convert vectors to vectors of pointers.

";

%feature("docstring")  casadi::ptrVec(const std::vector< T > &v) "
[INTERNAL]  Convenience function, convert vectors to vectors of pointers.

";

%feature("docstring")  casadi::ptrVec(std::vector< std::vector< T > > &v) "
[INTERNAL]  Convenience function, convert vectors to vectors of pointers.

";

%feature("docstring")  casadi::ptrVec(const std::vector< std::vector< T > >
&v) " [INTERNAL]  Convenience function, convert vectors to vectors of
pointers.

";

%feature("docstring")  casadi::dtrsm_(char *side, char *uplo, char *transa,
char *diag, int *m, int *n, double *alpha, double *a, int *lda, double *b,
int *ldb) " [INTERNAL]   Solve upper triangular system (lapack)

";

%feature("docstring")  casadi::casadi_axpy(int n, real_t alpha, const real_t
*x, int inc_x, real_t *y, int inc_y) " [INTERNAL]  AXPY: y <- a*x + y.

";

%feature("docstring")  casadi::sq(const T &x) " [INTERNAL] ";

%feature("docstring")  casadi::gradient(const MX &ex, const MX &arg) "

split vertically, retaining groups of cols

Parameters:
-----------

output_offset:  List of all start cols for each group the last col group
will run to the end.

horzcat(horzsplit(x,...)) = x

";

%feature("docstring")  casadi::gradient(const SX &ex, const SX &arg) "

Integrate f from a to b using Gaussian quadrature with n points.

";

%feature("docstring")  casadi::lpOut(const std::string &arg_s0="", const M
&arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const
std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="",
const M &arg_m3=M()) "

Output arguments of an LP Solver

>Output scheme: casadi::LPSolverOutput (LP_SOLVER_NUM_OUT = 5) [lpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| LP_SOLVER_X            | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| LP_SOLVER_COST         | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| LP_SOLVER_LAM_A        | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| LP_SOLVER_LAM_X        | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

";

%feature("docstring")  casadi::lpOut(const std::vector< M > &args, const
std::string &arg_s0="", const std::string &arg_s1="", const std::string
&arg_s2="", const std::string &arg_s3="") " ";

%feature("docstring")  casadi::logic_or(const DataType &x, const DataType
&y) "

Logical or, returns (an expression evaluating to) 1 if at least one
expression is nonzero and 0 otherwise.

";

%feature("docstring")  casadi::collocationPointsGen(int order, const
std::string &scheme) " ";

%feature("docstring")  casadi::sdqpStruct(const std::string &arg_s0="",
const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(),
const std::string &arg_s2="", const M &arg_m2=M(), const std::string
&arg_s3="", const M &arg_m3=M()) "

Structure specification of an SDQP

";

%feature("docstring")  casadi::sdqpStruct(const std::vector< M > &args,
const std::string &arg_s0="", const std::string &arg_s1="", const
std::string &arg_s2="", const std::string &arg_s3="") " ";

%feature("docstring")  casadi::jacGOut(const std::string &arg_s0="", const M
&arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const
std::string &arg_s2="", const M &arg_m2=M()) "

Output arguments of an NLP Jacobian function

>Output scheme: casadi::JacGOutput (JACG_NUM_OUT = 4) [jacGOut]
+-----------+-------+-------------------------------+
| Full name | Short |          Description          |
+===========+=======+===============================+
| JACG_JAC  | jac   | Jacobian of the constraints . |
+-----------+-------+-------------------------------+
| JACG_F    | f     | Objective function .          |
+-----------+-------+-------------------------------+
| JACG_G    | g     | Constraint function .         |
+-----------+-------+-------------------------------+

";

%feature("docstring")  casadi::jacGOut(const std::vector< M > &args, const
std::string &arg_s0="", const std::string &arg_s1="", const std::string
&arg_s2="") " ";

%feature("docstring")  casadi::atanh(const T &x) " [INTERNAL]  Pre-C99
elementary functions from the 'math.h' ('cmath') header.

";

%feature("docstring")  casadi::atanh(double x) " [INTERNAL]  throw ()
Pre-C99 elementary functions from the 'math.h' ('cmath') header.

";

%feature("docstring")  casadi::compress(SX &ex, int level=5) "

Remove identical calculations.

";

%feature("docstring")  casadi::slicot_mb03wd(char job, char compz, int n,
int p, int ilo, int ihi, int iloz, int ihiz, double *h, int ldh1, int ldh2,
double *z, int ldz1, int ldz2, double *wr, double *wi, double *dwork, int
ldwork) " [INTERNAL] ";

%feature("docstring")  casadi::sparse(const Matrix< DataType > &A, double
tol=0) "

Make a matrix sparse by removing numerical zeros.

";

%feature("docstring")  casadi::getSchemeEntryNames(InputOutputScheme scheme)
" ";

%feature("docstring")  casadi::diag(const MX &x) "

Get the diagonal of a matrix or construct a diagonal.

When the input is square, the diagonal elements are returned. If the input
is vector-like, a diagonal matrix is constructed with it.

";

%feature("docstring")  casadi::diag(const Matrix< DataType > &A) "

Get the diagonal of a matrix or construct a diagonal When the input is
square, the diagonal elements are returned. If the input is vector- like, a
diagonal matrix is constructed with it.

";

%feature("docstring")  casadi::hessLagIn(const std::string &arg_s0="", const
M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const
std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="",
const M &arg_m3=M()) "

Input arguments of an NLP Hessian function

>Input scheme: casadi::HessLagInput (HESSLAG_NUM_IN = 5) [hessLagIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| HESSLAG_X              | x                      | Decision variable .    |
+------------------------+------------------------+------------------------+
| HESSLAG_P              | p                      | Fixed parameter .      |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_F          | lam_f                  | Multiplier for f. Just |
|                        |                        | a scalar factor for    |
|                        |                        | the objective that the |
|                        |                        | NLP solver might use   |
|                        |                        | to scale the           |
|                        |                        | objective.             |
+------------------------+------------------------+------------------------+
| HESSLAG_LAM_G          | lam_g                  | Multiplier for g .     |
+------------------------+------------------------+------------------------+

";

%feature("docstring")  casadi::hessLagIn(const std::vector< M > &args, const
std::string &arg_s0="", const std::string &arg_s1="", const std::string
&arg_s2="", const std::string &arg_s3="") " ";

%feature("docstring")  casadi::rank(const Sparsity &a) "

Obtain the structural rank of a sparsity-pattern.

";

%feature("docstring")  casadi::lpIn(const std::string &arg_s0="", const M
&arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const
std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="",
const M &arg_m3=M(), const std::string &arg_s4="", const M &arg_m4=M(),
const std::string &arg_s5="", const M &arg_m5=M()) "

Input arguments of a LP problem

>Input scheme: casadi::LPSolverInput (LP_SOLVER_NUM_IN = 7) [lpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| LP_SOLVER_C            | c                      | The vector c: dense (n |
|                        |                        | x 1) .                 |
+------------------------+------------------------+------------------------+
| LP_SOLVER_A            | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| LP_SOLVER_LBA          | lba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| LP_SOLVER_UBA          | uba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| LP_SOLVER_LBX          | lbx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| LP_SOLVER_UBX          | ubx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+

";

%feature("docstring")  casadi::lpIn(const std::vector< M > &args, const
std::string &arg_s0="", const std::string &arg_s1="", const std::string
&arg_s2="", const std::string &arg_s3="", const std::string &arg_s4="",
const std::string &arg_s5="") " ";

%feature("docstring")  casadi::daeOut(const std::string &arg_s0="", const M
&arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const
std::string &arg_s2="", const M &arg_m2=M()) "

Output arguments of an DAE function

>Output scheme: casadi::DAEOutput (DAE_NUM_OUT = 4) [daeOut]
+-----------+-------+--------------------------------------------+
| Full name | Short |                Description                 |
+===========+=======+============================================+
| DAE_ODE   | ode   | Right hand side of the implicit ODE .      |
+-----------+-------+--------------------------------------------+
| DAE_ALG   | alg   | Right hand side of algebraic equations .   |
+-----------+-------+--------------------------------------------+
| DAE_QUAD  | quad  | Right hand side of quadratures equations . |
+-----------+-------+--------------------------------------------+

";

%feature("docstring")  casadi::daeOut(const std::vector< M > &args, const
std::string &arg_s0="", const std::string &arg_s1="", const std::string
&arg_s2="") " ";

%feature("docstring")  casadi::logic_and(const DataType &x, const DataType
&y) "

Logical and, returns (an expression evaluating to) 1 if both expressions are
nonzero and 0 otherwise.

";

%feature("docstring")  casadi::getSchemeEntryDoc(InputOutputScheme scheme,
int i) " ";

%feature("docstring")  casadi::adj(const Matrix< DataType > &a) " ";

%feature("docstring")  casadi::collocationInterpolators(const std::vector<
double > &tau_root, std::vector< std::vector< double > > &C, std::vector<
double > &D) " [INTERNAL]  Obtain collocation interpolating matrices.

Parameters:
-----------

tau_root:  location of collocation points, as obtained from
collocationPoints

C:  interpolating coefficients to obtain derivatives Length: order+1, order
+ 1

dX/dt (j) ~ Sum_i C[j][i]*X(i)

Parameters:
-----------

D:  interpolating coefficients to obtain end state Length: order+1

";

%feature("docstring")  casadi::inner_prod(const MX &x, const MX &y) "

Take the inner product of two vectors Equals.

with x and y vectors

";

%feature("docstring")  casadi::inner_prod(const Matrix< DataType > &x, const
Matrix< DataType > &y) "

Inner product of two matrices Equals.

with x and y matrices of the same dimension

";

%feature("docstring")  casadi::inner_prod(const std::vector< T > &a, const
std::vector< T > &b) " [INTERNAL] ";

%feature("docstring")  casadi::matrixName() "

Get typename.

";

%feature("docstring")  casadi::atan(const T &x) " [INTERNAL]  Pre-C99
elementary functions from the 'math.h' ('cmath') header.

";

%feature("docstring")  casadi::getOperatorRepresentation(const MX &xb, const
std::vector< std::string > &args) "

Get a string representation for a binary MX, using custom arguments.

";

%feature("docstring")  casadi::getOperatorRepresentation(const SXElement &x,
const std::vector< std::string > &args) "

Get a string representation for a binary SX, using custom arguments.

";

%feature("docstring")  casadi::poly_roots(const SX &p) "

Attempts to find the roots of a polynomial.

This will only work for polynomials up to order 3 It is assumed that the
roots are real.

";

%feature("docstring")  casadi::qpOut(const std::string &arg_s0="", const M
&arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const
std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="",
const M &arg_m3=M()) "

Output arguments of an QP Solver

>Output scheme: casadi::QPSolverOutput (QP_SOLVER_NUM_OUT = 5) [qpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_X            | x                      | The primal solution .  |
+------------------------+------------------------+------------------------+
| QP_SOLVER_COST         | cost                   | The optimal cost .     |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_A        | lam_a                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | linear bounds .        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X        | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds .        |
+------------------------+------------------------+------------------------+

";

%feature("docstring")  casadi::qpOut(const std::vector< M > &args, const
std::string &arg_s0="", const std::string &arg_s1="", const std::string
&arg_s2="", const std::string &arg_s3="") " ";

%feature("docstring")  casadi::trace(const MX &A) "

Matrix trace.

";

%feature("docstring")  casadi::trace(const Matrix< DataType > &a) " ";

%feature("docstring")  casadi::casadi_nrm2(int n, const real_t *x, int
inc_x) " [INTERNAL]  NRM2: ||x||_2 -> return.

";

%feature("docstring")  casadi::evalf(const SX &ex, const SX &v, const
Matrix< double > &vdef) "

Substitute variable v with value vdef in an expression ex, and evaluate
numerically Note: this is not efficient. For critical parts (loops) of your
code, always use SXFunction.

";

%feature("docstring")  casadi::evalf(const SX &ex) "

Evaluate an SX graph numerically Note: this is not efficient. For critical
parts (loops) of your code, always use SXFunction.

";

%feature("docstring")  casadi::rectangle(const SX &x) "

rectangle function

\\\\[ \\\\begin{cases} \\\\Pi(x) = 1 & |x| < 1/2 \\\\\\\\ \\\\Pi(x) = 1/2 &
|x| = 1/2 \\\\\\\\ \\\\Pi(x) = 0 & |x| > 1/2 \\\\\\\\ \\\\end{cases} \\\\]

Also called: gate function, block function, band function, pulse function,
window function

";

%feature("docstring")  casadi::sdqpOut(const std::string &arg_s0="", const M
&arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const
std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="",
const M &arg_m3=M(), const std::string &arg_s4="", const M &arg_m4=M(),
const std::string &arg_s5="", const M &arg_m5=M(), const std::string
&arg_s6="", const M &arg_m6=M()) "

Output arguments of an SDQP Solver

>Output scheme: casadi::SDQPOutput (SDQP_SOLVER_NUM_OUT = 8) [sdqpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SDQP_SOLVER_X          | x                      | The primal solution (n |
|                        |                        | x 1) - may be used as  |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_P          | p                      | The solution P (m x m) |
|                        |                        | - may be used as       |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_DUAL       | dual                   | The dual solution (m x |
|                        |                        | m) - may be used as    |
|                        |                        | initial guess .        |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_COST       | cost                   | The primal optimal     |
|                        |                        | cost (1 x 1) .         |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_DUAL_COST  | dual_cost              | The dual optimal cost  |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_LAM_A      | lam_a                  | The dual solution      |
|                        |                        | corresponding to the   |
|                        |                        | linear constraints (nc |
|                        |                        | x 1) .                 |
+------------------------+------------------------+------------------------+
| SDQP_SOLVER_LAM_X      | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds (n x 1)  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

";

%feature("docstring")  casadi::sdqpOut(const std::vector< M > &args, const
std::string &arg_s0="", const std::string &arg_s1="", const std::string
&arg_s2="", const std::string &arg_s3="", const std::string &arg_s4="",
const std::string &arg_s5="", const std::string &arg_s6="") " ";

%feature("docstring")  casadi::matrixName< SXElement >() " [INTERNAL] ";

%feature("docstring")  casadi::atan2(const T &x, const T &n) " [INTERNAL]
Pre-C99 elementary functions from the 'math.h' ('cmath') header.

";

%feature("docstring")  casadi::atan2(const T &x, double n) " [INTERNAL]
Pre-C99 elementary functions from the 'math.h' ('cmath') header.

";

%feature("docstring")  casadi::atan2(double x, const T &n) " [INTERNAL]
Pre-C99 elementary functions from the 'math.h' ('cmath') header.

";

%feature("docstring")  casadi::slicot_mb03vy(int n, int p, int ilo, int ihi,
double *a, int lda1, int lda2, const double *tau, int ldtau, double *dwork,
int ldwork) " [INTERNAL] ";

%feature("docstring")  casadi::getMinor(const Matrix< DataType > &x, int i,
int j) " ";

%feature("docstring")  casadi::pinv(const Matrix< double > &A,
linearSolverCreator lsolver, const Dictionary &dict=Dictionary()) "

Computes the Moore-Penrose pseudo-inverse.

If the matrix A is fat (size1>size2), mul(A,pinv(A)) is unity. If the matrix
A is slender (size2<size1), mul(pinv(A),A) is unity.

";

%feature("docstring")  casadi::pinv(const Matrix< DataType > &A) "

Computes the Moore-Penrose pseudo-inverse.

If the matrix A is fat (size2>size1), mul(A,pinv(A)) is unity. If the matrix
A is slender (size1<size2), mul(pinv(A),A) is unity.

";

%feature("docstring")  casadi::pinv(const MX &A, linearSolverCreator
lsolver, const Dictionary &dict=Dictionary()) "

Computes the Moore-Penrose pseudo-inverse.

If the matrix A is fat (size1>size2), mul(A,pinv(A)) is unity. If the matrix
A is slender (size2<size1), mul(pinv(A),A) is unity.

";

%feature("docstring")  casadi::getSymbols(const SX &e) "

Get all symbols contained in the supplied expression Get all symbols on
which the supplied expression depends.

See:   SXFunction::getFree()

";

%feature("docstring")  casadi::getSymbols(const MX &e) "

Get all symbols contained in the supplied expression Get all symbols on
which the supplied expression depends.

See:   MXFunction::getFree()

";

%feature("docstring")  casadi::getSymbols(const std::vector< MX > &e) "

Get all symbols contained in the supplied expression Get all symbols on
which the supplied expression depends.

See:   MXFunction::getFree()

";

%feature("docstring")  casadi::pw_const(const SX &t, const SX &tval, const
SX &val) "

Create a piecewise constant function Create a piecewise constant function
with n=val.size() intervals.

Inputs:

Parameters:
-----------

t:  a scalar variable (e.g. time)

tval:  vector with the discrete values of t at the interval transitions
(length n-1)

val:  vector with the value of the function for each interval (length n)

";

%feature("docstring")  casadi::collocationPoints(int order, const
std::string &scheme="radau") "

Obtain collocation points of specific order and scheme.

Parameters:
-----------

scheme:  'radau' or 'legendre'

";

%feature("docstring")  casadi::explicitRK(Function &f, const MX &tf=1, int
order=4, int ne=1) "

Construct an explicit Runge-Kutta integrator.

Parameters:
-----------

f:  dynamical system

>Input scheme: casadi::DAEInput (DAE_NUM_IN = 5) [daeIn]
+-----------+-------+----------------------------+
| Full name | Short |        Description         |
+===========+=======+============================+
| DAE_X     | x     | Differential state .       |
+-----------+-------+----------------------------+
| DAE_Z     | z     | Algebraic state .          |
+-----------+-------+----------------------------+
| DAE_P     | p     | Parameter .                |
+-----------+-------+----------------------------+
| DAE_T     | t     | Explicit time dependence . |
+-----------+-------+----------------------------+

>Output scheme: casadi::DAEOutput (DAE_NUM_OUT = 4) [daeOut]
+-----------+-------+--------------------------------------------+
| Full name | Short |                Description                 |
+===========+=======+============================================+
| DAE_ODE   | ode   | Right hand side of the implicit ODE .      |
+-----------+-------+--------------------------------------------+
| DAE_ALG   | alg   | Right hand side of algebraic equations .   |
+-----------+-------+--------------------------------------------+
| DAE_QUAD  | quad  | Right hand side of quadratures equations . |
+-----------+-------+--------------------------------------------+

Parameters:
-----------

tf:  Integration end time

order:  Order of integration

ne:  Number of times the RK primitive is repeated over the integration
interval

";

%feature("docstring")  casadi::sinh(const T &x) " [INTERNAL]  Pre-C99
elementary functions from the 'math.h' ('cmath') header.

";

%feature("docstring")  casadi::cofactor(const Matrix< DataType > &x, int i,
int j) " ";

%feature("docstring")  casadi::nlpSolverIn(const std::string &arg_s0="",
const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(),
const std::string &arg_s2="", const M &arg_m2=M(), const std::string
&arg_s3="", const M &arg_m3=M(), const std::string &arg_s4="", const M
&arg_m4=M(), const std::string &arg_s5="", const M &arg_m5=M(), const
std::string &arg_s6="", const M &arg_m6=M(), const std::string &arg_s7="",
const M &arg_m7=M()) "

Input arguments of an NLP Solver

>Input scheme: casadi::NLPSolverInput (NLP_SOLVER_NUM_IN = 9) [nlpSolverIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X0          | x0                     | Decision variables,    |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_P           | p                      | Value of fixed         |
|                        |                        | parameters (np x 1) .  |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBX         | lbx                    | Decision variables     |
|                        |                        | lower bound (nx x 1),  |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBX         | ubx                    | Decision variables     |
|                        |                        | upper bound (nx x 1),  |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LBG         | lbg                    | Constraints lower      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default -inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_UBG         | ubg                    | Constraints upper      |
|                        |                        | bound (ng x 1),        |
|                        |                        | default +inf .         |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X0      | lam_x0                 | Lagrange multipliers   |
|                        |                        | for bounds on X,       |
|                        |                        | initial guess (nx x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G0      | lam_g0                 | Lagrange multipliers   |
|                        |                        | for bounds on G,       |
|                        |                        | initial guess (ng x 1) |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

";

%feature("docstring")  casadi::nlpSolverIn(const std::vector< M > &args,
const std::string &arg_s0="", const std::string &arg_s1="", const
std::string &arg_s2="", const std::string &arg_s3="", const std::string
&arg_s4="", const std::string &arg_s5="", const std::string &arg_s6="",
const std::string &arg_s7="") " ";

%feature("docstring")  casadi::sdpStruct(const std::string &arg_s0="", const
M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const
std::string &arg_s2="", const M &arg_m2=M()) "

Structure specification of an SDP

";

%feature("docstring")  casadi::sdpStruct(const std::vector< M > &args, const
std::string &arg_s0="", const std::string &arg_s1="", const std::string
&arg_s2="") " ";

%feature("docstring")  casadi::dpleIn(const std::string &arg_s0="", const M
&arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M()) "

Input arguments of a dple solver

>Input scheme: casadi::DPLEInput (DPLE_NUM_IN = 3) [dpleIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| DPLE_A                 | a                      | A matrices (horzcat    |
|                        |                        | when const_dim,        |
|                        |                        | blkdiag otherwise) .   |
+------------------------+------------------------+------------------------+
| DPLE_V                 | v                      | V matrices (horzcat    |
|                        |                        | when const_dim,        |
|                        |                        | blkdiag otherwise) .   |
+------------------------+------------------------+------------------------+

";

%feature("docstring")  casadi::dpleIn(const std::vector< M > &args, const
std::string &arg_s0="", const std::string &arg_s1="") " ";

%feature("docstring")  casadi::blkdiag(const std::vector< Sparsity > &v) "

Construct a Sparsity with given blocks on the diagonal.

";

%feature("docstring")  casadi::blkdiag(const Sparsity &a, const Sparsity &b)
" [INTERNAL]   Reshape the sparsity pattern keeping the relative location of
the nonzeros.

";

%feature("docstring")  casadi::blkdiag(const std::vector< MX > &A) "

Construct a matrix with given blocks on the diagonal.

";

%feature("docstring")  casadi::blkdiag(const MX &A, const MX &B) "
[INTERNAL]  Construct a matrix with given blocks on the diagonal.

";

%feature("docstring")  casadi::blkdiag(const std::vector< Matrix< DataType >
> &A) "

Construct a matrix with given block on the diagonal.

";

%feature("docstring")  casadi::qcqpStruct(const std::string &arg_s0="",
const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(),
const std::string &arg_s2="", const M &arg_m2=M()) "

Structure specification of a QP

";

%feature("docstring")  casadi::qcqpStruct(const std::vector< M > &args,
const std::string &arg_s0="", const std::string &arg_s1="", const
std::string &arg_s2="") " ";

%feature("docstring")  casadi::casadi_copy(int n, const real_t *x, int
inc_x, real_t *y, int inc_y) " [INTERNAL]  COPY: y <-x.

";

%feature("docstring")  casadi::slicot_mb03vd(int n, int p, int ilo, int ihi,
double *a, int lda1, int lda2, double *tau, int ldtau, double *dwork) "
[INTERNAL] ";

%feature("docstring")  casadi::triu2symm(const GenericMatrix< MatType > &a)
"

Convert a upper triangular matrix to a symmetric one.

";

%feature("docstring")  casadi::dpleOut(const std::string &arg_s0="", const M
&arg_m0=M()) "

Output arguments of a dple solver

>Output scheme: casadi::DPLEOutput (DPLE_NUM_OUT = 2) [dpleOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| DPLE_P                 | p                      | Lyapunov matrix        |
|                        |                        | (horzcat when          |
|                        |                        | const_dim, blkdiag     |
|                        |                        | otherwise) (Cholesky   |
|                        |                        | of P if pos_def) .     |
+------------------------+------------------------+------------------------+

";

%feature("docstring")  casadi::dpleOut(const std::vector< M > &args, const
std::string &arg_s0="") " ";

%feature("docstring")  casadi::printCompact(const MX &ex, std::ostream
&stream=std::cout) "

Print compact, introducing new variables for shared subexpressions.

";

%feature("docstring")  casadi::printCompact(const SX &ex, std::ostream
&stream=std::cout) "

Print compact, introducing new variables for shared subexpressions.

";

%feature("docstring")  casadi::mul(const Sparsity &a, const Sparsity &b) "

Get the sparsity resulting from a matrix multiplication.

";

%feature("docstring")  casadi::mul(const MX &x, const MX &y, const Sparsity
&sp_z=Sparsity()) "

Take the matrix product of 2 MX objects.

With optional sp_z you can specify the sparsity of the result A typical use
case might be where the product is only constructed to inspect the trace of
it. sp_z diagonal will be more efficient then.

";

%feature("docstring")  casadi::mul(const std::vector< MX > &x) "

Take the matrix product of n MX objects.

";

%feature("docstring")  casadi::mul(const Matrix< DataType > &x, const
Matrix< DataType > &y, const Sparsity &sp_z=Sparsity()) "

Matrix product of two matrices.

With optional sp_z you can specify the sparsity of the result A typical use
case might be where the product is only constructed to inspect the trace of
it. sp_z diagonal will be more efficient in that case.

";

%feature("docstring")  casadi::mul(const std::vector< Matrix< DataType > >
&args) "

Matrix product of n matrices.

";

%feature("docstring")  casadi::horzsplit(const Sparsity &sp, const
std::vector< int > &output_offset) "

Split up a sparsity pattern horizontally.

";

%feature("docstring")  casadi::horzsplit(const MX &x, const std::vector< int
> &output_offset) "

split vertically, retaining groups of cols

Parameters:
-----------

output_offset:  List of all start cols for each group the last col group
will run to the end.

horzcat(horzsplit(x,...)) = x

";

%feature("docstring")  casadi::horzsplit(const MX &x, int incr=1) "

split vertically, retaining fixed-sized groups of cols

Parameters:
-----------

incr:  Size of each group of cols

horzcat(horzsplit(x,...)) = x

";

%feature("docstring")  casadi::horzsplit(const Matrix< DataType > &v, const
std::vector< int > &offset) "

split vertically, retaining groups of cols

Parameters:
-----------

offset:  List of all start cols for each group the last col group will run
to the end.

horzcat(horzsplit(x,...)) = x

";

%feature("docstring")  casadi::horzsplit(const Matrix< DataType > &v, int
incr=1) "

split vertically, retaining fixed-sized groups of cols

Parameters:
-----------

incr:  Size of each group of cols

horzcat(horzsplit(x,...)) = x

";

%feature("docstring")  casadi::isNonIncreasing(const std::vector< T > &v) "

Check if the vector is non-increasing.

";

%feature("docstring")  casadi::veccat(const std::vector< MX > &comp) "

Concatenate vertically while vectorizing all arguments.

";

%feature("docstring")  casadi::veccat(const std::vector< Matrix< DataType >
> &comp) "

concatenate vertically while vectorizing all arguments with vec

";

%feature("docstring")  casadi::veccat(const vector< MX > &comp) " ";

%feature("docstring")  casadi::taylor(const SX &ex, const SX &x, const SX
&a=casadi_limits< SXElement >::zero, int order=1) "

univariate Taylor series expansion

Calculate the Taylor expansion of expression 'ex' up to order 'order' with
respect to variable 'x' around the point 'a'

$(x)=f(a)+f'(a)(x-a)+f''(a)\\\\frac{(x-a)^2}{2!}+f'''(a)\\\\frac{(x-a)^3}{3!}+\\\\ldots$

Example usage:>>   x

";

%feature("docstring")  casadi::getSchemeName(InputOutputScheme scheme) " ";

%feature("docstring")  casadi::collocationPointsL(int order, const
std::string &scheme) " [INTERNAL]  Obtain collocation points of specific
order and scheme.

Parameters:
-----------

scheme:  'radau' or 'legendre'

";

%feature("docstring")  casadi::makeVector(int size, int ind0=-1, const T
&val0=T(), int ind1=-1, const T &val1=T(), int ind2=-1, const T &val2=T(),
int ind3=-1, const T &val3=T(), int ind4=-1, const T &val4=T(), int ind5=-1,
const T &val5=T(), int ind6=-1, const T &val6=T(), int ind7=-1, const T
&val7=T(), int ind8=-1, const T &val8=T(), int ind9=-1, const T &val9=T(),
int ind10=-1, const T &val10=T(), int ind11=-1, const T &val11=T(), int
ind12=-1, const T &val12=T(), int ind13=-1, const T &val13=T(), int
ind14=-1, const T &val14=T(), int ind15=-1, const T &val15=T(), int
ind16=-1, const T &val16=T(), int ind17=-1, const T &val17=T(), int
ind18=-1, const T &val18=T(), int ind19=-1, const T &val19=T()) " [INTERNAL]
Make a vector of a certain length with its entries specified Usage C++:
makeVector<ClassName>(LENGTH, ENTRY_INDEX_1, ENTRY_VALUE_1, ENTRY_INDEX_2,
ENTRY_VALUE_2, ...) Usage Python: makeVector(ClassName,(LENGTH,
ENTRY_INDEX_1, ENTRY_VALUE_1, ENTRY_INDEX_2, ENTRY_VALUE_2 ...)

";

%feature("docstring")  casadi::profileWriteBare(std::ofstream &f, const T
&s) " [INTERNAL] ";

%feature("docstring")  casadi::repmat(const MX &A, int n, int m) "

Repeat matrix A n times vertically and m times horizontally.

";

%feature("docstring")  casadi::repmat(const Matrix< DataType > &A, int n,
int m) "

Repeat matrix A n times vertically and m times horizontally.

";

%feature("docstring")  casadi::isNonDecreasing(const std::vector< T > &v) "

Check if the vector is non-decreasing.

";

%feature("docstring")  casadi::cosh(const T &x) " [INTERNAL]  Pre-C99
elementary functions from the 'math.h' ('cmath') header.

";

%feature("docstring")  casadi::countNodes(const MX &A) "

Count number of nodes

";

%feature("docstring")  casadi::countNodes(const SX &A) "

Count number of nodes.

";

%feature("docstring")  casadi::matrixName< int >() "

Get typename.

";

%feature("docstring")  casadi::str(const PrintableObject &obj) " ";

%feature("docstring")  casadi::fabs(const T &x) " [INTERNAL]  Pre-C99
elementary functions from the 'math.h' ('cmath') header.

";

%feature("docstring")  casadi::isEqual(const GenericMatrix< MatType > &x,
const GenericMatrix< MatType > &y) "

Check if two expressions are equal, assuming that they are comparable.

";

%feature("docstring")  casadi::socpOut(const std::string &arg_s0="", const M
&arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const
std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="",
const M &arg_m3=M()) "

Output arguments of an SOCP Solver

>Output scheme: casadi::SOCPOutput (SOCP_SOLVER_NUM_OUT = 5) [socpOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| SOCP_SOLVER_X          | x                      | The primal solution (n |
|                        |                        | x 1) .                 |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_COST       | cost                   | The primal optimal     |
|                        |                        | cost (1 x 1) .         |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_LAM_A      | lam_a                  | The dual solution      |
|                        |                        | corresponding to the   |
|                        |                        | linear constraints (nc |
|                        |                        | x 1) .                 |
+------------------------+------------------------+------------------------+
| SOCP_SOLVER_LAM_X      | lam_x                  | The dual solution      |
|                        |                        | corresponding to       |
|                        |                        | simple bounds (n x 1)  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+

";

%feature("docstring")  casadi::socpOut(const std::vector< M > &args, const
std::string &arg_s0="", const std::string &arg_s1="", const std::string
&arg_s2="", const std::string &arg_s3="") " ";

%feature("docstring")  casadi::log(const T &x) " [INTERNAL]  Pre-C99
elementary functions from the 'math.h' ('cmath') header.

";

%feature("docstring")  casadi::nlpSolverOut(const std::string &arg_s0="",
const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(),
const std::string &arg_s2="", const M &arg_m2=M(), const std::string
&arg_s3="", const M &arg_m3=M(), const std::string &arg_s4="", const M
&arg_m4=M(), const std::string &arg_s5="", const M &arg_m5=M()) "

Output arguments of an NLP Solver

>Output scheme: casadi::NLPSolverOutput (NLP_SOLVER_NUM_OUT = 7) [nlpSolverOut]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| NLP_SOLVER_X           | x                      | Decision variables at  |
|                        |                        | the optimal solution   |
|                        |                        | (nx x 1) .             |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_F           | f                      | Cost function value at |
|                        |                        | the optimal solution   |
|                        |                        | (1 x 1) .              |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_G           | g                      | Constraints function   |
|                        |                        | at the optimal         |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_X       | lam_x                  | Lagrange multipliers   |
|                        |                        | for bounds on X at the |
|                        |                        | solution (nx x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_G       | lam_g                  | Lagrange multipliers   |
|                        |                        | for bounds on G at the |
|                        |                        | solution (ng x 1) .    |
+------------------------+------------------------+------------------------+
| NLP_SOLVER_LAM_P       | lam_p                  | Lagrange multipliers   |
|                        |                        | for bounds on P at the |
|                        |                        | solution (np x 1) .    |
+------------------------+------------------------+------------------------+

";

%feature("docstring")  casadi::nlpSolverOut(const std::vector< M > &args,
const std::string &arg_s0="", const std::string &arg_s1="", const
std::string &arg_s2="", const std::string &arg_s3="", const std::string
&arg_s4="", const std::string &arg_s5="") " ";

%feature("docstring")  casadi::profileWrite(std::ofstream &f, const T &s) "
[INTERNAL] ";

%feature("docstring")  casadi::vec(const Sparsity &a) "

Vectorize the pattern.

";

%feature("docstring")  casadi::vec(const MX &x) "

Returns a vectorized version of the MX Same as reshape(x, x.numel(),1)

a c b d

turns into

a b c d

";

%feature("docstring")  casadi::vec(const Matrix< DataType > &a) "

make a vector Reshapes/vectorizes the Matrix<DataType> such that the shape
becomes (expr.numel(),1). Columns are stacked on top of each other. Same as
reshape(expr, expr.numel(),1)

a c b d  turns into

a b c d

";

%feature("docstring")  casadi::solve(const Matrix< double > &A, const
Matrix< double > &b, linearSolverCreator lsolver, const Dictionary
&dict=Dictionary()) "

Solve a system of equations: A*x = b.

";

%feature("docstring")  casadi::solve(const Matrix< DataType > &A, const
Matrix< DataType > &b) "

Solve a system of equations: A*x = b The solve routine works similar to
Matlab's backslash when A is square and nonsingular. The algorithm used is
the following:

A simple forward or backward substitution if A is upper or lower triangular

If the linear system is at most 3-by-3, form the inverse via minor expansion
and multiply

Permute the variables and equations as to get a (structurally) nonzero
diagonal, then perform a QR factorization without pivoting and solve the
factorized system.

Note 1: If there are entries of the linear system known to be zero, these
will be removed. Elements that are very small, or will evaluate to be zero,
can still cause numerical errors, due to the lack of pivoting (which is not
possible since cannot compare the size of entries)

Note 2: When permuting the linear system, a BLT (block lower triangular)
transformation is formed. Only the permutation part of this is however used.
An improvement would be to solve block-by-block if there are multiple BLT
blocks.

";

%feature("docstring")  casadi::solve(const MX &A, const MX &b,
linearSolverCreator lsolver=SymbolicQR::creator, const Dictionary
&dict=Dictionary()) "

Solve a system of equations: A*x = b.

";

%feature("docstring")  casadi::linsolIn(const std::string &arg_s0="", const
M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M()) "

Input arguments of a linear solver

>Input scheme: casadi::LinsolInput (LINSOL_NUM_IN = 3) [linsolIn]
+-----------+-------+------------------------------------------------+
| Full name | Short |                  Description                   |
+===========+=======+================================================+
| LINSOL_A  | A     | The square matrix A: sparse, (n x n). .        |
+-----------+-------+------------------------------------------------+
| LINSOL_B  | B     | The right-hand-side matrix b: dense, (n x m) . |
+-----------+-------+------------------------------------------------+

";

%feature("docstring")  casadi::linsolIn(const std::vector< M > &args, const
std::string &arg_s0="", const std::string &arg_s1="") " ";

%feature("docstring")  casadi::poly_coeff(const SX &ex, const SX &x) "

extracts polynomial coefficients from an expression

ex Scalar expression that represents a polynomial  x Scalar symbol that the
polynomial is build up with

";

%feature("docstring")  casadi::transpose(const Sparsity &a) "

Transpose the pattern.

";

%feature("docstring")  casadi::transpose(const MX &x) "

Transpose an expression.

";

%feature("docstring")  casadi::transpose(const Matrix< DataType > &x) "

Transpose of a matrix.

";

%feature("docstring")  casadi::bvec_or(bvec_t *s, bvec_t &r, int begin, int
end) " [INTERNAL] ";

%feature("docstring")  casadi::linsolOut(const std::string &arg_s0="", const
M &arg_m0=M()) "

Output arguments of a linear solver

>Output scheme: casadi::LinsolOutput (LINSOL_NUM_OUT = 2) [linsolOut]
+-----------+-------+----------------------------------------------+
| Full name | Short |                 Description                  |
+===========+=======+==============================================+
| LINSOL_X  | X     | Solution to the linear system of equations . |
+-----------+-------+----------------------------------------------+

";

%feature("docstring")  casadi::linsolOut(const std::vector< M > &args, const
std::string &arg_s0="") " ";

%feature("docstring")  casadi::sqrt(const T &x) " [INTERNAL]  Pre-C99
elementary functions from the 'math.h' ('cmath') header.

";

%feature("docstring")  casadi::sort(const std::vector< T > &values,
std::vector< T > &sorted_values, std::vector< int > &indices, bool
invert_indices=false) " [INTERNAL]  Sort the data in a vector.

Parameters:
-----------

values:  the vector that needs sorting

sorted_values:  the sorted vector

indices:  The indices such that 'sorted_values= values[indices]'

invert_indices:  Output indices such that 'sorted_values[indices=values'

";

%feature("docstring")  casadi::print(const std::vector< T > &v, std::ostream
&stream=std::cout) " [INTERNAL]  Print description.

";

%feature("docstring")  casadi::tan(const T &x) " [INTERNAL]  Pre-C99
elementary functions from the 'math.h' ('cmath') header.

";

%feature("docstring")  casadi::extractShared(std::vector< MX > &ex,
std::vector< MX > &v, std::vector< MX > &vdef, const std::string
&v_prefix="v_", const std::string &v_suffix="") "

Extract shared subexpressions from an set of expressions.

";

%feature("docstring")  casadi::extractShared(std::vector< SXElement > &ex,
std::vector< SXElement > &v, std::vector< SXElement > &vdef, const
std::string &v_prefix="v_", const std::string &v_suffix="") "

Extract shared subexpressions from an set of expressions.

";

%feature("docstring")  casadi::vertcat(const std::vector< Sparsity > &v) "

Concatenate a list of sparsities vertically Alternative terminology:
vertical stack, vstack, vertical append, [a;b].

";

%feature("docstring")  casadi::vertcat(const Sparsity &a, const Sparsity &b)
" [INTERNAL]   Reshape the sparsity pattern keeping the relative location of
the nonzeros.

";

%feature("docstring")  casadi::vertcat(const MX &a, const MX &b) "
[INTERNAL]  concatenate horizontally, two matrices

";

%feature("docstring")  casadi::vertcat(const std::vector< MX > &comp) "

concatenate horizontally

vertcat(vertsplit(x,...)) = x

";

%feature("docstring")  casadi::vertcat(const std::vector< Matrix< DataType >
> &v) "

Concatenate a list of matrices horizontally Alternative terminology:
horizontal stack, hstack, horizontal append, [a b].

vertcat(vertsplit(x,...)) = x

";

%feature("docstring")  casadi::vertcat(const Matrix< DataType > &x, const
Matrix< DataType > &y) " [INTERNAL] ";

%feature("docstring")  casadi::vertcat(const vector< MX > &x) " ";

%feature("docstring")  casadi::matrix_expand(const MX &e, const std::vector<
MX > &boundary=std::vector< MX >()) "

Expand MX graph to SXFunction call.

Expand the given expression e, optionally supplying expressions contained in
it at which expansion should stop.

";

%feature("docstring")  casadi::matrix_expand(const std::vector< MX > &e,
const std::vector< MX > &boundary=std::vector< MX >()) "

Expand MX graph to SXFunction call.

Expand the given expression e, optionally supplying expressions contained in
it at which expansion should stop.

";

%feature("docstring")  casadi::qcqpIn(const std::string &arg_s0="", const M
&arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const
std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="",
const M &arg_m3=M(), const std::string &arg_s4="", const M &arg_m4=M(),
const std::string &arg_s5="", const M &arg_m5=M(), const std::string
&arg_s6="", const M &arg_m6=M(), const std::string &arg_s7="", const M
&arg_m7=M(), const std::string &arg_s8="", const M &arg_m8=M(), const
std::string &arg_s9="", const M &arg_m9=M(), const std::string &arg_s10="",
const M &arg_m10=M(), const std::string &arg_s11="", const M &arg_m11=M()) "

Input arguments of a QP problem

>Input scheme: casadi::QCQPSolverInput (QCQP_SOLVER_NUM_IN = 13) [qcqpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QCQP_SOLVER_H          | h                      | The square matrix H:   |
|                        |                        | sparse, (n x n). Only  |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical.     |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_G          | g                      | The vector g: dense,   |
|                        |                        | (n x 1) .              |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_P          | p                      | The horizontal stack   |
|                        |                        | of all Pi. Each Pi is  |
|                        |                        | sparse (n x n). Only   |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical.     |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_Q          | q                      | The vertical stack of  |
|                        |                        | all qi: dense, (nq n x |
|                        |                        | 1) .                   |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_R          | r                      | The vertical stack of  |
|                        |                        | all scalars ri (nq x   |
|                        |                        | 1) .                   |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_A          | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_LBA        | lba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_UBA        | uba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_LBX        | lbx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_UBX        | ubx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_X0         | x0                     | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QCQP_SOLVER_LAM_X0     | lam_x0                 | dense                  |
+------------------------+------------------------+------------------------+

";

%feature("docstring")  casadi::qcqpIn(const std::vector< M > &args, const
std::string &arg_s0="", const std::string &arg_s1="", const std::string
&arg_s2="", const std::string &arg_s3="", const std::string &arg_s4="",
const std::string &arg_s5="", const std::string &arg_s6="", const
std::string &arg_s7="", const std::string &arg_s8="", const std::string
&arg_s9="", const std::string &arg_s10="", const std::string &arg_s11="") "
";

%feature("docstring")  casadi::applymap(T(*f)(const T &), const std::vector<
T > &) " [INTERNAL]  Apply a function f to each element in a vector

";

%feature("docstring")  casadi::applymap(void(*f)(T &), std::vector< T > &) "
[INTERNAL]  Apply a function f to each element in a vector

";

%feature("docstring")  casadi::any(const Matrix< DataType > &x) " ";

%feature("docstring")  casadi::isBadChar(char c) " ";

%feature("docstring")  casadi::dgetrs_(char *trans, int *n, int *nrhs,
double *a, int *lda, int *ipiv, double *b, int *ldb, int *info) " [INTERNAL]
Solve a system of equation using an LU-factorized matrix (lapack)

";

%feature("docstring")  casadi::fmin(const T &x, const T &n) " [INTERNAL]
C99 elementary functions from the 'math.h' header.

";

%feature("docstring")  casadi::fmin(const T &x, double n) " [INTERNAL]  C99
elementary functions from the 'math.h' header.

";

%feature("docstring")  casadi::fmin(double x, const T &n) " [INTERNAL]  C99
elementary functions from the 'math.h' header.

";

%feature("docstring")  casadi::fmin(double x, double y) " [INTERNAL]  throw
() C99 elementary functions from the 'math.h' header.

";

%feature("docstring")  casadi::fmin(int x, int y) " [INTERNAL]  throw () C99
elementary functions from the 'math.h' header.

";

%feature("docstring")  casadi::ProfilingType() "[INTERNAL] ";

%feature("docstring")  casadi::getRepresentation(const std::vector< T > &v)
" [INTERNAL]  Print representation to string.

";

%feature("docstring")  casadi::lpStruct(const std::string &arg_s0="", const
M &arg_m0=M()) "

Structure specification of an LP

";

%feature("docstring")  casadi::lpStruct(const std::vector< M > &args, const
std::string &arg_s0="") " ";

%feature("docstring")  casadi::describeInput(InputOutputScheme scheme, int
i) " ";

%feature("docstring")  casadi::exp(const T &x) " [INTERNAL]  Pre-C99
elementary functions from the 'math.h' ('cmath') header.

";

%feature("docstring")  casadi::linspace(const GenericMatrix< MatType > &a,
const GenericMatrix< MatType > &b, int nsteps) "

Matlab's linspace command.

";

%feature("docstring")  casadi::linspace(std::vector< T > &v, const F &first,
const L &last) " [INTERNAL]  Matlab's linspace.

";

%feature("docstring")  casadi::qpStruct(const std::string &arg_s0="", const
M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M()) "

Structure specification of a QP

";

%feature("docstring")  casadi::qpStruct(const std::vector< M > &args, const
std::string &arg_s0="", const std::string &arg_s1="") " ";

%feature("docstring")  casadi::dense(const MX &x) "

create a clipped view into a matrix Create a sparse matrix from a dense
matrix A, with sparsity pattern sp

MX clip(const MX& A, const Sparsity& sp) { Join the sparsity patterns
std::vector<int> mapping; Sparsity sp =
A.sparsity().patternIntersection(sp,mapping);

Split up the mapping std::vector<int> nzA,nzB;

Copy sparsity for(int k=0; k<mapping.size(); ++k){ if(mapping[k]<0){
nzA.push_back(k); } else if(mapping[k]>0){ nzB.push_back(k); } else { throw
CasadiException(\"Pattern intersection not empty\"); } }

Create mapping MX ret; ret.assignNode(new Mapping(sp));
ret->assign(A,range(nzA.size()),nzA); ret->assign(B,range(nzB.size()),nzB);
return ret;

}

Make the matrix dense if not already

";

%feature("docstring")  casadi::dense(const Matrix< DataType > &A) "

Make a matrix dense.

";

%feature("docstring")  casadi::casadi_trans(const real_t *x, const int
*sp_x, real_t *y, const int *sp_y, int *tmp) " [INTERNAL]  TRANS: y <-
trans(x)

";

%feature("docstring")  casadi::stabilizedQpIn(const std::string &arg_s0="",
const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(),
const std::string &arg_s2="", const M &arg_m2=M(), const std::string
&arg_s3="", const M &arg_m3=M(), const std::string &arg_s4="", const M
&arg_m4=M(), const std::string &arg_s5="", const M &arg_m5=M(), const
std::string &arg_s6="", const M &arg_m6=M(), const std::string &arg_s7="",
const M &arg_m7=M(), const std::string &arg_s8="", const M &arg_m8=M(),
const std::string &arg_s9="", const M &arg_m9=M(), const std::string
&arg_s10="", const M &arg_m10=M(), const std::string &arg_s11="", const M
&arg_m11=M()) "

Input arguments of a QP problem

>Input scheme: casadi::StabilizedQPSolverInput (STABILIZED_QP_SOLVER_NUM_IN = 13) [stabilizedQpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| STABILIZED_QP_SOLVER_H | h                      | The square matrix H:   |
|                        |                        | sparse, (n x n). Only  |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical.     |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_G | g                      | The vector g: dense,   |
|                        |                        | (n x 1) .              |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_A | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_L | lba                    | dense, (nc x 1)        |
| BA                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_U | uba                    | dense, (nc x 1)        |
| BA                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_L | lbx                    | dense, (n x 1)         |
| BX                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_U | ubx                    | dense, (n x 1)         |
| BX                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_X | x0                     | dense, (n x 1)         |
| 0                      |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_L | lam_x0                 | dense                  |
| AM_X0                  |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_M | muR                    | dense (1 x 1)          |
| UR                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_M | muE                    | dense (nc x 1)         |
| UE                     |                        |                        |
+------------------------+------------------------+------------------------+
| STABILIZED_QP_SOLVER_M | mu                     | dense (nc x 1)         |
| U                      |                        |                        |
+------------------------+------------------------+------------------------+

";

%feature("docstring")  casadi::stabilizedQpIn(const std::vector< M > &args,
const std::string &arg_s0="", const std::string &arg_s1="", const
std::string &arg_s2="", const std::string &arg_s3="", const std::string
&arg_s4="", const std::string &arg_s5="", const std::string &arg_s6="",
const std::string &arg_s7="", const std::string &arg_s8="", const
std::string &arg_s9="", const std::string &arg_s10="", const std::string
&arg_s11="") " ";

%feature("docstring")  casadi::norm_F(const MX &x) "

Frobenius norm.

";

%feature("docstring")  casadi::norm_F(const Matrix< DataType > &x) "

Frobenius norm.

";

%feature("docstring")  casadi::blockmatrix(SX array[n][m]) " [INTERNAL]
Create a block matrix.

Return matrix

loop over cols

Create a col

append components to the col

append col to matrix

Return matrix

loop over cols

Create a col

append components to the col

append col to matrix ";

%feature("docstring")  casadi::blockmatrix(SX array[n]) " [INTERNAL]  Create
a block matrix (vector)

Return matrix

loop over cols

append components

Return matrix

loop over cols

append components ";

%feature("docstring")  casadi::gradFOut(const std::string &arg_s0="", const
M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const
std::string &arg_s2="", const M &arg_m2=M()) "

Output arguments of an NLP objective gradient function

>Output scheme: casadi::GradFOutput (GRADF_NUM_OUT = 4) [gradFOut]
+------------+-------+-------------------------------+
| Full name  | Short |          Description          |
+============+=======+===============================+
| GRADF_GRAD | grad  | Jacobian of the constraints . |
+------------+-------+-------------------------------+
| GRADF_F    | f     | Objective function .          |
+------------+-------+-------------------------------+
| GRADF_G    | g     | Constraint function .         |
+------------+-------+-------------------------------+

";

%feature("docstring")  casadi::gradFOut(const std::vector< M > &args, const
std::string &arg_s0="", const std::string &arg_s1="", const std::string
&arg_s2="") " ";

%feature("docstring")  casadi::sumAll(const MX &x) "

Return summation of all elements.

";

%feature("docstring")  casadi::sumAll(const Matrix< DataType > &x) "

Return summation of all elements.

";

%feature("docstring")  casadi::casadi_asum(int n, const real_t *x, int
inc_x) " [INTERNAL]  ASUM: ||x||_1 -> return.

";

%feature("docstring")  casadi::norm_1(const MX &x) "

1-norm

";

%feature("docstring")  casadi::norm_1(const Matrix< DataType > &x) "

1-norm

";

%feature("docstring")  casadi::norm_1(const std::vector< T > &x) "
[INTERNAL] ";

%feature("docstring")  casadi::norm_2(const MX &x) "

2-norm

";

%feature("docstring")  casadi::norm_2(const Matrix< DataType > &x) "

2-norm

";

%feature("docstring")  casadi::norm_2(const std::vector< T > &x) "
[INTERNAL] ";

%feature("docstring")  casadi::floor(const T &x) " [INTERNAL]  Pre-C99
elementary functions from the 'math.h' ('cmath') header.

";

%feature("docstring")  casadi::nlpOut(const std::string &arg_s0="", const M
&arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M()) "

Output arguments of an NLP function

>Output scheme: casadi::NLPOutput (NL_NUM_OUT = 3) [nlpOut]
+-----------+-------+-----------------------+
| Full name | Short |      Description      |
+===========+=======+=======================+
| NL_F      | f     | Objective function .  |
+-----------+-------+-----------------------+
| NL_G      | g     | Constraint function . |
+-----------+-------+-----------------------+

";

%feature("docstring")  casadi::nlpOut(const std::vector< M > &args, const
std::string &arg_s0="", const std::string &arg_s1="") " ";

%feature("docstring")  casadi::isnan(double x) " [INTERNAL]  throw () C99
elementary functions from the 'math.h' header.

";

%feature("docstring")  casadi::dgeqrf_(int *m, int *n, double *a, int *lda,
double *tau, double *work, int *lwork, int *info) " [INTERNAL]  QR-factorize
dense matrix (lapack)

";

%feature("docstring")  casadi::dense_mul_nt(int n, int m, int l, const
double *A, const double *B, double *C) " [INTERNAL] ";

%feature("docstring")  casadi::nlpIn(const std::string &arg_s0="", const M
&arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M()) "

Input arguments of an NLP function

>Input scheme: casadi::NLPInput (NL_NUM_IN = 3) [nlpIn]
+-----------+-------+---------------------+
| Full name | Short |     Description     |
+===========+=======+=====================+
| NL_X      | x     | Decision variable . |
+-----------+-------+---------------------+
| NL_P      | p     | Fixed parameter .   |
+-----------+-------+---------------------+

";

%feature("docstring")  casadi::nlpIn(const std::vector< M > &args, const
std::string &arg_s0="", const std::string &arg_s1="") " ";

%feature("docstring")  casadi::copysign(const T &x, const T &y) " [INTERNAL]
copysign function

";

%feature("docstring")  casadi::copysign(double x, double y) " [INTERNAL]
copysign function

";

%feature("docstring")  casadi::fmax(const T &x, const T &n) " [INTERNAL]
C99 elementary functions from the 'math.h' header.

";

%feature("docstring")  casadi::fmax(const T &x, double n) " [INTERNAL]  C99
elementary functions from the 'math.h' header.

";

%feature("docstring")  casadi::fmax(double x, const T &n) " [INTERNAL]  C99
elementary functions from the 'math.h' header.

";

%feature("docstring")  casadi::fmax(double x, double y) " [INTERNAL]  throw
() C99 elementary functions from the 'math.h' header.

";

%feature("docstring")  casadi::fmax(int x, int y) " [INTERNAL]  throw () C99
elementary functions from the 'math.h' header.

";

%feature("docstring")  casadi::socpStruct(const std::string &arg_s0="",
const M &arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M()) "

Structure specification of an SOCP

";

%feature("docstring")  casadi::socpStruct(const std::vector< M > &args,
const std::string &arg_s0="", const std::string &arg_s1="") " ";

%feature("docstring")  casadi::ptrToLong(T *a) " [INTERNAL] ";

%feature("docstring")  casadi::getSchemeEntryEnumName(InputOutputScheme
scheme, int i) " ";

%feature("docstring")  casadi::getDescription(const std::vector< T > &v) "
[INTERNAL]  Print description to string.

";

%feature("docstring")  casadi::asin(const T &x) " [INTERNAL]  Pre-C99
elementary functions from the 'math.h' ('cmath') header.

";

%feature("docstring")  casadi::get_bvec_t(std::vector< double > &v) "
[INTERNAL]  Get an pointer of sets of booleans from a double vector

";

%feature("docstring")  casadi::get_bvec_t(const std::vector< double > &v) "
[INTERNAL]  Get an pointer of sets of booleans from a double vector.

";

%feature("docstring")  casadi::get_bvec_t(std::vector< T > &v) " [INTERNAL]
Get an pointer of sets of booleans from a double vector.

";

%feature("docstring")  casadi::get_bvec_t(const std::vector< T > &v) "
[INTERNAL]  Get an pointer of sets of booleans from a double vector.

";

%feature("docstring")  casadi::qpIn(const std::string &arg_s0="", const M
&arg_m0=M(), const std::string &arg_s1="", const M &arg_m1=M(), const
std::string &arg_s2="", const M &arg_m2=M(), const std::string &arg_s3="",
const M &arg_m3=M(), const std::string &arg_s4="", const M &arg_m4=M(),
const std::string &arg_s5="", const M &arg_m5=M(), const std::string
&arg_s6="", const M &arg_m6=M(), const std::string &arg_s7="", const M
&arg_m7=M(), const std::string &arg_s8="", const M &arg_m8=M()) "

Input arguments of a QP problem

>Input scheme: casadi::QPSolverInput (QP_SOLVER_NUM_IN = 10) [qpIn]
+------------------------+------------------------+------------------------+
|       Full name        |         Short          |      Description       |
+========================+========================+========================+
| QP_SOLVER_H            | h                      | The square matrix H:   |
|                        |                        | sparse, (n x n). Only  |
|                        |                        | the lower triangular   |
|                        |                        | part is actually used. |
|                        |                        | The matrix is assumed  |
|                        |                        | to be symmetrical.     |
+------------------------+------------------------+------------------------+
| QP_SOLVER_G            | g                      | The vector g: dense,   |
|                        |                        | (n x 1) .              |
+------------------------+------------------------+------------------------+
| QP_SOLVER_A            | a                      | The matrix A: sparse,  |
|                        |                        | (nc x n) - product     |
|                        |                        | with x must be dense.  |
|                        |                        | .                      |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LBA          | lba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_UBA          | uba                    | dense, (nc x 1)        |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LBX          | lbx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_UBX          | ubx                    | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_X0           | x0                     | dense, (n x 1)         |
+------------------------+------------------------+------------------------+
| QP_SOLVER_LAM_X0       | lam_x0                 | dense                  |
+------------------------+------------------------+------------------------+

";

%feature("docstring")  casadi::qpIn(const std::vector< M > &args, const
std::string &arg_s0="", const std::string &arg_s1="", const std::string
&arg_s2="", const std::string &arg_s3="", const std::string &arg_s4="",
const std::string &arg_s5="", const std::string &arg_s6="", const
std::string &arg_s7="", const std::string &arg_s8="") " ";

%feature("docstring")  casadi::norm_inf(const MX &x) "

Infinity-norm.

";

%feature("docstring")  casadi::norm_inf(const Matrix< DataType > &x) "

Infinity-norm.

";

%feature("docstring")  casadi::norm_inf(const std::vector< T > &x) "
[INTERNAL] ";

%feature("docstring")  casadi::det(const Matrix< DataType > &a) " ";

%feature("docstring")  casadi::det(const MX &A) "

Matrix determinant (experimental)

";

%feature("docstring")  casadi::gauss_quadrature(SX f, const SX &x, const SX
&a, const SX &b, int order=5, const SX &w=SX()) "

Integrate f from a to b using Gaussian quadrature with n points.

";

%feature("docstring")  casadi::has_empty(const vector< MX > &x) " ";

%feature("docstring")  casadi::substituteInPlace(const std::vector< MX > &v,
std::vector< MX > &vdef, bool reverse=false) " [INTERNAL]  Inplace
substitution Substitute variables v out of the expressions vdef
sequentially.

";

%feature("docstring")  casadi::substituteInPlace(const std::vector< MX > &v,
std::vector< MX > &vdef, std::vector< MX > &ex, bool reverse=false) "
[INTERNAL]  Inplace substitution with piggyback expressions Substitute
variables v out of the expressions vdef sequentially, as well as out of a
number of other expressions piggyback.

";

%feature("docstring")  casadi::substituteInPlace(const SX &v, SX &vdef, bool
reverse=false) "

Substitute variable var out of or into an expression expr.

";

%feature("docstring")  casadi::substituteInPlace(const SX &v, SX &vdef,
std::vector< SX > &ex, bool reverse=false) "

Substitute variable var out of or into an expression expr, with an arbitrary
number of other expressions piggyback.

";

%feature("docstring")  casadi::substituteInPlace(const std::vector< SX > &v,
std::vector< SX > &vdef, std::vector< SX > &ex, bool reverse=false) "

Substitute variable var out of or into an expression expr, with an arbitrary
number of other expressions piggyback (vector version)

";

%feature("docstring")  casadi::casadi_fill(int n, real_t alpha, real_t *x,
int inc_x) " [INTERNAL]  FILL: x <- alpha.

";

%feature("docstring")  casadi::getSchemeEntryName(InputOutputScheme scheme,
int i) " ";


// File: namespaceIpopt.xml


// File: namespacestd.xml


// File: 01_8dox.xml


// File: 02_8dox.xml


// File: 03_8dox.xml


// File: 04_8dox.xml


// File: 05_8dox.xml


// File: 06_8dox.xml


// File: a0__schemes_8hpp.xml


// File: all_8hpp.xml


// File: assertion_8cpp.xml


// File: casadi_2symbolic_2mx_2assertion_8hpp.xml


// File: docs_2api_2examples_2misc_2assertion_8hpp.xml


// File: autogenerated_8cpp.xml


// File: b0__options_8hpp.xml


// File: binary__mx_8hpp.xml


// File: binary__mx__impl_8hpp.xml


// File: binary__sx_8hpp.xml


// File: c0__monitors_8hpp.xml


// File: call__function_8cpp.xml


// File: call__function_8hpp.xml


// File: callback_8hpp.xml


// File: casadi_8hpp.xml


// File: casadi__calculus_8hpp.xml


// File: casadi__common_8hpp.xml


// File: casadi__exception_8hpp.xml


// File: casadi__instantiations_8cpp.xml


// File: casadi__limits_8hpp.xml


// File: casadi__math_8hpp.xml


// File: casadi__meta_8cpp.xml


// File: casadi__meta_8hpp.xml


// File: casadi__options_8cpp.xml


// File: casadi__options_8hpp.xml


// File: casadi__types_8hpp.xml


// File: code__generator_8cpp.xml


// File: code__generator_8hpp.xml


// File: collocation__integrator_8cpp.xml


// File: collocation__integrator_8hpp.xml


// File: collocation__integrator__internal_8cpp.xml


// File: collocation__integrator__internal_8hpp.xml


// File: coloring_8hpp.xml


// File: concat_8cpp.xml


// File: concat_8hpp.xml


// File: constant__mx_8cpp.xml


// File: constant__mx_8hpp.xml


// File: constant__sx_8hpp.xml


// File: control__simulator_8cpp.xml


// File: control__simulator_8hpp.xml


// File: control__simulator__internal_8cpp.xml


// File: control__simulator__internal_8hpp.xml


// File: controlsimulator_8hpp.xml


// File: countNodes_8hpp.xml


// File: cplex__internal_8cpp.xml


// File: cplex__internal_8hpp.xml


// File: cplex__solver_8cpp.xml


// File: cplex__solver_8hpp.xml


// File: createParent_8hpp.xml


// File: csparse_8cpp.xml


// File: csparse_8hpp.xml


// File: csparse__cholesky_8cpp.xml


// File: csparse__cholesky_8hpp.xml


// File: csparse__cholesky__internal_8cpp.xml


// File: csparse__cholesky__internal_8hpp.xml


// File: csparse__internal_8cpp.xml


// File: csparse__internal_8hpp.xml


// File: ctemplate_8cpp.xml
%feature("docstring")  main(int argc, char *argv[]) "
This file does absolutely nothing but including all headers ";


// File: custom__function_8cpp.xml


// File: custom__function_8hpp.xml


// File: custom__function__internal_8cpp.xml


// File: custom__function__internal_8hpp.xml


// File: customfunction_8hpp.xml


// File: customfunction__c_8hpp.xml


// File: cvodes__integrator_8cpp.xml


// File: cvodes__integrator_8hpp.xml


// File: cvodes__internal_8cpp.xml


// File: cvodes__internal_8hpp.xml


// File: d0__stats_8hpp.xml


// File: determinant_8cpp.xml


// File: determinant_8hpp.xml


// File: direct__collocation_8cpp.xml


// File: direct__collocation_8hpp.xml


// File: direct__collocation__internal_8cpp.xml


// File: direct__collocation__internal_8hpp.xml


// File: direct__multiple__shooting_8cpp.xml


// File: direct__multiple__shooting_8hpp.xml


// File: direct__multiple__shooting__internal_8cpp.xml


// File: direct__multiple__shooting__internal_8hpp.xml


// File: direct__single__shooting_8cpp.xml


// File: direct__single__shooting_8hpp.xml


// File: direct__single__shooting__internal_8cpp.xml


// File: direct__single__shooting__internal_8hpp.xml


// File: dotdraw_8hpp.xml


// File: dple__internal_8cpp.xml


// File: dple__internal_8hpp.xml


// File: dple__solver_8cpp.xml


// File: dple__solver_8hpp.xml


// File: dsdp__internal_8cpp.xml


// File: dsdp__internal_8hpp.xml


// File: dsdp__solver_8cpp.xml


// File: dsdp__solver_8hpp.xml


// File: dulmageMendelsohn_8hpp.xml


// File: e0__diagram_8hpp.xml


// File: exacthessian_8hpp.xml


// File: expand_8hpp.xml


// File: expression__tools_8hpp.xml


// File: external__function_8cpp.xml


// File: external__function_8hpp.xml


// File: external__function__internal_8cpp.xml


// File: external__function__internal_8hpp.xml


// File: fixed__step__integrator_8cpp.xml


// File: fixed__step__integrator_8hpp.xml


// File: fixed__step__integrator__internal_8cpp.xml


// File: fixed__step__integrator__internal_8hpp.xml


// File: function_8cpp.xml


// File: function_8hpp.xml


// File: function__internal_8cpp.xml


// File: function__internal_8hpp.xml


// File: functor_8cpp.xml


// File: functor_8hpp.xml


// File: functor__internal_8cpp.xml


// File: functor__internal_8hpp.xml


// File: generateCode_8hpp.xml


// File: generic__expression_8hpp.xml


// File: generic__expression__tools_8hpp.xml


// File: generic__matrix_8hpp.xml


// File: generic__matrix__tools_8hpp.xml


// File: generic__type_8cpp.xml


// File: generic__type_8hpp.xml


// File: generic__type__internal_8hpp.xml


// File: getnonzeros_8cpp.xml


// File: getnonzeros_8hpp.xml


// File: homotopy__nlp__internal_8cpp.xml


// File: homotopy__nlp__internal_8hpp.xml


// File: homotopy__nlp__solver_8cpp.xml


// File: homotopy__nlp__solver_8hpp.xml


// File: idas_8hpp.xml


// File: idas__integrator_8cpp.xml


// File: idas__integrator_8hpp.xml


// File: idas__internal_8cpp.xml


// File: idas__internal_8hpp.xml


// File: implicit__fixed__step__integrator_8cpp.xml


// File: implicit__fixed__step__integrator_8hpp.xml


// File: implicit__fixed__step__integrator__internal_8cpp.xml


// File: implicit__fixed__step__integrator__internal_8hpp.xml


// File: implicit__function_8cpp.xml


// File: implicit__function_8hpp.xml


// File: implicit__function__internal_8cpp.xml


// File: implicit__function__internal_8hpp.xml


// File: inner__prod_8cpp.xml


// File: inner__prod_8hpp.xml


// File: integration__tools_8cpp.xml


// File: integration__tools_8hpp.xml


// File: integrator_8cpp.xml


// File: integrator_8hpp.xml


// File: integrator__internal_8cpp.xml


// File: integrator__internal_8hpp.xml


// File: inverse_8cpp.xml


// File: inverse_8hpp.xml


// File: io__interface_8hpp.xml


// File: io__scheme_8cpp.xml


// File: io__scheme_8hpp.xml


// File: io__scheme__internal_8cpp.xml


// File: io__scheme__internal_8hpp.xml


// File: io__scheme__vector_8hpp.xml


// File: ipopt_8hpp.xml


// File: ipopt__internal_8cpp.xml


// File: ipopt__internal_8hpp.xml


// File: ipopt__nlp_8cpp.xml


// File: ipopt__nlp_8hpp.xml


// File: ipopt__solver_8cpp.xml


// File: ipopt__solver_8hpp.xml


// File: jacSparsity_8hpp.xml


// File: kinsol__internal_8cpp.xml


// File: kinsol__internal_8hpp.xml


// File: kinsol__solver_8cpp.xml


// File: kinsol__solver_8hpp.xml


// File: KinsolSolver_8hpp.xml


// File: knitro__internal_8cpp.xml


// File: knitro__internal_8hpp.xml


// File: knitro__solver_8cpp.xml


// File: knitro__solver_8hpp.xml


// File: lapack__lu__dense_8cpp.xml


// File: lapack__lu__dense_8hpp.xml


// File: lapack__qr__dense_8cpp.xml


// File: lapack__qr__dense_8hpp.xml


// File: limitPrinting_8hpp.xml


// File: limitPrinting__c_8hpp.xml


// File: linear__solver_8cpp.xml


// File: linear__solver_8hpp.xml


// File: linear__solver__internal_8cpp.xml


// File: linear__solver__internal_8hpp.xml


// File: LinearSolver_8hpp.xml


// File: lp__internal_8cpp.xml


// File: lp__internal_8hpp.xml


// File: lp__solver_8cpp.xml


// File: lp__solver_8hpp.xml


// File: main_8dox.xml


// File: matrix_8hpp.xml


// File: matrix__expand_8hpp.xml


// File: matrix__impl_8hpp.xml


// File: matrix__tools_8cpp.xml


// File: matrix__tools_8hpp.xml


// File: multiple__output_8cpp.xml


// File: multiple__output_8hpp.xml


// File: multiplication_8hpp.xml


// File: multiplication__impl_8hpp.xml


// File: mx_8cpp.xml


// File: mx_8hpp.xml


// File: mx__function_8cpp.xml


// File: mx__function_8hpp.xml


// File: mx__function__internal_8cpp.xml


// File: mx__function__internal_8hpp.xml


// File: mx__node_8cpp.xml


// File: mx__node_8hpp.xml


// File: mx__tools_8cpp.xml


// File: mx__tools_8hpp.xml


// File: newton__implicit__internal_8cpp.xml


// File: newton__implicit__internal_8hpp.xml


// File: newton__implicit__solver_8cpp.xml


// File: newton__implicit__solver_8hpp.xml


// File: NewtonImplicitSolver_8hpp.xml


// File: nlp__implicit__internal_8cpp.xml


// File: nlp__implicit__internal_8hpp.xml


// File: nlp__implicit__solver_8cpp.xml


// File: nlp__implicit__solver_8hpp.xml


// File: nlp__qp__internal_8cpp.xml


// File: nlp__qp__internal_8hpp.xml


// File: nlp__qp__solver_8cpp.xml


// File: nlp__qp__solver_8hpp.xml


// File: nlp__solver_8cpp.xml


// File: nlp__solver_8hpp.xml


// File: nlp__solver__internal_8cpp.xml


// File: nlp__solver__internal_8hpp.xml


// File: NLPImplicitSolver_8hpp.xml


// File: nonzeros_8hpp.xml


// File: norm_8cpp.xml


// File: norm_8hpp.xml


// File: nullspace_8cpp.xml


// File: nullspace_8hpp.xml


// File: nullspace__internal_8cpp.xml


// File: nullspace__internal_8hpp.xml


// File: ocp__solver_8cpp.xml


// File: ocp__solver_8hpp.xml


// File: ocp__solver__internal_8cpp.xml


// File: ocp__solver__internal_8hpp.xml


// File: old__collocation__integrator_8cpp.xml


// File: old__collocation__integrator_8hpp.xml


// File: old__collocation__integrator__internal_8cpp.xml


// File: old__collocation__integrator__internal_8hpp.xml


// File: ooqp__internal_8cpp.xml


// File: ooqp__internal_8hpp.xml


// File: ooqp__solver_8cpp.xml


// File: ooqp__solver_8hpp.xml


// File: options__functionality_8cpp.xml


// File: options__functionality_8hpp.xml


// File: parallelizer_8cpp.xml


// File: casadi_2symbolic_2function_2parallelizer_8hpp.xml


// File: docs_2api_2examples_2Function_2parallelizer_8hpp.xml


// File: parallelizer__internal_8cpp.xml


// File: parallelizer__internal_8hpp.xml


// File: polynomial_8cpp.xml


// File: polynomial_8hpp.xml


// File: printable__object_8cpp.xml


// File: printable__object_8hpp.xml


// File: printme_8hpp.xml


// File: profiling_8cpp.xml


// File: profiling_8hpp.xml


// File: psd__indef__dple__internal_8cpp.xml


// File: psd__indef__dple__internal_8hpp.xml


// File: psd__indef__dple__solver_8cpp.xml


// File: psd__indef__dple__solver_8hpp.xml


// File: qcqp__qp__internal_8cpp.xml


// File: qcqp__qp__internal_8hpp.xml


// File: qcqp__qp__solver_8cpp.xml


// File: qcqp__qp__solver_8hpp.xml


// File: qcqp__solver_8cpp.xml


// File: qcqp__solver_8hpp.xml


// File: qcqp__solver__internal_8cpp.xml


// File: qcqp__solver__internal_8hpp.xml


// File: qp__lp__internal_8cpp.xml


// File: qp__lp__internal_8hpp.xml


// File: qp__lp__solver_8cpp.xml


// File: qp__lp__solver_8hpp.xml


// File: qp__solver_8cpp.xml


// File: qp__solver_8hpp.xml


// File: qp__solver__internal_8cpp.xml


// File: qp__solver__internal_8hpp.xml


// File: qp__stabilizer_8cpp.xml


// File: qp__stabilizer_8hpp.xml


// File: qp__stabilizer__internal_8cpp.xml


// File: qp__stabilizer__internal_8hpp.xml


// File: qpoases__internal_8cpp.xml


// File: qpoases__internal_8hpp.xml


// File: qpoases__solver_8cpp.xml


// File: qpoases__solver_8hpp.xml


// File: range_8hpp.xml


// File: reshape_8cpp.xml


// File: reshape_8hpp.xml


// File: rk__integrator_8cpp.xml


// File: rk__integrator_8hpp.xml


// File: rk__integrator__internal_8cpp.xml


// File: rk__integrator__internal_8hpp.xml


// File: runtime_8hpp.xml


// File: scaled__nlp__internal_8cpp.xml


// File: scaled__nlp__internal_8hpp.xml


// File: scaled__nlp__solver_8cpp.xml


// File: scaled__qp__internal_8hpp.xml


// File: schemes__helpers_8hpp.xml


// File: schemes__metadata_8cpp.xml


// File: schemes__metadata_8hpp.xml


// File: scpgen_8cpp.xml


// File: scpgen_8hpp.xml


// File: scpgen__internal_8cpp.xml


// File: scpgen__internal_8hpp.xml


// File: sdp__sdqp__internal_8cpp.xml


// File: sdp__sdqp__internal_8hpp.xml


// File: sdp__sdqp__solver_8cpp.xml


// File: sdp__sdqp__solver_8hpp.xml


// File: sdp__socp__internal_8cpp.xml


// File: sdp__socp__internal_8hpp.xml


// File: sdp__socp__solver_8cpp.xml


// File: sdp__socp__solver_8hpp.xml


// File: sdp__solver_8cpp.xml


// File: sdp__solver_8hpp.xml


// File: sdp__solver__internal_8cpp.xml


// File: sdp__solver__internal_8hpp.xml


// File: sdqp__solver_8cpp.xml


// File: sdqp__solver_8hpp.xml


// File: sdqp__solver__internal_8cpp.xml


// File: sdqp__solver__internal_8hpp.xml


// File: set__sparse_8cpp.xml


// File: set__sparse_8hpp.xml


// File: setnonzeros_8hpp.xml


// File: setnonzeros__impl_8hpp.xml


// File: shared__object_8cpp.xml


// File: shared__object_8hpp.xml


// File: simple__homotopy__nlp__internal_8cpp.xml


// File: simple__homotopy__nlp__internal_8hpp.xml


// File: simple__homotopy__nlp__solver_8cpp.xml


// File: simple__homotopy__nlp__solver_8hpp.xml


// File: simple__indef__dple__internal_8cpp.xml


// File: simple__indef__dple__internal_8hpp.xml


// File: simple__indef__dple__solver_8cpp.xml


// File: simple__indef__dple__solver_8hpp.xml


// File: simulator_8cpp.xml


// File: casadi_2symbolic_2function_2simulator_8hpp.xml


// File: docs_2api_2examples_2integrators_2simulator_8hpp.xml


// File: simulator__internal_8cpp.xml


// File: simulator__internal_8hpp.xml


// File: slice_8cpp.xml


// File: slice_8hpp.xml


// File: slicot__tools_8cpp.xml
%feature("docstring")  mb03vy_(f_int *n, f_int *p, f_int *ilo, f_int *ihi, double *a, f_int *lda1, f_int *lda2, const double *tau, f_int *ldtau, double *dwork, f_int *ld_work, f_int *info) "
[INTERNAL] ";
%feature("docstring")  mb03wd_(char *job, char *compz, f_int *n, f_int *p,
f_int *ilo, f_int *ihi, f_int *iloz, f_int *ihiz, double *h, f_int *ldh1,
f_int *ldh2, double *z, f_int *ldz1, f_int *ldz2, double *wr, double *wi,
double *dwork, f_int *ld_work, f_int *info) " [INTERNAL] ";

%feature("docstring")  mb03vd_(f_int *n, f_int *p, f_int *ilo, f_int *ihi,
double *a, f_int *lda1, f_int *lda2, double *tau, f_int *ldtau, double
*dwork, f_int *info) " [INTERNAL] ";


// File: slicot__tools_8hpp.xml


// File: snopt__internal_8cpp.xml


// File: snopt__internal_8hpp.xml


// File: snopt__solver_8cpp.xml


// File: snopt__solver_8hpp.xml


// File: socp__qcqp__internal_8cpp.xml


// File: socp__qcqp__internal_8hpp.xml


// File: socp__qcqp__solver_8cpp.xml


// File: socp__qcqp__solver_8hpp.xml


// File: socp__solver_8cpp.xml


// File: socp__solver_8hpp.xml


// File: socp__solver__internal_8cpp.xml


// File: socp__solver__internal_8hpp.xml


// File: solve_8hpp.xml


// File: solve__impl_8hpp.xml


// File: sparse__storage_8hpp.xml


// File: sparse__storage__impl_8hpp.xml


// File: sparsity_8cpp.xml


// File: sparsity_8hpp.xml


// File: sparsity__internal_8cpp.xml


// File: sparsity__internal_8hpp.xml


// File: sparsity__tools_8cpp.xml


// File: sparsity__tools_8hpp.xml


// File: split_8cpp.xml


// File: split_8hpp.xml


// File: sqic__internal_8cpp.xml


// File: sqic__internal_8hpp.xml


// File: sqic__solver_8cpp.xml


// File: sqic__solver_8hpp.xml


// File: sqp__internal_8cpp.xml


// File: sqp__internal_8hpp.xml


// File: sqp__method_8cpp.xml


// File: sqp__method_8hpp.xml


// File: ssym_8hpp.xml


// File: stabilized__qp__solver_8cpp.xml


// File: stabilized__qp__solver_8hpp.xml


// File: stabilized__qp__solver__internal_8cpp.xml


// File: stabilized__qp__solver__internal_8hpp.xml


// File: stabilized__sqic__internal_8cpp.xml


// File: stabilized__sqic__internal_8hpp.xml


// File: stabilized__sqic__solver_8cpp.xml


// File: stabilized__sqic__solver_8hpp.xml


// File: stabilized__sqp__internal_8cpp.xml


// File: stabilized__sqp__internal_8hpp.xml


// File: stabilized__sqp__method_8cpp.xml


// File: stabilized__sqp__method_8hpp.xml


// File: std__vector__tools_8cpp.xml


// File: std__vector__tools_8hpp.xml


// File: stronglyConnectedComponents_8hpp.xml


// File: subassign_8cpp.xml


// File: subassign_8hpp.xml


// File: submatrix_8hpp.xml


// File: subref_8cpp.xml


// File: subref_8hpp.xml


// File: sundials__integrator_8cpp.xml


// File: sundials__integrator_8hpp.xml


// File: sundials__internal_8cpp.xml


// File: sundials__internal_8hpp.xml


// File: sx__element_8cpp.xml


// File: sx__element_8hpp.xml


// File: sx__function_8cpp.xml


// File: sx__function_8hpp.xml


// File: sx__function__internal_8cpp.xml


// File: sx__function__internal_8hpp.xml


// File: sx__node_8cpp.xml


// File: sx__node_8hpp.xml


// File: sx__tools_8cpp.xml


// File: sx__tools_8hpp.xml


// File: SXaddition_8hpp.xml


// File: SXFunction__constr__oct_8hpp.xml


// File: SXFunction__constr__py_8hpp.xml


// File: symbolic__mx_8cpp.xml


// File: symbolic__mx_8hpp.xml


// File: symbolic__nlp_8cpp.xml


// File: symbolic__nlp_8hpp.xml


// File: symbolic__ocp_8cpp.xml


// File: symbolic__ocp_8hpp.xml


// File: symbolic__qr_8cpp.xml


// File: symbolic__qr_8hpp.xml


// File: symbolic__qr__internal_8cpp.xml


// File: symbolic__qr__internal_8hpp.xml


// File: symbolic__sx_8hpp.xml


// File: symbolicsubstitution_8hpp.xml


// File: tolerance_8hpp.xml


// File: transpose_8cpp.xml


// File: transpose_8hpp.xml


// File: unary__mx_8cpp.xml


// File: unary__mx_8hpp.xml


// File: unary__sx_8hpp.xml


// File: variable_8cpp.xml


// File: variable_8hpp.xml


// File: variable__internal_8cpp.xml


// File: veccat_8hpp.xml


// File: weak__ref_8cpp.xml


// File: weak__ref_8hpp.xml


// File: worhp__internal_8cpp.xml


// File: worhp__internal_8hpp.xml


// File: worhp__solver_8cpp.xml


// File: worhp__solver_8hpp.xml


// File: wsnopt_8hpp.xml
%feature("docstring")  snopt_memb(int *INFO, const int *m, const int *n, const int *neA, const int *negCon, const int *nnCon, const int *nnJac, const int *nnObj, int *mincw, int *miniw, int *minrw, char *cw, const int *lencw, int *iw, const int *leniw, double *rw, const int *lenrw) "
[INTERNAL] ";
%feature("docstring")  snopt_init(const int *iPrint, const int *iSumm, char
*cw, const int *lencw, int *iw, const int *leniw, double *rw, const int
*lenrw) " [INTERNAL] ";

%feature("docstring")  snopt_spec(const int *iSpecs, int *INFO, char *cw,
const int *lencw, int *iw, const int *leniw, double *rw, const int *lenrw) "
[INTERNAL] ";

%feature("docstring")  sninit_(const int *iPrint, const int *iSumm, char
*cw, const int *lencw, int *iw, const int *leniw, double *rw, const int
*lenrw, const long cw_len8) " [INTERNAL] ";

%feature("docstring")  snopt_geti(const char *buffer, const int *lenbuffer,
int *ivalue, int *Errors, char *cw, const int *lencw, int *iw, const int
*leniw, double *rw, const int *lenrw) " [INTERNAL] ";

%feature("docstring")  snopt_c(const char *Start, const int *lenstart, const
int *m, const int *n, const int *neA, const int *nName, const int *nnCon,
const int *nnObj, const int *nnJac, const int *iObj, const double *ObjAdd,
const char *Prob, UserFun userfun, const double *Acol, const int *indA,
const int *locA, double *bl, double *u, char *Names, int *hs, double *x,
double *pi, double *rc, int *INFO, int *mincw, int *miniw, int *minrw, int
*nS, int *nInf, double *sInf, double *Obj, char *cu, const int *lencu, int
*iu, const int *leniu, double *ru, const int *lenru, char *cw, const int
*lencw, int *iw, const int *leniw, double *rw, const int *lenrw) "
[INTERNAL] ";

%feature("docstring")  snset_(const char *buffer, int *iPrint, int *iSumm,
int *Errors, char *cw, const int *lencw, int *iw, const int *leniw, double
*rw, const int *lenrw, const long buffer_ftn_len, const long cw_len8) "
[INTERNAL] ";

%feature("docstring")  snseti_(const char *buffer, const int *ivalue, int
*iPrint, int *iSumm, int *Errors, char *cw, const int *lencw, int *iw, const
int *leniw, double *rw, const int *lenrw, const long buffer_ftn_len, const
long cw_len8) " [INTERNAL] ";

%feature("docstring")  snopt_getc(const char *buffer, const int *lenbuffer,
char *cvalue, int *Errors, char *cw, const int *lencw, int *iw, const int
*leniw, double *rw, const int *lenrw) " [INTERNAL] ";

%feature("docstring")  snsetr_(const char *buffer, const double *ivalue, int
*iPrint, int *iSumm, int *Errors, char *cw, const int *lencw, int *iw, const
int *leniw, double *rw, const int *lenrw, const long buffer_ftn_len, const
long cw_len8) " [INTERNAL] ";

%feature("docstring")  snopt_getr(const char *buffer, const int *lenbuffer,
double *rvalue, int *Errors, char *cw, const int *lencw, int *iw, const int
*leniw, double *rw, const int *lenrw) " [INTERNAL] ";

%feature("docstring")  snopt_seti(const char *buffer, const int *lenbuffer,
const int *ivalue, int *iPrint, int *iSumm, int *Errors, char *cw, const int
*lencw, int *iw, const int *leniw, double *rw, const int *lenrw) "
[INTERNAL] ";

%feature("docstring")  snopt_setr(const char *buffer, const int *lenbuffer,
const double *rvalue, int *iPrint, int *iSumm, int *Errors, char *cw, const
int *lencw, int *iw, const int *leniw, double *rw, const int *lenrw) "
[INTERNAL] ";

%feature("docstring")  snopt_set(const char *buffer, const int *lenbuffer,
int *iPrint, int *iSumm, int *Errors, char *cw, const int *lencw, int *iw,
const int *leniw, double *rw, const int *lenrw) " [INTERNAL] ";


// File: wsqic_8cpp.xml
%feature("docstring")  main(int argc, char *argv[]) "
";


// File: wsqic_8hpp.xml
%feature("docstring")  sqicSolve(double *Obj) "
[INTERNAL] ";
%feature("docstring")  sqicSolveStabilized(double *Obj, double *mu, int
*lenpi, double *piE) " [INTERNAL] ";

%feature("docstring")  sqic(const int *m, const int *n, const int *nnzA,
const int *indA, const int *locA, const double *valA, const double *bl,
const double *bu, const int *hEtype, const int *hs, double *x, double *pi,
double *rc, const int *nnzH, const int *indH, const int *locH, double *valH)
" [INTERNAL] ";

%feature("docstring")  sqicDestroy() "[INTERNAL] ";


// File: x__function__internal_8hpp.xml


// File: xml__node_8cpp.xml


// File: xml__node_8hpp.xml


// File: group__DPLE__doc.xml


// File: group__IdasIntegrator__doc.xml


// File: group__HomotopyNLPSolver__doc.xml


// File: group__ImplicitFunction__doc.xml


// File: group__DAE__doc.xml


// File: group__iname.xml


// File: group__oname.xml


// File: group__iind.xml


// File: group__oind.xml


// File: group__Tvalset.xml


// File: group__Tvalget.xml


// File: group__LinearSolver__doc.xml


// File: group__LPSolver__doc.xml


// File: group__NLPSolver__doc.xml


// File: group__Nullspace__doc.xml


// File: group__QCQPSolver__doc.xml


// File: group__QPSolver__doc.xml


// File: group__SDPSolver__doc.xml


// File: group__SDQPSolver__doc.xml


// File: group__SOCPSolver__doc.xml


// File: group__StabilizedQPSolver__doc.xml


// File: group__expression__tools.xml


// File: group__scheme__IntegratorOutput.xml


// File: group__scheme__QCQPSolverInput.xml


// File: group__scheme__HessLagOutput.xml


// File: group__scheme__LinsolInput.xml


// File: group__scheme__SOCPOutput.xml


// File: group__scheme__NLPSolverOutput.xml


// File: group__scheme__SDPInput.xml


// File: group__scheme__LPSolverInput.xml


// File: group__scheme__RDAEInput.xml


// File: group__scheme__DAEOutput.xml


// File: group__scheme__DPLEInput.xml


// File: group__scheme__SDPOutput.xml


// File: group__scheme__NLPSolverInput.xml


// File: group__scheme__NLPInput.xml


// File: group__scheme__NLPOutput.xml


// File: group__scheme__InputOutputScheme.xml


// File: group__scheme__StabilizedQPSolverInput.xml


// File: group__scheme__GradFInput.xml


// File: group__scheme__LPSolverOutput.xml


// File: group__scheme__GradFOutput.xml


// File: group__scheme__SDQPInput.xml


// File: group__scheme__OCPInput.xml


// File: group__scheme__QCQPSolverOutput.xml


// File: group__scheme__MayerInput.xml


// File: group__scheme__ControlledDAEInput.xml


// File: group__scheme__DAEInput.xml


// File: group__scheme__IntegratorInput.xml


// File: group__scheme__QPSolverInput.xml


// File: group__scheme__OCPOutput.xml


// File: group__scheme__RDAEOutput.xml


// File: group__scheme__JacGOutput.xml


// File: group__scheme__LinsolOutput.xml


// File: group__scheme__SDQPOutput.xml


// File: group__scheme__ControlSimulatorInput.xml


// File: group__scheme__SOCPInput.xml


// File: group__scheme__JacGInput.xml


// File: group__scheme__DPLEOutput.xml


// File: group__scheme__HessLagInput.xml


// File: group__scheme__QPSolverOutput.xml


// File: group__scheme__HNLPInput.xml


// File: chapter1.xml


// File: chapter2.xml


// File: chapter3.xml


// File: chapter4.xml


// File: chapter5.xml


// File: chapter6.xml


// File: dir_a242f0f31177b4ee0e0f2869a68661e2.xml


// File: dir_173fa14f8112bf6d4fa5fb60c663b079.xml


// File: dir_cc00533f663a868a74a94bae6d243fa8.xml


// File: dir_3ae11b6e1cd218aed6bbf0b97d0cf4d1.xml


// File: dir_165538d1629d63b540b717a0a8f8d17c.xml


// File: dir_b67f2d3e502497e52a0860566e264050.xml


// File: dir_2211bd5fdd011119a318ab290df1d2d6.xml


// File: dir_c6bf31233a1f0eb03dbc4c2e0b88ebf9.xml


// File: dir_fc8898f6998d6b3cefcb64c4ce7ea1c4.xml


// File: dir_2acbf2200173536f11c2515b42b2be1c.xml


// File: dir_97f17b870f201e193796f88aa8b24ee7.xml


// File: dir_6e3d614fa64b802750fbd65459f15a64.xml


// File: dir_2fcc9b76d63d907023752974d9503363.xml


// File: dir_674186e89c51fd5db44b7bb8b4bfd175.xml


// File: dir_6b24c408f936f5e3fad85af85fac13be.xml


// File: dir_dbed38ee933aae81b6ffa699ce6b0d5a.xml


// File: dir_0d90fb8f8b911bb67f5baffe35d6baec.xml


// File: dir_d560fb3fdf7c7d0fd11fcef22350e515.xml


// File: dir_94468a9e86a61fac66a6ce6d282beb7e.xml


// File: dir_2ad7570a4726f50d9009d41ebbe56c46.xml


// File: dir_c3317fe2a063fec6069fcec6e906343a.xml


// File: dir_62b1d21e3c79c65cf07537ce621f8931.xml


// File: dir_5747921307c9ef9a6022c01a3e0aee8d.xml


// File: dir_dee56dc1f1f085e33b8d83efe818a164.xml


// File: dir_a0db0368355cb586cba4163f7f6a5add.xml


// File: dir_06b07da53372e68ec9ec3f325c8c4e88.xml


// File: dir_0e38855d9854873885416e0db777a031.xml


// File: dir_ae1002fbeec105b10c49654865022e65.xml


// File: dir_4c54b8644cdb97524ad2593db88f43f8.xml


// File: dir_19f99a3a6b2e15dd5d3dc3717aef760f.xml


// File: dir_32cb5448079888161100d95b01b6198d.xml


// File: dir_36edc65709980d217f100f7aceab18f7.xml


// File: dir_b35908272f9e1123cc1a956ba5b2e3aa.xml


// File: dir_4d46dafef57ae63a601f2959a12876ee.xml


// File: dir_533f3073d471754d54dc885a5ddf63ae.xml


// File: dir_6c79c789c79fca814583aab1f7f5a2d6.xml


// File: dir_8d74aeb32c16fa9fd07602045437f1d6.xml


// File: algebra_2LinearSolver_8py-example.xml


// File: Function_2customfunction_8py-example.xml


// File: Function_2customfunction_c_8cc-example.xml


// File: Function_2expand_8py-example.xml


// File: Function_2parallelizer_8py-example.xml


// File: integrators_2controlsimulator_8py-example.xml


// File: integrators_2idas_8py-example.xml


// File: integrators_2simulator_8py-example.xml


// File: integrators_2tolerance_8py-example.xml


// File: matrix_2coloring_8py-example.xml


// File: matrix_2dulmageMendelsohn_8py-example.xml


// File: matrix_2stronglyConnectedComponents_8py-example.xml


// File: misc_2all_8cc-example.xml


// File: misc_2assertion_8py-example.xml


// File: misc_2dotdraw_8py-example.xml


// File: misc_2limitPrinting_8py-example.xml


// File: misc_2limitPrinting_c_8cc-example.xml


// File: misc_2printme_8py-example.xml


// File: misc_2range_8cc-example.xml


// File: MX_2createParent_8py-example.xml


// File: MX_2matrix_expand_8py-example.xml


// File: MX_2veccat_8py-example.xml


// File: solvers_2callback_8py-example.xml


// File: solvers_2exacthessian_8py-example.xml


// File: solvers_2ipopt_8py-example.xml


// File: solvers_2KinsolSolver_8py-example.xml


// File: solvers_2NewtonImplicitSolver_8py-example.xml


// File: solvers_2NLPImplicitSolver_8py-example.xml


// File: SX_2countNodes_8py-example.xml


// File: SX_2generateCode_8py-example.xml


// File: SX_2jacSparsity_8py-example.xml


// File: SX_2ssym_8py-example.xml


// File: SX_2SXaddition_8cc-example.xml


// File: SX_2SXFunction_constr_oct_8m-example.xml


// File: SX_2SXFunction_constr_py_8py-example.xml


// File: SX_2symbolicsubstitution_8py-example.xml

