/*
 *    This file is part of CasADi.
 *
 *    CasADi -- A symbolic framework for dynamic optimization.
 *    Copyright (C) 2010 by Joel Andersson, Moritz Diehl, K.U.Leuven. All rights reserved.
 *
 *    CasADi is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation; either
 *    version 3 of the License, or (at your option) any later version.
 *
 *    CasADi is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with CasADi; if not, write to the Free Software
 *    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 */

/** All edits to this file will be lost - autogenerated by misc/autogencode.py */
#ifndef AUTOGENERATED_I
#define AUTOGENERATED_I
%include "symbolic/fx/schemes_metadata.hpp"
%include "symbolic/fx/schemes_helpers.hpp"
#ifdef SWIGPYTHON
%pythoncode %{

def IOSchemeVector(arg,io_scheme):
  try:
    return IOSchemeVectorSXMatrix(arg,io_scheme)
  except:
    pass
  try:
    return IOSchemeVectorMX(arg,io_scheme)
  except:
    pass
  try:
    arg = map(lambda x: sp_dense(0,0) if isinstance(x,list) and len(x)==0 else x,arg)
    return IOSchemeVectorCRSSparsity(arg,io_scheme)
  except:
    pass
  raise Exception("IOSchemeVector called with faulty arguments. Individual values must be SXMatrix, MX or CRSSparsity.")
    
def customIO(**kwargs):
  items = kwargs.items()
  
  return IOSchemeVector(zip(*items)[1], IOScheme(zip(*items)[0]))
  
%}
#endif //SWIGPYTHON
#ifdef SWIGPYTHON
%pythoncode %{
def acadoIn(*dummy,**kwargs):
  """
  Helper function for 'ACADO_Input'

  Two use cases:
     a) arg = acadoIn(x_guess=my_x_guess, u_guess=my_u_guess, p_guess=my_p_guess, lbx=my_lbx, ubx=my_ubx, lbx0=my_lbx0, ubx0=my_ubx0, lbxf=my_lbxf, ubxf=my_ubxf, lbu=my_lbu, ubu=my_ubu, lbp=my_lbp, ubp=my_ubp, lbc=my_lbc, ubc=my_ubc, lbr=my_lbr, ubr=my_ubr) 
          all arguments optional
     b) x_guess, u_guess, p_guess, lbx, ubx, lbx0, ubx0, lbxf, ubxf, lbu, ubu, lbp, ubp, lbc, ubc, lbr, ubr = acadoIn(arg,"x_guess", "u_guess", "p_guess", "lbx", "ubx", "lbx0", "ubx0", "lbxf", "ubxf", "lbu", "ubu", "lbp", "ubp", "lbc", "ubc", "lbr", "ubr") 
          all arguments after the first optional
  Input arguments of an ACADO OCP solver
  
  Keyword arguments:
    x_guess -- Initial guess for x (default: 0) [ACADO_X_GUESS]
    u_guess -- Initial guess for u (default: 0) [ACADO_U_GUESS]
    p_guess -- Initial guess for p (default: 0) [ACADO_P_GUESS]
    lbx     -- Lower bound on x (default:  -infinity) [ACADO_LBX]
    ubx     -- Upper bound on x (default:  infinity) [ACADO_UBX]
    lbx0    -- Lower bound on x0 (default:  -infinity) [ACADO_LBX0]
    ubx0    -- Upper bound on x0 (default:  infinity) [ACADO_UBX0]
    lbxf    -- Lower bound on xf (default:  -infinity) [ACADO_LBXF]
    ubxf    -- Upper bound on xf (default:  infinity) [ACADO_UBXF]
    lbu     -- Lower bound on u (default:  -infinity) [ACADO_LBU]
    ubu     -- Upper bound on u (default:  infinity) [ACADO_UBU]
    lbp     -- Lower bound on p (default:  -infinity) [ACADO_LBP]
    ubp     -- Upper bound on p (default:  infinity) [ACADO_UBP]
    lbc     -- Lower bound on the path constraint function (default:  -infinity) [ACADO_LBC]
    ubc     -- Upper bound on the path constraint function (default:  infinity) [ACADO_UBC]
    lbr     -- Lower bound on the initial constraint function (default:  0) [ACADO_LBR]
    ubr     -- Upper bound on the initial constraint function (default:  0) [ACADO_UBR]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of acadoIn. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_ACADO_Input,n)] for n in dummy[1:]]
  x_guess = []
  if 'x_guess' in kwargs:
    x_guess = kwargs['x_guess']
  u_guess = []
  if 'u_guess' in kwargs:
    u_guess = kwargs['u_guess']
  p_guess = []
  if 'p_guess' in kwargs:
    p_guess = kwargs['p_guess']
  lbx = []
  if 'lbx' in kwargs:
    lbx = kwargs['lbx']
  ubx = []
  if 'ubx' in kwargs:
    ubx = kwargs['ubx']
  lbx0 = []
  if 'lbx0' in kwargs:
    lbx0 = kwargs['lbx0']
  ubx0 = []
  if 'ubx0' in kwargs:
    ubx0 = kwargs['ubx0']
  lbxf = []
  if 'lbxf' in kwargs:
    lbxf = kwargs['lbxf']
  ubxf = []
  if 'ubxf' in kwargs:
    ubxf = kwargs['ubxf']
  lbu = []
  if 'lbu' in kwargs:
    lbu = kwargs['lbu']
  ubu = []
  if 'ubu' in kwargs:
    ubu = kwargs['ubu']
  lbp = []
  if 'lbp' in kwargs:
    lbp = kwargs['lbp']
  ubp = []
  if 'ubp' in kwargs:
    ubp = kwargs['ubp']
  lbc = []
  if 'lbc' in kwargs:
    lbc = kwargs['lbc']
  ubc = []
  if 'ubc' in kwargs:
    ubc = kwargs['ubc']
  lbr = []
  if 'lbr' in kwargs:
    lbr = kwargs['lbr']
  ubr = []
  if 'ubr' in kwargs:
    ubr = kwargs['ubr']
  for k in kwargs.keys():
    if not(k in ['x_guess','u_guess','p_guess','lbx','ubx','lbx0','ubx0','lbxf','ubxf','lbu','ubu','lbp','ubp','lbc','ubc','lbr','ubr']):
      raise Exception("Keyword error in acadoIn: '%s' is not recognized. Available keywords are: x_guess, u_guess, p_guess, lbx, ubx, lbx0, ubx0, lbxf, ubxf, lbu, ubu, lbp, ubp, lbc, ubc, lbr, ubr" % k )
  return IOSchemeVector([x_guess,u_guess,p_guess,lbx,ubx,lbx0,ubx0,lbxf,ubxf,lbu,ubu,lbp,ubp,lbc,ubc,lbr,ubr], IOScheme(SCHEME_ACADO_Input))
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(acadoIn) acadoIn<CasADi::SXMatrix>;
%template(acadoIn) acadoIn<CasADi::MX>;
%template(acadoIn) acadoIn<CasADi::CRSSparsity>;
%template(IOSchemeVectorACADO_InputSXMatrix) ACADO_InputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorACADO_InputMX) ACADO_InputIOSchemeVector<MX>;
%template(IOSchemeVectorACADO_InputCRSSparsity) ACADO_InputIOSchemeVector<CRSSparsity>;
%rename(IOSchemeVectorACADO_Input) IOSchemeVectorACADO_InputSXMatrix;
%rename(IOSchemeVectorACADO_Input) IOSchemeVectorACADO_InputMX;
%rename(IOSchemeVectorACADO_Input) IOSchemeVectorACADO_InputCRSSparsity;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def acadoOut(*dummy,**kwargs):
  """
  Helper function for 'ACADO_Output'

  Two use cases:
     a) arg = acadoOut(x_opt=my_x_opt, u_opt=my_u_opt, p_opt=my_p_opt, cost=my_cost) 
          all arguments optional
     b) x_opt, u_opt, p_opt, cost = acadoOut(arg,"x_opt", "u_opt", "p_opt", "cost") 
          all arguments after the first optional
  Output arguments of an ACADO OCP solver
  
  Keyword arguments:
    x_opt -- Optimal states [ACADO_X_OPT]
    u_opt -- Optimal control inputs [ACADO_U_OPT]
    p_opt -- Optimal parameters [ACADO_P_OPT]
    cost  -- Optimal cost [ACADO_COST]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of acadoOut. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_ACADO_Output,n)] for n in dummy[1:]]
  x_opt = []
  if 'x_opt' in kwargs:
    x_opt = kwargs['x_opt']
  u_opt = []
  if 'u_opt' in kwargs:
    u_opt = kwargs['u_opt']
  p_opt = []
  if 'p_opt' in kwargs:
    p_opt = kwargs['p_opt']
  cost = []
  if 'cost' in kwargs:
    cost = kwargs['cost']
  for k in kwargs.keys():
    if not(k in ['x_opt','u_opt','p_opt','cost']):
      raise Exception("Keyword error in acadoOut: '%s' is not recognized. Available keywords are: x_opt, u_opt, p_opt, cost" % k )
  return IOSchemeVector([x_opt,u_opt,p_opt,cost], IOScheme(SCHEME_ACADO_Output))
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(acadoOut) acadoOut<CasADi::SXMatrix>;
%template(acadoOut) acadoOut<CasADi::MX>;
%template(acadoOut) acadoOut<CasADi::CRSSparsity>;
%template(IOSchemeVectorACADO_OutputSXMatrix) ACADO_OutputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorACADO_OutputMX) ACADO_OutputIOSchemeVector<MX>;
%template(IOSchemeVectorACADO_OutputCRSSparsity) ACADO_OutputIOSchemeVector<CRSSparsity>;
%rename(IOSchemeVectorACADO_Output) IOSchemeVectorACADO_OutputSXMatrix;
%rename(IOSchemeVectorACADO_Output) IOSchemeVectorACADO_OutputMX;
%rename(IOSchemeVectorACADO_Output) IOSchemeVectorACADO_OutputCRSSparsity;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def acadofcnIn(*dummy,**kwargs):
  """
  Helper function for 'ACADO_FCN_Input'

  Two use cases:
     a) arg = acadofcnIn(t=my_t, xd=my_xd, xa=my_xa, u=my_u, p=my_p, xdot=my_xdot) 
          all arguments optional
     b) t, xd, xa, u, p, xdot = acadofcnIn(arg,"t", "xd", "xa", "u", "p", "xdot") 
          all arguments after the first optional
  Input arguments of an ACADO function
  
  Keyword arguments:
    t    -- Time [ACADO_FCN_T]
    xd   -- Differential state [ACADO_FCN_XD]
    xa   -- Algebraic state [ACADO_FCN_XA]
    u    -- Control input [ACADO_FCN_U]
    p    -- Parameter [ACADO_FCN_P]
    xdot -- Differential state derivative [ACADO_FCN_XDOT]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of acadofcnIn. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_ACADO_FCN_Input,n)] for n in dummy[1:]]
  t = []
  if 't' in kwargs:
    t = kwargs['t']
  xd = []
  if 'xd' in kwargs:
    xd = kwargs['xd']
  xa = []
  if 'xa' in kwargs:
    xa = kwargs['xa']
  u = []
  if 'u' in kwargs:
    u = kwargs['u']
  p = []
  if 'p' in kwargs:
    p = kwargs['p']
  xdot = []
  if 'xdot' in kwargs:
    xdot = kwargs['xdot']
  for k in kwargs.keys():
    if not(k in ['t','xd','xa','u','p','xdot']):
      raise Exception("Keyword error in acadofcnIn: '%s' is not recognized. Available keywords are: t, xd, xa, u, p, xdot" % k )
  return IOSchemeVector([t,xd,xa,u,p,xdot], IOScheme(SCHEME_ACADO_FCN_Input))
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(acadofcnIn) acadofcnIn<CasADi::SXMatrix>;
%template(acadofcnIn) acadofcnIn<CasADi::MX>;
%template(acadofcnIn) acadofcnIn<CasADi::CRSSparsity>;
%template(IOSchemeVectorACADO_FCN_InputSXMatrix) ACADO_FCN_InputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorACADO_FCN_InputMX) ACADO_FCN_InputIOSchemeVector<MX>;
%template(IOSchemeVectorACADO_FCN_InputCRSSparsity) ACADO_FCN_InputIOSchemeVector<CRSSparsity>;
%rename(IOSchemeVectorACADO_FCN_Input) IOSchemeVectorACADO_FCN_InputSXMatrix;
%rename(IOSchemeVectorACADO_FCN_Input) IOSchemeVectorACADO_FCN_InputMX;
%rename(IOSchemeVectorACADO_FCN_Input) IOSchemeVectorACADO_FCN_InputCRSSparsity;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def controldaeIn(*dummy,**kwargs):
  """
  Helper function for 'ControlledDAEInput'

  Two use cases:
     a) arg = controldaeIn(t=my_t, x=my_x, z=my_z, p=my_p, u=my_u, u_interp=my_u_interp, x_major=my_x_major, t0=my_t0, tf=my_tf) 
          all arguments optional
     b) t, x, z, p, u, u_interp, x_major, t0, tf = controldaeIn(arg,"t", "x", "z", "p", "u", "u_interp", "x_major", "t0", "tf") 
          all arguments after the first optional
  Input arguments of an ODE/DAE function
  
  Keyword arguments:
    t        -- Global physical time. (1-by-1) [CONTROL_DAE_T]
    x        -- State vector (dimension nx-by-1). Should have same amount of non-zeros as DAEOutput:DAE_RES [CONTROL_DAE_X]
    z        -- Algebraic state vector (dimension np-by-1). [CONTROL_DAE_Z]
    p        -- Parameter vector (dimension np-by-1). [CONTROL_DAE_P]
    u        -- Control vector (dimension nu-by-1). [CONTROL_DAE_U]
    u_interp -- Control vector, linearly interpolated (dimension nu-by-1). [CONTROL_DAE_U_INTERP]
    x_major  -- State vector (dimension nx-by-1) at the last major time-step [CONTROL_DAE_X_MAJOR]
    t0       -- Time at start of control interval (1-by-1) [CONTROL_DAE_T0]
    tf       -- Time at end of control interval (1-by-1) [CONTROL_DAE_TF]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of controldaeIn. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_ControlledDAEInput,n)] for n in dummy[1:]]
  t = []
  if 't' in kwargs:
    t = kwargs['t']
  x = []
  if 'x' in kwargs:
    x = kwargs['x']
  z = []
  if 'z' in kwargs:
    z = kwargs['z']
  p = []
  if 'p' in kwargs:
    p = kwargs['p']
  u = []
  if 'u' in kwargs:
    u = kwargs['u']
  u_interp = []
  if 'u_interp' in kwargs:
    u_interp = kwargs['u_interp']
  x_major = []
  if 'x_major' in kwargs:
    x_major = kwargs['x_major']
  t0 = []
  if 't0' in kwargs:
    t0 = kwargs['t0']
  tf = []
  if 'tf' in kwargs:
    tf = kwargs['tf']
  for k in kwargs.keys():
    if not(k in ['t','x','z','p','u','u_interp','x_major','t0','tf']):
      raise Exception("Keyword error in controldaeIn: '%s' is not recognized. Available keywords are: t, x, z, p, u, u_interp, x_major, t0, tf" % k )
  return IOSchemeVector([t,x,z,p,u,u_interp,x_major,t0,tf], IOScheme(SCHEME_ControlledDAEInput))
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(controldaeIn) controldaeIn<CasADi::SXMatrix>;
%template(controldaeIn) controldaeIn<CasADi::MX>;
%template(controldaeIn) controldaeIn<CasADi::CRSSparsity>;
%template(IOSchemeVectorControlledDAEInputSXMatrix) ControlledDAEInputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorControlledDAEInputMX) ControlledDAEInputIOSchemeVector<MX>;
%template(IOSchemeVectorControlledDAEInputCRSSparsity) ControlledDAEInputIOSchemeVector<CRSSparsity>;
%rename(IOSchemeVectorControlledDAEInput) IOSchemeVectorControlledDAEInputSXMatrix;
%rename(IOSchemeVectorControlledDAEInput) IOSchemeVectorControlledDAEInputMX;
%rename(IOSchemeVectorControlledDAEInput) IOSchemeVectorControlledDAEInputCRSSparsity;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def controlsimulatorIn(*dummy,**kwargs):
  """
  Helper function for 'ControlSimulatorInput'

  Two use cases:
     a) arg = controlsimulatorIn(x0=my_x0, p=my_p, u=my_u) 
          all arguments optional
     b) x0, p, u = controlsimulatorIn(arg,"x0", "p", "u") 
          all arguments after the first optional
  Input arguments of a control simulator
  
  Keyword arguments:
    x0 -- Differential or algebraic state at t0  (dimension nx-by-1) [CONTROLSIMULATOR_X0]
    p  -- Parameters that are fixed over the entire horizon  (dimension np-by-1) [CONTROLSIMULATOR_P]
    u  -- Parameters that change over the integration intervals (dimension (ns-1)-by-nu) [CONTROLSIMULATOR_U]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of controlsimulatorIn. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_ControlSimulatorInput,n)] for n in dummy[1:]]
  x0 = []
  if 'x0' in kwargs:
    x0 = kwargs['x0']
  p = []
  if 'p' in kwargs:
    p = kwargs['p']
  u = []
  if 'u' in kwargs:
    u = kwargs['u']
  for k in kwargs.keys():
    if not(k in ['x0','p','u']):
      raise Exception("Keyword error in controlsimulatorIn: '%s' is not recognized. Available keywords are: x0, p, u" % k )
  return IOSchemeVector([x0,p,u], IOScheme(SCHEME_ControlSimulatorInput))
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(controlsimulatorIn) controlsimulatorIn<CasADi::SXMatrix>;
%template(controlsimulatorIn) controlsimulatorIn<CasADi::MX>;
%template(controlsimulatorIn) controlsimulatorIn<CasADi::CRSSparsity>;
%template(IOSchemeVectorControlSimulatorInputSXMatrix) ControlSimulatorInputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorControlSimulatorInputMX) ControlSimulatorInputIOSchemeVector<MX>;
%template(IOSchemeVectorControlSimulatorInputCRSSparsity) ControlSimulatorInputIOSchemeVector<CRSSparsity>;
%rename(IOSchemeVectorControlSimulatorInput) IOSchemeVectorControlSimulatorInputSXMatrix;
%rename(IOSchemeVectorControlSimulatorInput) IOSchemeVectorControlSimulatorInputMX;
%rename(IOSchemeVectorControlSimulatorInput) IOSchemeVectorControlSimulatorInputCRSSparsity;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def daeIn(*dummy,**kwargs):
  """
  Helper function for 'DAEInput'

  Two use cases:
     a) arg = daeIn(x=my_x, z=my_z, p=my_p, t=my_t) 
          all arguments optional
     b) x, z, p, t = daeIn(arg,"x", "z", "p", "t") 
          all arguments after the first optional
  Input arguments of an ODE/DAE function
  
  Keyword arguments:
    x -- Differential state [DAE_X]
    z -- Algebraic state [DAE_Z]
    p -- Parameter [DAE_P]
    t -- Explicit time dependence [DAE_T]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of daeIn. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_DAEInput,n)] for n in dummy[1:]]
  x = []
  if 'x' in kwargs:
    x = kwargs['x']
  z = []
  if 'z' in kwargs:
    z = kwargs['z']
  p = []
  if 'p' in kwargs:
    p = kwargs['p']
  t = []
  if 't' in kwargs:
    t = kwargs['t']
  for k in kwargs.keys():
    if not(k in ['x','z','p','t']):
      raise Exception("Keyword error in daeIn: '%s' is not recognized. Available keywords are: x, z, p, t" % k )
  return IOSchemeVector([x,z,p,t], IOScheme(SCHEME_DAEInput))
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(daeIn) daeIn<CasADi::SXMatrix>;
%template(daeIn) daeIn<CasADi::MX>;
%template(daeIn) daeIn<CasADi::CRSSparsity>;
%template(IOSchemeVectorDAEInputSXMatrix) DAEInputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorDAEInputMX) DAEInputIOSchemeVector<MX>;
%template(IOSchemeVectorDAEInputCRSSparsity) DAEInputIOSchemeVector<CRSSparsity>;
%rename(IOSchemeVectorDAEInput) IOSchemeVectorDAEInputSXMatrix;
%rename(IOSchemeVectorDAEInput) IOSchemeVectorDAEInputMX;
%rename(IOSchemeVectorDAEInput) IOSchemeVectorDAEInputCRSSparsity;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def daeOut(*dummy,**kwargs):
  """
  Helper function for 'DAEOutput'

  Two use cases:
     a) arg = daeOut(ode=my_ode, alg=my_alg, quad=my_quad) 
          all arguments optional
     b) ode, alg, quad = daeOut(arg,"ode", "alg", "quad") 
          all arguments after the first optional
  Output arguments of an DAE function
  
  Keyword arguments:
    ode  -- Right hand side of the implicit ODE [DAE_ODE]
    alg  -- Right hand side of algebraic equations [DAE_ALG]
    quad -- Right hand side of quadratures equations [DAE_QUAD]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of daeOut. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_DAEOutput,n)] for n in dummy[1:]]
  ode = []
  if 'ode' in kwargs:
    ode = kwargs['ode']
  alg = []
  if 'alg' in kwargs:
    alg = kwargs['alg']
  quad = []
  if 'quad' in kwargs:
    quad = kwargs['quad']
  for k in kwargs.keys():
    if not(k in ['ode','alg','quad']):
      raise Exception("Keyword error in daeOut: '%s' is not recognized. Available keywords are: ode, alg, quad" % k )
  return IOSchemeVector([ode,alg,quad], IOScheme(SCHEME_DAEOutput))
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(daeOut) daeOut<CasADi::SXMatrix>;
%template(daeOut) daeOut<CasADi::MX>;
%template(daeOut) daeOut<CasADi::CRSSparsity>;
%template(IOSchemeVectorDAEOutputSXMatrix) DAEOutputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorDAEOutputMX) DAEOutputIOSchemeVector<MX>;
%template(IOSchemeVectorDAEOutputCRSSparsity) DAEOutputIOSchemeVector<CRSSparsity>;
%rename(IOSchemeVectorDAEOutput) IOSchemeVectorDAEOutputSXMatrix;
%rename(IOSchemeVectorDAEOutput) IOSchemeVectorDAEOutputMX;
%rename(IOSchemeVectorDAEOutput) IOSchemeVectorDAEOutputCRSSparsity;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def rdaeIn(*dummy,**kwargs):
  """
  Helper function for 'RDAEInput'

  Two use cases:
     a) arg = rdaeIn(rx=my_rx, rz=my_rz, rp=my_rp, x=my_x, z=my_z, p=my_p, t=my_t) 
          all arguments optional
     b) rx, rz, rp, x, z, p, t = rdaeIn(arg,"rx", "rz", "rp", "x", "z", "p", "t") 
          all arguments after the first optional
  Input arguments of an ODE/DAE backward integration function
  
  Keyword arguments:
    rx -- Backward differential state [RDAE_RX]
    rz -- Backward algebraic state [RDAE_RZ]
    rp -- Backward  parameter vector [RDAE_RP]
    x  -- Forward differential state [RDAE_X]
    z  -- Forward algebraic state [RDAE_Z]
    p  -- Parameter vector [RDAE_P]
    t  -- Explicit time dependence [RDAE_T]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of rdaeIn. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_RDAEInput,n)] for n in dummy[1:]]
  rx = []
  if 'rx' in kwargs:
    rx = kwargs['rx']
  rz = []
  if 'rz' in kwargs:
    rz = kwargs['rz']
  rp = []
  if 'rp' in kwargs:
    rp = kwargs['rp']
  x = []
  if 'x' in kwargs:
    x = kwargs['x']
  z = []
  if 'z' in kwargs:
    z = kwargs['z']
  p = []
  if 'p' in kwargs:
    p = kwargs['p']
  t = []
  if 't' in kwargs:
    t = kwargs['t']
  for k in kwargs.keys():
    if not(k in ['rx','rz','rp','x','z','p','t']):
      raise Exception("Keyword error in rdaeIn: '%s' is not recognized. Available keywords are: rx, rz, rp, x, z, p, t" % k )
  return IOSchemeVector([rx,rz,rp,x,z,p,t], IOScheme(SCHEME_RDAEInput))
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(rdaeIn) rdaeIn<CasADi::SXMatrix>;
%template(rdaeIn) rdaeIn<CasADi::MX>;
%template(rdaeIn) rdaeIn<CasADi::CRSSparsity>;
%template(IOSchemeVectorRDAEInputSXMatrix) RDAEInputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorRDAEInputMX) RDAEInputIOSchemeVector<MX>;
%template(IOSchemeVectorRDAEInputCRSSparsity) RDAEInputIOSchemeVector<CRSSparsity>;
%rename(IOSchemeVectorRDAEInput) IOSchemeVectorRDAEInputSXMatrix;
%rename(IOSchemeVectorRDAEInput) IOSchemeVectorRDAEInputMX;
%rename(IOSchemeVectorRDAEInput) IOSchemeVectorRDAEInputCRSSparsity;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def rdaeOut(*dummy,**kwargs):
  """
  Helper function for 'RDAEOutput'

  Two use cases:
     a) arg = rdaeOut(ode=my_ode, alg=my_alg, quad=my_quad) 
          all arguments optional
     b) ode, alg, quad = rdaeOut(arg,"ode", "alg", "quad") 
          all arguments after the first optional
  Output arguments of an ODE/DAE backward integration function
  
  Keyword arguments:
    ode  -- Right hand side of ODE. [RDAE_ODE]
    alg  -- Right hand side of algebraic equations. [RDAE_ALG]
    quad -- Right hand side of quadratures. [RDAE_QUAD]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of rdaeOut. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_RDAEOutput,n)] for n in dummy[1:]]
  ode = []
  if 'ode' in kwargs:
    ode = kwargs['ode']
  alg = []
  if 'alg' in kwargs:
    alg = kwargs['alg']
  quad = []
  if 'quad' in kwargs:
    quad = kwargs['quad']
  for k in kwargs.keys():
    if not(k in ['ode','alg','quad']):
      raise Exception("Keyword error in rdaeOut: '%s' is not recognized. Available keywords are: ode, alg, quad" % k )
  return IOSchemeVector([ode,alg,quad], IOScheme(SCHEME_RDAEOutput))
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(rdaeOut) rdaeOut<CasADi::SXMatrix>;
%template(rdaeOut) rdaeOut<CasADi::MX>;
%template(rdaeOut) rdaeOut<CasADi::CRSSparsity>;
%template(IOSchemeVectorRDAEOutputSXMatrix) RDAEOutputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorRDAEOutputMX) RDAEOutputIOSchemeVector<MX>;
%template(IOSchemeVectorRDAEOutputCRSSparsity) RDAEOutputIOSchemeVector<CRSSparsity>;
%rename(IOSchemeVectorRDAEOutput) IOSchemeVectorRDAEOutputSXMatrix;
%rename(IOSchemeVectorRDAEOutput) IOSchemeVectorRDAEOutputMX;
%rename(IOSchemeVectorRDAEOutput) IOSchemeVectorRDAEOutputCRSSparsity;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def integratorIn(*dummy,**kwargs):
  """
  Helper function for 'IntegratorInput'

  Two use cases:
     a) arg = integratorIn(x0=my_x0, p=my_p, rx0=my_rx0, rp=my_rp) 
          all arguments optional
     b) x0, p, rx0, rp = integratorIn(arg,"x0", "p", "rx0", "rp") 
          all arguments after the first optional
  Input arguments of an integrator
  
  Keyword arguments:
    x0  -- Differential state at the initial time [INTEGRATOR_X0]
    p   -- Parameters [INTEGRATOR_P]
    rx0 -- Backward differential state at the final time [INTEGRATOR_RX0]
    rp  -- Backward parameter vector [INTEGRATOR_RP]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of integratorIn. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_IntegratorInput,n)] for n in dummy[1:]]
  x0 = []
  if 'x0' in kwargs:
    x0 = kwargs['x0']
  p = []
  if 'p' in kwargs:
    p = kwargs['p']
  rx0 = []
  if 'rx0' in kwargs:
    rx0 = kwargs['rx0']
  rp = []
  if 'rp' in kwargs:
    rp = kwargs['rp']
  for k in kwargs.keys():
    if not(k in ['x0','p','rx0','rp']):
      raise Exception("Keyword error in integratorIn: '%s' is not recognized. Available keywords are: x0, p, rx0, rp" % k )
  return IOSchemeVector([x0,p,rx0,rp], IOScheme(SCHEME_IntegratorInput))
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(integratorIn) integratorIn<CasADi::SXMatrix>;
%template(integratorIn) integratorIn<CasADi::MX>;
%template(integratorIn) integratorIn<CasADi::CRSSparsity>;
%template(IOSchemeVectorIntegratorInputSXMatrix) IntegratorInputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorIntegratorInputMX) IntegratorInputIOSchemeVector<MX>;
%template(IOSchemeVectorIntegratorInputCRSSparsity) IntegratorInputIOSchemeVector<CRSSparsity>;
%rename(IOSchemeVectorIntegratorInput) IOSchemeVectorIntegratorInputSXMatrix;
%rename(IOSchemeVectorIntegratorInput) IOSchemeVectorIntegratorInputMX;
%rename(IOSchemeVectorIntegratorInput) IOSchemeVectorIntegratorInputCRSSparsity;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def integratorOut(*dummy,**kwargs):
  """
  Helper function for 'IntegratorOutput'

  Two use cases:
     a) arg = integratorOut(xf=my_xf, qf=my_qf, rxf=my_rxf, rqf=my_rqf) 
          all arguments optional
     b) xf, qf, rxf, rqf = integratorOut(arg,"xf", "qf", "rxf", "rqf") 
          all arguments after the first optional
  Output arguments of an integrator
  
  Keyword arguments:
    xf  -- Differential state at the final time [INTEGRATOR_XF]
    qf  -- Quadrature state at the final time [INTEGRATOR_QF]
    rxf -- Backward differential state at the initial time [INTEGRATOR_RXF]
    rqf -- Backward quadrature state at the initial time [INTEGRATOR_RQF]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of integratorOut. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_IntegratorOutput,n)] for n in dummy[1:]]
  xf = []
  if 'xf' in kwargs:
    xf = kwargs['xf']
  qf = []
  if 'qf' in kwargs:
    qf = kwargs['qf']
  rxf = []
  if 'rxf' in kwargs:
    rxf = kwargs['rxf']
  rqf = []
  if 'rqf' in kwargs:
    rqf = kwargs['rqf']
  for k in kwargs.keys():
    if not(k in ['xf','qf','rxf','rqf']):
      raise Exception("Keyword error in integratorOut: '%s' is not recognized. Available keywords are: xf, qf, rxf, rqf" % k )
  return IOSchemeVector([xf,qf,rxf,rqf], IOScheme(SCHEME_IntegratorOutput))
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(integratorOut) integratorOut<CasADi::SXMatrix>;
%template(integratorOut) integratorOut<CasADi::MX>;
%template(integratorOut) integratorOut<CasADi::CRSSparsity>;
%template(IOSchemeVectorIntegratorOutputSXMatrix) IntegratorOutputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorIntegratorOutputMX) IntegratorOutputIOSchemeVector<MX>;
%template(IOSchemeVectorIntegratorOutputCRSSparsity) IntegratorOutputIOSchemeVector<CRSSparsity>;
%rename(IOSchemeVectorIntegratorOutput) IOSchemeVectorIntegratorOutputSXMatrix;
%rename(IOSchemeVectorIntegratorOutput) IOSchemeVectorIntegratorOutputMX;
%rename(IOSchemeVectorIntegratorOutput) IOSchemeVectorIntegratorOutputCRSSparsity;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def linsolIn(*dummy,**kwargs):
  """
  Helper function for 'LinsolInput'

  Two use cases:
     a) arg = linsolIn(A=my_A, B=my_B, T=my_T) 
          all arguments optional
     b) A, B, T = linsolIn(arg,"A", "B", "T") 
          all arguments after the first optional
  Input arguments of a linear solver
  
  Keyword arguments:
    A -- The square matrix A: sparse, (n x n). [LINSOL_A]
    B -- The right-hand-side matrix b: dense,  (m x n) [LINSOL_B]
    T -- Transpose A?: dense scalar, value 0 or 1,  (1 x 1) [LINSOL_T]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of linsolIn. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_LinsolInput,n)] for n in dummy[1:]]
  A = []
  if 'A' in kwargs:
    A = kwargs['A']
  B = []
  if 'B' in kwargs:
    B = kwargs['B']
  T = []
  if 'T' in kwargs:
    T = kwargs['T']
  for k in kwargs.keys():
    if not(k in ['A','B','T']):
      raise Exception("Keyword error in linsolIn: '%s' is not recognized. Available keywords are: A, B, T" % k )
  return IOSchemeVector([A,B,T], IOScheme(SCHEME_LinsolInput))
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(linsolIn) linsolIn<CasADi::SXMatrix>;
%template(linsolIn) linsolIn<CasADi::MX>;
%template(linsolIn) linsolIn<CasADi::CRSSparsity>;
%template(IOSchemeVectorLinsolInputSXMatrix) LinsolInputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorLinsolInputMX) LinsolInputIOSchemeVector<MX>;
%template(IOSchemeVectorLinsolInputCRSSparsity) LinsolInputIOSchemeVector<CRSSparsity>;
%rename(IOSchemeVectorLinsolInput) IOSchemeVectorLinsolInputSXMatrix;
%rename(IOSchemeVectorLinsolInput) IOSchemeVectorLinsolInputMX;
%rename(IOSchemeVectorLinsolInput) IOSchemeVectorLinsolInputCRSSparsity;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def linsolOut(*dummy,**kwargs):
  """
  Helper function for 'LinsolOutput'

  Two use cases:
     a) arg = linsolOut(X=my_X) 
          all arguments optional
     b) X = linsolOut(arg,"X") 
          all arguments after the first optional
  Output arguments of a linear solver
  
  Keyword arguments:
    X -- Solution to the linear system of equations [LINSOL_X]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of linsolOut. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_LinsolOutput,n)] for n in dummy[1:]]
  X = []
  if 'X' in kwargs:
    X = kwargs['X']
  for k in kwargs.keys():
    if not(k in ['X']):
      raise Exception("Keyword error in linsolOut: '%s' is not recognized. Available keywords are: X" % k )
  return IOSchemeVector([X], IOScheme(SCHEME_LinsolOutput))
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(linsolOut) linsolOut<CasADi::SXMatrix>;
%template(linsolOut) linsolOut<CasADi::MX>;
%template(linsolOut) linsolOut<CasADi::CRSSparsity>;
%template(IOSchemeVectorLinsolOutputSXMatrix) LinsolOutputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorLinsolOutputMX) LinsolOutputIOSchemeVector<MX>;
%template(IOSchemeVectorLinsolOutputCRSSparsity) LinsolOutputIOSchemeVector<CRSSparsity>;
%rename(IOSchemeVectorLinsolOutput) IOSchemeVectorLinsolOutputSXMatrix;
%rename(IOSchemeVectorLinsolOutput) IOSchemeVectorLinsolOutputMX;
%rename(IOSchemeVectorLinsolOutput) IOSchemeVectorLinsolOutputCRSSparsity;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def lpIn(*dummy,**kwargs):
  """
  Helper function for 'LPSolverInput'

  Two use cases:
     a) arg = lpIn(c=my_c, a=my_a, lba=my_lba, uba=my_uba, lbx=my_lbx, ubx=my_ubx) 
          all arguments optional
     b) c, a, lba, uba, lbx, ubx = lpIn(arg,"c", "a", "lba", "uba", "lbx", "ubx") 
          all arguments after the first optional
  Input arguments of a LP problem
  
  Keyword arguments:
    c   -- The vector c: dense (n x 1) [LP_SOLVER_C]
    a   -- The matrix A: sparse, (nc x n) - product with x must be dense. [LP_SOLVER_A]
    lba -- dense, (nc x 1) [LP_SOLVER_LBA]
    uba -- dense, (nc x 1) [LP_SOLVER_UBA]
    lbx -- dense, (n x 1) [LP_SOLVER_LBX]
    ubx -- dense, (n x 1) [LP_SOLVER_UBX]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of lpIn. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_LPSolverInput,n)] for n in dummy[1:]]
  c = []
  if 'c' in kwargs:
    c = kwargs['c']
  a = []
  if 'a' in kwargs:
    a = kwargs['a']
  lba = []
  if 'lba' in kwargs:
    lba = kwargs['lba']
  uba = []
  if 'uba' in kwargs:
    uba = kwargs['uba']
  lbx = []
  if 'lbx' in kwargs:
    lbx = kwargs['lbx']
  ubx = []
  if 'ubx' in kwargs:
    ubx = kwargs['ubx']
  for k in kwargs.keys():
    if not(k in ['c','a','lba','uba','lbx','ubx']):
      raise Exception("Keyword error in lpIn: '%s' is not recognized. Available keywords are: c, a, lba, uba, lbx, ubx" % k )
  return IOSchemeVector([c,a,lba,uba,lbx,ubx], IOScheme(SCHEME_LPSolverInput))
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(lpIn) lpIn<CasADi::SXMatrix>;
%template(lpIn) lpIn<CasADi::MX>;
%template(lpIn) lpIn<CasADi::CRSSparsity>;
%template(IOSchemeVectorLPSolverInputSXMatrix) LPSolverInputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorLPSolverInputMX) LPSolverInputIOSchemeVector<MX>;
%template(IOSchemeVectorLPSolverInputCRSSparsity) LPSolverInputIOSchemeVector<CRSSparsity>;
%rename(IOSchemeVectorLPSolverInput) IOSchemeVectorLPSolverInputSXMatrix;
%rename(IOSchemeVectorLPSolverInput) IOSchemeVectorLPSolverInputMX;
%rename(IOSchemeVectorLPSolverInput) IOSchemeVectorLPSolverInputCRSSparsity;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def lpOut(*dummy,**kwargs):
  """
  Helper function for 'LPSolverOutput'

  Two use cases:
     a) arg = lpOut(x=my_x, cost=my_cost, lam_a=my_lam_a, lam_x=my_lam_x) 
          all arguments optional
     b) x, cost, lam_a, lam_x = lpOut(arg,"x", "cost", "lam_a", "lam_x") 
          all arguments after the first optional
  Output arguments of an LP Solver
  
  Keyword arguments:
    x     -- The primal solution [LP_SOLVER_X]
    cost  -- The optimal cost [LP_SOLVER_COST]
    lam_a -- The dual solution corresponding to linear bounds [LP_SOLVER_LAM_A]
    lam_x -- The dual solution corresponding to simple bounds [LP_SOLVER_LAM_X]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of lpOut. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_LPSolverOutput,n)] for n in dummy[1:]]
  x = []
  if 'x' in kwargs:
    x = kwargs['x']
  cost = []
  if 'cost' in kwargs:
    cost = kwargs['cost']
  lam_a = []
  if 'lam_a' in kwargs:
    lam_a = kwargs['lam_a']
  lam_x = []
  if 'lam_x' in kwargs:
    lam_x = kwargs['lam_x']
  for k in kwargs.keys():
    if not(k in ['x','cost','lam_a','lam_x']):
      raise Exception("Keyword error in lpOut: '%s' is not recognized. Available keywords are: x, cost, lam_a, lam_x" % k )
  return IOSchemeVector([x,cost,lam_a,lam_x], IOScheme(SCHEME_LPSolverOutput))
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(lpOut) lpOut<CasADi::SXMatrix>;
%template(lpOut) lpOut<CasADi::MX>;
%template(lpOut) lpOut<CasADi::CRSSparsity>;
%template(IOSchemeVectorLPSolverOutputSXMatrix) LPSolverOutputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorLPSolverOutputMX) LPSolverOutputIOSchemeVector<MX>;
%template(IOSchemeVectorLPSolverOutputCRSSparsity) LPSolverOutputIOSchemeVector<CRSSparsity>;
%rename(IOSchemeVectorLPSolverOutput) IOSchemeVectorLPSolverOutputSXMatrix;
%rename(IOSchemeVectorLPSolverOutput) IOSchemeVectorLPSolverOutputMX;
%rename(IOSchemeVectorLPSolverOutput) IOSchemeVectorLPSolverOutputCRSSparsity;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def lpStruct(*dummy,**kwargs):
  """
  Helper function for 'LPStruct'

  Two use cases:
     a) arg = lpStruct(a=my_a) 
          all arguments optional
     b) a = lpStruct(arg,"a") 
          all arguments after the first optional
  Structure specification of an LP
  
  Keyword arguments:
    a -- The matrix A: sparse [LP_STRUCT_A]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of lpStruct. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_LPStruct,n)] for n in dummy[1:]]
  a = []
  if 'a' in kwargs:
    a = kwargs['a']
  for k in kwargs.keys():
    if not(k in ['a']):
      raise Exception("Keyword error in lpStruct: '%s' is not recognized. Available keywords are: a" % k )
  return LPStructure([a])
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(lpStruct) lpStruct<CasADi::CRSSparsity>;
}
#endif //SWIGPYTHON
namespace CasADi {
%template(LPStructure) LPStructIOSchemeVector<CRSSparsity>;
}
#ifdef SWIGPYTHON
%pythoncode %{
def nlpIn(*dummy,**kwargs):
  """
  Helper function for 'NLPInput'

  Two use cases:
     a) arg = nlpIn(x=my_x, p=my_p) 
          all arguments optional
     b) x, p = nlpIn(arg,"x", "p") 
          all arguments after the first optional
  Input arguments of an NLP function
  
  Keyword arguments:
    x -- Decision variable [NL_X]
    p -- Fixed parameter [NL_P]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of nlpIn. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_NLPInput,n)] for n in dummy[1:]]
  x = []
  if 'x' in kwargs:
    x = kwargs['x']
  p = []
  if 'p' in kwargs:
    p = kwargs['p']
  for k in kwargs.keys():
    if not(k in ['x','p']):
      raise Exception("Keyword error in nlpIn: '%s' is not recognized. Available keywords are: x, p" % k )
  return IOSchemeVector([x,p], IOScheme(SCHEME_NLPInput))
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(nlpIn) nlpIn<CasADi::SXMatrix>;
%template(nlpIn) nlpIn<CasADi::MX>;
%template(nlpIn) nlpIn<CasADi::CRSSparsity>;
%template(IOSchemeVectorNLPInputSXMatrix) NLPInputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorNLPInputMX) NLPInputIOSchemeVector<MX>;
%template(IOSchemeVectorNLPInputCRSSparsity) NLPInputIOSchemeVector<CRSSparsity>;
%rename(IOSchemeVectorNLPInput) IOSchemeVectorNLPInputSXMatrix;
%rename(IOSchemeVectorNLPInput) IOSchemeVectorNLPInputMX;
%rename(IOSchemeVectorNLPInput) IOSchemeVectorNLPInputCRSSparsity;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def nlpOut(*dummy,**kwargs):
  """
  Helper function for 'NLPOutput'

  Two use cases:
     a) arg = nlpOut(f=my_f, g=my_g) 
          all arguments optional
     b) f, g = nlpOut(arg,"f", "g") 
          all arguments after the first optional
  Output arguments of an NLP function
  
  Keyword arguments:
    f -- Objective function [NL_F]
    g -- Constraint function [NL_G]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of nlpOut. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_NLPOutput,n)] for n in dummy[1:]]
  f = []
  if 'f' in kwargs:
    f = kwargs['f']
  g = []
  if 'g' in kwargs:
    g = kwargs['g']
  for k in kwargs.keys():
    if not(k in ['f','g']):
      raise Exception("Keyword error in nlpOut: '%s' is not recognized. Available keywords are: f, g" % k )
  return IOSchemeVector([f,g], IOScheme(SCHEME_NLPOutput))
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(nlpOut) nlpOut<CasADi::SXMatrix>;
%template(nlpOut) nlpOut<CasADi::MX>;
%template(nlpOut) nlpOut<CasADi::CRSSparsity>;
%template(IOSchemeVectorNLPOutputSXMatrix) NLPOutputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorNLPOutputMX) NLPOutputIOSchemeVector<MX>;
%template(IOSchemeVectorNLPOutputCRSSparsity) NLPOutputIOSchemeVector<CRSSparsity>;
%rename(IOSchemeVectorNLPOutput) IOSchemeVectorNLPOutputSXMatrix;
%rename(IOSchemeVectorNLPOutput) IOSchemeVectorNLPOutputMX;
%rename(IOSchemeVectorNLPOutput) IOSchemeVectorNLPOutputCRSSparsity;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def gradFIn(*dummy,**kwargs):
  """
  Helper function for 'GradFInput'

  Two use cases:
     a) arg = gradFIn(x=my_x, p=my_p) 
          all arguments optional
     b) x, p = gradFIn(arg,"x", "p") 
          all arguments after the first optional
  Input arguments of an NLP objective gradient function
  
  Keyword arguments:
    x -- Decision variable [GRADF_X]
    p -- Fixed parameter [GRADF_P]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of gradFIn. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_GradFInput,n)] for n in dummy[1:]]
  x = []
  if 'x' in kwargs:
    x = kwargs['x']
  p = []
  if 'p' in kwargs:
    p = kwargs['p']
  for k in kwargs.keys():
    if not(k in ['x','p']):
      raise Exception("Keyword error in gradFIn: '%s' is not recognized. Available keywords are: x, p" % k )
  return IOSchemeVector([x,p], IOScheme(SCHEME_GradFInput))
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(gradFIn) gradFIn<CasADi::SXMatrix>;
%template(gradFIn) gradFIn<CasADi::MX>;
%template(gradFIn) gradFIn<CasADi::CRSSparsity>;
%template(IOSchemeVectorGradFInputSXMatrix) GradFInputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorGradFInputMX) GradFInputIOSchemeVector<MX>;
%template(IOSchemeVectorGradFInputCRSSparsity) GradFInputIOSchemeVector<CRSSparsity>;
%rename(IOSchemeVectorGradFInput) IOSchemeVectorGradFInputSXMatrix;
%rename(IOSchemeVectorGradFInput) IOSchemeVectorGradFInputMX;
%rename(IOSchemeVectorGradFInput) IOSchemeVectorGradFInputCRSSparsity;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def gradFOut(*dummy,**kwargs):
  """
  Helper function for 'GradFOutput'

  Two use cases:
     a) arg = gradFOut(grad=my_grad, f=my_f, g=my_g) 
          all arguments optional
     b) grad, f, g = gradFOut(arg,"grad", "f", "g") 
          all arguments after the first optional
  Output arguments of an NLP objective gradient function
  
  Keyword arguments:
    grad -- Jacobian of the constraints [GRADF_GRAD]
    f    -- Objective function [GRADF_F]
    g    -- Constraint function [GRADF_G]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of gradFOut. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_GradFOutput,n)] for n in dummy[1:]]
  grad = []
  if 'grad' in kwargs:
    grad = kwargs['grad']
  f = []
  if 'f' in kwargs:
    f = kwargs['f']
  g = []
  if 'g' in kwargs:
    g = kwargs['g']
  for k in kwargs.keys():
    if not(k in ['grad','f','g']):
      raise Exception("Keyword error in gradFOut: '%s' is not recognized. Available keywords are: grad, f, g" % k )
  return IOSchemeVector([grad,f,g], IOScheme(SCHEME_GradFOutput))
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(gradFOut) gradFOut<CasADi::SXMatrix>;
%template(gradFOut) gradFOut<CasADi::MX>;
%template(gradFOut) gradFOut<CasADi::CRSSparsity>;
%template(IOSchemeVectorGradFOutputSXMatrix) GradFOutputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorGradFOutputMX) GradFOutputIOSchemeVector<MX>;
%template(IOSchemeVectorGradFOutputCRSSparsity) GradFOutputIOSchemeVector<CRSSparsity>;
%rename(IOSchemeVectorGradFOutput) IOSchemeVectorGradFOutputSXMatrix;
%rename(IOSchemeVectorGradFOutput) IOSchemeVectorGradFOutputMX;
%rename(IOSchemeVectorGradFOutput) IOSchemeVectorGradFOutputCRSSparsity;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def jacGIn(*dummy,**kwargs):
  """
  Helper function for 'JacGInput'

  Two use cases:
     a) arg = jacGIn(x=my_x, p=my_p) 
          all arguments optional
     b) x, p = jacGIn(arg,"x", "p") 
          all arguments after the first optional
  Input arguments of an NLP Jacobian function
  
  Keyword arguments:
    x -- Decision variable [JACG_X]
    p -- Fixed parameter [JACG_P]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of jacGIn. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_JacGInput,n)] for n in dummy[1:]]
  x = []
  if 'x' in kwargs:
    x = kwargs['x']
  p = []
  if 'p' in kwargs:
    p = kwargs['p']
  for k in kwargs.keys():
    if not(k in ['x','p']):
      raise Exception("Keyword error in jacGIn: '%s' is not recognized. Available keywords are: x, p" % k )
  return IOSchemeVector([x,p], IOScheme(SCHEME_JacGInput))
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(jacGIn) jacGIn<CasADi::SXMatrix>;
%template(jacGIn) jacGIn<CasADi::MX>;
%template(jacGIn) jacGIn<CasADi::CRSSparsity>;
%template(IOSchemeVectorJacGInputSXMatrix) JacGInputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorJacGInputMX) JacGInputIOSchemeVector<MX>;
%template(IOSchemeVectorJacGInputCRSSparsity) JacGInputIOSchemeVector<CRSSparsity>;
%rename(IOSchemeVectorJacGInput) IOSchemeVectorJacGInputSXMatrix;
%rename(IOSchemeVectorJacGInput) IOSchemeVectorJacGInputMX;
%rename(IOSchemeVectorJacGInput) IOSchemeVectorJacGInputCRSSparsity;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def jacGOut(*dummy,**kwargs):
  """
  Helper function for 'JacGOutput'

  Two use cases:
     a) arg = jacGOut(jac=my_jac, f=my_f, g=my_g) 
          all arguments optional
     b) jac, f, g = jacGOut(arg,"jac", "f", "g") 
          all arguments after the first optional
  Output arguments of an NLP Jacobian function
  
  Keyword arguments:
    jac -- Jacobian of the constraints [JACG_JAC]
    f   -- Objective function [JACG_F]
    g   -- Constraint function [JACG_G]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of jacGOut. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_JacGOutput,n)] for n in dummy[1:]]
  jac = []
  if 'jac' in kwargs:
    jac = kwargs['jac']
  f = []
  if 'f' in kwargs:
    f = kwargs['f']
  g = []
  if 'g' in kwargs:
    g = kwargs['g']
  for k in kwargs.keys():
    if not(k in ['jac','f','g']):
      raise Exception("Keyword error in jacGOut: '%s' is not recognized. Available keywords are: jac, f, g" % k )
  return IOSchemeVector([jac,f,g], IOScheme(SCHEME_JacGOutput))
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(jacGOut) jacGOut<CasADi::SXMatrix>;
%template(jacGOut) jacGOut<CasADi::MX>;
%template(jacGOut) jacGOut<CasADi::CRSSparsity>;
%template(IOSchemeVectorJacGOutputSXMatrix) JacGOutputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorJacGOutputMX) JacGOutputIOSchemeVector<MX>;
%template(IOSchemeVectorJacGOutputCRSSparsity) JacGOutputIOSchemeVector<CRSSparsity>;
%rename(IOSchemeVectorJacGOutput) IOSchemeVectorJacGOutputSXMatrix;
%rename(IOSchemeVectorJacGOutput) IOSchemeVectorJacGOutputMX;
%rename(IOSchemeVectorJacGOutput) IOSchemeVectorJacGOutputCRSSparsity;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def hessLagIn(*dummy,**kwargs):
  """
  Helper function for 'HessLagInput'

  Two use cases:
     a) arg = hessLagIn(x=my_x, p=my_p, lam_f=my_lam_f, lam_g=my_lam_g) 
          all arguments optional
     b) x, p, lam_f, lam_g = hessLagIn(arg,"x", "p", "lam_f", "lam_g") 
          all arguments after the first optional
  Input arguments of an NLP Hessian function
  
  Keyword arguments:
    x     -- Decision variable [HESSLAG_X]
    p     -- Fixed parameter [HESSLAG_P]
    lam_f -- Multiplier for f [HESSLAG_LAM_F]
    lam_g -- Multiplier for g [HESSLAG_LAM_G]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of hessLagIn. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_HessLagInput,n)] for n in dummy[1:]]
  x = []
  if 'x' in kwargs:
    x = kwargs['x']
  p = []
  if 'p' in kwargs:
    p = kwargs['p']
  lam_f = []
  if 'lam_f' in kwargs:
    lam_f = kwargs['lam_f']
  lam_g = []
  if 'lam_g' in kwargs:
    lam_g = kwargs['lam_g']
  for k in kwargs.keys():
    if not(k in ['x','p','lam_f','lam_g']):
      raise Exception("Keyword error in hessLagIn: '%s' is not recognized. Available keywords are: x, p, lam_f, lam_g" % k )
  return IOSchemeVector([x,p,lam_f,lam_g], IOScheme(SCHEME_HessLagInput))
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(hessLagIn) hessLagIn<CasADi::SXMatrix>;
%template(hessLagIn) hessLagIn<CasADi::MX>;
%template(hessLagIn) hessLagIn<CasADi::CRSSparsity>;
%template(IOSchemeVectorHessLagInputSXMatrix) HessLagInputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorHessLagInputMX) HessLagInputIOSchemeVector<MX>;
%template(IOSchemeVectorHessLagInputCRSSparsity) HessLagInputIOSchemeVector<CRSSparsity>;
%rename(IOSchemeVectorHessLagInput) IOSchemeVectorHessLagInputSXMatrix;
%rename(IOSchemeVectorHessLagInput) IOSchemeVectorHessLagInputMX;
%rename(IOSchemeVectorHessLagInput) IOSchemeVectorHessLagInputCRSSparsity;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def hessLagOut(*dummy,**kwargs):
  """
  Helper function for 'HessLagOutput'

  Two use cases:
     a) arg = hessLagOut(hess=my_hess, f=my_f, g=my_g, grad_x=my_grad_x, grad_p=my_grad_p) 
          all arguments optional
     b) hess, f, g, grad_x, grad_p = hessLagOut(arg,"hess", "f", "g", "grad_x", "grad_p") 
          all arguments after the first optional
  Output arguments of an NLP Hessian function
  
  Keyword arguments:
    hess   -- Hessian of the Lagrangian [HESSLAG_HESS]
    f      -- Objective function [HESSLAG_F]
    g      -- Constraint function [HESSLAG_G]
    grad_x -- Gradient of the Lagrangian with respect to x [HESSLAG_GRAD_X]
    grad_p -- Gradient of the Lagrangian with respect to p [HESSLAG_GRAD_P]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of hessLagOut. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_HessLagOutput,n)] for n in dummy[1:]]
  hess = []
  if 'hess' in kwargs:
    hess = kwargs['hess']
  f = []
  if 'f' in kwargs:
    f = kwargs['f']
  g = []
  if 'g' in kwargs:
    g = kwargs['g']
  grad_x = []
  if 'grad_x' in kwargs:
    grad_x = kwargs['grad_x']
  grad_p = []
  if 'grad_p' in kwargs:
    grad_p = kwargs['grad_p']
  for k in kwargs.keys():
    if not(k in ['hess','f','g','grad_x','grad_p']):
      raise Exception("Keyword error in hessLagOut: '%s' is not recognized. Available keywords are: hess, f, g, grad_x, grad_p" % k )
  return IOSchemeVector([hess,f,g,grad_x,grad_p], IOScheme(SCHEME_HessLagOutput))
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(hessLagOut) hessLagOut<CasADi::SXMatrix>;
%template(hessLagOut) hessLagOut<CasADi::MX>;
%template(hessLagOut) hessLagOut<CasADi::CRSSparsity>;
%template(IOSchemeVectorHessLagOutputSXMatrix) HessLagOutputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorHessLagOutputMX) HessLagOutputIOSchemeVector<MX>;
%template(IOSchemeVectorHessLagOutputCRSSparsity) HessLagOutputIOSchemeVector<CRSSparsity>;
%rename(IOSchemeVectorHessLagOutput) IOSchemeVectorHessLagOutputSXMatrix;
%rename(IOSchemeVectorHessLagOutput) IOSchemeVectorHessLagOutputMX;
%rename(IOSchemeVectorHessLagOutput) IOSchemeVectorHessLagOutputCRSSparsity;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def nlpSolverIn(*dummy,**kwargs):
  """
  Helper function for 'NLPSolverInput'

  Two use cases:
     a) arg = nlpSolverIn(x0=my_x0, p=my_p, lbx=my_lbx, ubx=my_ubx, lbg=my_lbg, ubg=my_ubg, lam_x0=my_lam_x0, lam_g0=my_lam_g0) 
          all arguments optional
     b) x0, p, lbx, ubx, lbg, ubg, lam_x0, lam_g0 = nlpSolverIn(arg,"x0", "p", "lbx", "ubx", "lbg", "ubg", "lam_x0", "lam_g0") 
          all arguments after the first optional
  Input arguments of an NLP Solver
  
  Keyword arguments:
    x0     -- Decision variables, initial guess (nx x 1)  [NLP_SOLVER_X0]
    p      -- Value of fixed parameters (np x 1) [NLP_SOLVER_P]
    lbx    -- Decision variables lower bound (nx x 1), default -inf [NLP_SOLVER_LBX]
    ubx    -- Decision variables upper bound (nx x 1), default +inf [NLP_SOLVER_UBX]
    lbg    -- Constraints lower bound (ng x 1), default -inf [NLP_SOLVER_LBG]
    ubg    -- Constraints upper bound (ng x 1), default +inf [NLP_SOLVER_UBG]
    lam_x0 -- Lagrange multipliers for bounds on X, initial guess (nx x 1) [NLP_SOLVER_LAM_X0]
    lam_g0 -- Lagrange multipliers for bounds on G, initial guess (ng x 1) [NLP_SOLVER_LAM_G0]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of nlpSolverIn. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_NLPSolverInput,n)] for n in dummy[1:]]
  x0 = []
  if 'x0' in kwargs:
    x0 = kwargs['x0']
  p = []
  if 'p' in kwargs:
    p = kwargs['p']
  lbx = []
  if 'lbx' in kwargs:
    lbx = kwargs['lbx']
  ubx = []
  if 'ubx' in kwargs:
    ubx = kwargs['ubx']
  lbg = []
  if 'lbg' in kwargs:
    lbg = kwargs['lbg']
  ubg = []
  if 'ubg' in kwargs:
    ubg = kwargs['ubg']
  lam_x0 = []
  if 'lam_x0' in kwargs:
    lam_x0 = kwargs['lam_x0']
  lam_g0 = []
  if 'lam_g0' in kwargs:
    lam_g0 = kwargs['lam_g0']
  for k in kwargs.keys():
    if not(k in ['x0','p','lbx','ubx','lbg','ubg','lam_x0','lam_g0']):
      raise Exception("Keyword error in nlpSolverIn: '%s' is not recognized. Available keywords are: x0, p, lbx, ubx, lbg, ubg, lam_x0, lam_g0" % k )
  return IOSchemeVector([x0,p,lbx,ubx,lbg,ubg,lam_x0,lam_g0], IOScheme(SCHEME_NLPSolverInput))
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(nlpSolverIn) nlpSolverIn<CasADi::SXMatrix>;
%template(nlpSolverIn) nlpSolverIn<CasADi::MX>;
%template(nlpSolverIn) nlpSolverIn<CasADi::CRSSparsity>;
%template(IOSchemeVectorNLPSolverInputSXMatrix) NLPSolverInputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorNLPSolverInputMX) NLPSolverInputIOSchemeVector<MX>;
%template(IOSchemeVectorNLPSolverInputCRSSparsity) NLPSolverInputIOSchemeVector<CRSSparsity>;
%rename(IOSchemeVectorNLPSolverInput) IOSchemeVectorNLPSolverInputSXMatrix;
%rename(IOSchemeVectorNLPSolverInput) IOSchemeVectorNLPSolverInputMX;
%rename(IOSchemeVectorNLPSolverInput) IOSchemeVectorNLPSolverInputCRSSparsity;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def nlpSolverOut(*dummy,**kwargs):
  """
  Helper function for 'NLPSolverOutput'

  Two use cases:
     a) arg = nlpSolverOut(x=my_x, f=my_f, g=my_g, lam_x=my_lam_x, lam_g=my_lam_g, lam_p=my_lam_p) 
          all arguments optional
     b) x, f, g, lam_x, lam_g, lam_p = nlpSolverOut(arg,"x", "f", "g", "lam_x", "lam_g", "lam_p") 
          all arguments after the first optional
  Output arguments of an NLP Solver
  
  Keyword arguments:
    x     -- Decision variables at the optimal solution (nx x 1) [NLP_SOLVER_X]
    f     -- Cost function value at the optimal solution (1 x 1) [NLP_SOLVER_F]
    g     -- Constraints function at the optimal solution (ng x 1) [NLP_SOLVER_G]
    lam_x -- Lagrange multipliers for bounds on X at the solution (nx x 1) [NLP_SOLVER_LAM_X]
    lam_g -- Lagrange multipliers for bounds on G at the solution (ng x 1) [NLP_SOLVER_LAM_G]
    lam_p -- Lagrange multipliers for bounds on P at the solution (np x 1) [NLP_SOLVER_LAM_P]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of nlpSolverOut. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_NLPSolverOutput,n)] for n in dummy[1:]]
  x = []
  if 'x' in kwargs:
    x = kwargs['x']
  f = []
  if 'f' in kwargs:
    f = kwargs['f']
  g = []
  if 'g' in kwargs:
    g = kwargs['g']
  lam_x = []
  if 'lam_x' in kwargs:
    lam_x = kwargs['lam_x']
  lam_g = []
  if 'lam_g' in kwargs:
    lam_g = kwargs['lam_g']
  lam_p = []
  if 'lam_p' in kwargs:
    lam_p = kwargs['lam_p']
  for k in kwargs.keys():
    if not(k in ['x','f','g','lam_x','lam_g','lam_p']):
      raise Exception("Keyword error in nlpSolverOut: '%s' is not recognized. Available keywords are: x, f, g, lam_x, lam_g, lam_p" % k )
  return IOSchemeVector([x,f,g,lam_x,lam_g,lam_p], IOScheme(SCHEME_NLPSolverOutput))
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(nlpSolverOut) nlpSolverOut<CasADi::SXMatrix>;
%template(nlpSolverOut) nlpSolverOut<CasADi::MX>;
%template(nlpSolverOut) nlpSolverOut<CasADi::CRSSparsity>;
%template(IOSchemeVectorNLPSolverOutputSXMatrix) NLPSolverOutputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorNLPSolverOutputMX) NLPSolverOutputIOSchemeVector<MX>;
%template(IOSchemeVectorNLPSolverOutputCRSSparsity) NLPSolverOutputIOSchemeVector<CRSSparsity>;
%rename(IOSchemeVectorNLPSolverOutput) IOSchemeVectorNLPSolverOutputSXMatrix;
%rename(IOSchemeVectorNLPSolverOutput) IOSchemeVectorNLPSolverOutputMX;
%rename(IOSchemeVectorNLPSolverOutput) IOSchemeVectorNLPSolverOutputCRSSparsity;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def mayerIn(*dummy,**kwargs):
  """
  Helper function for 'MayerInput'

  Two use cases:
     a) arg = mayerIn(x=my_x, p=my_p) 
          all arguments optional
     b) x, p = mayerIn(arg,"x", "p") 
          all arguments after the first optional
  Input arguments of a Mayer Term
  nx: Number of states: from ffcn.input(INTEGRATOR_X0).size()
  np: Number of parameters: from option number_of_parameters
  
  Keyword arguments:
    x -- States at the end of integration (nx x 1) [MAYER_X]
    p -- Problem parameters (np x 1) [MAYER_P]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of mayerIn. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_MayerInput,n)] for n in dummy[1:]]
  x = []
  if 'x' in kwargs:
    x = kwargs['x']
  p = []
  if 'p' in kwargs:
    p = kwargs['p']
  for k in kwargs.keys():
    if not(k in ['x','p']):
      raise Exception("Keyword error in mayerIn: '%s' is not recognized. Available keywords are: x, p" % k )
  return IOSchemeVector([x,p], IOScheme(SCHEME_MayerInput))
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(mayerIn) mayerIn<CasADi::SXMatrix>;
%template(mayerIn) mayerIn<CasADi::MX>;
%template(mayerIn) mayerIn<CasADi::CRSSparsity>;
%template(IOSchemeVectorMayerInputSXMatrix) MayerInputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorMayerInputMX) MayerInputIOSchemeVector<MX>;
%template(IOSchemeVectorMayerInputCRSSparsity) MayerInputIOSchemeVector<CRSSparsity>;
%rename(IOSchemeVectorMayerInput) IOSchemeVectorMayerInputSXMatrix;
%rename(IOSchemeVectorMayerInput) IOSchemeVectorMayerInputMX;
%rename(IOSchemeVectorMayerInput) IOSchemeVectorMayerInputCRSSparsity;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def ocpIn(*dummy,**kwargs):
  """
  Helper function for 'OCPInput'

  Two use cases:
     a) arg = ocpIn(lbx=my_lbx, ubx=my_ubx, x_init=my_x_init, lbu=my_lbu, ubu=my_ubu, u_init=my_u_init, lbp=my_lbp, ubp=my_ubp, p_init=my_p_init, lbh=my_lbh, ubh=my_ubh, lbg=my_lbg, ubg=my_ubg) 
          all arguments optional
     b) lbx, ubx, x_init, lbu, ubu, u_init, lbp, ubp, p_init, lbh, ubh, lbg, ubg = ocpIn(arg,"lbx", "ubx", "x_init", "lbu", "ubu", "u_init", "lbp", "ubp", "p_init", "lbh", "ubh", "lbg", "ubg") 
          all arguments after the first optional
  Input arguments of an OCP Solver
  ns: Number of shooting nodes: from option number_of_grid_points
  nx: Number of states: from ffcn.input(INTEGRATOR_X0).size()
  nc: Number of constants duting intergation: ffcn.input(INTEGRATOR_P).size()
  nu: Number of controls: from nc - np
  np: Number of parameters: from option number_of_parameters
  nh: Number of point constraints: from cfcn.input(0).size()
  
  Keyword arguments:
    lbx    -- States lower bounds (nx x (ns+1)) [OCP_LBX]
    ubx    -- States upper bounds (nx x (ns+1)) [OCP_UBX]
    x_init -- States initial guess (nx x (ns+1)) [OCP_X_INIT]
    lbu    -- Controls lower bounds (nu x ns) [OCP_LBU]
    ubu    -- Controls upper bounds (nu x ns) [OCP_UBU]
    u_init -- Controls initial guess (nu x ns) [OCP_U_INIT]
    lbp    -- Parameters lower bounds (np x 1) [OCP_LBP]
    ubp    -- Parameters upper bounds (np x 1) [OCP_UBP]
    p_init -- Parameters initial guess (np x 1) [OCP_P_INIT]
    lbh    -- Point constraint lower bound (nh x (ns+1)) [OCP_LBH]
    ubh    -- Point constraint upper bound (nh x (ns+1)) [OCP_UBH]
    lbg    -- Lower bound for the coupling constraints [OCP_LBG]
    ubg    -- Upper bound for the coupling constraints [OCP_UBG]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of ocpIn. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_OCPInput,n)] for n in dummy[1:]]
  lbx = []
  if 'lbx' in kwargs:
    lbx = kwargs['lbx']
  ubx = []
  if 'ubx' in kwargs:
    ubx = kwargs['ubx']
  x_init = []
  if 'x_init' in kwargs:
    x_init = kwargs['x_init']
  lbu = []
  if 'lbu' in kwargs:
    lbu = kwargs['lbu']
  ubu = []
  if 'ubu' in kwargs:
    ubu = kwargs['ubu']
  u_init = []
  if 'u_init' in kwargs:
    u_init = kwargs['u_init']
  lbp = []
  if 'lbp' in kwargs:
    lbp = kwargs['lbp']
  ubp = []
  if 'ubp' in kwargs:
    ubp = kwargs['ubp']
  p_init = []
  if 'p_init' in kwargs:
    p_init = kwargs['p_init']
  lbh = []
  if 'lbh' in kwargs:
    lbh = kwargs['lbh']
  ubh = []
  if 'ubh' in kwargs:
    ubh = kwargs['ubh']
  lbg = []
  if 'lbg' in kwargs:
    lbg = kwargs['lbg']
  ubg = []
  if 'ubg' in kwargs:
    ubg = kwargs['ubg']
  for k in kwargs.keys():
    if not(k in ['lbx','ubx','x_init','lbu','ubu','u_init','lbp','ubp','p_init','lbh','ubh','lbg','ubg']):
      raise Exception("Keyword error in ocpIn: '%s' is not recognized. Available keywords are: lbx, ubx, x_init, lbu, ubu, u_init, lbp, ubp, p_init, lbh, ubh, lbg, ubg" % k )
  return IOSchemeVector([lbx,ubx,x_init,lbu,ubu,u_init,lbp,ubp,p_init,lbh,ubh,lbg,ubg], IOScheme(SCHEME_OCPInput))
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(ocpIn) ocpIn<CasADi::SXMatrix>;
%template(ocpIn) ocpIn<CasADi::MX>;
%template(ocpIn) ocpIn<CasADi::CRSSparsity>;
%template(IOSchemeVectorOCPInputSXMatrix) OCPInputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorOCPInputMX) OCPInputIOSchemeVector<MX>;
%template(IOSchemeVectorOCPInputCRSSparsity) OCPInputIOSchemeVector<CRSSparsity>;
%rename(IOSchemeVectorOCPInput) IOSchemeVectorOCPInputSXMatrix;
%rename(IOSchemeVectorOCPInput) IOSchemeVectorOCPInputMX;
%rename(IOSchemeVectorOCPInput) IOSchemeVectorOCPInputCRSSparsity;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def ocpOut(*dummy,**kwargs):
  """
  Helper function for 'OCPOutput'

  Two use cases:
     a) arg = ocpOut(x_opt=my_x_opt, u_opt=my_u_opt, p_opt=my_p_opt, cost=my_cost) 
          all arguments optional
     b) x_opt, u_opt, p_opt, cost = ocpOut(arg,"x_opt", "u_opt", "p_opt", "cost") 
          all arguments after the first optional
  Output arguments of an OCP Solver
  
  Keyword arguments:
    x_opt -- Optimal state trajectory [OCP_X_OPT]
    u_opt -- Optimal control trajectory [OCP_U_OPT]
    p_opt -- Optimal parameters [OCP_P_OPT]
    cost  -- Objective/cost function for optimal solution (1 x 1) [OCP_COST]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of ocpOut. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_OCPOutput,n)] for n in dummy[1:]]
  x_opt = []
  if 'x_opt' in kwargs:
    x_opt = kwargs['x_opt']
  u_opt = []
  if 'u_opt' in kwargs:
    u_opt = kwargs['u_opt']
  p_opt = []
  if 'p_opt' in kwargs:
    p_opt = kwargs['p_opt']
  cost = []
  if 'cost' in kwargs:
    cost = kwargs['cost']
  for k in kwargs.keys():
    if not(k in ['x_opt','u_opt','p_opt','cost']):
      raise Exception("Keyword error in ocpOut: '%s' is not recognized. Available keywords are: x_opt, u_opt, p_opt, cost" % k )
  return IOSchemeVector([x_opt,u_opt,p_opt,cost], IOScheme(SCHEME_OCPOutput))
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(ocpOut) ocpOut<CasADi::SXMatrix>;
%template(ocpOut) ocpOut<CasADi::MX>;
%template(ocpOut) ocpOut<CasADi::CRSSparsity>;
%template(IOSchemeVectorOCPOutputSXMatrix) OCPOutputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorOCPOutputMX) OCPOutputIOSchemeVector<MX>;
%template(IOSchemeVectorOCPOutputCRSSparsity) OCPOutputIOSchemeVector<CRSSparsity>;
%rename(IOSchemeVectorOCPOutput) IOSchemeVectorOCPOutputSXMatrix;
%rename(IOSchemeVectorOCPOutput) IOSchemeVectorOCPOutputMX;
%rename(IOSchemeVectorOCPOutput) IOSchemeVectorOCPOutputCRSSparsity;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def qcqpIn(*dummy,**kwargs):
  """
  Helper function for 'QCQPSolverInput'

  Two use cases:
     a) arg = qcqpIn(h=my_h, g=my_g, p=my_p, q=my_q, r=my_r, a=my_a, lba=my_lba, uba=my_uba, lbx=my_lbx, ubx=my_ubx, x0=my_x0, lam_x0=my_lam_x0) 
          all arguments optional
     b) h, g, p, q, r, a, lba, uba, lbx, ubx, x0, lam_x0 = qcqpIn(arg,"h", "g", "p", "q", "r", "a", "lba", "uba", "lbx", "ubx", "x0", "lam_x0") 
          all arguments after the first optional
  Input arguments of a QP problem
  
  Keyword arguments:
    h      -- The square matrix H: sparse, (n x n). Only the lower triangular part is actually used. The matrix is assumed to be symmetrical. [QCQP_SOLVER_H]
    g      -- The vector g: dense,  (n x 1) [QCQP_SOLVER_G]
    p      -- The vertical stack of all Pi. Each Pi is sparse (n x n). Only the lower triangular part is actually used. The matrix is assumed to be symmetrical. [QCQP_SOLVER_P]
    q      -- The vertical stack of all qi: dense,  (nq n x 1) [QCQP_SOLVER_Q]
    r      -- The vertical stack of all scalars ri (nq x 1)  [QCQP_SOLVER_R]
    a      -- The matrix A: sparse, (nc x n) - product with x must be dense. [QCQP_SOLVER_A]
    lba    -- dense, (nc x 1) [QCQP_SOLVER_LBA]
    uba    -- dense, (nc x 1) [QCQP_SOLVER_UBA]
    lbx    -- dense, (n x 1) [QCQP_SOLVER_LBX]
    ubx    -- dense, (n x 1) [QCQP_SOLVER_UBX]
    x0     -- dense, (n x 1) [QCQP_SOLVER_X0]
    lam_x0 -- dense [QCQP_SOLVER_LAM_X0]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of qcqpIn. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_QCQPSolverInput,n)] for n in dummy[1:]]
  h = []
  if 'h' in kwargs:
    h = kwargs['h']
  g = []
  if 'g' in kwargs:
    g = kwargs['g']
  p = []
  if 'p' in kwargs:
    p = kwargs['p']
  q = []
  if 'q' in kwargs:
    q = kwargs['q']
  r = []
  if 'r' in kwargs:
    r = kwargs['r']
  a = []
  if 'a' in kwargs:
    a = kwargs['a']
  lba = []
  if 'lba' in kwargs:
    lba = kwargs['lba']
  uba = []
  if 'uba' in kwargs:
    uba = kwargs['uba']
  lbx = []
  if 'lbx' in kwargs:
    lbx = kwargs['lbx']
  ubx = []
  if 'ubx' in kwargs:
    ubx = kwargs['ubx']
  x0 = []
  if 'x0' in kwargs:
    x0 = kwargs['x0']
  lam_x0 = []
  if 'lam_x0' in kwargs:
    lam_x0 = kwargs['lam_x0']
  for k in kwargs.keys():
    if not(k in ['h','g','p','q','r','a','lba','uba','lbx','ubx','x0','lam_x0']):
      raise Exception("Keyword error in qcqpIn: '%s' is not recognized. Available keywords are: h, g, p, q, r, a, lba, uba, lbx, ubx, x0, lam_x0" % k )
  return IOSchemeVector([h,g,p,q,r,a,lba,uba,lbx,ubx,x0,lam_x0], IOScheme(SCHEME_QCQPSolverInput))
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(qcqpIn) qcqpIn<CasADi::SXMatrix>;
%template(qcqpIn) qcqpIn<CasADi::MX>;
%template(qcqpIn) qcqpIn<CasADi::CRSSparsity>;
%template(IOSchemeVectorQCQPSolverInputSXMatrix) QCQPSolverInputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorQCQPSolverInputMX) QCQPSolverInputIOSchemeVector<MX>;
%template(IOSchemeVectorQCQPSolverInputCRSSparsity) QCQPSolverInputIOSchemeVector<CRSSparsity>;
%rename(IOSchemeVectorQCQPSolverInput) IOSchemeVectorQCQPSolverInputSXMatrix;
%rename(IOSchemeVectorQCQPSolverInput) IOSchemeVectorQCQPSolverInputMX;
%rename(IOSchemeVectorQCQPSolverInput) IOSchemeVectorQCQPSolverInputCRSSparsity;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def qcqpOut(*dummy,**kwargs):
  """
  Helper function for 'QCQPSolverOutput'

  Two use cases:
     a) arg = qcqpOut(x=my_x, cost=my_cost, lam_a=my_lam_a, lam_x=my_lam_x) 
          all arguments optional
     b) x, cost, lam_a, lam_x = qcqpOut(arg,"x", "cost", "lam_a", "lam_x") 
          all arguments after the first optional
  Output arguments of an QP Solver
  
  Keyword arguments:
    x     -- The primal solution [QCQP_SOLVER_X]
    cost  -- The optimal cost [QCQP_SOLVER_COST]
    lam_a -- The dual solution corresponding to linear bounds [QCQP_SOLVER_LAM_A]
    lam_x -- The dual solution corresponding to simple bounds [QCQP_SOLVER_LAM_X]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of qcqpOut. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_QCQPSolverOutput,n)] for n in dummy[1:]]
  x = []
  if 'x' in kwargs:
    x = kwargs['x']
  cost = []
  if 'cost' in kwargs:
    cost = kwargs['cost']
  lam_a = []
  if 'lam_a' in kwargs:
    lam_a = kwargs['lam_a']
  lam_x = []
  if 'lam_x' in kwargs:
    lam_x = kwargs['lam_x']
  for k in kwargs.keys():
    if not(k in ['x','cost','lam_a','lam_x']):
      raise Exception("Keyword error in qcqpOut: '%s' is not recognized. Available keywords are: x, cost, lam_a, lam_x" % k )
  return IOSchemeVector([x,cost,lam_a,lam_x], IOScheme(SCHEME_QCQPSolverOutput))
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(qcqpOut) qcqpOut<CasADi::SXMatrix>;
%template(qcqpOut) qcqpOut<CasADi::MX>;
%template(qcqpOut) qcqpOut<CasADi::CRSSparsity>;
%template(IOSchemeVectorQCQPSolverOutputSXMatrix) QCQPSolverOutputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorQCQPSolverOutputMX) QCQPSolverOutputIOSchemeVector<MX>;
%template(IOSchemeVectorQCQPSolverOutputCRSSparsity) QCQPSolverOutputIOSchemeVector<CRSSparsity>;
%rename(IOSchemeVectorQCQPSolverOutput) IOSchemeVectorQCQPSolverOutputSXMatrix;
%rename(IOSchemeVectorQCQPSolverOutput) IOSchemeVectorQCQPSolverOutputMX;
%rename(IOSchemeVectorQCQPSolverOutput) IOSchemeVectorQCQPSolverOutputCRSSparsity;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def qcqpStruct(*dummy,**kwargs):
  """
  Helper function for 'QCQPStruct'

  Two use cases:
     a) arg = qcqpStruct(h=my_h, p=my_p, a=my_a) 
          all arguments optional
     b) h, p, a = qcqpStruct(arg,"h", "p", "a") 
          all arguments after the first optional
  Structure specification of a QP
  
  Keyword arguments:
    h -- The square matrix H: sparse, (n x n). Only the lower triangular part is actually used. The matrix is assumed to be symmetrical. [QCQP_STRUCT_H]
    p -- The vertical stack of all Pi. Each Pi is sparse (n x n). Only the lower triangular part is actually used. The matrix is assumed to be symmetrical. [QCQP_STRUCT_P]
    a -- The matrix A: sparse, (nc x n) - product with x must be dense. [QCQP_STRUCT_A]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of qcqpStruct. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_QCQPStruct,n)] for n in dummy[1:]]
  h = []
  if 'h' in kwargs:
    h = kwargs['h']
  p = []
  if 'p' in kwargs:
    p = kwargs['p']
  a = []
  if 'a' in kwargs:
    a = kwargs['a']
  for k in kwargs.keys():
    if not(k in ['h','p','a']):
      raise Exception("Keyword error in qcqpStruct: '%s' is not recognized. Available keywords are: h, p, a" % k )
  return QCQPStructure([h,p,a])
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(qcqpStruct) qcqpStruct<CasADi::CRSSparsity>;
}
#endif //SWIGPYTHON
namespace CasADi {
%template(QCQPStructure) QCQPStructIOSchemeVector<CRSSparsity>;
}
#ifdef SWIGPYTHON
%pythoncode %{
def qpIn(*dummy,**kwargs):
  """
  Helper function for 'QPSolverInput'

  Two use cases:
     a) arg = qpIn(h=my_h, g=my_g, a=my_a, lba=my_lba, uba=my_uba, lbx=my_lbx, ubx=my_ubx, x0=my_x0, lam_x0=my_lam_x0) 
          all arguments optional
     b) h, g, a, lba, uba, lbx, ubx, x0, lam_x0 = qpIn(arg,"h", "g", "a", "lba", "uba", "lbx", "ubx", "x0", "lam_x0") 
          all arguments after the first optional
  Input arguments of a QP problem
  
  Keyword arguments:
    h      -- The square matrix H: sparse, (n x n). Only the lower triangular part is actually used. The matrix is assumed to be symmetrical. [QP_SOLVER_H]
    g      -- The vector g: dense,  (n x 1) [QP_SOLVER_G]
    a      -- The matrix A: sparse, (nc x n) - product with x must be dense. [QP_SOLVER_A]
    lba    -- dense, (nc x 1) [QP_SOLVER_LBA]
    uba    -- dense, (nc x 1) [QP_SOLVER_UBA]
    lbx    -- dense, (n x 1) [QP_SOLVER_LBX]
    ubx    -- dense, (n x 1) [QP_SOLVER_UBX]
    x0     -- dense, (n x 1) [QP_SOLVER_X0]
    lam_x0 -- dense [QP_SOLVER_LAM_X0]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of qpIn. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_QPSolverInput,n)] for n in dummy[1:]]
  h = []
  if 'h' in kwargs:
    h = kwargs['h']
  g = []
  if 'g' in kwargs:
    g = kwargs['g']
  a = []
  if 'a' in kwargs:
    a = kwargs['a']
  lba = []
  if 'lba' in kwargs:
    lba = kwargs['lba']
  uba = []
  if 'uba' in kwargs:
    uba = kwargs['uba']
  lbx = []
  if 'lbx' in kwargs:
    lbx = kwargs['lbx']
  ubx = []
  if 'ubx' in kwargs:
    ubx = kwargs['ubx']
  x0 = []
  if 'x0' in kwargs:
    x0 = kwargs['x0']
  lam_x0 = []
  if 'lam_x0' in kwargs:
    lam_x0 = kwargs['lam_x0']
  for k in kwargs.keys():
    if not(k in ['h','g','a','lba','uba','lbx','ubx','x0','lam_x0']):
      raise Exception("Keyword error in qpIn: '%s' is not recognized. Available keywords are: h, g, a, lba, uba, lbx, ubx, x0, lam_x0" % k )
  return IOSchemeVector([h,g,a,lba,uba,lbx,ubx,x0,lam_x0], IOScheme(SCHEME_QPSolverInput))
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(qpIn) qpIn<CasADi::SXMatrix>;
%template(qpIn) qpIn<CasADi::MX>;
%template(qpIn) qpIn<CasADi::CRSSparsity>;
%template(IOSchemeVectorQPSolverInputSXMatrix) QPSolverInputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorQPSolverInputMX) QPSolverInputIOSchemeVector<MX>;
%template(IOSchemeVectorQPSolverInputCRSSparsity) QPSolverInputIOSchemeVector<CRSSparsity>;
%rename(IOSchemeVectorQPSolverInput) IOSchemeVectorQPSolverInputSXMatrix;
%rename(IOSchemeVectorQPSolverInput) IOSchemeVectorQPSolverInputMX;
%rename(IOSchemeVectorQPSolverInput) IOSchemeVectorQPSolverInputCRSSparsity;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def qpOut(*dummy,**kwargs):
  """
  Helper function for 'QPSolverOutput'

  Two use cases:
     a) arg = qpOut(x=my_x, cost=my_cost, lam_a=my_lam_a, lam_x=my_lam_x) 
          all arguments optional
     b) x, cost, lam_a, lam_x = qpOut(arg,"x", "cost", "lam_a", "lam_x") 
          all arguments after the first optional
  Output arguments of an QP Solver
  
  Keyword arguments:
    x     -- The primal solution [QP_SOLVER_X]
    cost  -- The optimal cost [QP_SOLVER_COST]
    lam_a -- The dual solution corresponding to linear bounds [QP_SOLVER_LAM_A]
    lam_x -- The dual solution corresponding to simple bounds [QP_SOLVER_LAM_X]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of qpOut. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_QPSolverOutput,n)] for n in dummy[1:]]
  x = []
  if 'x' in kwargs:
    x = kwargs['x']
  cost = []
  if 'cost' in kwargs:
    cost = kwargs['cost']
  lam_a = []
  if 'lam_a' in kwargs:
    lam_a = kwargs['lam_a']
  lam_x = []
  if 'lam_x' in kwargs:
    lam_x = kwargs['lam_x']
  for k in kwargs.keys():
    if not(k in ['x','cost','lam_a','lam_x']):
      raise Exception("Keyword error in qpOut: '%s' is not recognized. Available keywords are: x, cost, lam_a, lam_x" % k )
  return IOSchemeVector([x,cost,lam_a,lam_x], IOScheme(SCHEME_QPSolverOutput))
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(qpOut) qpOut<CasADi::SXMatrix>;
%template(qpOut) qpOut<CasADi::MX>;
%template(qpOut) qpOut<CasADi::CRSSparsity>;
%template(IOSchemeVectorQPSolverOutputSXMatrix) QPSolverOutputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorQPSolverOutputMX) QPSolverOutputIOSchemeVector<MX>;
%template(IOSchemeVectorQPSolverOutputCRSSparsity) QPSolverOutputIOSchemeVector<CRSSparsity>;
%rename(IOSchemeVectorQPSolverOutput) IOSchemeVectorQPSolverOutputSXMatrix;
%rename(IOSchemeVectorQPSolverOutput) IOSchemeVectorQPSolverOutputMX;
%rename(IOSchemeVectorQPSolverOutput) IOSchemeVectorQPSolverOutputCRSSparsity;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def qpStruct(*dummy,**kwargs):
  """
  Helper function for 'QPStruct'

  Two use cases:
     a) arg = qpStruct(h=my_h, a=my_a) 
          all arguments optional
     b) h, a = qpStruct(arg,"h", "a") 
          all arguments after the first optional
  Structure specification of a QP
  
  Keyword arguments:
    h -- The square matrix H: sparse, (n x n). Only the lower triangular part is actually used. The matrix is assumed to be symmetrical. [QP_STRUCT_H]
    a -- The matrix A: sparse, (nc x n) - product with x must be dense. [QP_STRUCT_A]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of qpStruct. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_QPStruct,n)] for n in dummy[1:]]
  h = []
  if 'h' in kwargs:
    h = kwargs['h']
  a = []
  if 'a' in kwargs:
    a = kwargs['a']
  for k in kwargs.keys():
    if not(k in ['h','a']):
      raise Exception("Keyword error in qpStruct: '%s' is not recognized. Available keywords are: h, a" % k )
  return QPStructure([h,a])
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(qpStruct) qpStruct<CasADi::CRSSparsity>;
}
#endif //SWIGPYTHON
namespace CasADi {
%template(QPStructure) QPStructIOSchemeVector<CRSSparsity>;
}
#ifdef SWIGPYTHON
%pythoncode %{
def sdpIn(*dummy,**kwargs):
  """
  Helper function for 'SDPInput'

  Two use cases:
     a) arg = sdpIn(f=my_f, c=my_c, g=my_g, a=my_a, lba=my_lba, uba=my_uba, lbx=my_lbx, ubx=my_ubx) 
          all arguments optional
     b) f, c, g, a, lba, uba, lbx, ubx = sdpIn(arg,"f", "c", "g", "a", "lba", "uba", "lbx", "ubx") 
          all arguments after the first optional
  Input arguments of a SDP problem
  
  Keyword arguments:
    f   -- The vertical stack of all matrices F_i: ( nm x m) [SDP_SOLVER_F]
    c   -- The vector c: ( n x 1) [SDP_SOLVER_C]
    g   -- The matrix G: ( m x m) [SDP_SOLVER_G]
    a   -- The matrix A: ( nc x n) [SDP_SOLVER_A]
    lba -- Lower bounds on Ax ( nc x 1) [SDP_SOLVER_LBA]
    uba -- Upper bounds on Ax  ( nc x 1) [SDP_SOLVER_UBA]
    lbx -- Lower bounds on x ( n x 1 ) [SDP_SOLVER_LBX]
    ubx -- Upper bounds on x ( n x 1 ) [SDP_SOLVER_UBX]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of sdpIn. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_SDPInput,n)] for n in dummy[1:]]
  f = []
  if 'f' in kwargs:
    f = kwargs['f']
  c = []
  if 'c' in kwargs:
    c = kwargs['c']
  g = []
  if 'g' in kwargs:
    g = kwargs['g']
  a = []
  if 'a' in kwargs:
    a = kwargs['a']
  lba = []
  if 'lba' in kwargs:
    lba = kwargs['lba']
  uba = []
  if 'uba' in kwargs:
    uba = kwargs['uba']
  lbx = []
  if 'lbx' in kwargs:
    lbx = kwargs['lbx']
  ubx = []
  if 'ubx' in kwargs:
    ubx = kwargs['ubx']
  for k in kwargs.keys():
    if not(k in ['f','c','g','a','lba','uba','lbx','ubx']):
      raise Exception("Keyword error in sdpIn: '%s' is not recognized. Available keywords are: f, c, g, a, lba, uba, lbx, ubx" % k )
  return IOSchemeVector([f,c,g,a,lba,uba,lbx,ubx], IOScheme(SCHEME_SDPInput))
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(sdpIn) sdpIn<CasADi::SXMatrix>;
%template(sdpIn) sdpIn<CasADi::MX>;
%template(sdpIn) sdpIn<CasADi::CRSSparsity>;
%template(IOSchemeVectorSDPInputSXMatrix) SDPInputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorSDPInputMX) SDPInputIOSchemeVector<MX>;
%template(IOSchemeVectorSDPInputCRSSparsity) SDPInputIOSchemeVector<CRSSparsity>;
%rename(IOSchemeVectorSDPInput) IOSchemeVectorSDPInputSXMatrix;
%rename(IOSchemeVectorSDPInput) IOSchemeVectorSDPInputMX;
%rename(IOSchemeVectorSDPInput) IOSchemeVectorSDPInputCRSSparsity;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def sdpOut(*dummy,**kwargs):
  """
  Helper function for 'SDPOutput'

  Two use cases:
     a) arg = sdpOut(x=my_x, p=my_p, dual=my_dual, cost=my_cost, dual_cost=my_dual_cost, lam_a=my_lam_a, lam_x=my_lam_x) 
          all arguments optional
     b) x, p, dual, cost, dual_cost, lam_a, lam_x = sdpOut(arg,"x", "p", "dual", "cost", "dual_cost", "lam_a", "lam_x") 
          all arguments after the first optional
  Output arguments of an SDP Solver
  
  Keyword arguments:
    x         -- The primal solution (n x 1) - may be used as initial guess [SDP_SOLVER_X]
    p         -- The solution P (m x m) - may be used as initial guess [SDP_SOLVER_P]
    dual      -- The dual solution (m x m) - may be used as initial guess [SDP_SOLVER_DUAL]
    cost      -- The primal optimal cost (1 x 1) [SDP_SOLVER_COST]
    dual_cost -- The dual optimal cost (1 x 1) [SDP_SOLVER_DUAL_COST]
    lam_a     -- The dual solution corresponding to the linear constraints  (nc x 1) [SDP_SOLVER_LAM_A]
    lam_x     -- The dual solution corresponding to simple bounds  (n x 1) [SDP_SOLVER_LAM_X]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of sdpOut. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_SDPOutput,n)] for n in dummy[1:]]
  x = []
  if 'x' in kwargs:
    x = kwargs['x']
  p = []
  if 'p' in kwargs:
    p = kwargs['p']
  dual = []
  if 'dual' in kwargs:
    dual = kwargs['dual']
  cost = []
  if 'cost' in kwargs:
    cost = kwargs['cost']
  dual_cost = []
  if 'dual_cost' in kwargs:
    dual_cost = kwargs['dual_cost']
  lam_a = []
  if 'lam_a' in kwargs:
    lam_a = kwargs['lam_a']
  lam_x = []
  if 'lam_x' in kwargs:
    lam_x = kwargs['lam_x']
  for k in kwargs.keys():
    if not(k in ['x','p','dual','cost','dual_cost','lam_a','lam_x']):
      raise Exception("Keyword error in sdpOut: '%s' is not recognized. Available keywords are: x, p, dual, cost, dual_cost, lam_a, lam_x" % k )
  return IOSchemeVector([x,p,dual,cost,dual_cost,lam_a,lam_x], IOScheme(SCHEME_SDPOutput))
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(sdpOut) sdpOut<CasADi::SXMatrix>;
%template(sdpOut) sdpOut<CasADi::MX>;
%template(sdpOut) sdpOut<CasADi::CRSSparsity>;
%template(IOSchemeVectorSDPOutputSXMatrix) SDPOutputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorSDPOutputMX) SDPOutputIOSchemeVector<MX>;
%template(IOSchemeVectorSDPOutputCRSSparsity) SDPOutputIOSchemeVector<CRSSparsity>;
%rename(IOSchemeVectorSDPOutput) IOSchemeVectorSDPOutputSXMatrix;
%rename(IOSchemeVectorSDPOutput) IOSchemeVectorSDPOutputMX;
%rename(IOSchemeVectorSDPOutput) IOSchemeVectorSDPOutputCRSSparsity;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def sdpStruct(*dummy,**kwargs):
  """
  Helper function for 'SDPStruct'

  Two use cases:
     a) arg = sdpStruct(f=my_f, g=my_g, a=my_a) 
          all arguments optional
     b) f, g, a = sdpStruct(arg,"f", "g", "a") 
          all arguments after the first optional
  Structure specification of an SDP
  
  Keyword arguments:
    f -- The vertical stack of all matrices F_i: ( nm x m) [SDP_STRUCT_F]
    g -- The matrix G: ( m x m) [SDP_STRUCT_G]
    a -- The matrix A: ( nc x n) [SDP_STRUCT_A]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of sdpStruct. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_SDPStruct,n)] for n in dummy[1:]]
  f = []
  if 'f' in kwargs:
    f = kwargs['f']
  g = []
  if 'g' in kwargs:
    g = kwargs['g']
  a = []
  if 'a' in kwargs:
    a = kwargs['a']
  for k in kwargs.keys():
    if not(k in ['f','g','a']):
      raise Exception("Keyword error in sdpStruct: '%s' is not recognized. Available keywords are: f, g, a" % k )
  return SDPStructure([f,g,a])
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(sdpStruct) sdpStruct<CasADi::CRSSparsity>;
}
#endif //SWIGPYTHON
namespace CasADi {
%template(SDPStructure) SDPStructIOSchemeVector<CRSSparsity>;
}
#ifdef SWIGPYTHON
%pythoncode %{
def sdqpIn(*dummy,**kwargs):
  """
  Helper function for 'SDQPInput'

  Two use cases:
     a) arg = sdqpIn(h=my_h, c=my_c, f=my_f, g=my_g, a=my_a, lba=my_lba, uba=my_uba, lbx=my_lbx, ubx=my_ubx) 
          all arguments optional
     b) h, c, f, g, a, lba, uba, lbx, ubx = sdqpIn(arg,"h", "c", "f", "g", "a", "lba", "uba", "lbx", "ubx") 
          all arguments after the first optional
  Input arguments of a SDQP problem
  
  Keyword arguments:
    h   -- The matrix H: sparse ( n x n) [SDQP_SOLVER_H]
    c   -- The vector c: ( n x 1) [SDQP_SOLVER_C]
    f   -- The vertical stack of all matrices F_i: ( nm x m) [SDQP_SOLVER_F]
    g   -- The matrix G: ( m x m) [SDQP_SOLVER_G]
    a   -- The matrix A: ( nc x n) [SDQP_SOLVER_A]
    lba -- Lower bounds on Ax ( nc x 1) [SDQP_SOLVER_LBA]
    uba -- Upper bounds on Ax  ( nc x 1) [SDQP_SOLVER_UBA]
    lbx -- Lower bounds on x ( n x 1 ) [SDQP_SOLVER_LBX]
    ubx -- Upper bounds on x ( n x 1 ) [SDQP_SOLVER_UBX]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of sdqpIn. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_SDQPInput,n)] for n in dummy[1:]]
  h = []
  if 'h' in kwargs:
    h = kwargs['h']
  c = []
  if 'c' in kwargs:
    c = kwargs['c']
  f = []
  if 'f' in kwargs:
    f = kwargs['f']
  g = []
  if 'g' in kwargs:
    g = kwargs['g']
  a = []
  if 'a' in kwargs:
    a = kwargs['a']
  lba = []
  if 'lba' in kwargs:
    lba = kwargs['lba']
  uba = []
  if 'uba' in kwargs:
    uba = kwargs['uba']
  lbx = []
  if 'lbx' in kwargs:
    lbx = kwargs['lbx']
  ubx = []
  if 'ubx' in kwargs:
    ubx = kwargs['ubx']
  for k in kwargs.keys():
    if not(k in ['h','c','f','g','a','lba','uba','lbx','ubx']):
      raise Exception("Keyword error in sdqpIn: '%s' is not recognized. Available keywords are: h, c, f, g, a, lba, uba, lbx, ubx" % k )
  return IOSchemeVector([h,c,f,g,a,lba,uba,lbx,ubx], IOScheme(SCHEME_SDQPInput))
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(sdqpIn) sdqpIn<CasADi::SXMatrix>;
%template(sdqpIn) sdqpIn<CasADi::MX>;
%template(sdqpIn) sdqpIn<CasADi::CRSSparsity>;
%template(IOSchemeVectorSDQPInputSXMatrix) SDQPInputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorSDQPInputMX) SDQPInputIOSchemeVector<MX>;
%template(IOSchemeVectorSDQPInputCRSSparsity) SDQPInputIOSchemeVector<CRSSparsity>;
%rename(IOSchemeVectorSDQPInput) IOSchemeVectorSDQPInputSXMatrix;
%rename(IOSchemeVectorSDQPInput) IOSchemeVectorSDQPInputMX;
%rename(IOSchemeVectorSDQPInput) IOSchemeVectorSDQPInputCRSSparsity;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def sdqpOut(*dummy,**kwargs):
  """
  Helper function for 'SDQPOutput'

  Two use cases:
     a) arg = sdqpOut(x=my_x, p=my_p, dual=my_dual, cost=my_cost, dual_cost=my_dual_cost, lam_a=my_lam_a, lam_x=my_lam_x) 
          all arguments optional
     b) x, p, dual, cost, dual_cost, lam_a, lam_x = sdqpOut(arg,"x", "p", "dual", "cost", "dual_cost", "lam_a", "lam_x") 
          all arguments after the first optional
  Output arguments of an SDQP Solver
  
  Keyword arguments:
    x         -- The primal solution (n x 1) - may be used as initial guess [SDQP_SOLVER_X]
    p         -- The solution P (m x m) - may be used as initial guess [SDQP_SOLVER_P]
    dual      -- The dual solution (m x m) - may be used as initial guess [SDQP_SOLVER_DUAL]
    cost      -- The primal optimal cost (1 x 1) [SDQP_SOLVER_COST]
    dual_cost -- The dual optimal cost (1 x 1) [SDQP_SOLVER_DUAL_COST]
    lam_a     -- The dual solution corresponding to the linear constraints  (nc x 1) [SDQP_SOLVER_LAM_A]
    lam_x     -- The dual solution corresponding to simple bounds  (n x 1) [SDQP_SOLVER_LAM_X]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of sdqpOut. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_SDQPOutput,n)] for n in dummy[1:]]
  x = []
  if 'x' in kwargs:
    x = kwargs['x']
  p = []
  if 'p' in kwargs:
    p = kwargs['p']
  dual = []
  if 'dual' in kwargs:
    dual = kwargs['dual']
  cost = []
  if 'cost' in kwargs:
    cost = kwargs['cost']
  dual_cost = []
  if 'dual_cost' in kwargs:
    dual_cost = kwargs['dual_cost']
  lam_a = []
  if 'lam_a' in kwargs:
    lam_a = kwargs['lam_a']
  lam_x = []
  if 'lam_x' in kwargs:
    lam_x = kwargs['lam_x']
  for k in kwargs.keys():
    if not(k in ['x','p','dual','cost','dual_cost','lam_a','lam_x']):
      raise Exception("Keyword error in sdqpOut: '%s' is not recognized. Available keywords are: x, p, dual, cost, dual_cost, lam_a, lam_x" % k )
  return IOSchemeVector([x,p,dual,cost,dual_cost,lam_a,lam_x], IOScheme(SCHEME_SDQPOutput))
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(sdqpOut) sdqpOut<CasADi::SXMatrix>;
%template(sdqpOut) sdqpOut<CasADi::MX>;
%template(sdqpOut) sdqpOut<CasADi::CRSSparsity>;
%template(IOSchemeVectorSDQPOutputSXMatrix) SDQPOutputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorSDQPOutputMX) SDQPOutputIOSchemeVector<MX>;
%template(IOSchemeVectorSDQPOutputCRSSparsity) SDQPOutputIOSchemeVector<CRSSparsity>;
%rename(IOSchemeVectorSDQPOutput) IOSchemeVectorSDQPOutputSXMatrix;
%rename(IOSchemeVectorSDQPOutput) IOSchemeVectorSDQPOutputMX;
%rename(IOSchemeVectorSDQPOutput) IOSchemeVectorSDQPOutputCRSSparsity;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def sdqpStruct(*dummy,**kwargs):
  """
  Helper function for 'SDQPStruct'

  Two use cases:
     a) arg = sdqpStruct(h=my_h, f=my_f, g=my_g, a=my_a) 
          all arguments optional
     b) h, f, g, a = sdqpStruct(arg,"h", "f", "g", "a") 
          all arguments after the first optional
  Structure specification of an SDQP
  
  Keyword arguments:
    h -- The matrix H: sparse ( n x n) [SDQP_STRUCT_H]
    f -- The vertical stack of all matrices F_i: ( nm x m) [SDQP_STRUCT_F]
    g -- The matrix G: ( m x m) [SDQP_STRUCT_G]
    a -- The matrix A: ( nc x n) [SDQP_STRUCT_A]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of sdqpStruct. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_SDQPStruct,n)] for n in dummy[1:]]
  h = []
  if 'h' in kwargs:
    h = kwargs['h']
  f = []
  if 'f' in kwargs:
    f = kwargs['f']
  g = []
  if 'g' in kwargs:
    g = kwargs['g']
  a = []
  if 'a' in kwargs:
    a = kwargs['a']
  for k in kwargs.keys():
    if not(k in ['h','f','g','a']):
      raise Exception("Keyword error in sdqpStruct: '%s' is not recognized. Available keywords are: h, f, g, a" % k )
  return SDQPStructure([h,f,g,a])
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(sdqpStruct) sdqpStruct<CasADi::CRSSparsity>;
}
#endif //SWIGPYTHON
namespace CasADi {
%template(SDQPStructure) SDQPStructIOSchemeVector<CRSSparsity>;
}
#ifdef SWIGPYTHON
%pythoncode %{
def socpIn(*dummy,**kwargs):
  """
  Helper function for 'SOCPInput'

  Two use cases:
     a) arg = socpIn(g=my_g, h=my_h, e=my_e, f=my_f, c=my_c, a=my_a, lba=my_lba, uba=my_uba, lbx=my_lbx, ubx=my_ubx) 
          all arguments optional
     b) g, h, e, f, c, a, lba, uba, lbx, ubx = socpIn(arg,"g", "h", "e", "f", "c", "a", "lba", "uba", "lbx", "ubx") 
          all arguments after the first optional
  Input arguments of a SOCP problem
  
  Keyword arguments:
    g   -- The vertical stack of all matrices Gi: ( N x n) [SOCP_SOLVER_G]
    h   -- The vertical stack of all vectors hi: ( N x 1) [SOCP_SOLVER_H]
    e   -- The vertical stack of all vectors ei: ( nm x 1) [SOCP_SOLVER_E]
    f   -- The vertical stack of all scalars fi: ( m x 1) [SOCP_SOLVER_F]
    c   -- The vector c: ( n x 1) [SOCP_SOLVER_C]
    a   -- The matrix A: ( nc x n) [SOCP_SOLVER_A]
    lba -- Lower bounds on Ax ( nc x 1) [SOCP_SOLVER_LBA]
    uba -- Upper bounds on Ax  ( nc x 1) [SOCP_SOLVER_UBA]
    lbx -- Lower bounds on x ( n x 1 ) [SOCP_SOLVER_LBX]
    ubx -- Upper bounds on x ( n x 1 ) [SOCP_SOLVER_UBX]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of socpIn. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_SOCPInput,n)] for n in dummy[1:]]
  g = []
  if 'g' in kwargs:
    g = kwargs['g']
  h = []
  if 'h' in kwargs:
    h = kwargs['h']
  e = []
  if 'e' in kwargs:
    e = kwargs['e']
  f = []
  if 'f' in kwargs:
    f = kwargs['f']
  c = []
  if 'c' in kwargs:
    c = kwargs['c']
  a = []
  if 'a' in kwargs:
    a = kwargs['a']
  lba = []
  if 'lba' in kwargs:
    lba = kwargs['lba']
  uba = []
  if 'uba' in kwargs:
    uba = kwargs['uba']
  lbx = []
  if 'lbx' in kwargs:
    lbx = kwargs['lbx']
  ubx = []
  if 'ubx' in kwargs:
    ubx = kwargs['ubx']
  for k in kwargs.keys():
    if not(k in ['g','h','e','f','c','a','lba','uba','lbx','ubx']):
      raise Exception("Keyword error in socpIn: '%s' is not recognized. Available keywords are: g, h, e, f, c, a, lba, uba, lbx, ubx" % k )
  return IOSchemeVector([g,h,e,f,c,a,lba,uba,lbx,ubx], IOScheme(SCHEME_SOCPInput))
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(socpIn) socpIn<CasADi::SXMatrix>;
%template(socpIn) socpIn<CasADi::MX>;
%template(socpIn) socpIn<CasADi::CRSSparsity>;
%template(IOSchemeVectorSOCPInputSXMatrix) SOCPInputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorSOCPInputMX) SOCPInputIOSchemeVector<MX>;
%template(IOSchemeVectorSOCPInputCRSSparsity) SOCPInputIOSchemeVector<CRSSparsity>;
%rename(IOSchemeVectorSOCPInput) IOSchemeVectorSOCPInputSXMatrix;
%rename(IOSchemeVectorSOCPInput) IOSchemeVectorSOCPInputMX;
%rename(IOSchemeVectorSOCPInput) IOSchemeVectorSOCPInputCRSSparsity;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def socpOut(*dummy,**kwargs):
  """
  Helper function for 'SOCPOutput'

  Two use cases:
     a) arg = socpOut(x=my_x, cost=my_cost, lam_a=my_lam_a, lam_x=my_lam_x) 
          all arguments optional
     b) x, cost, lam_a, lam_x = socpOut(arg,"x", "cost", "lam_a", "lam_x") 
          all arguments after the first optional
  Output arguments of an SOCP Solver
  
  Keyword arguments:
    x     -- The primal solution (n x 1) [SOCP_SOLVER_X]
    cost  -- The primal optimal cost (1 x 1) [SOCP_SOLVER_COST]
    lam_a -- The dual solution corresponding to the linear constraints  (nc x 1) [SOCP_SOLVER_LAM_A]
    lam_x -- The dual solution corresponding to simple bounds  (n x 1) [SOCP_SOLVER_LAM_X]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of socpOut. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_SOCPOutput,n)] for n in dummy[1:]]
  x = []
  if 'x' in kwargs:
    x = kwargs['x']
  cost = []
  if 'cost' in kwargs:
    cost = kwargs['cost']
  lam_a = []
  if 'lam_a' in kwargs:
    lam_a = kwargs['lam_a']
  lam_x = []
  if 'lam_x' in kwargs:
    lam_x = kwargs['lam_x']
  for k in kwargs.keys():
    if not(k in ['x','cost','lam_a','lam_x']):
      raise Exception("Keyword error in socpOut: '%s' is not recognized. Available keywords are: x, cost, lam_a, lam_x" % k )
  return IOSchemeVector([x,cost,lam_a,lam_x], IOScheme(SCHEME_SOCPOutput))
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(socpOut) socpOut<CasADi::SXMatrix>;
%template(socpOut) socpOut<CasADi::MX>;
%template(socpOut) socpOut<CasADi::CRSSparsity>;
%template(IOSchemeVectorSOCPOutputSXMatrix) SOCPOutputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorSOCPOutputMX) SOCPOutputIOSchemeVector<MX>;
%template(IOSchemeVectorSOCPOutputCRSSparsity) SOCPOutputIOSchemeVector<CRSSparsity>;
%rename(IOSchemeVectorSOCPOutput) IOSchemeVectorSOCPOutputSXMatrix;
%rename(IOSchemeVectorSOCPOutput) IOSchemeVectorSOCPOutputMX;
%rename(IOSchemeVectorSOCPOutput) IOSchemeVectorSOCPOutputCRSSparsity;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def socpStruct(*dummy,**kwargs):
  """
  Helper function for 'SOCPStruct'

  Two use cases:
     a) arg = socpStruct(g=my_g, a=my_a) 
          all arguments optional
     b) g, a = socpStruct(arg,"g", "a") 
          all arguments after the first optional
  Structure specification of an SOCP
  
  Keyword arguments:
    g -- The vertical stack of all matrices Gi: ( N x n) [SOCP_STRUCT_G]
    a -- The matrix A: ( nc x n) [SOCP_STRUCT_A]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of socpStruct. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_SOCPStruct,n)] for n in dummy[1:]]
  g = []
  if 'g' in kwargs:
    g = kwargs['g']
  a = []
  if 'a' in kwargs:
    a = kwargs['a']
  for k in kwargs.keys():
    if not(k in ['g','a']):
      raise Exception("Keyword error in socpStruct: '%s' is not recognized. Available keywords are: g, a" % k )
  return SOCPStructure([g,a])
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(socpStruct) socpStruct<CasADi::CRSSparsity>;
}
#endif //SWIGPYTHON
namespace CasADi {
%template(SOCPStructure) SOCPStructIOSchemeVector<CRSSparsity>;
}
#ifdef SWIGPYTHON
%pythoncode %{
def stabilizedQpIn(*dummy,**kwargs):
  """
  Helper function for 'StabilizedQPSolverInput'

  Two use cases:
     a) arg = stabilizedQpIn(h=my_h, g=my_g, a=my_a, lba=my_lba, uba=my_uba, lbx=my_lbx, ubx=my_ubx, x0=my_x0, lam_x0=my_lam_x0, muR=my_muR, muE=my_muE, mu=my_mu) 
          all arguments optional
     b) h, g, a, lba, uba, lbx, ubx, x0, lam_x0, muR, muE, mu = stabilizedQpIn(arg,"h", "g", "a", "lba", "uba", "lbx", "ubx", "x0", "lam_x0", "muR", "muE", "mu") 
          all arguments after the first optional
  Input arguments of a QP problem
  
  Keyword arguments:
    h      -- The square matrix H: sparse, (n x n). Only the lower triangular part is actually used. The matrix is assumed to be symmetrical. [STABILIZED_QP_SOLVER_H]
    g      -- The vector g: dense,  (n x 1) [STABILIZED_QP_SOLVER_G]
    a      -- The matrix A: sparse, (nc x n) - product with x must be dense. [STABILIZED_QP_SOLVER_A]
    lba    -- dense, (nc x 1) [STABILIZED_QP_SOLVER_LBA]
    uba    -- dense, (nc x 1) [STABILIZED_QP_SOLVER_UBA]
    lbx    -- dense, (n x 1) [STABILIZED_QP_SOLVER_LBX]
    ubx    -- dense, (n x 1) [STABILIZED_QP_SOLVER_UBX]
    x0     -- dense, (n x 1) [STABILIZED_QP_SOLVER_X0]
    lam_x0 -- dense [STABILIZED_QP_SOLVER_LAM_X0]
    muR    -- dense (1 x 1) [STABILIZED_QP_SOLVER_MUR]
    muE    -- dense (nc x 1) [STABILIZED_QP_SOLVER_MUE]
    mu     -- dense (nc x 1) [STABILIZED_QP_SOLVER_MU]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of stabilizedQpIn. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_StabilizedQPSolverInput,n)] for n in dummy[1:]]
  h = []
  if 'h' in kwargs:
    h = kwargs['h']
  g = []
  if 'g' in kwargs:
    g = kwargs['g']
  a = []
  if 'a' in kwargs:
    a = kwargs['a']
  lba = []
  if 'lba' in kwargs:
    lba = kwargs['lba']
  uba = []
  if 'uba' in kwargs:
    uba = kwargs['uba']
  lbx = []
  if 'lbx' in kwargs:
    lbx = kwargs['lbx']
  ubx = []
  if 'ubx' in kwargs:
    ubx = kwargs['ubx']
  x0 = []
  if 'x0' in kwargs:
    x0 = kwargs['x0']
  lam_x0 = []
  if 'lam_x0' in kwargs:
    lam_x0 = kwargs['lam_x0']
  muR = []
  if 'muR' in kwargs:
    muR = kwargs['muR']
  muE = []
  if 'muE' in kwargs:
    muE = kwargs['muE']
  mu = []
  if 'mu' in kwargs:
    mu = kwargs['mu']
  for k in kwargs.keys():
    if not(k in ['h','g','a','lba','uba','lbx','ubx','x0','lam_x0','muR','muE','mu']):
      raise Exception("Keyword error in stabilizedQpIn: '%s' is not recognized. Available keywords are: h, g, a, lba, uba, lbx, ubx, x0, lam_x0, muR, muE, mu" % k )
  return IOSchemeVector([h,g,a,lba,uba,lbx,ubx,x0,lam_x0,muR,muE,mu], IOScheme(SCHEME_StabilizedQPSolverInput))
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(stabilizedQpIn) stabilizedQpIn<CasADi::SXMatrix>;
%template(stabilizedQpIn) stabilizedQpIn<CasADi::MX>;
%template(stabilizedQpIn) stabilizedQpIn<CasADi::CRSSparsity>;
%template(IOSchemeVectorStabilizedQPSolverInputSXMatrix) StabilizedQPSolverInputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorStabilizedQPSolverInputMX) StabilizedQPSolverInputIOSchemeVector<MX>;
%template(IOSchemeVectorStabilizedQPSolverInputCRSSparsity) StabilizedQPSolverInputIOSchemeVector<CRSSparsity>;
%rename(IOSchemeVectorStabilizedQPSolverInput) IOSchemeVectorStabilizedQPSolverInputSXMatrix;
%rename(IOSchemeVectorStabilizedQPSolverInput) IOSchemeVectorStabilizedQPSolverInputMX;
%rename(IOSchemeVectorStabilizedQPSolverInput) IOSchemeVectorStabilizedQPSolverInputCRSSparsity;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#endif //AUTOGENERATED_I

